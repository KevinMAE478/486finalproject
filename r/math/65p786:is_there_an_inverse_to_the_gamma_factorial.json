[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "math", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m talking solving equations of the type a/(n+b)!&amp;lt;c, without some guess and check&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm talking solving equations of the type a/(n+b)!&lt;c, without some guess and check", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65p786", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 14, "report_reasons": null, "author": "mattkosterx", "saved": false, "mod_reports": [], "name": "t3_65p786", "subreddit_name_prefixed": "r/math", "approved_by": null, "over_18": false, "domain": "self.math", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0n", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/math/comments/65p786/is_there_an_inverse_to_the_gamma_factorial/", "num_reports": null, "locked": false, "stickied": false, "created": 1492379631.0, "url": "https://www.reddit.com/r/math/comments/65p786/is_there_an_inverse_to_the_gamma_factorial/", "author_flair_text": null, "quarantine": false, "title": "Is there an inverse to the gamma / factorial function? Or any convenient way to solve for a variable inside a factorial? Numerical methods possibly?", "created_utc": 1492350831.0, "distinguished": null, "media": null, "upvote_ratio": 0.86, "num_comments": 10, "visited": false, "subreddit_type": "public", "ups": 14}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": "", "user_reports": [], "id": "dgcjqq1", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "sectandmew", "parent_id": "t1_dgc872a", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "This helps me, thanks", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This helps me, thanks&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgcjqq1", "score_hidden": false, "stickied": false, "created": 1492404269.0, "created_utc": 1492375469.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": "", "user_reports": [], "id": "dgej6sb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Jayfire0", "parent_id": "t1_dgc872a", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "I see the Big O notation a lot with series and other solutions, but how do you actually go about a big O calculation? I only know it as time complexity for programs and whatnot. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I see the Big O notation a lot with series and other solutions, but how do you actually go about a big O calculation? I only know it as time complexity for programs and whatnot. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgej6sb", "score_hidden": false, "stickied": false, "created": 1492510443.0, "created_utc": 1492481643.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc872a", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "sleeps_with_crazy", "parent_id": "t3_65p786", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "There is no nice closed form expression for the inverse of Gamma/factorial but there are ways to approximate it pretty well.\n\nYou could use Stirling's formula that log(n!) = n log(n) - n + O(log(n)) and that a/(n+b)! &lt; c iff log(a) - log(c) &lt; log((n+b)!).  If you want something more precise than O(log(n)), there are things like this: http://mathforum.org/kb/message.jspa?messageID=342551&amp;tstart=0", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is no nice closed form expression for the inverse of Gamma/factorial but there are ways to approximate it pretty well.&lt;/p&gt;\n\n&lt;p&gt;You could use Stirling&amp;#39;s formula that log(n!) = n log(n) - n + O(log(n)) and that a/(n+b)! &amp;lt; c iff log(a) - log(c) &amp;lt; log((n+b)!).  If you want something more precise than O(log(n)), there are things like this: &lt;a href=\"http://mathforum.org/kb/message.jspa?messageID=342551&amp;amp;tstart=0\"&gt;http://mathforum.org/kb/message.jspa?messageID=342551&amp;amp;tstart=0&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgc872a", "score_hidden": false, "stickied": false, "created": 1492389101.0, "created_utc": 1492360301.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65p786", "likes": null, "replies": "", "user_reports": [], "id": "dgd9rcf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "RepostThatShit", "parent_id": "t1_dgd9k1x", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "&gt; Yes.\n\n&gt; I know.\n\n&gt; But the maximum value (not the maximum integer value, the maximum value period) that a double can hold is 1.7976931348623157 \u00d7 10^308 .\n\nNot the maximum integer value? It IS an integer. Besides your confusion about that, I don't know why you're repeating what I just told you.\n\n&gt; And the 'weird behavior' happens everywhere.\n\nNobody's claiming that's the only instance of it. What I said is that it's the lowest positive integer for which it happens.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Yes.&lt;/p&gt;\n\n&lt;p&gt;I know.&lt;/p&gt;\n\n&lt;p&gt;But the maximum value (not the maximum integer value, the maximum value period) that a double can hold is 1.7976931348623157 \u00d7 10&lt;sup&gt;308&lt;/sup&gt; .&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not the maximum integer value? It IS an integer. Besides your confusion about that, I don&amp;#39;t know why you&amp;#39;re repeating what I just told you.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;And the &amp;#39;weird behavior&amp;#39; happens everywhere.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Nobody&amp;#39;s claiming that&amp;#39;s the only instance of it. What I said is that it&amp;#39;s the lowest positive integer for which it happens.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgd9rcf", "score_hidden": false, "stickied": false, "created": 1492445318.0, "created_utc": 1492416518.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd9k1x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Lalaithion42", "parent_id": "t1_dgd8xbc", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Yes. \n\nI know. \n\nBut the *maximum value* (not the maximum integer value, the maximum value period) that a double can hold is 1.7976931348623157 \u00d7 10^308 .\n\nAnd the 'weird behavior' happens everywhere.\n\n    0.0001 + 1000000000000000 == 1000000000000000", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes. &lt;/p&gt;\n\n&lt;p&gt;I know. &lt;/p&gt;\n\n&lt;p&gt;But the &lt;em&gt;maximum value&lt;/em&gt; (not the maximum integer value, the maximum value period) that a double can hold is 1.7976931348623157 \u00d7 10&lt;sup&gt;308&lt;/sup&gt; .&lt;/p&gt;\n\n&lt;p&gt;And the &amp;#39;weird behavior&amp;#39; happens everywhere.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0.0001 + 1000000000000000 == 1000000000000000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgd9k1x", "score_hidden": false, "stickied": false, "created": 1492444658.0, "created_utc": 1492415858.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd8xbc", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "RepostThatShit", "parent_id": "t1_dgcoweb", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Doubles \"max out\" at a lot less than 10^308 if you're performing calculations and expect the comparison operator to work reliably. ~1.8^^308 just *happens to be* a special number in that it's a very large integer that has an exact double representation. I.e. it's DOUBLE_MAX.\n\nBut behavior like this starts happening way earlier:\n\n    9007199254740990.000000 + 1 = 9007199254740991.000000                                                                                                 \n    9007199254740991.000000 + 1 = 9007199254740992.000000                                                                                                 \n    9007199254740992.000000 + 1 = 9007199254740992.000000                                                                                                 \n\nHere's the binary representations in hexadecimal format to illustrate what's occurring:\n\n    433ffffffffffffe + 1 = 433fffffffffffff                                                                                                               \n    433fffffffffffff + 1 = 4340000000000000                                                                                                               \n    4340000000000000 + 1 = 4340000000000000                                                                                                               \n\nThe highest positive integer up to which all smaller positive integers can uniquely be represented by a 64-bit double-precision variable (IEEE 754) is 9007199254740991.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Doubles &amp;quot;max out&amp;quot; at a lot less than 10&lt;sup&gt;308&lt;/sup&gt; if you&amp;#39;re performing calculations and expect the comparison operator to work reliably. ~1.8&lt;sup&gt;&lt;sup&gt;308&lt;/sup&gt;&lt;/sup&gt; just &lt;em&gt;happens to be&lt;/em&gt; a special number in that it&amp;#39;s a very large integer that has an exact double representation. I.e. it&amp;#39;s DOUBLE_MAX.&lt;/p&gt;\n\n&lt;p&gt;But behavior like this starts happening way earlier:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;9007199254740990.000000 + 1 = 9007199254740991.000000                                                                                                 \n9007199254740991.000000 + 1 = 9007199254740992.000000                                                                                                 \n9007199254740992.000000 + 1 = 9007199254740992.000000                                                                                                 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&amp;#39;s the binary representations in hexadecimal format to illustrate what&amp;#39;s occurring:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;433ffffffffffffe + 1 = 433fffffffffffff                                                                                                               \n433fffffffffffff + 1 = 4340000000000000                                                                                                               \n4340000000000000 + 1 = 4340000000000000                                                                                                               \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The highest positive integer up to which all smaller positive integers can uniquely be represented by a 64-bit double-precision variable (IEEE 754) is 9007199254740991.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgd8xbc", "score_hidden": false, "stickied": false, "created": 1492442772.0, "created_utc": 1492413972.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcoweb", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Lalaithion42", "parent_id": "t1_dgcl7ku", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "171! ~= 10^309 , whereas doubles max out at ~ 10^308.\n\n1755! is the maximum for a quad float.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;171! ~= 10&lt;sup&gt;309&lt;/sup&gt; , whereas doubles max out at ~ 10&lt;sup&gt;308.&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;1755! is the maximum for a quad float.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgcoweb", "score_hidden": false, "stickied": false, "created": 1492411086.0, "created_utc": 1492382286.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcl7ku", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "NewbornMuse", "parent_id": "t1_dgcers4", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Heck, you could even linear search if you're dealing with 171 items.\n\n171! exceeds the crazy high numbers that doubles can hold? Man, factorials really are crazy.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Heck, you could even linear search if you&amp;#39;re dealing with 171 items.&lt;/p&gt;\n\n&lt;p&gt;171! exceeds the crazy high numbers that doubles can hold? Man, factorials really are crazy.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgcl7ku", "score_hidden": false, "stickied": false, "created": 1492406188.0, "created_utc": 1492377388.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcers4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "click353", "parent_id": "t1_dgccxce", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "You could even do a table with the first 171 factorials numbers beyond what a double can hold then you could just binary search if you want to find the exact number results in your number in the gamma function", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could even do a table with the first 171 factorials numbers beyond what a double can hold then you could just binary search if you want to find the exact number results in your number in the gamma function&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgcers4", "score_hidden": false, "stickied": false, "created": 1492397794.0, "created_utc": 1492368994.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgccxce", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "julesjacobs", "parent_id": "t3_65p786", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "For inverse factorial you could simply do a search. This will be a pretty good method, because factorial grows very fast and because you can compute the next factorial cheaply from the previous.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For inverse factorial you could simply do a search. This will be a pretty good method, because factorial grows very fast and because you can compute the next factorial cheaply from the previous.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgccxce", "score_hidden": false, "stickied": false, "created": 1492395306.0, "created_utc": 1492366506.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}]