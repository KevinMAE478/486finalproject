[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "math", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve recently rediscovered quadratic residues and the law of quadratic reciprocity and decided to try writing a python script to efficiently compute whether x&lt;sup&gt;2&lt;/sup&gt; = a (mod n) is solvable. I began trying to utilize the law of quadratic reciprocity, but when I tested how efficient my script was against a brute force method of squaring all numbers between 1 and n, I found that my script was roughly ten times slower.&lt;/p&gt;\n\n&lt;p&gt;This makes sense to me in hindsight, since although quadratic reciprocity helps humans to simplify Lengendre symbols, computers are much better at multiplying numbers repeatedly. Additionally quadratic reciprocity depends on being able to prime factorize both &amp;#39;a&amp;#39; and &amp;#39;n&amp;#39;, as opposed to using the Euler Criterion where only &amp;#39;n&amp;#39; need to be factored.&lt;/p&gt;\n\n&lt;p&gt;So now I&amp;#39;ve worked to speed up my code and switched to mostly using the Euler Criterion, and have slightly edged out the brute-force method in terms of efficiently. But I still don&amp;#39;t know if there is a more efficient way to compute quadratic reciprocity.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've recently rediscovered quadratic residues and the law of quadratic reciprocity and decided to try writing a python script to efficiently compute whether x^2 = a (mod n) is solvable. I began trying to utilize the law of quadratic reciprocity, but when I tested how efficient my script was against a brute force method of squaring all numbers between 1 and n, I found that my script was roughly ten times slower.\n\nThis makes sense to me in hindsight, since although quadratic reciprocity helps humans to simplify Lengendre symbols, computers are much better at multiplying numbers repeatedly. Additionally quadratic reciprocity depends on being able to prime factorize both 'a' and 'n', as opposed to using the Euler Criterion where only 'n' need to be factored.\n\nSo now I've worked to speed up my code and switched to mostly using the Euler Criterion, and have slightly edged out the brute-force method in terms of efficiently. But I still don't know if there is a more efficient way to compute quadratic reciprocity.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65e1v6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 10, "report_reasons": null, "author": "bonenfan5", "saved": false, "mod_reports": [], "name": "t3_65e1v6", "subreddit_name_prefixed": "r/math", "approved_by": null, "over_18": false, "domain": "self.math", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0n", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/math/comments/65e1v6/what_is_the_most_computationally_efficient_way_to/", "num_reports": null, "locked": false, "stickied": false, "created": 1492221136.0, "url": "https://www.reddit.com/r/math/comments/65e1v6/what_is_the_most_computationally_efficient_way_to/", "author_flair_text": null, "quarantine": false, "title": "What is the most computationally efficient way to compute quadratic residues.", "created_utc": 1492192336.0, "distinguished": null, "media": null, "upvote_ratio": 0.87, "num_comments": 8, "visited": false, "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": "", "user_reports": [], "id": "dg9v1lu", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "chebushka", "parent_id": "t1_dg9kgvx", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "True, the value of a Jacobi symbol *in general* does not determine whether something is a quadratic residue (more precisely, if the value is 1 the numerator may or may not a square modulo the denominator, while if the value is -1 the numerator is definitely not a square modulo the denominator), but so what?  If you *start* with a Legendre symbol (a|p) where p is known to be prime and just compute it using quadratic reciprocity for Jacobi symbols, then you know how to interpret the answer in terms of quadratic residues no matter how it comes out.  \n \nFor example, (15|43) = -(43|15) = -(13|15) = -(15|13) = -(2|13) = -(-1) = 1, so 15 mod 43 is a square.  If we limited ourselves only to using Legendre symbols then the first three equations would be illegitimate. But if we view these as Jacobi symbols then everything is fine.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;True, the value of a Jacobi symbol &lt;em&gt;in general&lt;/em&gt; does not determine whether something is a quadratic residue (more precisely, if the value is 1 the numerator may or may not a square modulo the denominator, while if the value is -1 the numerator is definitely not a square modulo the denominator), but so what?  If you &lt;em&gt;start&lt;/em&gt; with a Legendre symbol (a|p) where p is known to be prime and just compute it using quadratic reciprocity for Jacobi symbols, then you know how to interpret the answer in terms of quadratic residues no matter how it comes out.  &lt;/p&gt;\n\n&lt;p&gt;For example, (15|43) = -(43|15) = -(13|15) = -(15|13) = -(2|13) = -(-1) = 1, so 15 mod 43 is a square.  If we limited ourselves only to using Legendre symbols then the first three equations would be illegitimate. But if we view these as Jacobi symbols then everything is fine.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dg9v1lu", "score_hidden": false, "stickied": false, "created": 1492237841.0, "created_utc": 1492209041.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": "", "user_reports": [], "id": "dgbahg3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "djao", "parent_id": "t1_dgb9pui", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "No! Jacobi symbols by definition only require the denominator to be an odd **number**, not an odd prime. It's just that, in the special case where the denominator is an odd prime, the Jacobi symbol equals the Legendre symbol.\n\nThe computation goes like this:\n\n* Start with a Legendre symbol.\n* Interpret it as a Jacobi symbol.\n* Calculate this Jacobi symbol. The intermediate Jacobi symbols won't indicate whether or not their numerators are squares, but this doesn't matter.\n* ???\n* Profit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No! Jacobi symbols by definition only require the denominator to be an odd &lt;strong&gt;number&lt;/strong&gt;, not an odd prime. It&amp;#39;s just that, in the special case where the denominator is an odd prime, the Jacobi symbol equals the Legendre symbol.&lt;/p&gt;\n\n&lt;p&gt;The computation goes like this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Start with a Legendre symbol.&lt;/li&gt;\n&lt;li&gt;Interpret it as a Jacobi symbol.&lt;/li&gt;\n&lt;li&gt;Calculate this Jacobi symbol. The intermediate Jacobi symbols won&amp;#39;t indicate whether or not their numerators are squares, but this doesn&amp;#39;t matter.&lt;/li&gt;\n&lt;li&gt;???&lt;/li&gt;\n&lt;li&gt;Profit.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgbahg3", "score_hidden": false, "stickied": false, "created": 1492325006.0, "created_utc": 1492296206.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb9pui", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bonenfan5", "parent_id": "t1_dgavna1", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "But in the case when the denominator is an odd prime, would it be faster to evaluate the Jacobi symbol or to just use Euler's criterion? By using the Jacobi symbol, you would have to continuously check whether the denominator is an odd prime, which seems like it could require more computations. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But in the case when the denominator is an odd prime, would it be faster to evaluate the Jacobi symbol or to just use Euler&amp;#39;s criterion? By using the Jacobi symbol, you would have to continuously check whether the denominator is an odd prime, which seems like it could require more computations. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgb9pui", "score_hidden": false, "stickied": false, "created": 1492323885.0, "created_utc": 1492295085.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgavna1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "djao", "parent_id": "t1_dg9kgvx", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "If the \"denominator\" is composite, then the Jacobi symbol can only be used to determine that the \"numerator\" is a non-residue, not that the numerator is a residue.\n\nBut if the denominator is (an odd) prime, then the Jacobi symbol *by definition* equals the Legendre symbol. Therefore calculating the Jacobi symbol also calculates the Legendre symbol, which answers your question.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If the &amp;quot;denominator&amp;quot; is composite, then the Jacobi symbol can only be used to determine that the &amp;quot;numerator&amp;quot; is a non-residue, not that the numerator is a residue.&lt;/p&gt;\n\n&lt;p&gt;But if the denominator is (an odd) prime, then the Jacobi symbol &lt;em&gt;by definition&lt;/em&gt; equals the Legendre symbol. Therefore calculating the Jacobi symbol also calculates the Legendre symbol, which answers your question.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgavna1", "score_hidden": false, "stickied": false, "created": 1492304663.0, "created_utc": 1492275863.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": "", "user_reports": [], "id": "dg9pv5o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "FinitelyGenerated", "parent_id": "t1_dg9kgvx", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "The Jacobi symbol works as long as you started with a prime number in the denominator and pull out all the factors of 2 along the way.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The Jacobi symbol works as long as you started with a prime number in the denominator and pull out all the factors of 2 along the way.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dg9pv5o", "score_hidden": false, "stickied": false, "created": 1492231224.0, "created_utc": 1492202424.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9kgvx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "bonenfan5", "parent_id": "t1_dg9jtmk", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Thanks for replying. I read about the Jacobi symbol but I thought that when you used it you can only definitively conclude that a number is a non-residue, but not that it is a residue. Is this incorrect?\n\nAlso thanks for the book recommendation. I'll look into it", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for replying. I read about the Jacobi symbol but I thought that when you used it you can only definitively conclude that a number is a non-residue, but not that it is a residue. Is this incorrect?&lt;/p&gt;\n\n&lt;p&gt;Also thanks for the book recommendation. I&amp;#39;ll look into it&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dg9kgvx", "score_hidden": false, "stickied": false, "created": 1492224722.0, "created_utc": 1492195922.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9jtmk", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "chebushka", "parent_id": "t3_65e1v6", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "No commercial computer algebra package computes Legendre symbols using the quadratic reciprocity law for them. Instead they would use the reciprocity law for the *Jacobi symbol*.  You identified the bottleneck in computing Legendre symbols: factoring the numerator.  The calculation of Jacobi symbols works much faster since it requires *no factoring* other than pulling out powers of 2 in the numerator.  It is the quadratic reciprocity for Jacobi symbols that accounts for how Legendre symbols can be computed very quickly in practice, about as fast as running Euclid's algorithm on the numerator and denominator in the symbol.\n\nAny computational number theory book (e.g., the ones by Henri Cohen) that discuss Legendre symbols will make this same point.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No commercial computer algebra package computes Legendre symbols using the quadratic reciprocity law for them. Instead they would use the reciprocity law for the &lt;em&gt;Jacobi symbol&lt;/em&gt;.  You identified the bottleneck in computing Legendre symbols: factoring the numerator.  The calculation of Jacobi symbols works much faster since it requires &lt;em&gt;no factoring&lt;/em&gt; other than pulling out powers of 2 in the numerator.  It is the quadratic reciprocity for Jacobi symbols that accounts for how Legendre symbols can be computed very quickly in practice, about as fast as running Euclid&amp;#39;s algorithm on the numerator and denominator in the symbol.&lt;/p&gt;\n\n&lt;p&gt;Any computational number theory book (e.g., the ones by Henri Cohen) that discuss Legendre symbols will make this same point.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dg9jtmk", "score_hidden": false, "stickied": false, "created": 1492223946.0, "created_utc": 1492195146.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65e1v6", "likes": null, "replies": "", "user_reports": [], "id": "dga3wwl", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "forgetsID", "parent_id": "t3_65e1v6", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "I have no knowledge of the computational efficiency, but if I were doing this by hand for n &gt; 1000 I would use the fact that squares are:\n\n1, 1+3, 1+3+5, 1+3+5+7, etc.\n\nSo for say 1000: we have \"easy\" residues up to 31 squared or 961.  But then:\n\n961 + 63 = 24 (mod 1000)\n\n24 + 65 = 89\n\n89 + 67 = 156\n\n156 + 69 ...\n\nAlso you only need to calculate up to n/2 since k^2 = (-k)^2 .  So those two residues k and -k will be the same.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have no knowledge of the computational efficiency, but if I were doing this by hand for n &amp;gt; 1000 I would use the fact that squares are:&lt;/p&gt;\n\n&lt;p&gt;1, 1+3, 1+3+5, 1+3+5+7, etc.&lt;/p&gt;\n\n&lt;p&gt;So for say 1000: we have &amp;quot;easy&amp;quot; residues up to 31 squared or 961.  But then:&lt;/p&gt;\n\n&lt;p&gt;961 + 63 = 24 (mod 1000)&lt;/p&gt;\n\n&lt;p&gt;24 + 65 = 89&lt;/p&gt;\n\n&lt;p&gt;89 + 67 = 156&lt;/p&gt;\n\n&lt;p&gt;156 + 69 ...&lt;/p&gt;\n\n&lt;p&gt;Also you only need to calculate up to n/2 since k&lt;sup&gt;2&lt;/sup&gt; = (-k)&lt;sup&gt;2&lt;/sup&gt; .  So those two residues k and -k will be the same.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dga3wwl", "score_hidden": false, "stickied": false, "created": 1492249760.0, "created_utc": 1492220960.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}]