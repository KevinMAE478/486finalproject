[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "math", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m seriously considering doing a PhD in theoretical computer science, coming from a pure maths background. Pure maths is my first love, but the work for this particular placement looks fascinating - essentially, the intersection between proof theory, logic and categories. My main reservation is the leap to a different subject - although my understanding is that the methodologies are the same as &amp;#39;traditional&amp;#39; mathematics, there tends to be more emphasis put on calculating e.g. the time an algorithm takes to run. I&amp;#39;m curious to hear from someone with knowledge in this area, basically about what kind of &amp;#39;flavour&amp;#39; this work would be - perhaps comparing to another area of maths. &lt;/p&gt;\n\n&lt;p&gt;Apologies for the extraordinarily vague question - it may well be that there is no satisfactory answer to this, other than &amp;quot;learn some computational complexity theory&amp;quot;, but I thought it worth asking anyway. Especially due to current time constraints (finals etc) making that less of an option.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm seriously considering doing a PhD in theoretical computer science, coming from a pure maths background. Pure maths is my first love, but the work for this particular placement looks fascinating - essentially, the intersection between proof theory, logic and categories. My main reservation is the leap to a different subject - although my understanding is that the methodologies are the same as 'traditional' mathematics, there tends to be more emphasis put on calculating e.g. the time an algorithm takes to run. I'm curious to hear from someone with knowledge in this area, basically about what kind of 'flavour' this work would be - perhaps comparing to another area of maths. \n\nApologies for the extraordinarily vague question - it may well be that there is no satisfactory answer to this, other than \"learn some computational complexity theory\", but I thought it worth asking anyway. Especially due to current time constraints (finals etc) making that less of an option.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65k4u8", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 9, "report_reasons": null, "author": "Feral_P", "saved": false, "mod_reports": [], "name": "t3_65k4u8", "subreddit_name_prefixed": "r/math", "approved_by": null, "over_18": false, "domain": "self.math", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0n", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/math/comments/65k4u8/computational_complexity_flavour_of_maths/", "num_reports": null, "locked": false, "stickied": false, "created": 1492304559.0, "url": "https://www.reddit.com/r/math/comments/65k4u8/computational_complexity_flavour_of_maths/", "author_flair_text": null, "quarantine": false, "title": "Computational Complexity - Flavour of maths?", "created_utc": 1492275759.0, "distinguished": null, "media": null, "upvote_ratio": 0.92, "num_comments": 7, "visited": false, "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": "", "user_reports": [], "id": "dgbgkcj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Prime_Idealist", "parent_id": "t1_dgbdpdb", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Currently using that text book for a grad algorithms class and I really like it. It's much more concise than CLRS, but it still covers a lot of ground. If you want to see what theoretical CS is all about, it's a good start...it certainly helped me realize my ~~preference~~ love for pure mathematics :) perhaps for you it will help you decide that theoretical CS is your cup of tea.\n\nP.S. there may or may not be readily available pdf's of the book if you search for it. ", "edited": 1492307148.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Currently using that text book for a grad algorithms class and I really like it. It&amp;#39;s much more concise than CLRS, but it still covers a lot of ground. If you want to see what theoretical CS is all about, it&amp;#39;s a good start...it certainly helped me realize my &lt;del&gt;preference&lt;/del&gt; love for pure mathematics :) perhaps for you it will help you decide that theoretical CS is your cup of tea.&lt;/p&gt;\n\n&lt;p&gt;P.S. there may or may not be readily available pdf&amp;#39;s of the book if you search for it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgbgkcj", "score_hidden": false, "stickied": false, "created": 1492333679.0, "created_utc": 1492304879.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": "", "user_reports": [], "id": "dgclumr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Watercrystal", "parent_id": "t1_dgbdpdb", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "A few more literature tips:\n\nFor classical complexity theory I recommend the [Arora-Barak textbook](https://www.amazon.com/Computational-Complexity-Approach-Sanjeev-Arora/dp/0521424267). If you want to dive into parameterized complexity theory, I can recommend the [Flum-Grohe textbook](https://www.amazon.com/Parameterized-Complexity-Theoretical-Computer-Science/dp/3642067573).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A few more literature tips:&lt;/p&gt;\n\n&lt;p&gt;For classical complexity theory I recommend the &lt;a href=\"https://www.amazon.com/Computational-Complexity-Approach-Sanjeev-Arora/dp/0521424267\"&gt;Arora-Barak textbook&lt;/a&gt;. If you want to dive into parameterized complexity theory, I can recommend the &lt;a href=\"https://www.amazon.com/Parameterized-Complexity-Theoretical-Computer-Science/dp/3642067573\"&gt;Flum-Grohe textbook&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgclumr", "score_hidden": false, "stickied": false, "created": 1492407016.0, "created_utc": 1492378216.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbdpdb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Feral_P", "parent_id": "t1_dgb0j35", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Thanks! That doesn't sound too bad actually.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! That doesn&amp;#39;t sound too bad actually.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgbdpdb", "score_hidden": false, "stickied": false, "created": 1492329607.0, "created_utc": 1492300807.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb0j35", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "frater_horos", "parent_id": "t3_65k4u8", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": " Lots of recurrence relations, set theory, formal logic and proofs, and of course graph theory. Every once in a while, a little calculus. ( I should note I do not have a PhD, this is just my experiences from some graduate-level courses) I hope this is the sort of description your looking for?\n\nIf you'd like a non-gargantuan book to read that gives a good intro to this topic, I'd recommend [this one](https://www.amazon.com/Algorithms-Sanjoy-Dasgupta/dp/0073523402/ref=sr_1_1?ie=UTF8&amp;qid=1492282398&amp;sr=8-1&amp;keywords=algorithms+dasgupta) It mostly covers the analysis of algorithms but does go into complexity classes towards the end. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lots of recurrence relations, set theory, formal logic and proofs, and of course graph theory. Every once in a while, a little calculus. ( I should note I do not have a PhD, this is just my experiences from some graduate-level courses) I hope this is the sort of description your looking for?&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;d like a non-gargantuan book to read that gives a good intro to this topic, I&amp;#39;d recommend &lt;a href=\"https://www.amazon.com/Algorithms-Sanjoy-Dasgupta/dp/0073523402/ref=sr_1_1?ie=UTF8&amp;amp;qid=1492282398&amp;amp;sr=8-1&amp;amp;keywords=algorithms+dasgupta\"&gt;this one&lt;/a&gt; It mostly covers the analysis of algorithms but does go into complexity classes towards the end. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgb0j35", "score_hidden": false, "stickied": false, "created": 1492311320.0, "created_utc": 1492282520.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": "", "user_reports": [], "id": "dgbdrh6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Feral_P", "parent_id": "t1_dgb82h2", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Complexity theory isn't really what I want to go into - more like proof theory/logic, but I feel like I may have to do some complexity theory alongside it. Thanks for the response, that's really useful!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Complexity theory isn&amp;#39;t really what I want to go into - more like proof theory/logic, but I feel like I may have to do some complexity theory alongside it. Thanks for the response, that&amp;#39;s really useful!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgbdrh6", "score_hidden": false, "stickied": false, "created": 1492329684.0, "created_utc": 1492300884.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb82h2", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "zyphyrus", "parent_id": "t3_65k4u8", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Do you know that you definitely want to do complexity theory, or are you looking into other branches of theoretical computer science too? Complexity theory is not quite the same as algorithms; in a very broad hand-wavy way, I'd say complexity and algorithms are two sides of the lower bounds/upper bounds coin. While in algorithm design you'd certainly need to prove e.g. runtime (though this might also turn out to be less \"calculation\" and more mental gymnastics than you think!), complexity is more about reductions, or trying to prove things about a whole class of problems. Many of the big questions in complexity revolve around trying to show separations (or lack thereof) between classes of functions.\n\nAs for similarities with other areas of maths, combinatorics certainly comes up a lot. But I've also seen a lot of ideas from more \"traditional\" branches of pure math (e.g. ideas from algebra come up in the theory of error correcting codes, fourier analysis turns out to be a really useful tool to analyze boolean functions). Other people have mentioned links to logic/set theory, but I'm not experienced enough in (mathematical) logic to say.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do you know that you definitely want to do complexity theory, or are you looking into other branches of theoretical computer science too? Complexity theory is not quite the same as algorithms; in a very broad hand-wavy way, I&amp;#39;d say complexity and algorithms are two sides of the lower bounds/upper bounds coin. While in algorithm design you&amp;#39;d certainly need to prove e.g. runtime (though this might also turn out to be less &amp;quot;calculation&amp;quot; and more mental gymnastics than you think!), complexity is more about reductions, or trying to prove things about a whole class of problems. Many of the big questions in complexity revolve around trying to show separations (or lack thereof) between classes of functions.&lt;/p&gt;\n\n&lt;p&gt;As for similarities with other areas of maths, combinatorics certainly comes up a lot. But I&amp;#39;ve also seen a lot of ideas from more &amp;quot;traditional&amp;quot; branches of pure math (e.g. ideas from algebra come up in the theory of error correcting codes, fourier analysis turns out to be a really useful tool to analyze boolean functions). Other people have mentioned links to logic/set theory, but I&amp;#39;m not experienced enough in (mathematical) logic to say.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgb82h2", "score_hidden": false, "stickied": false, "created": 1492321571.0, "created_utc": 1492292771.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0n", "removal_reason": null, "link_id": "t3_65k4u8", "likes": null, "replies": "", "user_reports": [], "id": "dgck4j6", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "UDontCHOOSEyourOpion", "parent_id": "t3_65k4u8", "subreddit_name_prefixed": "r/math", "controversiality": 0, "body": "Hello! Im doing a master in this field, with a bachelor in maths as background. Right now I follow courses on complexity, quantum computing, proof theory, category theory, etc! \n\nIn complexity theory a lot of the proofs are constructions of somewhat weird algorithms, using tools as diagonalization. But you should not have a hard time understanding these because of your background. \nI would not say that there is an emphasis on calculating. Once you have the algorithm, it is not hard do deduce the compexity. Usually these claims are one or two sencences referencing to some steps in the algorithm. To me algorithms and complexity are not really similar to any other field in mathematics. I like it because it requires creative thinking and proving as in the more abstract branches of mathematics, but it is directly applicable to real life.\n\nAlgorithmic/Kolmogorov complexity (I think category theory has applications within this) is similar. It all gets a constructive flavour because of the algorithms.\n\nSo far we've used tools from combinatorics, algebra and statistics in information theory and a lot more that I cannot think of right now. You use a little basics from a lot of different branches, and overall the field is theoretical so not really like applied mathematics.\n\nI also think category theory is an elegant field, since it is very simple and clear. You draw a lot of diagrams with arrows, which are more insightful then only written proofs in my opinion.\n\nProof theory is not a really interesting field. Honestly almost everybody I spoke to also found it boring, so much of the same things. Although it is nice to have done some deductions of simple logical statements, so you know how your informal proofs would acctually look like if you would formalize them. Maybe it has interesting applications, but I do not know about this.\n\nIm not really sure what info you really want to know, so just ask me anything if you want!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello! Im doing a master in this field, with a bachelor in maths as background. Right now I follow courses on complexity, quantum computing, proof theory, category theory, etc! &lt;/p&gt;\n\n&lt;p&gt;In complexity theory a lot of the proofs are constructions of somewhat weird algorithms, using tools as diagonalization. But you should not have a hard time understanding these because of your background. \nI would not say that there is an emphasis on calculating. Once you have the algorithm, it is not hard do deduce the compexity. Usually these claims are one or two sencences referencing to some steps in the algorithm. To me algorithms and complexity are not really similar to any other field in mathematics. I like it because it requires creative thinking and proving as in the more abstract branches of mathematics, but it is directly applicable to real life.&lt;/p&gt;\n\n&lt;p&gt;Algorithmic/Kolmogorov complexity (I think category theory has applications within this) is similar. It all gets a constructive flavour because of the algorithms.&lt;/p&gt;\n\n&lt;p&gt;So far we&amp;#39;ve used tools from combinatorics, algebra and statistics in information theory and a lot more that I cannot think of right now. You use a little basics from a lot of different branches, and overall the field is theoretical so not really like applied mathematics.&lt;/p&gt;\n\n&lt;p&gt;I also think category theory is an elegant field, since it is very simple and clear. You draw a lot of diagrams with arrows, which are more insightful then only written proofs in my opinion.&lt;/p&gt;\n\n&lt;p&gt;Proof theory is not a really interesting field. Honestly almost everybody I spoke to also found it boring, so much of the same things. Although it is nice to have done some deductions of simple logical statements, so you know how your informal proofs would acctually look like if you would formalize them. Maybe it has interesting applications, but I do not know about this.&lt;/p&gt;\n\n&lt;p&gt;Im not really sure what info you really want to know, so just ask me anything if you want!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "math", "name": "t1_dgck4j6", "score_hidden": false, "stickied": false, "created": 1492404755.0, "created_utc": 1492375955.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]