[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "gamedev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello fellow devs!&lt;/p&gt;\n\n&lt;p&gt;How do you plan your project from the code side?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve started a lot of projects already, but they all feel like spaghetti code after some time of changing vision, refractoring etc.&lt;/p&gt;\n\n&lt;p&gt;I feel like I need to create some kind of diagram with class relations, inheritance, namespaces etc. (I&amp;#39;m using C++) written out before starting coding another project, as I really don&amp;#39;t want shitty code with strangely placed global-ish classes anymore.&lt;/p&gt;\n\n&lt;p&gt;Any suggestions on what to do to plan your project and write quality, clean code? Preferrably Linux-compatible solutions, but everything&amp;#39;s welcome.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello fellow devs!\n\nHow do you plan your project from the code side?\n\nI've started a lot of projects already, but they all feel like spaghetti code after some time of changing vision, refractoring etc.\n\nI feel like I need to create some kind of diagram with class relations, inheritance, namespaces etc. (I'm using C++) written out before starting coding another project, as I really don't want shitty code with strangely placed global-ish classes anymore.\n\nAny suggestions on what to do to plan your project and write quality, clean code? Preferrably Linux-compatible solutions, but everything's welcome.\n\nThanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Question", "id": "65ecte", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 63, "report_reasons": null, "author": "makisekuritorisu", "saved": false, "mod_reports": [], "name": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "approved_by": null, "over_18": false, "domain": "self.gamedev", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qi0a", "edited": false, "link_flair_css_class": "question", "author_flair_css_class": "hobbyist", "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/gamedev/comments/65ecte/reddit_whats_your_way_of_planning_the_skeleton_of/", "num_reports": null, "locked": false, "stickied": false, "created": 1492224064.0, "url": "https://www.reddit.com/r/gamedev/comments/65ecte/reddit_whats_your_way_of_planning_the_skeleton_of/", "author_flair_text": "@kacperski1 | BlackCo.de", "quarantine": false, "title": "Reddit, what's your way of planning the skeleton of your project and writing clean code?", "created_utc": 1492195264.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 42, "visited": false, "subreddit_type": "public", "ups": 63}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9wvkh", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "videoGameMaker", "parent_id": "t1_dg9me15", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Oh man that made me laugh. Rings true to me  I just finished my third game. The last week of code is spaghetti. Just to get it out. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh man that made me laugh. Rings true to me  I just finished my third game. The last week of code is spaghetti. Just to get it out. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9wvkh", "score_hidden": false, "stickied": false, "created": 1492240308.0, "created_utc": 1492211508.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9zhez", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "MitoG", "parent_id": "t1_dg9me15", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "every piece of software ever", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;every piece of software ever&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9zhez", "score_hidden": false, "stickied": false, "created": 1492243766.0, "created_utc": 1492214966.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga6we7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PickledChicken", "parent_id": "t1_dg9me15", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Amen.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Amen.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga6we7", "score_hidden": false, "stickied": false, "created": 1492254050.0, "created_utc": 1492225250.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9me15", "gilded": 0, "archived": false, "score": 124, "report_reasons": null, "author": "burge4150", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "My projects are meticulously organized and I'm very careful to keep all of the code in its proper place, formatted, organized with unique and readable variable names.\n\nThen, when I start writing about the 10th line of code, it all goes to hell and you might as well cover it with sauce because it's spaghetti babyyyyyyy", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My projects are meticulously organized and I&amp;#39;m very careful to keep all of the code in its proper place, formatted, organized with unique and readable variable names.&lt;/p&gt;\n\n&lt;p&gt;Then, when I start writing about the 10th line of code, it all goes to hell and you might as well cover it with sauce because it&amp;#39;s spaghetti babyyyyyyy&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9me15", "score_hidden": false, "stickied": false, "created": 1492227042.0, "created_utc": 1492198242.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 124}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9nx3j", "gilded": 0, "archived": false, "score": 20, "report_reasons": null, "author": "pdp10", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "It sounds like you might be setting yourself up for \"Second System Syndrome\" -- where one overdesigns a later effort in an overreaction to underdesigning the first.\n\nPossibly you can benefit from some tools to make refactoring more painless. There are specific refactoring browsers, and Jetbrains' IDEs support Linux, but I would take a close look at spatch/Cocinelle which is a scripted semantic refactoring tool [that has been used to do some refactoring on the Linux kernel](https://lwn.net/Articles/315686/).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It sounds like you might be setting yourself up for &amp;quot;Second System Syndrome&amp;quot; -- where one overdesigns a later effort in an overreaction to underdesigning the first.&lt;/p&gt;\n\n&lt;p&gt;Possibly you can benefit from some tools to make refactoring more painless. There are specific refactoring browsers, and Jetbrains&amp;#39; IDEs support Linux, but I would take a close look at spatch/Cocinelle which is a scripted semantic refactoring tool &lt;a href=\"https://lwn.net/Articles/315686/\"&gt;that has been used to do some refactoring on the Linux kernel&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9nx3j", "score_hidden": false, "stickied": false, "created": 1492228875.0, "created_utc": 1492200075.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 20}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9ro8j", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "DaFranker", "parent_id": "t1_dg9reiv", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "In other words, as /u/fremdlaender shows here but doesn't tell, *organizing* code neatly is a whole other extra discipline and science on top of the programming and computing science itself. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In other words, as &lt;a href=\"/u/fremdlaender\"&gt;/u/fremdlaender&lt;/a&gt; shows here but doesn&amp;#39;t tell, &lt;em&gt;organizing&lt;/em&gt; code neatly is a whole other extra discipline and science on top of the programming and computing science itself. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9ro8j", "score_hidden": false, "stickied": false, "created": 1492233458.0, "created_utc": 1492204658.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga6uos", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ctothel", "parent_id": "t1_dg9reiv", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Ohhh man, EA... I haven't heard that name for a long time.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ohhh man, EA... I haven&amp;#39;t heard that name for a long time.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga6uos", "score_hidden": false, "stickied": false, "created": 1492253981.0, "created_utc": 1492225181.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9reiv", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "fremdlaender", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Ok, I really don't know how the answers in this thread are supposed to help so let's throw something in that might actually be what yor searching for. I assume that you are familiar with UML, which is generally used to plan out software?\n\nIn my workplace we use Enterprise Architect. That tool is really powerful, you can design everything from a simple use-case diagram down to a very detailed class diagram including class relations, methods, member variables, etc. Generally, if it's UML, it can be modeled in EA. I don't know if there's a free version however, google might help.\n\nDuring my time in university, we used a program called Visual Paradigm. Memory is a bit fuzzy but as I remember it's free and you can model most UML stuff with it.\n\nI hope one of those helps, good luck.", "edited": 1492204540.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok, I really don&amp;#39;t know how the answers in this thread are supposed to help so let&amp;#39;s throw something in that might actually be what yor searching for. I assume that you are familiar with UML, which is generally used to plan out software?&lt;/p&gt;\n\n&lt;p&gt;In my workplace we use Enterprise Architect. That tool is really powerful, you can design everything from a simple use-case diagram down to a very detailed class diagram including class relations, methods, member variables, etc. Generally, if it&amp;#39;s UML, it can be modeled in EA. I don&amp;#39;t know if there&amp;#39;s a free version however, google might help.&lt;/p&gt;\n\n&lt;p&gt;During my time in university, we used a program called Visual Paradigm. Memory is a bit fuzzy but as I remember it&amp;#39;s free and you can model most UML stuff with it.&lt;/p&gt;\n\n&lt;p&gt;I hope one of those helps, good luck.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9reiv", "score_hidden": false, "stickied": false, "created": 1492233119.0, "created_utc": 1492204319.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9lop6", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "freezingD", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Just start and see how it goes, quality improves over time. You say your projects from the past feel like spaghetti code - so learn from them.\nFor me, I noticed that my architecture and the quality of my code gets better with every project I do.\nWhen I look at older code from myself, it mostly looks terrible while I thought it's ok back then. But it's nice to see yourself getting better.\n\nJust some ideas that come to my mind:\n* Refactor a lot in the early stage of development, everytime when you see somewhere a possible improvement\n* Use version control, so you don't have to be afraid of refactoring breaking stuff\n* Think of all the entities you need and their relationship to each other", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just start and see how it goes, quality improves over time. You say your projects from the past feel like spaghetti code - so learn from them.\nFor me, I noticed that my architecture and the quality of my code gets better with every project I do.\nWhen I look at older code from myself, it mostly looks terrible while I thought it&amp;#39;s ok back then. But it&amp;#39;s nice to see yourself getting better.&lt;/p&gt;\n\n&lt;p&gt;Just some ideas that come to my mind:\n* Refactor a lot in the early stage of development, everytime when you see somewhere a possible improvement\n* Use version control, so you don&amp;#39;t have to be afraid of refactoring breaking stuff\n* Think of all the entities you need and their relationship to each other&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9lop6", "score_hidden": false, "stickied": false, "created": 1492226191.0, "created_utc": 1492197391.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga13kf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mrkotfw", "parent_id": "t1_dg9q079", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I take this similar approach, but I do draw it roughly. I just draw circles, arrows, but not anything UML. This helps me understand what is what, and what interacts with what.\n\nI then go through multiple cases in my head and see if it works. Then I write the stub, or first iteration. Afterwards, I begin to refactor until I can actually start optimizing, if needed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I take this similar approach, but I do draw it roughly. I just draw circles, arrows, but not anything UML. This helps me understand what is what, and what interacts with what.&lt;/p&gt;\n\n&lt;p&gt;I then go through multiple cases in my head and see if it works. Then I write the stub, or first iteration. Afterwards, I begin to refactor until I can actually start optimizing, if needed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga13kf", "score_hidden": false, "stickied": false, "created": 1492245905.0, "created_utc": 1492217105.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9q079", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "lukebitts", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "For personal projects I just write code twice. The first a proof of concept to see what parts of my code will have to interact and what they need and then I refactor everything. I never felt like planning my code worked, I tried drawing diagrams and stuff but if I can't program it right the first time, I can't draw it either.\n\nSometimes I just power through the spaghetti code, I rather finish my projects than get bogged down trying to write perfect code.\n\nAnother thing that helps is using frameworks. Let other people write perfect code, just fill in the gaps", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For personal projects I just write code twice. The first a proof of concept to see what parts of my code will have to interact and what they need and then I refactor everything. I never felt like planning my code worked, I tried drawing diagrams and stuff but if I can&amp;#39;t program it right the first time, I can&amp;#39;t draw it either.&lt;/p&gt;\n\n&lt;p&gt;Sometimes I just power through the spaghetti code, I rather finish my projects than get bogged down trying to write perfect code.&lt;/p&gt;\n\n&lt;p&gt;Another thing that helps is using frameworks. Let other people write perfect code, just fill in the gaps&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9q079", "score_hidden": false, "stickied": false, "created": 1492231392.0, "created_utc": 1492202592.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9v661", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "00jknight", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I dont plan too far ahead.\n\nI just rewrite code repeatedly to keep it understandable and efficient.\n\nMy github tells me Ive deleted my project and rewritten it 10 times.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I dont plan too far ahead.&lt;/p&gt;\n\n&lt;p&gt;I just rewrite code repeatedly to keep it understandable and efficient.&lt;/p&gt;\n\n&lt;p&gt;My github tells me Ive deleted my project and rewritten it 10 times.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9v661", "score_hidden": false, "stickied": false, "created": 1492238015.0, "created_utc": 1492209215.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga240x", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "startyourengines", "parent_id": "t1_dg9ttqs", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "There are no short or easy answers to a question like this, unfortunately.\n\nIt's a science and an art that requires honing with every new application,", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are no short or easy answers to a question like this, unfortunately.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a science and an art that requires honing with every new application,&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga240x", "score_hidden": false, "stickied": false, "created": 1492247274.0, "created_utc": 1492218474.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga240z", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "startyourengines", "parent_id": "t1_dg9ttqs", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "There are no short or easy answers to a question like this, unfortunately.\n\nIt's a science and an art that requires honing with every new application,", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are no short or easy answers to a question like this, unfortunately.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a science and an art that requires honing with every new application,&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga240z", "score_hidden": false, "stickied": false, "created": 1492247274.0, "created_utc": 1492218474.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga2n01", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "4ShadesOfGray", "parent_id": "t1_dg9ttqs", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I am starting my course in software requirements (software engineering degree btw), and from I can tell you, it's complex, there's a lot of techniques and tools. All to get as close as possible to the solution of the best code to solve a problem", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I am starting my course in software requirements (software engineering degree btw), and from I can tell you, it&amp;#39;s complex, there&amp;#39;s a lot of techniques and tools. All to get as close as possible to the solution of the best code to solve a problem&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga2n01", "score_hidden": false, "stickied": false, "created": 1492248006.0, "created_utc": 1492219206.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgajoul", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Xanthus730", "parent_id": "t1_dgadkm0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Sorry, I'm not saying trying to say that there's no answer. I'm saying that trying to answer those in a quick reddit post will likely do more harm than good. Trying to approach the architecture of a game in such a short format wish likely lead to a simplified answer that could end up doing more harm than good. I recommend a more thorough investigation based on your actual circumstances, rather than a generalized forum response.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry, I&amp;#39;m not saying trying to say that there&amp;#39;s no answer. I&amp;#39;m saying that trying to answer those in a quick reddit post will likely do more harm than good. Trying to approach the architecture of a game in such a short format wish likely lead to a simplified answer that could end up doing more harm than good. I recommend a more thorough investigation based on your actual circumstances, rather than a generalized forum response.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgajoul", "score_hidden": false, "stickied": false, "created": 1492283846.0, "created_utc": 1492255046.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgadkm0", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "moarthenfeeling", "parent_id": "t1_dga3whp", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Yes, but there are still some general guidance that can be found. After all, we're on /r/gamedev, so OP is writing a game. And lots of games have the same problems and mostly the same or similar solutions. Game loop, events, input handling, resource management, etc.\n\nYes, it differs from game to game, but there are still some basic patterns and solution found in a lot of cases. [Game Programming Architecture](http://gameprogrammingpatterns.com/contents.html) and [Game Engine Architecture](https://www.amazon.com/Game-Engine-Architecture-Jason-Gregory/dp/1568814135) are good examples of books trying to generalize knowledge about game development.\n\nJust saying \"there's no answer\" adds nothing useful to the thread and discourages people to improve their code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, but there are still some general guidance that can be found. After all, we&amp;#39;re on &lt;a href=\"/r/gamedev\"&gt;/r/gamedev&lt;/a&gt;, so OP is writing a game. And lots of games have the same problems and mostly the same or similar solutions. Game loop, events, input handling, resource management, etc.&lt;/p&gt;\n\n&lt;p&gt;Yes, it differs from game to game, but there are still some basic patterns and solution found in a lot of cases. &lt;a href=\"http://gameprogrammingpatterns.com/contents.html\"&gt;Game Programming Architecture&lt;/a&gt; and &lt;a href=\"https://www.amazon.com/Game-Engine-Architecture-Jason-Gregory/dp/1568814135\"&gt;Game Engine Architecture&lt;/a&gt; are good examples of books trying to generalize knowledge about game development.&lt;/p&gt;\n\n&lt;p&gt;Just saying &amp;quot;there&amp;#39;s no answer&amp;quot; adds nothing useful to the thread and discourages people to improve their code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgadkm0", "score_hidden": false, "stickied": false, "created": 1492266063.0, "created_utc": 1492237263.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dga3whp", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Xanthus730", "parent_id": "t1_dg9ttqs", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "The answer very much depends on what you're trying to build, what you priorities and parameters are, what sort of team you've got, etc etc etc. It's a million variables, and even after you've got all that figured out, there's STILL not ONE right answer.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The answer very much depends on what you&amp;#39;re trying to build, what you priorities and parameters are, what sort of team you&amp;#39;ve got, etc etc etc. It&amp;#39;s a million variables, and even after you&amp;#39;ve got all that figured out, there&amp;#39;s STILL not ONE right answer.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga3whp", "score_hidden": false, "stickied": false, "created": 1492249745.0, "created_utc": 1492220945.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ttqs", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "-Captain-", "parent_id": "t1_dg9laej", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I expected at least a little bit more than that from someone with a masters in software engineering.", "edited": 1492212343.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I expected at least a little bit more than that from someone with a masters in software engineering.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9ttqs", "score_hidden": false, "stickied": false, "created": 1492236224.0, "created_utc": 1492207424.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9laej", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Xanthus730", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Add someone with a masters in software engineering, I think you may be overestimating the simplicity of this question.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Add someone with a masters in software engineering, I think you may be overestimating the simplicity of this question.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9laej", "score_hidden": false, "stickied": false, "created": 1492225716.0, "created_utc": 1492196916.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dge10zx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PickledChicken", "parent_id": "t1_dgad13z", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "There is no answer to the OP's question. \n\nCleanliness of code is not definable and is often crossed with code-style.\n\nCode style has no actual impact on any objective cleanliness or maintainability. Even a convoluted style may very well be sufficiently self-documenting that comments would serve solely as redundant noise.\n\nTo some the below code is clean and \"documented,\" while to others it is a repulsive heap of noise worthy of a pink slip:\n\n    // add reports form as a child to the main form\n    mainForm-&gt;addChild(reportsForm);\n\nJoe Schmoe being able to read or interpet from randomly chosen code ABC is irrelevant, Joe Schmoe being able to read and interpret the code of ABC after having been given the appropriate style and conventions guide is.\n\n---\n\nThe \"skeleton\" of a project has little bearing on \"cleanliness\" and while pervasive in a product the defining traits of the actual product are most likely to be one-offs that depart radically from the other 95% of the software and require extensive mauling of the underlying \"skeleton.\" They're that 5% reason that you bought it over \"Product XYZ\".\n\nJust pointing at the bible of DP reference (http://www.vincehuston.org/dp/) is probably the closest one can get to answer on the skeleton of a project. It's also the most dangerous thing you can drop on a greenhorn - early usage of DP is more likely to create complete disasters that good until the programmer is able to immediately recognize how to use them for a particular chunk in a fashion that doesn't create more work than is actually required.\n\nGiving skeleton advice to someone green is generally a bad idea and they would be better served by screwing around in various OSS projects to see life in motion.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is no answer to the OP&amp;#39;s question. &lt;/p&gt;\n\n&lt;p&gt;Cleanliness of code is not definable and is often crossed with code-style.&lt;/p&gt;\n\n&lt;p&gt;Code style has no actual impact on any objective cleanliness or maintainability. Even a convoluted style may very well be sufficiently self-documenting that comments would serve solely as redundant noise.&lt;/p&gt;\n\n&lt;p&gt;To some the below code is clean and &amp;quot;documented,&amp;quot; while to others it is a repulsive heap of noise worthy of a pink slip:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// add reports form as a child to the main form\nmainForm-&amp;gt;addChild(reportsForm);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Joe Schmoe being able to read or interpet from randomly chosen code ABC is irrelevant, Joe Schmoe being able to read and interpret the code of ABC after having been given the appropriate style and conventions guide is.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;The &amp;quot;skeleton&amp;quot; of a project has little bearing on &amp;quot;cleanliness&amp;quot; and while pervasive in a product the defining traits of the actual product are most likely to be one-offs that depart radically from the other 95% of the software and require extensive mauling of the underlying &amp;quot;skeleton.&amp;quot; They&amp;#39;re that 5% reason that you bought it over &amp;quot;Product XYZ&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Just pointing at the bible of DP reference (&lt;a href=\"http://www.vincehuston.org/dp/\"&gt;http://www.vincehuston.org/dp/&lt;/a&gt;) is probably the closest one can get to answer on the skeleton of a project. It&amp;#39;s also the most dangerous thing you can drop on a greenhorn - early usage of DP is more likely to create complete disasters that good until the programmer is able to immediately recognize how to use them for a particular chunk in a fashion that doesn&amp;#39;t create more work than is actually required.&lt;/p&gt;\n\n&lt;p&gt;Giving skeleton advice to someone green is generally a bad idea and they would be better served by screwing around in various OSS projects to see life in motion.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dge10zx", "score_hidden": false, "stickied": false, "created": 1492488137.0, "created_utc": 1492459337.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgad13z", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "moarthenfeeling", "parent_id": "t1_dg9rp6w", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Please don't just discard OP's desire to improve like that. No one is talking about 100% clean and perfect code. Having *mostly* clean code and structure is much more preferable to having awful code written to \"just ship\". \n\nIt's just not a good idea to write things as is and hope that they eventually play nicely with each other.\n \nThere must be some effort made to write the code as clean as possible without hurting your productivity, because it's very rewarding: it allows you to not be fixed by constraints of your code, makes it easier for other people (and yourself in a few days/months) to read, fix bugs, etc.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Please don&amp;#39;t just discard OP&amp;#39;s desire to improve like that. No one is talking about 100% clean and perfect code. Having &lt;em&gt;mostly&lt;/em&gt; clean code and structure is much more preferable to having awful code written to &amp;quot;just ship&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s just not a good idea to write things as is and hope that they eventually play nicely with each other.&lt;/p&gt;\n\n&lt;p&gt;There must be some effort made to write the code as clean as possible without hurting your productivity, because it&amp;#39;s very rewarding: it allows you to not be fixed by constraints of your code, makes it easier for other people (and yourself in a few days/months) to read, fix bugs, etc.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgad13z", "score_hidden": false, "stickied": false, "created": 1492264877.0, "created_utc": 1492236077.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 15}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9rp6w", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "PickledChicken", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "&gt; Clean code\n\nCode found in a *product* that never ships.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Clean code&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Code found in a &lt;em&gt;product&lt;/em&gt; that never ships.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9rp6w", "score_hidden": false, "stickied": false, "created": 1492233491.0, "created_utc": 1492204691.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgadfp3", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "moarthenfeeling", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Check out [Game Programming Patterns](http://gameprogrammingpatterns.com/contents.html), it contains lots of examples of how to write code with a good structure.\n\n[Game Engine Architecture](https://www.amazon.com/Game-Engine-Architecture-Jason-Gregory/dp/1568814135) is also very useful, but much more theoretical and heavy, but it explains nicely most of aspects of game engines and gives you a lot of ideas of how to approach different problems.\n\nDon't halt your progress by just reading these books and starting only afterwards: they'll take a long time to finish. Start with basic things, for example [Game Loop](http://gameprogrammingpatterns.com/game-loop.html) chapter. Make a simple, but good loop and start building things. Just get something playable on the screen first.\n\nBy the time you do it, you'll have some problematic code which you'll need to fix. For example, you may not be satisfied with how closely tied some things are. At that point you'll read about [event queues](http://gameprogrammingpatterns.com/event-queue.html) and will find solution to a lot of problems.\n\nAnd that goes for everything. You don't just start with perfect architecture, but with some experience you'll get an idea about what works and what doesn't. Some people write the same spaghetti for a long time and don't improve, but if you learn some good concepts, it's very unlikely that you'll ever return to worse practices.\n\nAnd it's also very important to not follow bad coding practices: globals are mostly bad, spaghetti code also should be avoided. Don't write big functions, don't write big classes. Don't just hope that the code will become better just randomly. Having huge functions and lots of global variables everywhere makes it much harder to improve and refactor your code.\n\nFeel free to PM me with questions about how to make your code structure better. I'm very interested in the topic and will be happy to help.\n\n**P. S.** If you haven't read Effective C++ and Effective Modern C++, you really should. It's a great way to improve your code considerably.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Check out &lt;a href=\"http://gameprogrammingpatterns.com/contents.html\"&gt;Game Programming Patterns&lt;/a&gt;, it contains lots of examples of how to write code with a good structure.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.amazon.com/Game-Engine-Architecture-Jason-Gregory/dp/1568814135\"&gt;Game Engine Architecture&lt;/a&gt; is also very useful, but much more theoretical and heavy, but it explains nicely most of aspects of game engines and gives you a lot of ideas of how to approach different problems.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t halt your progress by just reading these books and starting only afterwards: they&amp;#39;ll take a long time to finish. Start with basic things, for example &lt;a href=\"http://gameprogrammingpatterns.com/game-loop.html\"&gt;Game Loop&lt;/a&gt; chapter. Make a simple, but good loop and start building things. Just get something playable on the screen first.&lt;/p&gt;\n\n&lt;p&gt;By the time you do it, you&amp;#39;ll have some problematic code which you&amp;#39;ll need to fix. For example, you may not be satisfied with how closely tied some things are. At that point you&amp;#39;ll read about &lt;a href=\"http://gameprogrammingpatterns.com/event-queue.html\"&gt;event queues&lt;/a&gt; and will find solution to a lot of problems.&lt;/p&gt;\n\n&lt;p&gt;And that goes for everything. You don&amp;#39;t just start with perfect architecture, but with some experience you&amp;#39;ll get an idea about what works and what doesn&amp;#39;t. Some people write the same spaghetti for a long time and don&amp;#39;t improve, but if you learn some good concepts, it&amp;#39;s very unlikely that you&amp;#39;ll ever return to worse practices.&lt;/p&gt;\n\n&lt;p&gt;And it&amp;#39;s also very important to not follow bad coding practices: globals are mostly bad, spaghetti code also should be avoided. Don&amp;#39;t write big functions, don&amp;#39;t write big classes. Don&amp;#39;t just hope that the code will become better just randomly. Having huge functions and lots of global variables everywhere makes it much harder to improve and refactor your code.&lt;/p&gt;\n\n&lt;p&gt;Feel free to PM me with questions about how to make your code structure better. I&amp;#39;m very interested in the topic and will be happy to help.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;P. S.&lt;/strong&gt; If you haven&amp;#39;t read Effective C++ and Effective Modern C++, you really should. It&amp;#39;s a great way to improve your code considerably.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgadfp3", "score_hidden": false, "stickied": false, "created": 1492265765.0, "created_utc": 1492236965.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9vlqo", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mduffor", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Start with a document that sets out the game design you are going for.  Sure it will change over time, but it at least allows you to solidify your thinking at the start.\n\nThen wireframe the design.  This can be done in software, with index cards, or on a whiteboard.  This further forces you to actually think through what you are building and figure out what you can concretely define, and what still needs design iteration.\n\nNow that you know what you are building, start thinking about the classes and systems you need to implement the design.  If you can code a system that serves to implement multiple parts of your design, all the better.  Your goal is to write as little code as possible to implement your design.\n\nHonestly, I don't have deep hierarchies so I don't worry too much about inheritance, I don't use namespaces, and if you clearly define the purpose of every class you write then the class relations kinda work themselves out.  Also if you clearly know the purpose of a class, keep its data encapsulated as much as possible, make sure external classes don't care about the internals of the class, and keep the classes as modular as possible, then code tends to be contained and not go spaghetti on you.  \n\nAny class that is generally re-useable (string classes, math or vector classes, containers, networking, entity component system basics, graphics code, etc.), I put in a separate library that isn't part of the game code.  Library code can never call game code, and I strive to keep parts of the library as modular and separated as possible.  This also helps keep the game code as small and focused as possible, and makes sure I only implement reuseable code once where possible.\n\nI'm generally coding Android apps in C++ on Linux, so I prefer command-line tools and stay out of IDEs.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Start with a document that sets out the game design you are going for.  Sure it will change over time, but it at least allows you to solidify your thinking at the start.&lt;/p&gt;\n\n&lt;p&gt;Then wireframe the design.  This can be done in software, with index cards, or on a whiteboard.  This further forces you to actually think through what you are building and figure out what you can concretely define, and what still needs design iteration.&lt;/p&gt;\n\n&lt;p&gt;Now that you know what you are building, start thinking about the classes and systems you need to implement the design.  If you can code a system that serves to implement multiple parts of your design, all the better.  Your goal is to write as little code as possible to implement your design.&lt;/p&gt;\n\n&lt;p&gt;Honestly, I don&amp;#39;t have deep hierarchies so I don&amp;#39;t worry too much about inheritance, I don&amp;#39;t use namespaces, and if you clearly define the purpose of every class you write then the class relations kinda work themselves out.  Also if you clearly know the purpose of a class, keep its data encapsulated as much as possible, make sure external classes don&amp;#39;t care about the internals of the class, and keep the classes as modular as possible, then code tends to be contained and not go spaghetti on you.  &lt;/p&gt;\n\n&lt;p&gt;Any class that is generally re-useable (string classes, math or vector classes, containers, networking, entity component system basics, graphics code, etc.), I put in a separate library that isn&amp;#39;t part of the game code.  Library code can never call game code, and I strive to keep parts of the library as modular and separated as possible.  This also helps keep the game code as small and focused as possible, and makes sure I only implement reuseable code once where possible.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m generally coding Android apps in C++ on Linux, so I prefer command-line tools and stay out of IDEs.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9vlqo", "score_hidden": false, "stickied": false, "created": 1492238601.0, "created_utc": 1492209801.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dga13i7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cheddarbob619", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Little late to the party, but I usually make sure to divide and conquer my tasks.\n\nFor example I'm writing some procedural generation code that in turns generates more items off of it. So I start at the lowest level of granularity and write that generator. I then go over the generator once it's functional and split it out into components such as models for reused data types, enums for hardcoded variable items, and any utilities that I could create from methods I call a lot.\n\nI then work outward and develop the next level.\n\nOf course, I sometimes go in the reverse and just think of an overarching object that will probably have a lot of reusable functionality, like a character class, there might be many iterations, so I'll make an interface and extend off of that reusing base methods.\n\nTry and think in an object oriented way and that'll help your code become a lot more manageable and reusable.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Little late to the party, but I usually make sure to divide and conquer my tasks.&lt;/p&gt;\n\n&lt;p&gt;For example I&amp;#39;m writing some procedural generation code that in turns generates more items off of it. So I start at the lowest level of granularity and write that generator. I then go over the generator once it&amp;#39;s functional and split it out into components such as models for reused data types, enums for hardcoded variable items, and any utilities that I could create from methods I call a lot.&lt;/p&gt;\n\n&lt;p&gt;I then work outward and develop the next level.&lt;/p&gt;\n\n&lt;p&gt;Of course, I sometimes go in the reverse and just think of an overarching object that will probably have a lot of reusable functionality, like a character class, there might be many iterations, so I&amp;#39;ll make an interface and extend off of that reusing base methods.&lt;/p&gt;\n\n&lt;p&gt;Try and think in an object oriented way and that&amp;#39;ll help your code become a lot more manageable and reusable.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dga13i7", "score_hidden": false, "stickied": false, "created": 1492245903.0, "created_utc": 1492217103.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgaf3gb", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "goodnewsjimdotcom", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "The more experience at coding you have, the more you autopilot making extendable architecture, but when you're new, it's the hardest part.\n\nMy suggestion is to break your game down into features, and write them all down on a notepad.  \n\nNow try and link features together that will link each other.  This is just an academic step.  \n\nSee if there are any features you don't need and can remove to get an earlier release, but remember to code so these features will be easily addable later in case people play your game and you want to add more for them.\n\nNow see what needs to be done first so you can start on the game.  It doesn't always have to be the main menu.\n\nCollege ruled notepads are your friend.  Always have one next to your keyboard mouse and more on top your desk to replace when you fill up the active page.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The more experience at coding you have, the more you autopilot making extendable architecture, but when you&amp;#39;re new, it&amp;#39;s the hardest part.&lt;/p&gt;\n\n&lt;p&gt;My suggestion is to break your game down into features, and write them all down on a notepad.  &lt;/p&gt;\n\n&lt;p&gt;Now try and link features together that will link each other.  This is just an academic step.  &lt;/p&gt;\n\n&lt;p&gt;See if there are any features you don&amp;#39;t need and can remove to get an earlier release, but remember to code so these features will be easily addable later in case people play your game and you want to add more for them.&lt;/p&gt;\n\n&lt;p&gt;Now see what needs to be done first so you can start on the game.  It doesn&amp;#39;t always have to be the main menu.&lt;/p&gt;\n\n&lt;p&gt;College ruled notepads are your friend.  Always have one next to your keyboard mouse and more on top your desk to replace when you fill up the active page.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgaf3gb", "score_hidden": false, "stickied": false, "created": 1492269813.0, "created_utc": 1492241013.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgalhr1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mduffor", "parent_id": "t1_dgag05p", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Agreed with the above.  \n\nFor UI, these days I create a dictionary type system that stores all of the variables that would be seen in the UI, as well as the UI state itself (what screen you are on, what is visible) in a key-value dictionary.  My UI widgets look up and store a pointer to the values when they init or when they are reset.  They subscribe to \"on change\" events on the values, so if the value changes the widgets know they need to update.  Widgets can modify the game state by calling commands (command pattern).\n\nThat way, my UI is completely separate from my game code, and my game code doesn't need to track down the widgets that need to change when the game state changes.  I can muck with the game code or completely rework the UI (or have AB-tested alternative UI elements) without one bothering the other.  \n\nThis is pretty straightforward to do in C++, except for the event stuff.  For that I use the public domain code released by Don Clugston for implementing Signals and Delegates (http://www.codeproject.com/KB/cpp/FastDelegate.aspx).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Agreed with the above.  &lt;/p&gt;\n\n&lt;p&gt;For UI, these days I create a dictionary type system that stores all of the variables that would be seen in the UI, as well as the UI state itself (what screen you are on, what is visible) in a key-value dictionary.  My UI widgets look up and store a pointer to the values when they init or when they are reset.  They subscribe to &amp;quot;on change&amp;quot; events on the values, so if the value changes the widgets know they need to update.  Widgets can modify the game state by calling commands (command pattern).&lt;/p&gt;\n\n&lt;p&gt;That way, my UI is completely separate from my game code, and my game code doesn&amp;#39;t need to track down the widgets that need to change when the game state changes.  I can muck with the game code or completely rework the UI (or have AB-tested alternative UI elements) without one bothering the other.  &lt;/p&gt;\n\n&lt;p&gt;This is pretty straightforward to do in C++, except for the event stuff.  For that I use the public domain code released by Don Clugston for implementing Signals and Delegates (&lt;a href=\"http://www.codeproject.com/KB/cpp/FastDelegate.aspx\"&gt;http://www.codeproject.com/KB/cpp/FastDelegate.aspx&lt;/a&gt;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgalhr1", "score_hidden": false, "stickied": false, "created": 1492288459.0, "created_utc": 1492259659.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgag05p", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "PKrawczynski88", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "After couple of years as a programmer I can tell you that experience beats any theoretical planning. More you solve same problems, better you get at planning parts that involve them. For me there is a lot on subconscious level already - I know I need way to give entities guid, make factory to create them, have way to put them into different groups based on components etc. \n\nEntity-Component-Systems architecture is my goto for game logic.\nGUI however is entirely separated and probably resembles botched attempt at mvc. On the other hand gui is most fluid and changes often and massively so code there is easily discarded by me without regrets. \n\nECS is my choice because while EC (think unity components) is great, ECS further separates data from logic. Components don't have any methods at all. For some theory and examples you can go here:\nhttp://www.ashframework.org\n\n&gt;I feel like I need to create some kind of diagram with class relations, inheritance...\n\nI can't remember last time I've made (my custom) class inherit from another. Relations are also fairly simple since components/entities don't have any logic and only systems do. Oh and systems don't interact (call each other methods out) - at best they parse/prepare data for next system to use. \n\n&gt;don't want shitty code with strangely placed global-ish classes anymore...\n\nLook into dependency injection.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After couple of years as a programmer I can tell you that experience beats any theoretical planning. More you solve same problems, better you get at planning parts that involve them. For me there is a lot on subconscious level already - I know I need way to give entities guid, make factory to create them, have way to put them into different groups based on components etc. &lt;/p&gt;\n\n&lt;p&gt;Entity-Component-Systems architecture is my goto for game logic.\nGUI however is entirely separated and probably resembles botched attempt at mvc. On the other hand gui is most fluid and changes often and massively so code there is easily discarded by me without regrets. &lt;/p&gt;\n\n&lt;p&gt;ECS is my choice because while EC (think unity components) is great, ECS further separates data from logic. Components don&amp;#39;t have any methods at all. For some theory and examples you can go here:\n&lt;a href=\"http://www.ashframework.org\"&gt;http://www.ashframework.org&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I feel like I need to create some kind of diagram with class relations, inheritance...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I can&amp;#39;t remember last time I&amp;#39;ve made (my custom) class inherit from another. Relations are also fairly simple since components/entities don&amp;#39;t have any logic and only systems do. Oh and systems don&amp;#39;t interact (call each other methods out) - at best they parse/prepare data for next system to use. &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;don&amp;#39;t want shitty code with strangely placed global-ish classes anymore...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Look into dependency injection.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgag05p", "score_hidden": false, "stickied": false, "created": 1492272296.0, "created_utc": 1492243496.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgalq15", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Katana314", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I don't know if this is possible without experience. Teachers at school told me that to avoid this, you just need to plan your code more thoroughly, but this is avoiding the fact that early in programming you may be totally ignorant of certain hard requirements for the system you're building. Eg: \"Wait, so vertices should all be in the same array buffer? Oh...so all that doesn't work.\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t know if this is possible without experience. Teachers at school told me that to avoid this, you just need to plan your code more thoroughly, but this is avoiding the fact that early in programming you may be totally ignorant of certain hard requirements for the system you&amp;#39;re building. Eg: &amp;quot;Wait, so vertices should all be in the same array buffer? Oh...so all that doesn&amp;#39;t work.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgalq15", "score_hidden": false, "stickied": false, "created": 1492288955.0, "created_utc": 1492260155.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9tho7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CharlesE88", "parent_id": "t1_dg9qain", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thank you. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9tho7", "score_hidden": false, "stickied": false, "created": 1492235790.0, "created_utc": 1492206990.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9qain", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "removeitplease", "parent_id": "t1_dg9pmqu", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I admire your patience with planning your games.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I admire your patience with planning your games.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9qain", "score_hidden": false, "stickied": false, "created": 1492231736.0, "created_utc": 1492202936.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9pmqu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CharlesE88", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I write all my code out on paper NOT PSEUDOCODE but actual code. Then after I have it planned out on paper I open up Visual Studio and add folders for different actions. Mind you I started doing this while learning Python in school so at the time I was using Brackets as an IDE, but now I'm learning C++ in school so I use Visual Studio. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I write all my code out on paper NOT PSEUDOCODE but actual code. Then after I have it planned out on paper I open up Visual Studio and add folders for different actions. Mind you I started doing this while learning Python in school so at the time I was using Brackets as an IDE, but now I&amp;#39;m learning C++ in school so I use Visual Studio. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9pmqu", "score_hidden": false, "stickied": false, "created": 1492230941.0, "created_utc": 1492202141.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9y76p", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "YouAreDumbForReal", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "This should help you out. https://mollyrocket.com/casey/stream_0019.html", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This should help you out. &lt;a href=\"https://mollyrocket.com/casey/stream_0019.html\"&gt;https://mollyrocket.com/casey/stream_0019.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9y76p", "score_hidden": false, "stickied": false, "created": 1492242047.0, "created_utc": 1492213247.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dg9o0nu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheBosk", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "If you don't mind doing a lot of preparatory work before getting into the actual development, you can always draw or your classes/choice structure beforehand.  Look up UML diagrams, specifically class diagrams, to see what I mean.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you don&amp;#39;t mind doing a lot of preparatory work before getting into the actual development, you can always draw or your classes/choice structure beforehand.  Look up UML diagrams, specifically class diagrams, to see what I mean.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg9o0nu", "score_hidden": false, "stickied": false, "created": 1492228994.0, "created_utc": 1492200194.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgaa9xh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MyPunsSuck", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I am currently in the skeleton stage of a project (Although also fairly inebriated), so I'll try to describe my thought process. The general idea is that there are creatures composed of individual parts, roaming the lands; and the player controls one of them with the intention of acquiring better parts and building some kind of uber-creature with fifty hearts or a super long chain of arms or whatever strategically works.\n\nStarting with a few concept ideas, the player's interactions with other creatures doesn't need to be very long-distance, so it would be efficient to store the creatures' location data in some kind of grid (Instead of an open field where range calculations necessitate comparing every single creature to each others' locations). Because the creatures are defined by parts, the most sensible data structure would be something like an xml sheet with a list of currently living creatures, each containing a list of parts (each with a list of traits); and the map itself would just have pointers to any creatures in the local area (Ideally simply giving each creature a unique id, so it can be easily looked-up from the xml file). That way, hard-drive (or server) read-write requests are kept to a minimum (If your game is bottlenecking at the hard drive, that's probably a good sign?). The game board itself would be a finite map of grid tiles, with terrain information, whatever that means.\n\nSo now I know the general data structure, and that interaction will be 1-1 between two creatures - so I know the core of the program will be an xml parser - and that short-range interaction informs the kind of stats and functions that creatures will need. Parts will have a list of stats, global and local traits, and will add abilities to their owners' available actions. I'm not yet sure if these abilities should be described on the part itself as a scriptlet, or hard-coded in a main ability dictionary.\n\nSo basically, at every step of the design process, I make a note of what sorts of constraints this imposes on the technological side. Before I code anything, I have an idea of where future growth will be (New kids of creature parts, rather than new kinds of interaction per se), and can future-proof the main functions. I'd rather be fitting the narrative to the gameplay, but you've got to start somewhere, eh?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I am currently in the skeleton stage of a project (Although also fairly inebriated), so I&amp;#39;ll try to describe my thought process. The general idea is that there are creatures composed of individual parts, roaming the lands; and the player controls one of them with the intention of acquiring better parts and building some kind of uber-creature with fifty hearts or a super long chain of arms or whatever strategically works.&lt;/p&gt;\n\n&lt;p&gt;Starting with a few concept ideas, the player&amp;#39;s interactions with other creatures doesn&amp;#39;t need to be very long-distance, so it would be efficient to store the creatures&amp;#39; location data in some kind of grid (Instead of an open field where range calculations necessitate comparing every single creature to each others&amp;#39; locations). Because the creatures are defined by parts, the most sensible data structure would be something like an xml sheet with a list of currently living creatures, each containing a list of parts (each with a list of traits); and the map itself would just have pointers to any creatures in the local area (Ideally simply giving each creature a unique id, so it can be easily looked-up from the xml file). That way, hard-drive (or server) read-write requests are kept to a minimum (If your game is bottlenecking at the hard drive, that&amp;#39;s probably a good sign?). The game board itself would be a finite map of grid tiles, with terrain information, whatever that means.&lt;/p&gt;\n\n&lt;p&gt;So now I know the general data structure, and that interaction will be 1-1 between two creatures - so I know the core of the program will be an xml parser - and that short-range interaction informs the kind of stats and functions that creatures will need. Parts will have a list of stats, global and local traits, and will add abilities to their owners&amp;#39; available actions. I&amp;#39;m not yet sure if these abilities should be described on the part itself as a scriptlet, or hard-coded in a main ability dictionary.&lt;/p&gt;\n\n&lt;p&gt;So basically, at every step of the design process, I make a note of what sorts of constraints this imposes on the technological side. Before I code anything, I have an idea of where future growth will be (New kids of creature parts, rather than new kinds of interaction per se), and can future-proof the main functions. I&amp;#39;d rather be fitting the narrative to the gameplay, but you&amp;#39;ve got to start somewhere, eh?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgaa9xh", "score_hidden": false, "stickied": false, "created": 1492259543.0, "created_utc": 1492230743.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgabrn4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "skytomorrownow", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Think about the design of the software specific to the problem domain. If you organize your software for generality, you'll be making Unreal Engine, and that might take you a while. If you are making a plan to make something very specific, that's just called planning. If you have a plan, you'll still write spaghetti, but the spaghetti will have a sort of narrative or its own logic. Just don't start writing random code. Make a simple plan and stick with it. Do not create your own game engine\u2013make the engine for *your* game.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Think about the design of the software specific to the problem domain. If you organize your software for generality, you&amp;#39;ll be making Unreal Engine, and that might take you a while. If you are making a plan to make something very specific, that&amp;#39;s just called planning. If you have a plan, you&amp;#39;ll still write spaghetti, but the spaghetti will have a sort of narrative or its own logic. Just don&amp;#39;t start writing random code. Make a simple plan and stick with it. Do not create your own game engine\u2013make the engine for &lt;em&gt;your&lt;/em&gt; game.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgabrn4", "score_hidden": false, "stickied": false, "created": 1492262232.0, "created_utc": 1492233432.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgachlj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Davidobot", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Have a read of this wonderful post: http://makegames.tumblr.com/post/1136623767/finishing-a-game\n\nMore appropriate, see point 11.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Have a read of this wonderful post: &lt;a href=\"http://makegames.tumblr.com/post/1136623767/finishing-a-game\"&gt;http://makegames.tumblr.com/post/1136623767/finishing-a-game&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;More appropriate, see point 11.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgachlj", "score_hidden": false, "stickied": false, "created": 1492263698.0, "created_utc": 1492234898.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgafp6s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lukaszjb", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Maybe you refactor to late?  \nI think you should spend 5-10% your time refactoring constantly/daily, e.g. if you work 8h a day coding then spend 15-45min fixing bad code - and remember \"perfect is enemy of good\".  \nThis solution is very good if you do not PLAN ahead.\n\nSecond - probably more important is to **know your scope**.\n\n* objects (I mean characters, items, environment)\n* behaviors (mostly characters behaviors but others are important too, depends what kind of game you are making)\n* interactions (like characters with items, characters with environments and less \nimportant items with environments)\nWhen you know that shit, you can catch patterns and emerge groups from then.\n\nThird very important for C++ users.  \nYou need to know design pattern, not every one of them but around 10-15.  \nOne resource is this page http://gameprogrammingpatterns.com/  (free web, paid pdf/print) or book Design Patterns by Erich Gamma (this is my favorite, old book - 30 years old, still in sale).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe you refactor to late?&lt;br/&gt;\nI think you should spend 5-10% your time refactoring constantly/daily, e.g. if you work 8h a day coding then spend 15-45min fixing bad code - and remember &amp;quot;perfect is enemy of good&amp;quot;.&lt;br/&gt;\nThis solution is very good if you do not PLAN ahead.&lt;/p&gt;\n\n&lt;p&gt;Second - probably more important is to &lt;strong&gt;know your scope&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;objects (I mean characters, items, environment)&lt;/li&gt;\n&lt;li&gt;behaviors (mostly characters behaviors but others are important too, depends what kind of game you are making)&lt;/li&gt;\n&lt;li&gt;interactions (like characters with items, characters with environments and less \nimportant items with environments)\nWhen you know that shit, you can catch patterns and emerge groups from then.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Third very important for C++ users.&lt;br/&gt;\nYou need to know design pattern, not every one of them but around 10-15.&lt;br/&gt;\nOne resource is this page &lt;a href=\"http://gameprogrammingpatterns.com/\"&gt;http://gameprogrammingpatterns.com/&lt;/a&gt;  (free web, paid pdf/print) or book Design Patterns by Erich Gamma (this is my favorite, old book - 30 years old, still in sale).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgafp6s", "score_hidden": false, "stickied": false, "created": 1492271448.0, "created_utc": 1492242648.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgah7ga", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Everybody starts with a skeleton then months go by and that skeleton is in the mud.\n\nI found the best way to clean code is go back the next day and try to read it. I have some immaculate code with spaces, new lines and stuff like that. Some friends hand me code that's so messy, unclean and cramped together. Why use 5 lines when you can put it all into one line? ... til you as a human have to read it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Everybody starts with a skeleton then months go by and that skeleton is in the mud.&lt;/p&gt;\n\n&lt;p&gt;I found the best way to clean code is go back the next day and try to read it. I have some immaculate code with spaces, new lines and stuff like that. Some friends hand me code that&amp;#39;s so messy, unclean and cramped together. Why use 5 lines when you can put it all into one line? ... til you as a human have to read it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgah7ga", "score_hidden": false, "stickied": false, "created": 1492275987.0, "created_utc": 1492247187.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgan3fh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "delorean225", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I tend to write my code with a very loose idea of what I want out of it, and then I go back after that and break it up into pieces and rewrite it so it's maintainable. That way, I know exactly what I need to have my system do before I start organizing it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I tend to write my code with a very loose idea of what I want out of it, and then I go back after that and break it up into pieces and rewrite it so it&amp;#39;s maintainable. That way, I know exactly what I need to have my system do before I start organizing it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgan3fh", "score_hidden": false, "stickied": false, "created": 1492291770.0, "created_utc": 1492262970.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_65ecte", "likes": null, "replies": "", "user_reports": [], "id": "dgasb2d", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Kawaiithulhu", "parent_id": "t3_65ecte", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Think about where you want to end up first.  Only then work towards getting there.\nWithout that you're just waving your arms around like Oprah and yelling \"Patterns!  Patterns for everyone!!\" and that's a mess.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Think about where you want to end up first.  Only then work towards getting there.\nWithout that you&amp;#39;re just waving your arms around like Oprah and yelling &amp;quot;Patterns!  Patterns for everyone!!&amp;quot; and that&amp;#39;s a mess.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dgasb2d", "score_hidden": false, "stickied": false, "created": 1492299995.0, "created_utc": 1492271195.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]