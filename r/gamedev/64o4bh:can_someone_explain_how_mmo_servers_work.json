[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "gamedev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I just can&amp;#39;t seem to wrap my head around it, so please correct me where I am thinking about this incorrectly. There are three important pieces of software working within MMOs: Client, Server, Database. I understand what the client does, and the type of data stored in a database, but where and how does the server run? &lt;/p&gt;\n\n&lt;p&gt;My understanding is that the server is a &amp;quot;middleman&amp;quot; between the client and the database. For example, let&amp;#39;s say there is a gate that the player wants to open but it is requires completion of a particular quest. The client asks the server &amp;quot;can I open this door?&amp;quot; and the server knows this entity, door A, requires quest B, so the server checks the database to see if the played has completed quest B. The server then send this message back to the client.&lt;/p&gt;\n\n&lt;p&gt;My question is - if someone host a database on, let&amp;#39;s say, Amazon Servers or Microsoft Azure, where does server program run?&lt;/p&gt;\n\n&lt;p&gt;Or am I thinking about this wrong? Would this mean the MMO operators has a computer that the client knows the ip address of and sends messages to that computer. This server machine then knows how to contact Amazon&amp;#39;s databases so it can get the info and send it back to the player. My problem with this is that it sounds super slow! I am wrong in assuming that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I just can't seem to wrap my head around it, so please correct me where I am thinking about this incorrectly. There are three important pieces of software working within MMOs: Client, Server, Database. I understand what the client does, and the type of data stored in a database, but where and how does the server run? \n\nMy understanding is that the server is a \"middleman\" between the client and the database. For example, let's say there is a gate that the player wants to open but it is requires completion of a particular quest. The client asks the server \"can I open this door?\" and the server knows this entity, door A, requires quest B, so the server checks the database to see if the played has completed quest B. The server then send this message back to the client.\n\nMy question is - if someone host a database on, let's say, Amazon Servers or Microsoft Azure, where does server program run?\n\nOr am I thinking about this wrong? Would this mean the MMO operators has a computer that the client knows the ip address of and sends messages to that computer. This server machine then knows how to contact Amazon's databases so it can get the info and send it back to the player. My problem with this is that it sounds super slow! I am wrong in assuming that?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64o4bh", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 85, "report_reasons": null, "author": "HighPaineTolerance", "saved": false, "mod_reports": [], "name": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "approved_by": null, "over_18": false, "domain": "self.gamedev", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qi0a", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/gamedev/comments/64o4bh/can_someone_explain_how_mmo_servers_work/", "num_reports": null, "locked": false, "stickied": false, "created": 1491906033.0, "url": "https://www.reddit.com/r/gamedev/comments/64o4bh/can_someone_explain_how_mmo_servers_work/", "author_flair_text": null, "quarantine": false, "title": "Can Someone Explain How MMO Servers Work?", "created_utc": 1491877233.0, "distinguished": null, "media": null, "upvote_ratio": 0.92, "num_comments": 30, "visited": false, "subreddit_type": "public", "ups": 85}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4xlnw", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "Kinrany", "parent_id": "t1_dg3v2cr", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "&gt; Well, it's a bit complicated.\n\n/thread", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Well, it&amp;#39;s a bit complicated.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;/thread&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4xlnw", "score_hidden": false, "stickied": false, "created": 1491973938.0, "created_utc": 1491945138.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg3v2cr", "gilded": 0, "archived": false, "score": 39, "report_reasons": null, "author": "defiantburrito", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Well, it's a bit complicated. Keep in mind that large MMO teams often have several dedicated engineers who devote a lot of time perfecting &amp; optimizing these things, and details can vary a lot from game to game.\n\nThe biggest piece you are missing is that there is extensive caching to avoid having to send messages all the time. Typically, the server would keep copies of all of the data it needs, and only read/write to the database when something changes. The client might *also* have a copy so it can avoid roundtrips to the server. Finally, the database itself might have an in-memory caching layer to avoid disk access, and/or, to keep the data \"closer\" to the game servers. (Meaning, same machine or data center)\n\nSo, a complete copy of your quest history (and everything else about your character) might exist in 4 places:\n\n - Client\n - Server\n - Database cache\n - Database\n\nIt takes a significant amount of effort to synchronize data between all of these places, but depending on the game, it could be necessary for performance.\n\nIn your example, the client would know whether you can open the door without asking the server at all. The server would verify it to prevent cheating. The database would not be involved at all.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, it&amp;#39;s a bit complicated. Keep in mind that large MMO teams often have several dedicated engineers who devote a lot of time perfecting &amp;amp; optimizing these things, and details can vary a lot from game to game.&lt;/p&gt;\n\n&lt;p&gt;The biggest piece you are missing is that there is extensive caching to avoid having to send messages all the time. Typically, the server would keep copies of all of the data it needs, and only read/write to the database when something changes. The client might &lt;em&gt;also&lt;/em&gt; have a copy so it can avoid roundtrips to the server. Finally, the database itself might have an in-memory caching layer to avoid disk access, and/or, to keep the data &amp;quot;closer&amp;quot; to the game servers. (Meaning, same machine or data center)&lt;/p&gt;\n\n&lt;p&gt;So, a complete copy of your quest history (and everything else about your character) might exist in 4 places:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Client&lt;/li&gt;\n&lt;li&gt;Server&lt;/li&gt;\n&lt;li&gt;Database cache&lt;/li&gt;\n&lt;li&gt;Database&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It takes a significant amount of effort to synchronize data between all of these places, but depending on the game, it could be necessary for performance.&lt;/p&gt;\n\n&lt;p&gt;In your example, the client would know whether you can open the door without asking the server at all. The server would verify it to prevent cheating. The database would not be involved at all.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3v2cr", "score_hidden": false, "stickied": false, "created": 1491914161.0, "created_utc": 1491885361.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 39}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg65ws3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "AuraTummyache", "parent_id": "t1_dg5lo56", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Not necessarily.  For instance, over a regular household wifi I can host a server on one PC and connect to it from a different PC and have single digit latency back and forth.\n\nIf the two PCs were connected with a direct cable, it would be even lower, practically instant.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not necessarily.  For instance, over a regular household wifi I can host a server on one PC and connect to it from a different PC and have single digit latency back and forth.&lt;/p&gt;\n\n&lt;p&gt;If the two PCs were connected with a direct cable, it would be even lower, practically instant.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg65ws3", "score_hidden": false, "stickied": false, "created": 1492045210.0, "created_utc": 1492016410.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5lo56", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Mnemotic", "parent_id": "t1_dg3rbj4", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "&gt; When communicating with another server on the same network, the latency is near instantaneous, so even if you're talking two machines it's still very fast.\n\nIt's near instantaneous and very fast if and only if you have a large budget for specialized hardware. Otherwise it's painfully slow for anything performance critical, e.g. MMO servers.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;When communicating with another server on the same network, the latency is near instantaneous, so even if you&amp;#39;re talking two machines it&amp;#39;s still very fast.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s near instantaneous and very fast if and only if you have a large budget for specialized hardware. Otherwise it&amp;#39;s painfully slow for anything performance critical, e.g. MMO servers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg5lo56", "score_hidden": false, "stickied": false, "created": 1492010507.0, "created_utc": 1491981707.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg3rbj4", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "AuraTummyache", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "You are technically correct in your guess.  The server would be hosted on something like EC2 and would have a direct link to a database either on the same machine or on a different machine close by on the same network.  When communicating with another server on the same network, the latency is near instantaneous, so even if you're talking two machines it's still very fast.\n\nThere's also a lot of magic you can do with quick databases like Agmcleod mentioned.  Redis can store and retrieve small datasets EXTREMELY fast.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are technically correct in your guess.  The server would be hosted on something like EC2 and would have a direct link to a database either on the same machine or on a different machine close by on the same network.  When communicating with another server on the same network, the latency is near instantaneous, so even if you&amp;#39;re talking two machines it&amp;#39;s still very fast.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s also a lot of magic you can do with quick databases like Agmcleod mentioned.  Redis can store and retrieve small datasets EXTREMELY fast.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3rbj4", "score_hidden": false, "stickied": false, "created": 1491908539.0, "created_utc": 1491879739.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4f2ag", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "axilmar", "parent_id": "t1_dg4etv4", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Exactly.\n\nThis falls under point (e) (server pushing updates to the client) and (f) (taking corrective measures).\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Exactly.&lt;/p&gt;\n\n&lt;p&gt;This falls under point (e) (server pushing updates to the client) and (f) (taking corrective measures).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4f2ag", "score_hidden": false, "stickied": false, "created": 1491953600.0, "created_utc": 1491924800.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4etv4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "skinwalkerz", "parent_id": "t1_dg3zmv5", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Also if the server notices that something isn't quite right, it sends information that corrects the information that is on the client, lets say someone using speed hacks or just his internet connection is weak while the player is moving so the server has to move the player to X position. From what I know the client's visuals are always ahead of the server but then once he sends the info the server decides if that valid or needs to be set to something else", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also if the server notices that something isn&amp;#39;t quite right, it sends information that corrects the information that is on the client, lets say someone using speed hacks or just his internet connection is weak while the player is moving so the server has to move the player to X position. From what I know the client&amp;#39;s visuals are always ahead of the server but then once he sends the info the server decides if that valid or needs to be set to something else&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4etv4", "score_hidden": false, "stickied": false, "created": 1491953336.0, "created_utc": 1491924536.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg3zmv5", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "axilmar", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Mmos work like this:\n\na) the server consists of one or more machines, with each machine running a part of the game.\n\nb) clients run their own version of tbe game centered around the player.\n\nc) server machines and clients talk between themselves by exchanging messages.\n\nd) the client talks to the server in order to get updates about the state of the world. \n\ne) the server machines push updates about the world to the clients.\n\nf) the servers do all the needed checks and validate the state of the game, take corrective measures etc.\n\ng) the servers talk to some databases for the game's persistence.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mmos work like this:&lt;/p&gt;\n\n&lt;p&gt;a) the server consists of one or more machines, with each machine running a part of the game.&lt;/p&gt;\n\n&lt;p&gt;b) clients run their own version of tbe game centered around the player.&lt;/p&gt;\n\n&lt;p&gt;c) server machines and clients talk between themselves by exchanging messages.&lt;/p&gt;\n\n&lt;p&gt;d) the client talks to the server in order to get updates about the state of the world. &lt;/p&gt;\n\n&lt;p&gt;e) the server machines push updates about the world to the clients.&lt;/p&gt;\n\n&lt;p&gt;f) the servers do all the needed checks and validate the state of the game, take corrective measures etc.&lt;/p&gt;\n\n&lt;p&gt;g) the servers talk to some databases for the game&amp;#39;s persistence.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3zmv5", "score_hidden": false, "stickied": false, "created": 1491924031.0, "created_utc": 1491895231.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4yp52", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Arandmoor", "parent_id": "t1_dg4x3zj", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "So, interpolation is used to smooth the correction over time so that the correction is not jarring.\n\nThere are three ways to solve a de-sync:\n\n1) If the server has authority, it simply tells the client where the player should be, and the player is harshly teleported there. If the client has a different directional velocity than the server, and that is not corrected as well, you get rubber-banding because you keep moving in your old direction on your screen, but the server repeatedly tells you that you're not where you see yourself because your velocity on the server is zero (happens when your forward movement commands gets lost due to packet loss).\n\n2) If you trust the client, you simply update their position in the server simulation (don't do this. Don't ever do this.)\n\n3) If you're reasonably confident that the player isn't trying to cheat, and the player's client position is reasonable (there's no impossible movement involved) you simply tell the server to correct it's position over time to the position the player is telling you they're at. This correction of one position into another is \"interpolation\" in this particular case (it's a more broad term than that, but it's accurate).\n\nIn case 3, what happens is that as long as the player's reported position is possible and legal, the server will correct the position it shows to everyone *else* gradually over time until it matches with the client's reported position. The player gets the benefit of an authoritative client, without actually getting any client authority, and the server can maintain authority while giving the clients enough leeway that they can deliver a smooth experience to the player. It's a compromise.\n\nAs for exactly what interpolation does here on the server...\n\nSay you were at a point in space 1 second ago. Point A.  \nYou are now at Point B X distance to the right (you were strafing).  \nThe server sees you, not at point B, but at point AB about half-way between point A and B due to some packet loss over the last second.\n\nA --- AB --- B\n\nNow, the server knows you're de-sync'd, but we don't want to teleport you directly to point AB because that would be jarring and would piss you off, and we're also not about to just update your simulation position from AB to B because the server is the authority here, and your client can go fuck itself with its incorrect position bullshit. So we don't. Instead we start to correct your position as permitted until you are re-synced.\n\nSo, in the next second you shift direction and head straight ahead towards point C. There is no packet loss this second as everything is fine over the network.\n\nWe use interpolation to combine your direction of travel *on the server* so that your path from our simulated position at AB will move towards point C by cutting the corner as long as the AB &lt;--&gt; C path is legal.\n\n                     C\n                   / |\n                 AC  |\n                 /   |\n    A  ---  AB  ---  B (close enough)\n\nMeanwhile, on the player's screen, they're following the B &lt;--&gt; C path none the wiser that they're not actually where they think they are. Then, when both the player and the sim hit C, they are back in sync.\n\nAs for the player stopping mid-correction, well interpolation requires motion to correct de-sync. If you stop mid-correction, you also stop the correction. Usually, what will happen is that, quite simply, the server will continue moving you on everyone else's screen until the correction is complete.\n\nIf you play Overwatch, this is part of the reason for Hanzo's \"logs\". The target will see the arrow cleanly miss. However, due to a few packets lost at just the right time, he's not where he sees himself on the server, which allows the arrow to connect, and the kill to be scored by the shooter. It's called shooter's advantage. Positioning isn't as vital in MMOs, so all you have to worry about is rubber banding or teleporting if connections go completely to shit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So, interpolation is used to smooth the correction over time so that the correction is not jarring.&lt;/p&gt;\n\n&lt;p&gt;There are three ways to solve a de-sync:&lt;/p&gt;\n\n&lt;p&gt;1) If the server has authority, it simply tells the client where the player should be, and the player is harshly teleported there. If the client has a different directional velocity than the server, and that is not corrected as well, you get rubber-banding because you keep moving in your old direction on your screen, but the server repeatedly tells you that you&amp;#39;re not where you see yourself because your velocity on the server is zero (happens when your forward movement commands gets lost due to packet loss).&lt;/p&gt;\n\n&lt;p&gt;2) If you trust the client, you simply update their position in the server simulation (don&amp;#39;t do this. Don&amp;#39;t ever do this.)&lt;/p&gt;\n\n&lt;p&gt;3) If you&amp;#39;re reasonably confident that the player isn&amp;#39;t trying to cheat, and the player&amp;#39;s client position is reasonable (there&amp;#39;s no impossible movement involved) you simply tell the server to correct it&amp;#39;s position over time to the position the player is telling you they&amp;#39;re at. This correction of one position into another is &amp;quot;interpolation&amp;quot; in this particular case (it&amp;#39;s a more broad term than that, but it&amp;#39;s accurate).&lt;/p&gt;\n\n&lt;p&gt;In case 3, what happens is that as long as the player&amp;#39;s reported position is possible and legal, the server will correct the position it shows to everyone &lt;em&gt;else&lt;/em&gt; gradually over time until it matches with the client&amp;#39;s reported position. The player gets the benefit of an authoritative client, without actually getting any client authority, and the server can maintain authority while giving the clients enough leeway that they can deliver a smooth experience to the player. It&amp;#39;s a compromise.&lt;/p&gt;\n\n&lt;p&gt;As for exactly what interpolation does here on the server...&lt;/p&gt;\n\n&lt;p&gt;Say you were at a point in space 1 second ago. Point A.&lt;br/&gt;\nYou are now at Point B X distance to the right (you were strafing).&lt;br/&gt;\nThe server sees you, not at point B, but at point AB about half-way between point A and B due to some packet loss over the last second.&lt;/p&gt;\n\n&lt;p&gt;A --- AB --- B&lt;/p&gt;\n\n&lt;p&gt;Now, the server knows you&amp;#39;re de-sync&amp;#39;d, but we don&amp;#39;t want to teleport you directly to point AB because that would be jarring and would piss you off, and we&amp;#39;re also not about to just update your simulation position from AB to B because the server is the authority here, and your client can go fuck itself with its incorrect position bullshit. So we don&amp;#39;t. Instead we start to correct your position as permitted until you are re-synced.&lt;/p&gt;\n\n&lt;p&gt;So, in the next second you shift direction and head straight ahead towards point C. There is no packet loss this second as everything is fine over the network.&lt;/p&gt;\n\n&lt;p&gt;We use interpolation to combine your direction of travel &lt;em&gt;on the server&lt;/em&gt; so that your path from our simulated position at AB will move towards point C by cutting the corner as long as the AB &amp;lt;--&amp;gt; C path is legal.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                 C\n               / |\n             AC  |\n             /   |\nA  ---  AB  ---  B (close enough)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Meanwhile, on the player&amp;#39;s screen, they&amp;#39;re following the B &amp;lt;--&amp;gt; C path none the wiser that they&amp;#39;re not actually where they think they are. Then, when both the player and the sim hit C, they are back in sync.&lt;/p&gt;\n\n&lt;p&gt;As for the player stopping mid-correction, well interpolation requires motion to correct de-sync. If you stop mid-correction, you also stop the correction. Usually, what will happen is that, quite simply, the server will continue moving you on everyone else&amp;#39;s screen until the correction is complete.&lt;/p&gt;\n\n&lt;p&gt;If you play Overwatch, this is part of the reason for Hanzo&amp;#39;s &amp;quot;logs&amp;quot;. The target will see the arrow cleanly miss. However, due to a few packets lost at just the right time, he&amp;#39;s not where he sees himself on the server, which allows the arrow to connect, and the kill to be scored by the shooter. It&amp;#39;s called shooter&amp;#39;s advantage. Positioning isn&amp;#39;t as vital in MMOs, so all you have to worry about is rubber banding or teleporting if connections go completely to shit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4yp52", "score_hidden": false, "stickied": false, "created": 1491975258.0, "created_utc": 1491946458.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4x3zj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "tufflax", "parent_id": "t1_dg4td3m", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I know. My question was rhetorical. Sorry.\n\n&gt; but on the server as well (in the case where the player stops before the correction can be completed).\n\nWhy would I need interpolation on the server? I don't get it. And if the player is somewhere he is not supposed to be, and the server starts telling him, what does the player stopping after that do?\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know. My question was rhetorical. Sorry.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;but on the server as well (in the case where the player stops before the correction can be completed).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Why would I need interpolation on the server? I don&amp;#39;t get it. And if the player is somewhere he is not supposed to be, and the server starts telling him, what does the player stopping after that do?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4x3zj", "score_hidden": false, "stickied": false, "created": 1491973354.0, "created_utc": 1491944554.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4td3m", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Arandmoor", "parent_id": "t1_dg4nsi9", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "It's not interpolation that fixes rubber banding. Rather, there are strategies you can use that *involve* interpolation to reduce the *noticeable effect* of de-sync.\n\nRubber-banding is just de-synchronization of your position on your client with your position on the server, specifically when the server has authority over your client (which it should). The rubber-banding itself is the server telling your client, \"Hey, that position you sent me is incorrect. I have you &lt;here&gt;. Please fix your shit because it's wrong,\" and your client simply going, \"OK! Teleporting the player &lt;here&gt;!\"\n\nInterpolation can be used to fix that more smoothly by updating the player's position over time rather than teleporting them instantly, not just on the client, but on the server as well (in the case where the player stops before the correction can be completed).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not interpolation that fixes rubber banding. Rather, there are strategies you can use that &lt;em&gt;involve&lt;/em&gt; interpolation to reduce the &lt;em&gt;noticeable effect&lt;/em&gt; of de-sync.&lt;/p&gt;\n\n&lt;p&gt;Rubber-banding is just de-synchronization of your position on your client with your position on the server, specifically when the server has authority over your client (which it should). The rubber-banding itself is the server telling your client, &amp;quot;Hey, that position you sent me is incorrect. I have you &amp;lt;here&amp;gt;. Please fix your shit because it&amp;#39;s wrong,&amp;quot; and your client simply going, &amp;quot;OK! Teleporting the player &amp;lt;here&amp;gt;!&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;Interpolation can be used to fix that more smoothly by updating the player&amp;#39;s position over time rather than teleporting them instantly, not just on the client, but on the server as well (in the case where the player stops before the correction can be completed).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4td3m", "score_hidden": false, "stickied": false, "created": 1491969154.0, "created_utc": 1491940354.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4wi4e", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "tufflax", "parent_id": "t1_dg4qenz", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Your text above does not describe the same scenario as was described by kulseran. And it doesn't even mention anything about rubber-banding. And my question was rhetorical.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your text above does not describe the same scenario as was described by kulseran. And it doesn&amp;#39;t even mention anything about rubber-banding. And my question was rhetorical.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4wi4e", "score_hidden": false, "stickied": false, "created": 1491972652.0, "created_utc": 1491943852.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4qenz", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg4nsi9", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4qenz", "score_hidden": false, "stickied": false, "created": 1491965987.0, "created_utc": 1491937187.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4nsi9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "tufflax", "parent_id": "t1_dg45ehh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "How does interpolation fix the rubber band effect in the case described?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How does interpolation fix the rubber band effect in the case described?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4nsi9", "score_hidden": false, "stickied": false, "created": 1491963163.0, "created_utc": 1491934363.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg552t1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kulseran", "parent_id": "t1_dg45ehh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "1) Only with regard to movement.  Clients will fake other transactional events locally (like trades, casting of spells, etc.) so that you'll think the cast was instintanious.\n\n2) Interpolation isn't a fix for it, it's a mitigation. You can still rubber band and see other latency effects even in a game with good latency mitigation strategies.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;1) Only with regard to movement.  Clients will fake other transactional events locally (like trades, casting of spells, etc.) so that you&amp;#39;ll think the cast was instintanious.&lt;/p&gt;\n\n&lt;p&gt;2) Interpolation isn&amp;#39;t a fix for it, it&amp;#39;s a mitigation. You can still rubber band and see other latency effects even in a game with good latency mitigation strategies.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg552t1", "score_hidden": false, "stickied": false, "created": 1491983528.0, "created_utc": 1491954728.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg45ehh", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg3v5b5", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg45ehh", "score_hidden": false, "stickied": false, "created": 1491940320.0, "created_utc": 1491911520.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg3v5b5", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "kulseran", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "A better way to think about it, is if the game is just running remotely on another machine.  Pick up any game with a dedicated server (like minecraft, space engineers, counterstrike, etc.) and you'll see all the parts in action the same way.\n\nThe client is typically really dumb. It doesn't do anything other than relay your keyboard input to the remote server. It then waits for the remote server to run the game, and relay back what happened in response to your inputs.  To hide the latency, the client will fake performing the actions locally until it gets confirmation from the server that your action actually happened (or didn't, and you \"rubber band\" back to where you were several seconds ago).\n\nThe sever is where everything is happening. Effectively all the game logic is happening here, be that movement, or actions.  If there's some persistent state, that occasionally gets synced out to some sort of persistent storage. That could be a database transaction for important events (like inventory management), or for smaller games, just regular auto-saves of the game world.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A better way to think about it, is if the game is just running remotely on another machine.  Pick up any game with a dedicated server (like minecraft, space engineers, counterstrike, etc.) and you&amp;#39;ll see all the parts in action the same way.&lt;/p&gt;\n\n&lt;p&gt;The client is typically really dumb. It doesn&amp;#39;t do anything other than relay your keyboard input to the remote server. It then waits for the remote server to run the game, and relay back what happened in response to your inputs.  To hide the latency, the client will fake performing the actions locally until it gets confirmation from the server that your action actually happened (or didn&amp;#39;t, and you &amp;quot;rubber band&amp;quot; back to where you were several seconds ago).&lt;/p&gt;\n\n&lt;p&gt;The sever is where everything is happening. Effectively all the game logic is happening here, be that movement, or actions.  If there&amp;#39;s some persistent state, that occasionally gets synced out to some sort of persistent storage. That could be a database transaction for important events (like inventory management), or for smaller games, just regular auto-saves of the game world.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3v5b5", "score_hidden": false, "stickied": false, "created": 1491914300.0, "created_utc": 1491885500.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4g224", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "RemyArmstro", "parent_id": "t1_dg4fcp0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I think you'd be surprised. I think most game servers send some data back and forth each game loop (otherwise you run into more serious correction issues).  It sounds like a lot (and it kind of is), but with sockets you aren't dealing with the handshake overhead. Also, you only send the smallest amount of data needed.  From the client, it is only inputs.  From the server, it is only diff'ed display metadata.  The size of the data going back and forth each time is surprisingly small.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think you&amp;#39;d be surprised. I think most game servers send some data back and forth each game loop (otherwise you run into more serious correction issues).  It sounds like a lot (and it kind of is), but with sockets you aren&amp;#39;t dealing with the handshake overhead. Also, you only send the smallest amount of data needed.  From the client, it is only inputs.  From the server, it is only diff&amp;#39;ed display metadata.  The size of the data going back and forth each time is surprisingly small.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4g224", "score_hidden": false, "stickied": false, "created": 1491954703.0, "created_utc": 1491925903.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4srmv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Shanksblood", "parent_id": "t1_dg4fcp0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "It depends on the type of game and how many players will be needed. If you're doing a very twitchy game with limited players then broadcasting a 'snapshot' of the game per tick is pretty common. This would be mostly applicable to games like mobas or FPS' where player count is relatively low. There's a large amount of tricks to keep your snapshot data minimal: showing what's changed since the last confirmed update the client received so it can interpolate on its own for example, a 'isChanged' bit for objects so that you dont need to send redundant data, compressing data based on your app specific needs, etc. \n\nTraditional MMOs do less of this due to scalability but that's because most of those games dont give a crap about responsiveness and 'perfect matching' of visuals between clients. It depends on the design of the game you're making.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It depends on the type of game and how many players will be needed. If you&amp;#39;re doing a very twitchy game with limited players then broadcasting a &amp;#39;snapshot&amp;#39; of the game per tick is pretty common. This would be mostly applicable to games like mobas or FPS&amp;#39; where player count is relatively low. There&amp;#39;s a large amount of tricks to keep your snapshot data minimal: showing what&amp;#39;s changed since the last confirmed update the client received so it can interpolate on its own for example, a &amp;#39;isChanged&amp;#39; bit for objects so that you dont need to send redundant data, compressing data based on your app specific needs, etc. &lt;/p&gt;\n\n&lt;p&gt;Traditional MMOs do less of this due to scalability but that&amp;#39;s because most of those games dont give a crap about responsiveness and &amp;#39;perfect matching&amp;#39; of visuals between clients. It depends on the design of the game you&amp;#39;re making.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4srmv", "score_hidden": false, "stickied": false, "created": 1491968514.0, "created_utc": 1491939714.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4fcp0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Dirty_Rapscallion", "parent_id": "t1_dg3q4zi", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I feel like you'd overload your bandwidth pretty fast if you're broadcasting on every game loop update.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like you&amp;#39;d overload your bandwidth pretty fast if you&amp;#39;re broadcasting on every game loop update.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4fcp0", "score_hidden": false, "stickied": false, "created": 1491953925.0, "created_utc": 1491925125.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg3q4zi", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "RemyArmstro", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "This is my setup:\n\n- Web server runs on Windows Azure (ASP.NET).\n- State data is stored in DocumentDB in Azure.\n- Client is an HTML client using Phaser.io.\n\nThe client is stupid simple.  It takes inputs and sends them to the server via socket connection.  Then the server runs a game loop that updates the game state.  At the end of the loop, the updated state is broadcast to the clients. I am not currently doing any client side prediction/interpolation. Since the game I am building is not very \"twitchy\", it has actually felt smooth in initial test runs.\n\nAs far as instances work, each area is registered with url in a data file.  When you sign in from the entry server, it then determines where your character is and sets up a socket connection with that server instance to communicate.  If you switch areas, it closes that socket and opens a new one with the server the new instance is located on. One server typically has several instances on it, but that is not always necessarily the case.\n\nAlso, just a point of clarification.  Each instance loads state data from DocumentDB on warm up, and then periodically (about every minute or so) saves that state back to DocumentDB.  Beyond that, there is very little ongoing persistent data communication going on while the game itself is running.  Hope this helps.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is my setup:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Web server runs on Windows Azure (ASP.NET).&lt;/li&gt;\n&lt;li&gt;State data is stored in DocumentDB in Azure.&lt;/li&gt;\n&lt;li&gt;Client is an HTML client using Phaser.io.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The client is stupid simple.  It takes inputs and sends them to the server via socket connection.  Then the server runs a game loop that updates the game state.  At the end of the loop, the updated state is broadcast to the clients. I am not currently doing any client side prediction/interpolation. Since the game I am building is not very &amp;quot;twitchy&amp;quot;, it has actually felt smooth in initial test runs.&lt;/p&gt;\n\n&lt;p&gt;As far as instances work, each area is registered with url in a data file.  When you sign in from the entry server, it then determines where your character is and sets up a socket connection with that server instance to communicate.  If you switch areas, it closes that socket and opens a new one with the server the new instance is located on. One server typically has several instances on it, but that is not always necessarily the case.&lt;/p&gt;\n\n&lt;p&gt;Also, just a point of clarification.  Each instance loads state data from DocumentDB on warm up, and then periodically (about every minute or so) saves that state back to DocumentDB.  Beyond that, there is very little ongoing persistent data communication going on while the game itself is running.  Hope this helps.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3q4zi", "score_hidden": false, "stickied": false, "created": 1491907040.0, "created_utc": 1491878240.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4mwi9", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "stcredzero", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Here is how my MMO engine currently works. Caveat: My MMO engine was built by a single person, so it uses a \"low hanging fruit\" design philosophy. Everything emphasizes simplicity and security. \n\nI have a \"master server\" running on Amazon EC2 that supervises a collection of \"worker servers.\" The master server handles login and coordinates between the client (which is Javascript and runs in the browser) and a chosen \"worker.\" After login, the master tells the worker to expect a login from a particular userid, and this authorization is open for a few seconds. The master then tells the client to log in to a worker server at a certain port number. \n\nTo keep things simple and secure, my architecture is client-server/server-always-wins. The worker server authoritatively simulates all game state, and updates are sent 20 times a second from the server to the client. All of the game mechanics are designed to be forgiving of lag. The client uses a \"second order\" sync, so a positional error is calculated, then for the next 3 frames, a correction velocity is introduced that gets each ship on the client 65% closer to the correct position.\n\nThere is a separate database server which Amazon RDS maintains for me. Database is only updated when a player enters or leaves a star system, so that when the player logs in again, they maintain their location in the universe. Most of the data updates are only done in-memory and within each worker server to save time/bandwidth.\n\nhttps://www.emergencevector.com\n\nEDIT: I am thinking of extending my system so that it encompasses a scripting language and developer/admin logins for a game. Then a gamedev can establish an account with an already live, running game, which they can then morph into the game they want to develop through live code changes.\n\nEDIT: I note a pattern of other devs saying their client is \"stupid simple.\" There is a very good reason for this. Keeping as much of the work as possible on the server makes the game more secure. You can't trust *anything* on the client! Keeping as much of the work as possible on the client also makes the code easier to write. Things are going to be complicated a lot by multiplayer.\n\nFPS games with very fast mechanics are rocket science, and require client-side simulation. [That stuff is rocket science, and you will never, ever cover 100% of the edge cases.](https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking) (Even AAA teams can't do that, even after years of work.) But other types of games can be designed which work around lag, making it invisible to the user. ", "edited": 1491934013.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is how my MMO engine currently works. Caveat: My MMO engine was built by a single person, so it uses a &amp;quot;low hanging fruit&amp;quot; design philosophy. Everything emphasizes simplicity and security. &lt;/p&gt;\n\n&lt;p&gt;I have a &amp;quot;master server&amp;quot; running on Amazon EC2 that supervises a collection of &amp;quot;worker servers.&amp;quot; The master server handles login and coordinates between the client (which is Javascript and runs in the browser) and a chosen &amp;quot;worker.&amp;quot; After login, the master tells the worker to expect a login from a particular userid, and this authorization is open for a few seconds. The master then tells the client to log in to a worker server at a certain port number. &lt;/p&gt;\n\n&lt;p&gt;To keep things simple and secure, my architecture is client-server/server-always-wins. The worker server authoritatively simulates all game state, and updates are sent 20 times a second from the server to the client. All of the game mechanics are designed to be forgiving of lag. The client uses a &amp;quot;second order&amp;quot; sync, so a positional error is calculated, then for the next 3 frames, a correction velocity is introduced that gets each ship on the client 65% closer to the correct position.&lt;/p&gt;\n\n&lt;p&gt;There is a separate database server which Amazon RDS maintains for me. Database is only updated when a player enters or leaves a star system, so that when the player logs in again, they maintain their location in the universe. Most of the data updates are only done in-memory and within each worker server to save time/bandwidth.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.emergencevector.com\"&gt;https://www.emergencevector.com&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT: I am thinking of extending my system so that it encompasses a scripting language and developer/admin logins for a game. Then a gamedev can establish an account with an already live, running game, which they can then morph into the game they want to develop through live code changes.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I note a pattern of other devs saying their client is &amp;quot;stupid simple.&amp;quot; There is a very good reason for this. Keeping as much of the work as possible on the server makes the game more secure. You can&amp;#39;t trust &lt;em&gt;anything&lt;/em&gt; on the client! Keeping as much of the work as possible on the client also makes the code easier to write. Things are going to be complicated a lot by multiplayer.&lt;/p&gt;\n\n&lt;p&gt;FPS games with very fast mechanics are rocket science, and require client-side simulation. &lt;a href=\"https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking\"&gt;That stuff is rocket science, and you will never, ever cover 100% of the edge cases.&lt;/a&gt; (Even AAA teams can&amp;#39;t do that, even after years of work.) But other types of games can be designed which work around lag, making it invisible to the user. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4mwi9", "score_hidden": false, "stickied": false, "created": 1491962181.0, "created_utc": 1491933381.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg3q6xf", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "agmcleod", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Assuming AWS for a second, the server could run on ec2, or opsworks while the data lives in RDS. Yes it would have to check the data for game state like that, but you an make it fast by using things like memcache or Redis, so accessing that data doesn't hit the disk as much.then use rds as long terms storage ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Assuming AWS for a second, the server could run on ec2, or opsworks while the data lives in RDS. Yes it would have to check the data for game state like that, but you an make it fast by using things like memcache or Redis, so accessing that data doesn&amp;#39;t hit the disk as much.then use rds as long terms storage &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg3q6xf", "score_hidden": false, "stickied": false, "created": 1491907105.0, "created_utc": 1491878305.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg409m3", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "LORD_STABULON", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "You could sort of think of the server as running a single player game without any graphics, but many characters.  Each client sends requests for the server to move a character around and do things.  Once the thing is done, the server lets the client know that it happened.\n\nLag is reduced by the client assuming that the request was successful, but when the server comes back with conflicting data (the client expected the server to move the character forward X steps but they only moved X-1) then the client has no choice but to snap back into sync with what the server says.\n\nThat's just a crappy TLDR of multiplayer gaming though.  MMOs have to deal with a \"massive\" number of players, so they employ different techniques to overcome the technical limitations.\n\nCheck out improbable.io for a pretty cool glimpse at the future.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could sort of think of the server as running a single player game without any graphics, but many characters.  Each client sends requests for the server to move a character around and do things.  Once the thing is done, the server lets the client know that it happened.&lt;/p&gt;\n\n&lt;p&gt;Lag is reduced by the client assuming that the request was successful, but when the server comes back with conflicting data (the client expected the server to move the character forward X steps but they only moved X-1) then the client has no choice but to snap back into sync with what the server says.&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s just a crappy TLDR of multiplayer gaming though.  MMOs have to deal with a &amp;quot;massive&amp;quot; number of players, so they employ different techniques to overcome the technical limitations.&lt;/p&gt;\n\n&lt;p&gt;Check out improbable.io for a pretty cool glimpse at the future.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg409m3", "score_hidden": false, "stickied": false, "created": 1491925804.0, "created_utc": 1491897004.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg417nk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Merosi", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "&gt; and the server knows this entity, door A, requires quest B,\n\nno, the database knows the prereqs for the door, it's the server who interprets that data and opens the door.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;and the server knows this entity, door A, requires quest B,&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;no, the database knows the prereqs for the door, it&amp;#39;s the server who interprets that data and opens the door.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg417nk", "score_hidden": false, "stickied": false, "created": 1491928655.0, "created_utc": 1491899855.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg477zo", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "icebeat", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Take a look at https://github.com/mangoszero/server. It is an open source World of warcraft server.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take a look at &lt;a href=\"https://github.com/mangoszero/server\"&gt;https://github.com/mangoszero/server&lt;/a&gt;. It is an open source World of warcraft server.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg477zo", "score_hidden": false, "stickied": false, "created": 1491943609.0, "created_utc": 1491914809.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg44l5x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "DolphinsAreOk", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I'd forget about databases, in your example the database is the server. We normally talk about client-server architecture etc.\n\nThe server is a program running on a central computer, perhaps in an amazon warehouse or whatever. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d forget about databases, in your example the database is the server. We normally talk about client-server architecture etc.&lt;/p&gt;\n\n&lt;p&gt;The server is a program running on a central computer, perhaps in an amazon warehouse or whatever. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg44l5x", "score_hidden": false, "stickied": false, "created": 1491938516.0, "created_utc": 1491909716.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4r3gz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "hyliandev", "parent_id": "t1_dg4n1op", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "I'm professionally a web developer. I haven't made the jump to being a professional game developer yet; I won't call myself that until I form my entity haha.\n\nInterestingly, I've been making games longer than I've been making websites; 10 years vs about 8 or 9 years.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m professionally a web developer. I haven&amp;#39;t made the jump to being a professional game developer yet; I won&amp;#39;t call myself that until I form my entity haha.&lt;/p&gt;\n\n&lt;p&gt;Interestingly, I&amp;#39;ve been making games longer than I&amp;#39;ve been making websites; 10 years vs about 8 or 9 years.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4r3gz", "score_hidden": false, "stickied": false, "created": 1491966711.0, "created_utc": 1491937911.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4n1op", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "JonnyRocks", "parent_id": "t1_dg4efi9", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "off topic Segway:\n\nHave you always been a web developer?  Before working on games I spent many years in enterprise and a lot of web work but its never been siloed to just web. I started before the web and the way I approached non-web and web is different. The stateless nature of http being one.\n\nBut I have never seen someone say, I am just a web developer. Is your game dev work all web based as well?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;off topic Segway:&lt;/p&gt;\n\n&lt;p&gt;Have you always been a web developer?  Before working on games I spent many years in enterprise and a lot of web work but its never been siloed to just web. I started before the web and the way I approached non-web and web is different. The stateless nature of http being one.&lt;/p&gt;\n\n&lt;p&gt;But I have never seen someone say, I am just a web developer. Is your game dev work all web based as well?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4n1op", "score_hidden": false, "stickied": false, "created": 1491962342.0, "created_utc": 1491933542.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4efi9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "hyliandev", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "There are intricacies to how you'd do it with something as high-traffic, heavy-load as an MMO, but your question seems to be generally about how servers work?\n\nI'm a web developer, so here's my non-MMO-specific answer:\n\nYou can download Google Chrome and XAMPP and *boom*, your computer will have the Client, Server, and Database on it. All three can be on the same computer if you want. The server is just a software running on a computer that listens for whenever a client tries to access its IP address.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are intricacies to how you&amp;#39;d do it with something as high-traffic, heavy-load as an MMO, but your question seems to be generally about how servers work?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m a web developer, so here&amp;#39;s my non-MMO-specific answer:&lt;/p&gt;\n\n&lt;p&gt;You can download Google Chrome and XAMPP and &lt;em&gt;boom&lt;/em&gt;, your computer will have the Client, Server, and Database on it. All three can be on the same computer if you want. The server is just a software running on a computer that listens for whenever a client tries to access its IP address.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4efi9", "score_hidden": false, "stickied": false, "created": 1491952902.0, "created_utc": 1491924102.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4o4u7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mallenjordan", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "The only simple starting way to picture the way a large game server and client setup works is..\n\nThe client is a dumb rendering engine.\n\nIt keeps the images and basic rendering ability.\n\nCollects user input and submits to the server.\n\n\nThe server is a true game engine.\n\nKeeps a database, memory management, runs the game loop and updates and communicates between all clients and other servers to keep data congruent.\n\n\nThere is so much more going on than this simple explanation.\n\nBut that is the basic overall picture.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The only simple starting way to picture the way a large game server and client setup works is..&lt;/p&gt;\n\n&lt;p&gt;The client is a dumb rendering engine.&lt;/p&gt;\n\n&lt;p&gt;It keeps the images and basic rendering ability.&lt;/p&gt;\n\n&lt;p&gt;Collects user input and submits to the server.&lt;/p&gt;\n\n&lt;p&gt;The server is a true game engine.&lt;/p&gt;\n\n&lt;p&gt;Keeps a database, memory management, runs the game loop and updates and communicates between all clients and other servers to keep data congruent.&lt;/p&gt;\n\n&lt;p&gt;There is so much more going on than this simple explanation.&lt;/p&gt;\n\n&lt;p&gt;But that is the basic overall picture.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4o4u7", "score_hidden": false, "stickied": false, "created": 1491963542.0, "created_utc": 1491934742.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64o4bh", "likes": null, "replies": "", "user_reports": [], "id": "dg4zmtx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Balnian", "parent_id": "t3_64o4bh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "This is pretty much all what you will need, the book is not finished but it's still one of the best ressource out there:\nhttp://ithare.com/contents-of-development-and-deployment-of-massively-multiplayer-games-from-social-games-to-mmofps-with-stock-exchanges-in-between/#toc", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is pretty much all what you will need, the book is not finished but it&amp;#39;s still one of the best ressource out there:\n&lt;a href=\"http://ithare.com/contents-of-development-and-deployment-of-massively-multiplayer-games-from-social-games-to-mmofps-with-stock-exchanges-in-between/#toc\"&gt;http://ithare.com/contents-of-development-and-deployment-of-massively-multiplayer-games-from-social-games-to-mmofps-with-stock-exchanges-in-between/#toc&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg4zmtx", "score_hidden": false, "stickied": false, "created": 1491976386.0, "created_utc": 1491947586.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]