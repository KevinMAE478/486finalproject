[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "gamedev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey there people! &lt;/p&gt;\n\n&lt;p&gt;For some time I&amp;#39;ve been using nodejs and socket.io for my game, yet I want to know what the fastest way for realtime communication is.\nI am already going to ditch socket.io for pure TCP sockets since the game is written in C# in unity and using pure TCP feels more natural. \nIs NodeJS fast enough for large scale FPS games, or do you recommend something more native?\nAlso, when I am sending data from nodejs to unity I use JSON for ease of use. How much of an performance impact is it when I do this while sending positions every tick? What could be a better solution for this?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey there people! \n\nFor some time I've been using nodejs and socket.io for my game, yet I want to know what the fastest way for realtime communication is.\nI am already going to ditch socket.io for pure TCP sockets since the game is written in C# in unity and using pure TCP feels more natural. \nIs NodeJS fast enough for large scale FPS games, or do you recommend something more native?\nAlso, when I am sending data from nodejs to unity I use JSON for ease of use. How much of an performance impact is it when I do this while sending positions every tick? What could be a better solution for this?\n\nThanks in advance!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64xgj0", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 10, "report_reasons": null, "author": "pascalkiller", "saved": false, "mod_reports": [], "name": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "approved_by": null, "over_18": false, "domain": "self.gamedev", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qi0a", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/gamedev/comments/64xgj0/what_is_the_fastest_method_for_game_networking/", "num_reports": null, "locked": false, "stickied": false, "created": 1492023940.0, "url": "https://www.reddit.com/r/gamedev/comments/64xgj0/what_is_the_fastest_method_for_game_networking/", "author_flair_text": null, "quarantine": false, "title": "What is the fastest method for game networking?", "created_utc": 1491995140.0, "distinguished": null, "media": null, "upvote_ratio": 0.74, "num_comments": 25, "visited": false, "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg74yf8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg6svfy", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Hmm okay, thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hmm okay, thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg74yf8", "score_hidden": false, "stickied": false, "created": 1492086196.0, "created_utc": 1492057396.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6svfy", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "IDidntChooseUsername", "parent_id": "t1_dg65g1t", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Pretty much any of them? C++, Rust, Node.js, Python, Erlang... I can't think of one that *wouldn't* work well on Linux.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pretty much any of them? C++, Rust, Node.js, Python, Erlang... I can&amp;#39;t think of one that &lt;em&gt;wouldn&amp;#39;t&lt;/em&gt; work well on Linux.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6svfy", "score_hidden": false, "stickied": false, "created": 1492070503.0, "created_utc": 1492041703.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg65g1t", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg64cw7", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "What I meant was what programming language or platform would be best to build to software on other than c# that can run on linux", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What I meant was what programming language or platform would be best to build to software on other than c# that can run on linux&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg65g1t", "score_hidden": false, "stickied": false, "created": 1492044731.0, "created_utc": 1492015931.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg64cw7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "RemyArmstro", "parent_id": "t1_dg647tw", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Not sure I understand your question.  But ultimately, you could run a .NET core service on your Linux box just fine and reuse some of your existing c# assets potentially.  Hope this helps clarify.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not sure I understand your question.  But ultimately, you could run a .NET core service on your Linux box just fine and reuse some of your existing c# assets potentially.  Hope this helps clarify.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg64cw7", "score_hidden": false, "stickied": false, "created": 1492043603.0, "created_utc": 1492014803.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg647tw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg63f7k", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Hmm, will look in that too. What could be the best alternative? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hmm, will look in that too. What could be the best alternative? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg647tw", "score_hidden": false, "stickied": false, "created": 1492043456.0, "created_utc": 1492014656.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg63f7k", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "RemyArmstro", "parent_id": "t1_dg63bx4", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "PS: [.NET Core runs on Linux](https://www.microsoft.com/net/core#windowsvs2017)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PS: &lt;a href=\"https://www.microsoft.com/net/core#windowsvs2017\"&gt;.NET Core runs on Linux&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63f7k", "score_hidden": false, "stickied": false, "created": 1492042621.0, "created_utc": 1492013821.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg63bx4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg5u334", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks! Wasn't thinking about UDP. You have a good point with the C# thing, but the server software has to run on linux. I'll investigate further into UDP now! :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! Wasn&amp;#39;t thinking about UDP. You have a good point with the C# thing, but the server software has to run on linux. I&amp;#39;ll investigate further into UDP now! :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63bx4", "score_hidden": false, "stickied": false, "created": 1492042525.0, "created_utc": 1492013725.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5u334", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "RemyArmstro", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "This may just be my ignorance, but if your game is written in C#, why wouldn't use use C# on the server (so you can reuse more things).  C# is very capable as an FPS server.  Otherwise, NodeJS is definitely capable being used as an FPS server.\n\nAlso, I am not sure how much of a performance gain you will get by switching to pure TCP over websockets. There may be a little gain, but I can't imagine much since websockets is a very light wrapper that just allows using a single port for multiple persistent client connections.  Beyond that, it is just using TCP as well. \n\nUDP is definitely probably your next step if you want a significant boost communication performance. The catch is you will have to be able to handle packets that get lost or come out of order, which can be an additional challenge.\n\nEdit: [interesting read about bandwidth optimization](http://buildnewgames.com/optimizing-websockets-bandwidth/)", "edited": 1492004012.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This may just be my ignorance, but if your game is written in C#, why wouldn&amp;#39;t use use C# on the server (so you can reuse more things).  C# is very capable as an FPS server.  Otherwise, NodeJS is definitely capable being used as an FPS server.&lt;/p&gt;\n\n&lt;p&gt;Also, I am not sure how much of a performance gain you will get by switching to pure TCP over websockets. There may be a little gain, but I can&amp;#39;t imagine much since websockets is a very light wrapper that just allows using a single port for multiple persistent client connections.  Beyond that, it is just using TCP as well. &lt;/p&gt;\n\n&lt;p&gt;UDP is definitely probably your next step if you want a significant boost communication performance. The catch is you will have to be able to handle packets that get lost or come out of order, which can be an additional challenge.&lt;/p&gt;\n\n&lt;p&gt;Edit: &lt;a href=\"http://buildnewgames.com/optimizing-websockets-bandwidth/\"&gt;interesting read about bandwidth optimization&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg5u334", "score_hidden": false, "stickied": false, "created": 1492031525.0, "created_utc": 1492002725.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg63dzx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg61bpk", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks for the tips, I'll investigate into UDP until I decide what to do :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the tips, I&amp;#39;ll investigate into UDP until I decide what to do :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63dzx", "score_hidden": false, "stickied": false, "created": 1492042586.0, "created_utc": 1492013786.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg64g1c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "richmondavid", "parent_id": "t1_dg61bpk", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "&gt; I'd strongly recommend Nginx\n\nAlso take a look at HAProxy. I have been using both in the past and I prefer HAP for load-balancing.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;d strongly recommend Nginx&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Also take a look at HAProxy. I have been using both in the past and I prefer HAP for load-balancing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg64g1c", "score_hidden": false, "stickied": false, "created": 1492043692.0, "created_utc": 1492014892.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg61bpk", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "ncgreco1440", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "If you are using NodeJS then there are a few things you have to do in order to ensure a proper server. [For one, you should be running it behind a reverse-proxy/load-balancer](https://www.nginx.com/blog/5-performance-tips-for-node-js-applications/), I'd strongly recommend Nginx. Direct communication from client to a NodeJS server isn't what NodeJS was designed for. \n\nPlus running behind a load-balancer is what will allow you that buzz term \"horizontal scaling\" if your game really blows up (10,000+ concurrent players). \n\nRegarding TCP vs UDP. UDP is faster as TCP will use buffers and use the network to the most efficiency also it has to do a round trip with it's ACK packets. UDP just puts the data right on the wire and we're off to the races. If your method of handling dropped packets winds up being slower than using TCP then you would be better off using TCP. So my best guess is use UDP when you know what you're doing, use TCP otherwise.\n\n ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you are using NodeJS then there are a few things you have to do in order to ensure a proper server. &lt;a href=\"https://www.nginx.com/blog/5-performance-tips-for-node-js-applications/\"&gt;For one, you should be running it behind a reverse-proxy/load-balancer&lt;/a&gt;, I&amp;#39;d strongly recommend Nginx. Direct communication from client to a NodeJS server isn&amp;#39;t what NodeJS was designed for. &lt;/p&gt;\n\n&lt;p&gt;Plus running behind a load-balancer is what will allow you that buzz term &amp;quot;horizontal scaling&amp;quot; if your game really blows up (10,000+ concurrent players). &lt;/p&gt;\n\n&lt;p&gt;Regarding TCP vs UDP. UDP is faster as TCP will use buffers and use the network to the most efficiency also it has to do a round trip with it&amp;#39;s ACK packets. UDP just puts the data right on the wire and we&amp;#39;re off to the races. If your method of handling dropped packets winds up being slower than using TCP then you would be better off using TCP. So my best guess is use UDP when you know what you&amp;#39;re doing, use TCP otherwise.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg61bpk", "score_hidden": false, "stickied": false, "created": 1492040346.0, "created_utc": 1492011546.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg66apc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg646h5", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Sounds good! Thanks :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sounds good! Thanks :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg66apc", "score_hidden": false, "stickied": false, "created": 1492045604.0, "created_utc": 1492016804.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg646h5", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "JonathanECG", "parent_id": "t1_dg63rqq", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Either have another channel using TCP that you send all of your guaranteed messages on or create a layer on your UDP channel that basically mimics TCP by making sure each message is ACK'd before sending the next or something along those lines.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Either have another channel using TCP that you send all of your guaranteed messages on or create a layer on your UDP channel that basically mimics TCP by making sure each message is ACK&amp;#39;d before sending the next or something along those lines.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg646h5", "score_hidden": false, "stickied": false, "created": 1492043415.0, "created_utc": 1492014615.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg63rqq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg6337g", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Sounds very logical, thanks for this great explanation! The thing is, how could I send a message to the server (and server to the client) that is ensured to be recieved?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sounds very logical, thanks for this great explanation! The thing is, how could I send a message to the server (and server to the client) that is ensured to be recieved?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63rqq", "score_hidden": false, "stickied": false, "created": 1492042988.0, "created_utc": 1492014188.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6337g", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Well I see a lot of people telling you not to use TCP, which you probably shouldn't, but they don't explain why. TCP is a protocol that guarantees that packets will be received in a specific order. That means outside your game the protocol will be making sure you don't lose any packets, as it'll notice it didn't get one then ask for it to be sent again. This is good for data where you don't want to miss a packet. But for a game that's going on in real time. You don't really care about the position you were at a minute ago, you only want the most up to date position. So having your game wait on a packet it may not even need anymore before it can process the rest of the packets is not really what you want. As now, although you have information it is becoming stale waiting on a previous packet. Even though it could probably be processed. So UDP doesn't give you that guarantee, it just sends one packet and doesn't make sure the order is correct or that the packet was even received. This is good for sending a players position, cause you know another packet will be coming soon anyway so there's no point resending old outdated data. This means you have to do some work yourself, so that if an old packet does end up coming after a newer packet. You don't update your game with the old data after you just updated it with newer data. There are libraries that add some of this functionality that you might need using UDP, such as [raknet](https://github.com/OculusVR/RakNet).", "edited": 1492013721.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well I see a lot of people telling you not to use TCP, which you probably shouldn&amp;#39;t, but they don&amp;#39;t explain why. TCP is a protocol that guarantees that packets will be received in a specific order. That means outside your game the protocol will be making sure you don&amp;#39;t lose any packets, as it&amp;#39;ll notice it didn&amp;#39;t get one then ask for it to be sent again. This is good for data where you don&amp;#39;t want to miss a packet. But for a game that&amp;#39;s going on in real time. You don&amp;#39;t really care about the position you were at a minute ago, you only want the most up to date position. So having your game wait on a packet it may not even need anymore before it can process the rest of the packets is not really what you want. As now, although you have information it is becoming stale waiting on a previous packet. Even though it could probably be processed. So UDP doesn&amp;#39;t give you that guarantee, it just sends one packet and doesn&amp;#39;t make sure the order is correct or that the packet was even received. This is good for sending a players position, cause you know another packet will be coming soon anyway so there&amp;#39;s no point resending old outdated data. This means you have to do some work yourself, so that if an old packet does end up coming after a newer packet. You don&amp;#39;t update your game with the old data after you just updated it with newer data. There are libraries that add some of this functionality that you might need using UDP, such as &lt;a href=\"https://github.com/OculusVR/RakNet\"&gt;raknet&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6337g", "score_hidden": false, "stickied": false, "created": 1492042265.0, "created_utc": 1492013465.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg6k2r9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg6jg8v", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks man! Will look into it :) ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks man! Will look into it :) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6k2r9", "score_hidden": false, "stickied": false, "created": 1492059772.0, "created_utc": 1492030972.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jg8v", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Shanksblood", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Using TCP for anything that requires quick updates is a poor choice. With a FPS the industry standard approach is to have snapshots of information sent between the client and server at a set interval (20x a second for example). With TCP if a packet containing a frame of game data is delayed or dropped it delays everything else until that first one is confirmed as received. This is not acceptable for any twitchy online game. \n\nhttp://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/\n\nThis is a fantastic article explaining why tcp is so poorly suited to fast paced online games and their site also contains a TON of details on how to streamline your networking and keep bandwidth usage as low as possible.\n\nAs others have mentioned if you're writing the game server in C#, you should probably do the same with the server to re-use code and make everything predictable. As others have mentioned .mono will work fine on linux especially given unity already uses it (or did, not sure if they finally updated .net versions yet)", "edited": 1492030497.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using TCP for anything that requires quick updates is a poor choice. With a FPS the industry standard approach is to have snapshots of information sent between the client and server at a set interval (20x a second for example). With TCP if a packet containing a frame of game data is delayed or dropped it delays everything else until that first one is confirmed as received. This is not acceptable for any twitchy online game. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/\"&gt;http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a fantastic article explaining why tcp is so poorly suited to fast paced online games and their site also contains a TON of details on how to streamline your networking and keep bandwidth usage as low as possible.&lt;/p&gt;\n\n&lt;p&gt;As others have mentioned if you&amp;#39;re writing the game server in C#, you should probably do the same with the server to re-use code and make everything predictable. As others have mentioned .mono will work fine on linux especially given unity already uses it (or did, not sure if they finally updated .net versions yet)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6jg8v", "score_hidden": false, "stickied": false, "created": 1492059082.0, "created_utc": 1492030282.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg6k3no", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg6jhu2", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6k3no", "score_hidden": false, "stickied": false, "created": 1492059801.0, "created_utc": 1492031001.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jhu2", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "rezoner", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Getting rid of socket.io in favor of uWebsockets for instance.\n\nGetting rid of JSON in favor of msgpack\n\nStructuring your data wisely, think how to send arrays of data without keys.", "edited": 1492030538.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Getting rid of socket.io in favor of uWebsockets for instance.&lt;/p&gt;\n\n&lt;p&gt;Getting rid of JSON in favor of msgpack&lt;/p&gt;\n\n&lt;p&gt;Structuring your data wisely, think how to send arrays of data without keys.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg6jhu2", "score_hidden": false, "stickied": false, "created": 1492059130.0, "created_utc": 1492030330.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg63t19", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg5t02f", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks, I will investigate further now :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks, I will investigate further now :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63t19", "score_hidden": false, "stickied": false, "created": 1492043025.0, "created_utc": 1492014225.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5t02f", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "skocznymroczny", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "TCP isn't usually the tool of choice when doing FPS games. For that you'll want UDP, although there are games that use TCP and they seem to work (also all web platform games use TCP because they don't have a choice, and the .io games can get very fastpaced at times).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TCP isn&amp;#39;t usually the tool of choice when doing FPS games. For that you&amp;#39;ll want UDP, although there are games that use TCP and they seem to work (also all web platform games use TCP because they don&amp;#39;t have a choice, and the .io games can get very fastpaced at times).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg5t02f", "score_hidden": false, "stickied": false, "created": 1492029810.0, "created_utc": 1492001010.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg66ei9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg64bfh", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks! Will look into it :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! Will look into it :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg66ei9", "score_hidden": false, "stickied": false, "created": 1492045711.0, "created_utc": 1492016911.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg64bfh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "imatworkyo", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Take a look at this - http://lance.gg/\n\nOutside of probably being directly what you need if you're working in a browser context - the documentation can enlighten you to many things.\n\nAlso  - try these tutorials @gafferongames http://gafferongames.com/networking-for-game-programmers/\n\nThis should get you in the right direction to be able to answer question on your own", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take a look at this - &lt;a href=\"http://lance.gg/\"&gt;http://lance.gg/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Outside of probably being directly what you need if you&amp;#39;re working in a browser context - the documentation can enlighten you to many things.&lt;/p&gt;\n\n&lt;p&gt;Also  - try these tutorials @gafferongames &lt;a href=\"http://gafferongames.com/networking-for-game-programmers/\"&gt;http://gafferongames.com/networking-for-game-programmers/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This should get you in the right direction to be able to answer question on your own&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg64bfh", "score_hidden": false, "stickied": false, "created": 1492043561.0, "created_utc": 1492014761.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qi0a", "removal_reason": null, "link_id": "t3_64xgj0", "likes": null, "replies": "", "user_reports": [], "id": "dg63wgu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pascalkiller", "parent_id": "t1_dg5tmkb", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Thanks for this, I will investigate further :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for this, I will investigate further :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg63wgu", "score_hidden": false, "stickied": false, "created": 1492043126.0, "created_utc": 1492014326.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5tmkb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "freenickname", "parent_id": "t3_64xgj0", "subreddit_name_prefixed": "r/gamedev", "controversiality": 0, "body": "Overall you would want to use UDP instead of TCP for game networking.\n\nI think that you should ditch socket.io completely, it's just too slow for any real time multiplayer games.\n\nNodeJS could work but it depends what you really mean through large scale FPS game, if you want to build something like a new Battlefield then you got to forget about it, but I think that it's a lot more important about how well you can interpolate over data and compensate for lag. NodeJS can work there just fine.\n\nJSON causes lots of overhead, but it all depends on what game you are creating. The best solution would be using frames and sending player position in 16 bytes of data or less.\n\nWhen testing the game I recommend limiting your bandwith to only a 1 Mbps and increasing latency to even ~180 ms. If your game can run reasonably well on such network conditions then it's going to run excellent on better connections.\n\nBut in the end the only thing that really matters is how well you can sync game state of players and compensate for dropped packets and lag spikes.", "edited": 1492002389.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Overall you would want to use UDP instead of TCP for game networking.&lt;/p&gt;\n\n&lt;p&gt;I think that you should ditch socket.io completely, it&amp;#39;s just too slow for any real time multiplayer games.&lt;/p&gt;\n\n&lt;p&gt;NodeJS could work but it depends what you really mean through large scale FPS game, if you want to build something like a new Battlefield then you got to forget about it, but I think that it&amp;#39;s a lot more important about how well you can interpolate over data and compensate for lag. NodeJS can work there just fine.&lt;/p&gt;\n\n&lt;p&gt;JSON causes lots of overhead, but it all depends on what game you are creating. The best solution would be using frames and sending player position in 16 bytes of data or less.&lt;/p&gt;\n\n&lt;p&gt;When testing the game I recommend limiting your bandwith to only a 1 Mbps and increasing latency to even ~180 ms. If your game can run reasonably well on such network conditions then it&amp;#39;s going to run excellent on better connections.&lt;/p&gt;\n\n&lt;p&gt;But in the end the only thing that really matters is how well you can sync game state of players and compensate for dropped packets and lag spikes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "gamedev", "name": "t1_dg5tmkb", "score_hidden": false, "stickied": false, "created": 1492030811.0, "created_utc": 1492002011.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]