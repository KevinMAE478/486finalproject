[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "MachineLearning", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Project", "id": "64z4uc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 35, "report_reasons": null, "author": "arnowaczynski", "saved": false, "mod_reports": [], "name": "t3_64z4uc", "subreddit_name_prefixed": "r/MachineLearning", "approved_by": null, "over_18": false, "domain": "deepsense.io", "hidden": false, "preview": {"images": [{"source": {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?s=f0e7b1ddc85ba2b42bcd4308ea0eb0b6", "width": 1140, "height": 337}, "resolutions": [{"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=108&amp;s=4b577b65a77bc0e998f08b4350ce8211", "width": 108, "height": 31}, {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=216&amp;s=a398878924e59f0a4dfa16077a64c388", "width": 216, "height": 63}, {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=320&amp;s=8de6a932cd29e2bfbee7736d22714efe", "width": 320, "height": 94}, {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=640&amp;s=7badad5033ee345f33e9a50d56cbe514", "width": 640, "height": 189}, {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=960&amp;s=b51f574b7a721a7aaf0274ef013f8865", "width": 960, "height": 283}, {"url": "https://i.redditmedia.com/cuYGj4fXJe7pXnMSOd2jc-4LBRNWvtkvMuljZ738fno.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=1080&amp;s=340da1d5f42a679dd9fa5dc6edfc9bd9", "width": 1080, "height": 319}], "variants": {}, "id": "nczCroFzgCoOgyBSOL5FodRJ4WM9wENsHXR08VOKwUE"}], "enabled": false}, "thumbnail": "https://b.thumbs.redditmedia.com/tIeXwlaMtNkAAJAfnwYVdqmajL6btt6iWSnHzGGCf4Q.jpg", "subreddit_id": "t5_2r3gv", "edited": false, "link_flair_css_class": "four", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "post_hint": "link", "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/MachineLearning/comments/64z4uc/p_deep_learning_for_satellite_imagery_via_image/", "num_reports": null, "locked": false, "stickied": false, "created": 1492042405.0, "url": "https://deepsense.io/deep-learning-for-satellite-imagery-via-image-segmentation/", "author_flair_text": null, "quarantine": false, "title": "[P] Deep learning for satellite imagery via image segmentation (4th place in Kaggle Dstl competition)", "created_utc": 1492013605.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 10, "visited": false, "subreddit_type": "public", "ups": 35}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dg7c8g1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pmigdal", "parent_id": "t1_dg6ac4o", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "TensorFlow implementation of RoI pooling: https://github.com/deepsense-io/roi-pooling", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TensorFlow implementation of RoI pooling: &lt;a href=\"https://github.com/deepsense-io/roi-pooling\"&gt;https://github.com/deepsense-io/roi-pooling&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7c8g1", "score_hidden": false, "stickied": false, "created": 1492103426.0, "created_utc": 1492074626.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ac4o", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "arnowaczynski", "parent_id": "t1_dg686uq", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "I think it's all about simplicity.\nU-net is fairly simple to implement and modify in frameworks like Pytorch or Keras. It's especially important during Kaggle competitions to come up with valuable solution in relatively small amount of time, which causes people to chose rather simple and reliable methods and then customize them for a given problem.\n\nFaster-RCNN is much more complicated because it was designed to solve more advanced problems - object detection in natural photos, like in Pascal VoC or in MS Coco datasets. For example it has roi_pooling layer, which is not implemented in standard deep learning frameworks. We explain it here https://deepsense.io/region-of-interest-pooling-explained/ Here is some example implementation of Faster-RCNN https://github.com/smallcorgi/Faster-RCNN_TF\n\nPersonally, I am waiting for release Mask R-CNN code, which was announced here https://arxiv.org/abs/1703.06870. Because it's FAIR I expect neat implementation in Pytorch :)\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think it&amp;#39;s all about simplicity.\nU-net is fairly simple to implement and modify in frameworks like Pytorch or Keras. It&amp;#39;s especially important during Kaggle competitions to come up with valuable solution in relatively small amount of time, which causes people to chose rather simple and reliable methods and then customize them for a given problem.&lt;/p&gt;\n\n&lt;p&gt;Faster-RCNN is much more complicated because it was designed to solve more advanced problems - object detection in natural photos, like in Pascal VoC or in MS Coco datasets. For example it has roi_pooling layer, which is not implemented in standard deep learning frameworks. We explain it here &lt;a href=\"https://deepsense.io/region-of-interest-pooling-explained/\"&gt;https://deepsense.io/region-of-interest-pooling-explained/&lt;/a&gt; Here is some example implementation of Faster-RCNN &lt;a href=\"https://github.com/smallcorgi/Faster-RCNN_TF\"&gt;https://github.com/smallcorgi/Faster-RCNN_TF&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Personally, I am waiting for release Mask R-CNN code, which was announced here &lt;a href=\"https://arxiv.org/abs/1703.06870\"&gt;https://arxiv.org/abs/1703.06870&lt;/a&gt;. Because it&amp;#39;s FAIR I expect neat implementation in Pytorch :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6ac4o", "score_hidden": false, "stickied": false, "created": 1492049690.0, "created_utc": 1492020890.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dg6aboa", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "pmigdal", "parent_id": "t1_dg686uq", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "**Image segmentation** and **object detection** are similar, yet different tasks. See e.g. the third slide from: https://courses.cs.washington.edu/courses/cse590v/14au/cse590v_wk1_rcnn.pdf.\n\nIn short:\n\n* for object detection you want to get a bounding box and say what's inside (key reference: [Fast(er) R-CNN](https://github.com/rbgirshick/py-faster-rcnn)),\n* for image segmentation you want to have a fine-grained classification of each pixel (key reference: [U-Net](https://lmb.informatik.uni-freiburg.de/people/ronneber/u-net/)).\n\nAs usually - there is some overlap, and R-CNN or U-Net are not the only possible architectures for these problems.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Image segmentation&lt;/strong&gt; and &lt;strong&gt;object detection&lt;/strong&gt; are similar, yet different tasks. See e.g. the third slide from: &lt;a href=\"https://courses.cs.washington.edu/courses/cse590v/14au/cse590v_wk1_rcnn.pdf\"&gt;https://courses.cs.washington.edu/courses/cse590v/14au/cse590v_wk1_rcnn.pdf&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In short:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for object detection you want to get a bounding box and say what&amp;#39;s inside (key reference: &lt;a href=\"https://github.com/rbgirshick/py-faster-rcnn\"&gt;Fast(er) R-CNN&lt;/a&gt;),&lt;/li&gt;\n&lt;li&gt;for image segmentation you want to have a fine-grained classification of each pixel (key reference: &lt;a href=\"https://lmb.informatik.uni-freiburg.de/people/ronneber/u-net/\"&gt;U-Net&lt;/a&gt;).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;As usually - there is some overlap, and R-CNN or U-Net are not the only possible architectures for these problems.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6aboa", "score_hidden": false, "stickied": false, "created": 1492049677.0, "created_utc": 1492020877.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dg6b12p", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Neural_Ned", "parent_id": "t1_dg686uq", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "U-nets are [fully convolutional networks](https://arxiv.org/pdf/1605.06211.pdf) (FCNs) that produce dense output maps (images) for tasks like semantic segmentation.\n\nR-CNNs (and 'faster') variants are for bounding box prediction. They place an extra network on top of a FCN to regress bounding boxes. To get actual position coordinates of detected objects from the raw output of a vanilla FCN requires some extra step.\n\nEDIT: That's actually not quite accurate; architectures like YOLO can be fully convolutional and predict bounding boxes *densely*, for each pixel in the output grid. [Here's an example of such a net.](http://www.robots.ox.ac.uk/~ankush/textloc.pdf) These differ from the basic FCNs for semantic segmentation, in as much as they perform regression at every pixel rather than just categorical classification.", "edited": 1492095877.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;U-nets are &lt;a href=\"https://arxiv.org/pdf/1605.06211.pdf\"&gt;fully convolutional networks&lt;/a&gt; (FCNs) that produce dense output maps (images) for tasks like semantic segmentation.&lt;/p&gt;\n\n&lt;p&gt;R-CNNs (and &amp;#39;faster&amp;#39;) variants are for bounding box prediction. They place an extra network on top of a FCN to regress bounding boxes. To get actual position coordinates of detected objects from the raw output of a vanilla FCN requires some extra step.&lt;/p&gt;\n\n&lt;p&gt;EDIT: That&amp;#39;s actually not quite accurate; architectures like YOLO can be fully convolutional and predict bounding boxes &lt;em&gt;densely&lt;/em&gt;, for each pixel in the output grid. &lt;a href=\"http://www.robots.ox.ac.uk/%7Eankush/textloc.pdf\"&gt;Here&amp;#39;s an example of such a net.&lt;/a&gt; These differ from the basic FCNs for semantic segmentation, in as much as they perform regression at every pixel rather than just categorical classification.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6b12p", "score_hidden": false, "stickied": false, "created": 1492050399.0, "created_utc": 1492021599.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg686uq", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "fishfuker", "parent_id": "t3_64z4uc", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Great post. Noob question: why is everyone using u-nets instead of r-cnns? Is there any advantage of using a u-net instead of an r-cnn based architecture (like fast r-cnn, etc)?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great post. Noob question: why is everyone using u-nets instead of r-cnns? Is there any advantage of using a u-net instead of an r-cnn based architecture (like fast r-cnn, etc)?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg686uq", "score_hidden": false, "stickied": false, "created": 1492047507.0, "created_utc": 1492018707.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dg7ti2o", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "arnowaczynski", "parent_id": "t1_dg7qpzl", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Here you should find some real life examples (check out applications tab): http://www.satimagingcorp.com/", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here you should find some real life examples (check out applications tab): &lt;a href=\"http://www.satimagingcorp.com/\"&gt;http://www.satimagingcorp.com/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7ti2o", "score_hidden": false, "stickied": false, "created": 1492130468.0, "created_utc": 1492101668.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7qpzl", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Dhxbxnxx", "parent_id": "t3_64z4uc", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Given the availability of data from for example Google Earth this seems like an area ripe for deep learning.\n\nI'm wondering if anyone could comment on some applications of this outside military?\n\nMineral exploration is one thing I thought of but I'm sure there are other great applications. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Given the availability of data from for example Google Earth this seems like an area ripe for deep learning.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m wondering if anyone could comment on some applications of this outside military?&lt;/p&gt;\n\n&lt;p&gt;Mineral exploration is one thing I thought of but I&amp;#39;m sure there are other great applications. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7qpzl", "score_hidden": false, "stickied": false, "created": 1492127501.0, "created_utc": 1492098701.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dg879wt", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "arnowaczynski", "parent_id": "t1_dg85rxv", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Yeah, why not. I've sent you a PM", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, why not. I&amp;#39;ve sent you a PM&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg879wt", "score_hidden": false, "stickied": false, "created": 1492145344.0, "created_utc": 1492116544.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg85rxv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "gopietz", "parent_id": "t3_64z4uc", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Could I annoy you with a few follow up questions via email? I'm currently getting into medical image segmentation and would love your opinion and experiences on a few things. Great post btw. Just what I needed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Could I annoy you with a few follow up questions via email? I&amp;#39;m currently getting into medical image segmentation and would love your opinion and experiences on a few things. Great post btw. Just what I needed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg85rxv", "score_hidden": false, "stickied": false, "created": 1492143653.0, "created_utc": 1492114853.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64z4uc", "likes": null, "replies": "", "user_reports": [], "id": "dgdudut", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grantbey", "parent_id": "t3_64z4uc", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Great post. I was doing this competition myself and also using a U-net. You guys got better results than I did (clearly!) but it's heartening to see I was moving in the right track. Thanks for sharing!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great post. I was doing this competition myself and also using a U-net. You guys got better results than I did (clearly!) but it&amp;#39;s heartening to see I was moving in the right track. Thanks for sharing!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dgdudut", "score_hidden": false, "stickied": false, "created": 1492480644.0, "created_utc": 1492451844.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]