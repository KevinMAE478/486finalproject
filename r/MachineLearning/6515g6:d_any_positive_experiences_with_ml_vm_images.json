[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "MachineLearning", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen a couple sources for AWS images that claim to have preconfigured all the hardware drivers and popular libraries. Has anybody made use of these? Any recommendations?&lt;/p&gt;\n\n&lt;p&gt;I do contract work for a few different clients, so for me generally the easiest thing is to spin up an AWS instance for that client and get things training 24/7. Once I&amp;#39;m finished I can just give them the image and some docs along with a report/outputs/code so they don&amp;#39;t have to deal with yet again installing numpy on another ubuntu machine (what are those apt-get dependencies again?) or yet again installing cuda and figuring out your nvidia login so you can download cudnn etc.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I was curious if anybody has a process they like so they don&amp;#39;t have to do this basic configuration over and over.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've seen a couple sources for AWS images that claim to have preconfigured all the hardware drivers and popular libraries. Has anybody made use of these? Any recommendations?\n\nI do contract work for a few different clients, so for me generally the easiest thing is to spin up an AWS instance for that client and get things training 24/7. Once I'm finished I can just give them the image and some docs along with a report/outputs/code so they don't have to deal with yet again installing numpy on another ubuntu machine (what are those apt-get dependencies again?) or yet again installing cuda and figuring out your nvidia login so you can download cudnn etc.\n\nAnyway, I was curious if anybody has a process they like so they don't have to do this basic configuration over and over.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Discussion", "id": "6515g6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 4, "report_reasons": null, "author": "MathAndProgramming", "saved": false, "mod_reports": [], "name": "t3_6515g6", "subreddit_name_prefixed": "r/MachineLearning", "approved_by": null, "over_18": false, "domain": "self.MachineLearning", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2r3gv", "edited": false, "link_flair_css_class": "one", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/MachineLearning/comments/6515g6/d_any_positive_experiences_with_ml_vm_images/", "num_reports": null, "locked": false, "stickied": false, "created": 1492061339.0, "url": "https://www.reddit.com/r/MachineLearning/comments/6515g6/d_any_positive_experiences_with_ml_vm_images/", "author_flair_text": null, "quarantine": false, "title": "[D] Any positive experiences with ML VM images, especially on AWS?", "created_utc": 1492032539.0, "distinguished": null, "media": null, "upvote_ratio": 0.67, "num_comments": 7, "visited": false, "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": "", "user_reports": [], "id": "dg756lc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "MathAndProgramming", "parent_id": "t1_dg6tpeg", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "That's really interesting - I hadn't thought of using docker for something like this. I'm going to take a look - thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s really interesting - I hadn&amp;#39;t thought of using docker for something like this. I&amp;#39;m going to take a look - thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg756lc", "score_hidden": false, "stickied": false, "created": 1492086560.0, "created_utc": 1492057760.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6tpeg", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_6515g6", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "[deleted]", "edited": 1492043534.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6tpeg", "score_hidden": false, "stickied": false, "created": 1492071538.0, "created_utc": 1492042738.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": "", "user_reports": [], "id": "dg78nu3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pilooch", "parent_id": "t3_6515g6", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "I do maintain AMI on AWS marketplace for deepdetect and it's a bit of a pain, but in the end it works well. As suggested by someone else here, docker is simple enough that it is worth considering in combination with nvidia-docker when GPU access is needed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I do maintain AMI on AWS marketplace for deepdetect and it&amp;#39;s a bit of a pain, but in the end it works well. As suggested by someone else here, docker is simple enough that it is worth considering in combination with nvidia-docker when GPU access is needed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg78nu3", "score_hidden": false, "stickied": false, "created": 1492093349.0, "created_utc": 1492064549.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": "", "user_reports": [], "id": "dg7hnzl", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "skhehw", "parent_id": "t3_6515g6", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "AMIs are a pain in the ass. I prefer to write shell scripts or dockerfiles that build out from a base image.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;AMIs are a pain in the ass. I prefer to write shell scripts or dockerfiles that build out from a base image.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7hnzl", "score_hidden": false, "stickied": false, "created": 1492116440.0, "created_utc": 1492087640.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": "", "user_reports": [], "id": "dg7kfcv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "hdgdtegdb", "parent_id": "t1_dg6yh6r", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Thanks for the tip. I may just give that a try.\n\nI actually considered docker before, particularly because I'm anxious about storing my whole \"virtual infrastructure\" with one provider. \n\nThen I can keep an offline backup of my machines and move to another provider if necessary. Although it would take a lot to make me leave AWS, it would be nice to know I have those backups.\n\nThe editing part you just mentioned sounds really interesting too. I must admit that \"editing\" AMIs is a huge pain!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the tip. I may just give that a try.&lt;/p&gt;\n\n&lt;p&gt;I actually considered docker before, particularly because I&amp;#39;m anxious about storing my whole &amp;quot;virtual infrastructure&amp;quot; with one provider. &lt;/p&gt;\n\n&lt;p&gt;Then I can keep an offline backup of my machines and move to another provider if necessary. Although it would take a lot to make me leave AWS, it would be nice to know I have those backups.&lt;/p&gt;\n\n&lt;p&gt;The editing part you just mentioned sounds really interesting too. I must admit that &amp;quot;editing&amp;quot; AMIs is a huge pain!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7kfcv", "score_hidden": false, "stickied": false, "created": 1492120332.0, "created_utc": 1492091532.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6yh6r", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg6rdxj", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6yh6r", "score_hidden": false, "stickied": false, "created": 1492077346.0, "created_utc": 1492048546.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_6515g6", "likes": null, "replies": "", "user_reports": [], "id": "dg7kng5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "hdgdtegdb", "parent_id": "t1_dg758kq", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Check out some of the other comments about Docker, as it sounds like that might meet your needs. \n\nHowever, in the meantime you could start with AWS's own machine learing AMI and add anything extra that you need. \n\nThen save the new custom version to your account. You can skip configuring cuda and everything else (think it comes with 6 or 7 major Python ML libraries configuted) and also have your own config. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Check out some of the other comments about Docker, as it sounds like that might meet your needs. &lt;/p&gt;\n\n&lt;p&gt;However, in the meantime you could start with AWS&amp;#39;s own machine learing AMI and add anything extra that you need. &lt;/p&gt;\n\n&lt;p&gt;Then save the new custom version to your account. You can skip configuring cuda and everything else (think it comes with 6 or 7 major Python ML libraries configuted) and also have your own config. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7kng5", "score_hidden": false, "stickied": false, "created": 1492120618.0, "created_utc": 1492091818.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg758kq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "MathAndProgramming", "parent_id": "t1_dg6rdxj", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Yeah, I think I have to do something like this going forward. I just dread spending another unproductive day installing numpy and cuda, though with any luck it will be the last time!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, I think I have to do something like this going forward. I just dread spending another unproductive day installing numpy and cuda, though with any luck it will be the last time!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg758kq", "score_hidden": false, "stickied": false, "created": 1492086649.0, "created_utc": 1492057849.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rdxj", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "hdgdtegdb", "parent_id": "t3_6515g6", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "I don't have experience with any of the prebuilt images (although I know AWS have released their own, which is bound to be fairly solid).  \n\nHowever, you can easily make your own AMI after configuring everything on your own account, and then share that AMI with your clients.  In fact, if you use AWS, this is probably the most sensible way to work.  I have my own custom AMI for everything - one for my web server, one is a Java application server, one for Python, R, and machine learning etc.\n\nJust spin up an instance.  Configure the whole thing.  Then shut down.  Right click your instance and create image.  When you get a new client, go to the AMI section in the console, right click and copy it to the client's availability region (assuming it's not already in the right one).  Right click again and select 'modify image permissions'.  Type their account number and set the permissions.  Really easy, and will save you hours.\n\nIf I learn a better way to do something, I'll load the image, improve it, and then re-save the image as 'Java App Server - Build 2'.  When building an AMI (or updating one) I also document every step, and create scripts to reinstall, upgrade, etc.  I like to know that I'm retaining the install knowledge off the AWS platform, so if the worst happens, I can get up and running on a new provider quickly.\n\nAlways test your AMIs with publicly available data, and never your client's data.  You don't want to accidentally share one client's data with another.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t have experience with any of the prebuilt images (although I know AWS have released their own, which is bound to be fairly solid).  &lt;/p&gt;\n\n&lt;p&gt;However, you can easily make your own AMI after configuring everything on your own account, and then share that AMI with your clients.  In fact, if you use AWS, this is probably the most sensible way to work.  I have my own custom AMI for everything - one for my web server, one is a Java application server, one for Python, R, and machine learning etc.&lt;/p&gt;\n\n&lt;p&gt;Just spin up an instance.  Configure the whole thing.  Then shut down.  Right click your instance and create image.  When you get a new client, go to the AMI section in the console, right click and copy it to the client&amp;#39;s availability region (assuming it&amp;#39;s not already in the right one).  Right click again and select &amp;#39;modify image permissions&amp;#39;.  Type their account number and set the permissions.  Really easy, and will save you hours.&lt;/p&gt;\n\n&lt;p&gt;If I learn a better way to do something, I&amp;#39;ll load the image, improve it, and then re-save the image as &amp;#39;Java App Server - Build 2&amp;#39;.  When building an AMI (or updating one) I also document every step, and create scripts to reinstall, upgrade, etc.  I like to know that I&amp;#39;m retaining the install knowledge off the AWS platform, so if the worst happens, I can get up and running on a new provider quickly.&lt;/p&gt;\n\n&lt;p&gt;Always test your AMIs with publicly available data, and never your client&amp;#39;s data.  You don&amp;#39;t want to accidentally share one client&amp;#39;s data with another.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg6rdxj", "score_hidden": false, "stickied": false, "created": 1492068660.0, "created_utc": 1492039860.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}]