[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "MachineLearning", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Has this been done before? If I had a database of job descriptions, how would I go about classifying these job descriptions based on job category (health, IT, education, etc.)? Would a good first step be performing unsupervised learning to cluster out the categories before performing the actual classification (maybe Naive Bayes or a random forest decision tree)? Any tips, pointers, or papers related to this task is welcome.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Has this been done before? If I had a database of job descriptions, how would I go about classifying these job descriptions based on job category (health, IT, education, etc.)? Would a good first step be performing unsupervised learning to cluster out the categories before performing the actual classification (maybe Naive Bayes or a random forest decision tree)? Any tips, pointers, or papers related to this task is welcome.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Project", "id": "64v0zr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 2, "report_reasons": null, "author": "thevidyy", "saved": false, "mod_reports": [], "name": "t3_64v0zr", "subreddit_name_prefixed": "r/MachineLearning", "approved_by": null, "over_18": false, "domain": "self.MachineLearning", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2r3gv", "edited": false, "link_flair_css_class": "four", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/MachineLearning/comments/64v0zr/p_how_to_classify_a_bunch_of_job_descriptions/", "num_reports": null, "locked": false, "stickied": false, "created": 1491987443.0, "url": "https://www.reddit.com/r/MachineLearning/comments/64v0zr/p_how_to_classify_a_bunch_of_job_descriptions/", "author_flair_text": null, "quarantine": false, "title": "[P] How to classify a bunch of job descriptions?", "created_utc": 1491958643.0, "distinguished": null, "media": null, "upvote_ratio": 0.59, "num_comments": 5, "visited": false, "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64v0zr", "likes": null, "replies": "", "user_reports": [], "id": "dg5g0x3", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "Icko_", "parent_id": "t3_64v0zr", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Clean the text, remove stopwords, create a bag of words (or n-grams, or character k-grams, depending on the size of the dataset), weigh by tf-idf, plug results into logistic regression/kNN/SVM/whatever else. For kNN and distance-based algorithms, try cosine similarity, it tends to work well with text.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clean the text, remove stopwords, create a bag of words (or n-grams, or character k-grams, depending on the size of the dataset), weigh by tf-idf, plug results into logistic regression/kNN/SVM/whatever else. For kNN and distance-based algorithms, try cosine similarity, it tends to work well with text.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg5g0x3", "score_hidden": false, "stickied": false, "created": 1491998602.0, "created_utc": 1491969802.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64v0zr", "likes": null, "replies": "", "user_reports": [], "id": "dg5pfee", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "schmook", "parent_id": "t3_64v0zr", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Do the absolutely simplest and dumbest thing first. Extract the simplest kind of features (for text it's always bow + TF-IDF), use the simplest classifier (logistic regression) and there you have: a baseline that any further modeling you do have to beat by a good enough margin to be worth the effort.\n\nYou'd be surprised how often the baseline is good enough and how hard it can be to improve upon it sometimes.\n\nIf you don't have labels, create labels for your first try manually (Yeah, that sucks, but it's the way to go. Choose two categories and go for it. You can easily label a thousand job descriptions in an afternoon) and think about anything fancier later.\n\n\n     ", "edited": 1491993504.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do the absolutely simplest and dumbest thing first. Extract the simplest kind of features (for text it&amp;#39;s always bow + TF-IDF), use the simplest classifier (logistic regression) and there you have: a baseline that any further modeling you do have to beat by a good enough margin to be worth the effort.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;d be surprised how often the baseline is good enough and how hard it can be to improve upon it sometimes.&lt;/p&gt;\n\n&lt;p&gt;If you don&amp;#39;t have labels, create labels for your first try manually (Yeah, that sucks, but it&amp;#39;s the way to go. Choose two categories and go for it. You can easily label a thousand job descriptions in an afternoon) and think about anything fancier later.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg5pfee", "score_hidden": false, "stickied": false, "created": 1492021991.0, "created_utc": 1491993191.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64v0zr", "likes": null, "replies": "", "user_reports": [], "id": "dg5ssim", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Dutchcheesehead", "parent_id": "t3_64v0zr", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "If you want to tinker with neural networks you could create a siamese neural network to put similar job descriptions close to each other. This network does the same with the titles people use when applying for a job: http://anthology.aclweb.org/W16-1617", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you want to tinker with neural networks you could create a siamese neural network to put similar job descriptions close to each other. This network does the same with the titles people use when applying for a job: &lt;a href=\"http://anthology.aclweb.org/W16-1617\"&gt;http://anthology.aclweb.org/W16-1617&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg5ssim", "score_hidden": false, "stickied": false, "created": 1492029460.0, "created_utc": 1492000660.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64v0zr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r3gv", "removal_reason": null, "link_id": "t3_64v0zr", "likes": null, "replies": "", "user_reports": [], "id": "dg7fnyv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TypedInt", "parent_id": "t1_dg61r4v", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "Another [comment](https://www.reddit.com/r/MachineLearning/comments/64v0zr/p_how_to_classify_a_bunch_of_job_descriptions/dg5ssim/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=MachineLearning) links to the paper written by TextKernel (who also gave the talk at PyData)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another &lt;a href=\"https://www.reddit.com/r/MachineLearning/comments/64v0zr/p_how_to_classify_a_bunch_of_job_descriptions/dg5ssim/?utm_content=permalink&amp;amp;utm_medium=front&amp;amp;utm_source=reddit&amp;amp;utm_name=MachineLearning\"&gt;comment&lt;/a&gt; links to the paper written by TextKernel (who also gave the talk at PyData)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg7fnyv", "score_hidden": false, "stickied": false, "created": 1492112826.0, "created_utc": 1492084026.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg61r4v", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "d3dalo", "parent_id": "t3_64v0zr", "subreddit_name_prefixed": "r/MachineLearning", "controversiality": 0, "body": "There was talk at the recent PyData Amsterdam about this very problem, you could perhaps contact the authors and ask them about their strategy: https://pydata.org/amsterdam2017/schedule/presentation/11/", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There was talk at the recent PyData Amsterdam about this very problem, you could perhaps contact the authors and ask them about their strategy: &lt;a href=\"https://pydata.org/amsterdam2017/schedule/presentation/11/\"&gt;https://pydata.org/amsterdam2017/schedule/presentation/11/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "MachineLearning", "name": "t1_dg61r4v", "score_hidden": false, "stickied": false, "created": 1492040819.0, "created_utc": 1492012019.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]