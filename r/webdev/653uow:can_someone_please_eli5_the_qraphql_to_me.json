[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What is graphql? I did read the docs, but couldn&amp;#39;t make much sense. I am just learning, so maybe inexperience.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "What is graphql? I did read the docs, but couldn't make much sense. I am just learning, so maybe inexperience.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "653uow", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 6, "report_reasons": null, "author": "sn10therealbatman", "saved": false, "mod_reports": [], "name": "t3_653uow", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "self.webdev", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qs0q", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/653uow/can_someone_please_eli5_the_qraphql_to_me/", "num_reports": null, "locked": false, "stickied": false, "created": 1492093884.0, "url": "https://www.reddit.com/r/webdev/comments/653uow/can_someone_please_eli5_the_qraphql_to_me/", "author_flair_text": null, "quarantine": false, "title": "Can someone please ELI5 the qraphql to me?", "created_utc": 1492065084.0, "distinguished": null, "media": null, "upvote_ratio": 0.87, "num_comments": 10, "visited": false, "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": "", "user_reports": [], "id": "dg8us0f", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sn10therealbatman", "parent_id": "t1_dg7q94b", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Who are we talking about here? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Who are we talking about here? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8us0f", "score_hidden": false, "stickied": false, "created": 1492179923.0, "created_utc": 1492151123.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7q94b", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "redbluerat", "parent_id": "t1_dg7bqrk", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Wow, why can't this be the first sentence on the website? That smug (but smart) lisping prick with the bow tie and hipster glasses seems to love obfuscating his work and making it appear more complex than it actually is. Infuriating. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow, why can&amp;#39;t this be the first sentence on the website? That smug (but smart) lisping prick with the bow tie and hipster glasses seems to love obfuscating his work and making it appear more complex than it actually is. Infuriating. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7q94b", "score_hidden": false, "stickied": false, "created": 1492127002.0, "created_utc": 1492098202.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": "", "user_reports": [], "id": "dg7c5if", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "de_perspectivalt", "parent_id": "t1_dg7bzwg", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I have to add, while designed for graph data, you can use it on top of relational or non-relational databases. I have introduced a bit of confusion in my last comment, sorry. Also, you'll run into complexities while using it with relational databases, but you still can.\n\nSo, maybe not the next-gen, but a drastically different query language.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have to add, while designed for graph data, you can use it on top of relational or non-relational databases. I have introduced a bit of confusion in my last comment, sorry. Also, you&amp;#39;ll run into complexities while using it with relational databases, but you still can.&lt;/p&gt;\n\n&lt;p&gt;So, maybe not the next-gen, but a drastically different query language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7c5if", "score_hidden": false, "stickied": false, "created": 1492103180.0, "created_utc": 1492074380.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bzwg", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sn10therealbatman", "parent_id": "t1_dg7bz8y", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ah okay. Thanks.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah okay. Thanks.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7bzwg", "score_hidden": false, "stickied": false, "created": 1492102690.0, "created_utc": 1492073890.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bz8y", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "de_perspectivalt", "parent_id": "t1_dg7bu4z", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "No, it's an abstraction layer defining how data should be provided, but the kind of data I was describing is still relational !  \n\nHere's an article (a bit old maybe, I didn't entirely read it) showing an example of a simple API with graphql &amp; a traditional sqlite database : https://www.reindex.io/blog/building-a-graphql-server-with-node-js-and-sql/ ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, it&amp;#39;s an abstraction layer defining how data should be provided, but the kind of data I was describing is still relational !  &lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an article (a bit old maybe, I didn&amp;#39;t entirely read it) showing an example of a simple API with graphql &amp;amp; a traditional sqlite database : &lt;a href=\"https://www.reindex.io/blog/building-a-graphql-server-with-node-js-and-sql/\"&gt;https://www.reindex.io/blog/building-a-graphql-server-with-node-js-and-sql/&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7bz8y", "score_hidden": false, "stickied": false, "created": 1492102634.0, "created_utc": 1492073834.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bu4z", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sn10therealbatman", "parent_id": "t1_dg7bt0h", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ah okay. So essentially graphql is the next-gen sql?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah okay. So essentially graphql is the next-gen sql?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7bu4z", "score_hidden": false, "stickied": false, "created": 1492102194.0, "created_utc": 1492073394.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bt0h", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "de_perspectivalt", "parent_id": "t1_dg7bqrk", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "That's it, instead of adapting your queries to how the server provides data, the server adapts to how data should be provided.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s it, instead of adapting your queries to how the server provides data, the server adapts to how data should be provided.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7bt0h", "score_hidden": false, "stickied": false, "created": 1492102103.0, "created_utc": 1492073303.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bqrk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sn10therealbatman", "parent_id": "t1_dg7ac7w", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "So instead of me defining how the response should be, I just make a request of what I want to know, and the server worries about finding the relevant data to populate the response accordingly?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So instead of me defining how the response should be, I just make a request of what I want to know, and the server worries about finding the relevant data to populate the response accordingly?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7bqrk", "score_hidden": false, "stickied": false, "created": 1492101913.0, "created_utc": 1492073113.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ac7w", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "de_perspectivalt", "parent_id": "t3_653uow", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Let's say you're building an app that involves people planting trees in a public garden, and notes about the tree species.\n\nWith a traditional API, you could query those endpoints :\n\n- GET /trees &lt;- returns a list of trees\n- GET /trees/{tree id} &lt;- returns a specific tree (often with more details)\n- POST /trees &lt;- creates a tree in the database\n- PUT /trees/{tree id} &lt;- updates a tree\n\nSo, maybe you'd query the *third tree* by GETting /trees/2, and the response would contain its name, its location, an identifier of who planted it, an identifier for the tree species to fetch notes about it (but not directly notes about this particular planted tree).\n\nIf you want to get the details about this tree, you have to send another request, because notes are a different ressource. So you GET /notes/{tree species}, and do something with the details. You'd also like to display other trees planted by this gardener ? GET /gardener/{id}/trees, and do something. Etc, etc.\n\nWith graphql, you're asking for \"packages\" of data that makes your life easier, and it's up to the server to build them.\nSo, you could request 'this tree, information about the user that planted it, and please notes about this kind of trees' (of course, the syntax is determined by graphql). The server gets your query, and returns just that.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s say you&amp;#39;re building an app that involves people planting trees in a public garden, and notes about the tree species.&lt;/p&gt;\n\n&lt;p&gt;With a traditional API, you could query those endpoints :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;GET /trees &amp;lt;- returns a list of trees&lt;/li&gt;\n&lt;li&gt;GET /trees/{tree id} &amp;lt;- returns a specific tree (often with more details)&lt;/li&gt;\n&lt;li&gt;POST /trees &amp;lt;- creates a tree in the database&lt;/li&gt;\n&lt;li&gt;PUT /trees/{tree id} &amp;lt;- updates a tree&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So, maybe you&amp;#39;d query the &lt;em&gt;third tree&lt;/em&gt; by GETting /trees/2, and the response would contain its name, its location, an identifier of who planted it, an identifier for the tree species to fetch notes about it (but not directly notes about this particular planted tree).&lt;/p&gt;\n\n&lt;p&gt;If you want to get the details about this tree, you have to send another request, because notes are a different ressource. So you GET /notes/{tree species}, and do something with the details. You&amp;#39;d also like to display other trees planted by this gardener ? GET /gardener/{id}/trees, and do something. Etc, etc.&lt;/p&gt;\n\n&lt;p&gt;With graphql, you&amp;#39;re asking for &amp;quot;packages&amp;quot; of data that makes your life easier, and it&amp;#39;s up to the server to build them.\nSo, you could request &amp;#39;this tree, information about the user that planted it, and please notes about this kind of trees&amp;#39; (of course, the syntax is determined by graphql). The server gets your query, and returns just that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7ac7w", "score_hidden": false, "stickied": false, "created": 1492097785.0, "created_utc": 1492068985.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_653uow", "likes": null, "replies": "", "user_reports": [], "id": "dg7d2x6", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "BuiltWithAwesome", "parent_id": "t3_653uow", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Simply put, GraphQL is a specification for defining data requests between a client and server.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simply put, GraphQL is a specification for defining data requests between a client and server.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7d2x6", "score_hidden": false, "stickied": false, "created": 1492106022.0, "created_utc": 1492077222.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]