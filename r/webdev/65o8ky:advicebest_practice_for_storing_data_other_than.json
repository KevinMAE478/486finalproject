[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m comfortable with my application&amp;#39;s current simple Redux store structure. I&amp;#39;ve got immutable records that wrap a CRUD object, for example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface ElementType {\n  id: AAGUID;\n  name: string;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the store has actions to load these, and then get an observable by filtering the AppState:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface AppState {\n  elements: Elements;\n  elementTypes: ElementTypes;\n  ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works great for me in the past, but I&amp;#39;ve noticed every time I need an object I call both Load function, then get the observable. Which means they&amp;#39;re often getting re-loaded when I already have them.&lt;/p&gt;\n\n&lt;p&gt;In my new project, updates will be pushed over a websocket, so I only want them to be loaded on the first try, I also only want to keep track of some additional state - e.g. whether it&amp;#39;s loading/updating, loaded, failed etc.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m used to MVVM, where I&amp;#39;d have a model just like the above interface, and then a ViewModel which would hold this kind of state. But this doesn&amp;#39;t really fit with Redux.&lt;/p&gt;\n\n&lt;p&gt;Should I keep my &amp;#39;data&amp;#39; state separate from my &amp;#39;request&amp;#39; state, maybe having a separate part of the app state for this purpose:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface AppState {\n  elements: Elements;\n  elementTypes: ElementTypes;\n  requests: requestState;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or should I &amp;#39;muddy&amp;#39; my CRUD data objects with other state data&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface ElementType {\n  id: AAGUID;\n  name: string;\n  requestState: RequestState\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm comfortable with my application's current simple Redux store structure. I've got immutable records that wrap a CRUD object, for example:\n\n    export interface ElementType {\n      id: AAGUID;\n      name: string;\n    };\n\nAnd the store has actions to load these, and then get an observable by filtering the AppState:\n\n    export interface AppState {\n      elements: Elements;\n      elementTypes: ElementTypes;\n      ...\n    }\n\nThis works great for me in the past, but I've noticed every time I need an object I call both Load function, then get the observable. Which means they're often getting re-loaded when I already have them.\n\nIn my new project, updates will be pushed over a websocket, so I only want them to be loaded on the first try, I also only want to keep track of some additional state - e.g. whether it's loading/updating, loaded, failed etc.\n\nI'm used to MVVM, where I'd have a model just like the above interface, and then a ViewModel which would hold this kind of state. But this doesn't really fit with Redux.\n\nShould I keep my 'data' state separate from my 'request' state, maybe having a separate part of the app state for this purpose:\n\n    export interface AppState {\n      elements: Elements;\n      elementTypes: ElementTypes;\n      requests: requestState;\n    }\n\nor should I 'muddy' my CRUD data objects with other state data\n\n    export interface ElementType {\n      id: AAGUID;\n      name: string;\n      requestState: RequestState\n    };", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65o8ky", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 5, "report_reasons": null, "author": "A-Grey-World", "saved": false, "mod_reports": [], "name": "t3_65o8ky", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "self.webdev", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qs0q", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/65o8ky/advicebest_practice_for_storing_data_other_than/", "num_reports": null, "locked": false, "stickied": false, "created": 1492361451.0, "url": "https://www.reddit.com/r/webdev/comments/65o8ky/advicebest_practice_for_storing_data_other_than/", "author_flair_text": null, "quarantine": false, "title": "Advice/best practice for storing data other than CRUD object in redux store?", "created_utc": 1492332651.0, "distinguished": null, "media": null, "upvote_ratio": 0.73, "num_comments": 2, "visited": false, "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65o8ky", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65o8ky", "likes": null, "replies": "", "user_reports": [], "id": "dgcpj3y", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "A-Grey-World", "parent_id": "t1_dgcfcbh", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I think I'm coming to the same conclusion. Also, tracking requests allow me to track these items before I've got them and can store them in their map.\n\nEg, getObjectByName('name') doesn't let me put a loading state anywhere because i don't have the ID yet, only when it's actually retrieved the data can i have metadata about it.\n\nThere is duplications if, say, i load the same element via two requests (by id, then by name, say).", "edited": 1492383352.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think I&amp;#39;m coming to the same conclusion. Also, tracking requests allow me to track these items before I&amp;#39;ve got them and can store them in their map.&lt;/p&gt;\n\n&lt;p&gt;Eg, getObjectByName(&amp;#39;name&amp;#39;) doesn&amp;#39;t let me put a loading state anywhere because i don&amp;#39;t have the ID yet, only when it&amp;#39;s actually retrieved the data can i have metadata about it.&lt;/p&gt;\n\n&lt;p&gt;There is duplications if, say, i load the same element via two requests (by id, then by name, say).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgcpj3y", "score_hidden": false, "stickied": false, "created": 1492411959.0, "created_utc": 1492383159.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcfcbh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LoLindros", "parent_id": "t3_65o8ky", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I've went both ways and in my experience, it's was always cleaner to separate the state from the resource object.\n\nIn time, I always wanted more meta data, e.g. the last time I fetched the data, how many rows I have etc.\n\nIt will solve some problems like storing additional information to a list or naming conflicts\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve went both ways and in my experience, it&amp;#39;s was always cleaner to separate the state from the resource object.&lt;/p&gt;\n\n&lt;p&gt;In time, I always wanted more meta data, e.g. the last time I fetched the data, how many rows I have etc.&lt;/p&gt;\n\n&lt;p&gt;It will solve some problems like storing additional information to a list or naming conflicts&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgcfcbh", "score_hidden": false, "stickied": false, "created": 1492398546.0, "created_utc": 1492369746.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]