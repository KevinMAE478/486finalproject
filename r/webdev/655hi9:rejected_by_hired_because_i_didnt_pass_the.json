[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I did the codility technical test when trying to get on Hired but was rejected. I didn&amp;#39;t know they took it pretty seriously and there were improvements I could have made to my code and I didn&amp;#39;t use up all the time, but my code passed test cases for both problems as well as additional test cases I entered myself. What would you improve upon what I did or what did I do wrong? You only get 60min to finish both cases.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Given a block of text, return the number of words of the sentence with the most words. Sentences are ended by !/./?\nExample: &amp;#39;Hello. We test coders. Give us a try?&amp;#39; would return 4. The last sentence has the most words (4 words).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;My code:\n&lt;a href=\"https://pastebin.com/fd4MWdif\"&gt;https://pastebin.com/fd4MWdif&lt;/a&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Given 2 numbers, eg: 3 &amp;amp; 10, how many of the numbers between those two numbers are squares? (sorry I&amp;#39;m bad at wording). Example: 3,4,5,6,7,8,9,10 - 4 and 9 are squares of 2 and 3 so the answer is there are 2.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;My code:\n&lt;a href=\"https://pastebin.com/Eap2c9yt\"&gt;https://pastebin.com/Eap2c9yt&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I know the second one could have been more efficient by sticking everything in the first for loop and removing negative numbers first since Codility tests for efficiency.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I did the codility technical test when trying to get on Hired but was rejected. I didn't know they took it pretty seriously and there were improvements I could have made to my code and I didn't use up all the time, but my code passed test cases for both problems as well as additional test cases I entered myself. What would you improve upon what I did or what did I do wrong? You only get 60min to finish both cases.\n\n1. Given a block of text, return the number of words of the sentence with the most words. Sentences are ended by !/./?\nExample: 'Hello. We test coders. Give us a try?' would return 4. The last sentence has the most words (4 words).\n\nMy code:\nhttps://pastebin.com/fd4MWdif\n\n2. Given 2 numbers, eg: 3 &amp; 10, how many of the numbers between those two numbers are squares? (sorry I'm bad at wording). Example: 3,4,5,6,7,8,9,10 - 4 and 9 are squares of 2 and 3 so the answer is there are 2.\n\nMy code:\nhttps://pastebin.com/Eap2c9yt\n\nI know the second one could have been more efficient by sticking everything in the first for loop and removing negative numbers first since Codility tests for efficiency.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "655hi9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 14, "report_reasons": null, "author": "rejectedbyhired", "saved": false, "mod_reports": [], "name": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "self.webdev", "hidden": false, "preview": {"images": [{"source": {"url": "https://i.redditmedia.com/apn0jimBDcu7v5NrQv4_AjqWqHWQMnATxOAbLbDgyQw.jpg?s=ff05b930089d958e41fd566f183592c6", "width": 250, "height": 250}, "resolutions": [{"url": "https://i.redditmedia.com/apn0jimBDcu7v5NrQv4_AjqWqHWQMnATxOAbLbDgyQw.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=108&amp;s=05f69610841f8c419b3d580bf1b2dac1", "width": 108, "height": 108}, {"url": "https://i.redditmedia.com/apn0jimBDcu7v5NrQv4_AjqWqHWQMnATxOAbLbDgyQw.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=216&amp;s=2abff01ac7255b4a197afb5fb03b0048", "width": 216, "height": 216}], "variants": {}, "id": "tEFaKdpbTuSBBWpWQ-kmQ1l_KwNUpQtPpUtOwmLiL-A"}], "enabled": false}, "thumbnail": "self", "subreddit_id": "t5_2qs0q", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "post_hint": "self", "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/655hi9/rejected_by_hired_because_i_didnt_pass_the/", "num_reports": null, "locked": false, "stickied": false, "created": 1492119196.0, "url": "https://www.reddit.com/r/webdev/comments/655hi9/rejected_by_hired_because_i_didnt_pass_the/", "author_flair_text": null, "quarantine": false, "title": "Rejected by Hired because I didn't pass the Codility technical test. How would these problems be solved?", "created_utc": 1492090396.0, "distinguished": null, "media": null, "upvote_ratio": 0.86, "num_comments": 32, "visited": false, "subreddit_type": "public", "ups": 14}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8frew", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "deltons", "parent_id": "t1_dg8eqrb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Yup that works for every case I tried. I never would have figured that out personally. +1.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yup that works for every case I tried. I never would have figured that out personally. +1.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8frew", "score_hidden": false, "stickied": false, "created": 1492156164.0, "created_utc": 1492127364.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8z4fz", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg8eqrb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; Very easy to miss this solution due to our pre-conception that programming skill questions require programming constructs to solve.\n\nThe thing is that in my position as a hiring manager, I'd never ding anyone for solving a programming problem in a straight-forwards way so long as the solution produced was as efficient and idiomatic as *their* understanding of the problem allowed.\n\nThe algorithm below,\n\n&gt; floor(\u221a10) - ceil(\u221a3) + 1 = 2\n\n... is a mathematical shortcut, not a demonstration of actual programming skill. That's the problem with using math in programming interviews, if the interviewee knows enough math they can just nullify the problem (e.g. Gauss' and the summation of 1 to 100).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Very easy to miss this solution due to our pre-conception that programming skill questions require programming constructs to solve.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The thing is that in my position as a hiring manager, I&amp;#39;d never ding anyone for solving a programming problem in a straight-forwards way so long as the solution produced was as efficient and idiomatic as &lt;em&gt;their&lt;/em&gt; understanding of the problem allowed.&lt;/p&gt;\n\n&lt;p&gt;The algorithm below,&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;floor(\u221a10) - ceil(\u221a3) + 1 = 2&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;... is a mathematical shortcut, not a demonstration of actual programming skill. That&amp;#39;s the problem with using math in programming interviews, if the interviewee knows enough math they can just nullify the problem (e.g. Gauss&amp;#39; and the summation of 1 to 100).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8z4fz", "score_hidden": false, "stickied": false, "created": 1492192824.0, "created_utc": 1492164024.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8pjxi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "e_to_the_pi_i", "parent_id": "t1_dg8eqrb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Man that's clever.  One of those \"how did I not think of that?\" things.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Man that&amp;#39;s clever.  One of those &amp;quot;how did I not think of that?&amp;quot; things.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8pjxi", "score_hidden": false, "stickied": false, "created": 1492170054.0, "created_utc": 1492141254.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8eqrb", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg7ur4d", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "[deleted]", "edited": 1492144845.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8eqrb", "score_hidden": false, "stickied": false, "created": 1492154817.0, "created_utc": 1492126017.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8z8p8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg82irq", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Well. Thanks. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well. Thanks. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8z8p8", "score_hidden": false, "stickied": false, "created": 1492193224.0, "created_utc": 1492164424.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg82irq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "IAmCristian", "parent_id": "t1_dg7ur4d", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I like your code, clean and to the point.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like your code, clean and to the point.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg82irq", "score_hidden": false, "stickied": false, "created": 1492140097.0, "created_utc": 1492111297.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8z74q", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg8dsio", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Wow thanks for the critique. I definitely hadn't thought of stepping from square to square in #2, but it makes sense as you explained it.\n\nAnd yes, 100x speed improvement for such a small change is definitely worth it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow thanks for the critique. I definitely hadn&amp;#39;t thought of stepping from square to square in #2, but it makes sense as you explained it.&lt;/p&gt;\n\n&lt;p&gt;And yes, 100x speed improvement for such a small change is definitely worth it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8z74q", "score_hidden": false, "stickied": false, "created": 1492193074.0, "created_utc": 1492164274.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8dsio", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "deltons", "parent_id": "t1_dg7ur4d", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I agree with these critiques. Since Hired tests on efficiency, you could probably squeeze a bit more out of both, but I still like both of these answers.\n\nThe first one could probably get from O(3*n) it is currently to O(n) by looping through character by character. This would avoid the split() and trim() calls, both O(n), on the sentences that have already been split() once in the loop.\n\nBut honestly, it would be way less readable and O(3*n) isn't that much worse than O(n) so I like this way more.\n\nThe second can be sped up dramatically by calculating the square root from the lowest in the range and incrementing and testing from there. That way we can avoid checking every number in the range linearly. Here is what I would personally update:\n\n    function solution(start, end){\n        // Sanity check. Start has to be at least 0, because negatives\n        // will give a NaN for the squart root\n        start = Math.max(0, start);\n        // start at the lowest possible value that could be squared to be in range\n        start = Math.ceil(Math.sqrt(start));\n        let found = 0;\n    \n        // Sanity check. There's nothing between start and end.\n        if(start &gt;= end){\n          return 0;\n        }\n    \n       // find the square of the first number\n       let square = start * start;\n       while (square &lt;= end) {\n          found = found + 1;\n          start = start + 1;\n          square = start * start;\n        }\n    \n        return found;\n    }    \n\nI tested the runtime out of curiosity and here are the results:\n\n1 million range\n\n    Original:\n    found: 1001\n    range: 1000000\n    time: 106.10499999999999ms\n    \n    Updated:\n    found: 1001\n    range: 1000000\n    time: 0.18000000000000682ms\n\n\n1 million range vs 1 Trillion range\n\n    Original:\n    found: 1001\n    range: 1000000\n    time: 103.845ms\n\n    Updated:\n    found: 1000001\n    range: 1000000000000\n    time: 87.42500000000001ms\n\nYou can run the comparison @ https://repl.it/HJG7/1", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree with these critiques. Since Hired tests on efficiency, you could probably squeeze a bit more out of both, but I still like both of these answers.&lt;/p&gt;\n\n&lt;p&gt;The first one could probably get from O(3*n) it is currently to O(n) by looping through character by character. This would avoid the split() and trim() calls, both O(n), on the sentences that have already been split() once in the loop.&lt;/p&gt;\n\n&lt;p&gt;But honestly, it would be way less readable and O(3*n) isn&amp;#39;t that much worse than O(n) so I like this way more.&lt;/p&gt;\n\n&lt;p&gt;The second can be sped up dramatically by calculating the square root from the lowest in the range and incrementing and testing from there. That way we can avoid checking every number in the range linearly. Here is what I would personally update:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution(start, end){\n    // Sanity check. Start has to be at least 0, because negatives\n    // will give a NaN for the squart root\n    start = Math.max(0, start);\n    // start at the lowest possible value that could be squared to be in range\n    start = Math.ceil(Math.sqrt(start));\n    let found = 0;\n\n    // Sanity check. There&amp;#39;s nothing between start and end.\n    if(start &amp;gt;= end){\n      return 0;\n    }\n\n   // find the square of the first number\n   let square = start * start;\n   while (square &amp;lt;= end) {\n      found = found + 1;\n      start = start + 1;\n      square = start * start;\n    }\n\n    return found;\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I tested the runtime out of curiosity and here are the results:&lt;/p&gt;\n\n&lt;p&gt;1 million range&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Original:\nfound: 1001\nrange: 1000000\ntime: 106.10499999999999ms\n\nUpdated:\nfound: 1001\nrange: 1000000\ntime: 0.18000000000000682ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;1 million range vs 1 Trillion range&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Original:\nfound: 1001\nrange: 1000000\ntime: 103.845ms\n\nUpdated:\nfound: 1000001\nrange: 1000000000000\ntime: 87.42500000000001ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can run the comparison @ &lt;a href=\"https://repl.it/HJG7/1\"&gt;https://repl.it/HJG7/1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8dsio", "score_hidden": false, "stickied": false, "created": 1492153542.0, "created_utc": 1492124742.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ur4d", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "turkish_gold", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "1\n----\nCritique. Your regex wasn't straight forward, and you did multiple rounds on the same string, where a better constructed regex would need only 1 round. Multiple rounds are less performant, and show that perhaps you dont' really understand regex, so they'd fail you on that.\n\nAlso, I am unsure why it was necessary to do a replacement on the given string, rather than just splitting it and analysing each sentence separately. \n\nI thought you could simplify #1, but I didn't test it as extensively as you did... so I'm not sure if there's some edge case that I am missing which lead you to need to do the .replace() regex chain.\n\nMy solution:\n---\n\n    function solution(text){\n      const punctuation = /\\?|\\.|\\!|$'/;\n      let max_found = 0\n      for (let sentence of text.split(punctuation)){\n        let length = sentence.trim().split(/\\s+/).length;\n        if(length &gt; max_found){\n          max_found = length;\n        }\n      }\n      return max_found;\n    }\n\n\n# 2\n-----\nCritique. The list in your version of #2 is extraneous. You should use a for loop. They probably failed you on not knowing for-loops, and creating intermediate lists just to do iteration.\n\nMy solution:\n\n    function solution(start, end){\n        // Sanity check. Start has to be at least 0, because negatives\n        // will give a NaN for the squart root\n        start = Math.max(0, start);\n        let found = 0;\n\n        // Sanity check. There's nothing between start and end.\n        if(start &gt;= end){\n          return 0;\n        }\n\n        for(let i = start; i &lt;= end; i++){\n          if(Math.sqrt(i) % 1 == 0){\n            found++;\n          }\n        }\n\n        return found;\n    }\n\n\n", "edited": 1492103859.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;1&lt;/h2&gt;\n\n&lt;p&gt;Critique. Your regex wasn&amp;#39;t straight forward, and you did multiple rounds on the same string, where a better constructed regex would need only 1 round. Multiple rounds are less performant, and show that perhaps you dont&amp;#39; really understand regex, so they&amp;#39;d fail you on that.&lt;/p&gt;\n\n&lt;p&gt;Also, I am unsure why it was necessary to do a replacement on the given string, rather than just splitting it and analysing each sentence separately. &lt;/p&gt;\n\n&lt;p&gt;I thought you could simplify #1, but I didn&amp;#39;t test it as extensively as you did... so I&amp;#39;m not sure if there&amp;#39;s some edge case that I am missing which lead you to need to do the .replace() regex chain.&lt;/p&gt;\n\n&lt;h2&gt;My solution:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution(text){\n  const punctuation = /\\?|\\.|\\!|$&amp;#39;/;\n  let max_found = 0\n  for (let sentence of text.split(punctuation)){\n    let length = sentence.trim().split(/\\s+/).length;\n    if(length &amp;gt; max_found){\n      max_found = length;\n    }\n  }\n  return max_found;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;2&lt;/h1&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Critique. The list in your version of #2 is extraneous. You should use a for loop. They probably failed you on not knowing for-loops, and creating intermediate lists just to do iteration.&lt;/p&gt;\n\n&lt;p&gt;My solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution(start, end){\n    // Sanity check. Start has to be at least 0, because negatives\n    // will give a NaN for the squart root\n    start = Math.max(0, start);\n    let found = 0;\n\n    // Sanity check. There&amp;#39;s nothing between start and end.\n    if(start &amp;gt;= end){\n      return 0;\n    }\n\n    for(let i = start; i &amp;lt;= end; i++){\n      if(Math.sqrt(i) % 1 == 0){\n        found++;\n      }\n    }\n\n    return found;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7ur4d", "score_hidden": false, "stickied": false, "created": 1492131789.0, "created_utc": 1492102989.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg956ie", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jacobp100", "parent_id": "t1_dg8y995", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I don't mind the actual questions, and quite like whiteboard interviews (to an extent). It's the assessment. You can have an answer off by one that could be good enough to get the job in an interview, but fail an automated test.\n\nI actually did the same questions in the post. I wasted almost all of the time limit because I got sidetracked trying to account for negative squares before remembering they don't exist. In an actual whiteboard interview, they'd point you back on track, and mistake like that probably wouldn't be remembered. But on Hired, that mistake will make you fail.\n\nFwiw, my final answer was the mathsy way of using square roots, floors and ceils. Although was likely off by one because of said time issues.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t mind the actual questions, and quite like whiteboard interviews (to an extent). It&amp;#39;s the assessment. You can have an answer off by one that could be good enough to get the job in an interview, but fail an automated test.&lt;/p&gt;\n\n&lt;p&gt;I actually did the same questions in the post. I wasted almost all of the time limit because I got sidetracked trying to account for negative squares before remembering they don&amp;#39;t exist. In an actual whiteboard interview, they&amp;#39;d point you back on track, and mistake like that probably wouldn&amp;#39;t be remembered. But on Hired, that mistake will make you fail.&lt;/p&gt;\n\n&lt;p&gt;Fwiw, my final answer was the mathsy way of using square roots, floors and ceils. Although was likely off by one because of said time issues.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg956ie", "score_hidden": false, "stickied": false, "created": 1492206362.0, "created_utc": 1492177562.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8y995", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "daveonhols", "parent_id": "t1_dg7ushk", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "To be honest I think these are decent screening questions, what do you think is missing or wrong? What should they be doing differently? The only negative I might argue is on 2, you're hiring a developer not a maths geek so spotting the best solution is not a 100% relevant skill arguably.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;To be honest I think these are decent screening questions, what do you think is missing or wrong? What should they be doing differently? The only negative I might argue is on 2, you&amp;#39;re hiring a developer not a maths geek so spotting the best solution is not a 100% relevant skill arguably.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8y995", "score_hidden": false, "stickied": false, "created": 1492189994.0, "created_utc": 1492161194.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ushk", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "jacobp100", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I had the same experience with Hired. I really don't like those automated tests and they're so far from the pulse of what a good developer is.\n\nA few months later I did actually get a call from Hired\u2014incidentally when I was looking for a new job. They were better than most recruiters, but still sent a lot of jobs that were a long way away from where I was looking. I had around 7\u20138 offers, but rejected them all\u2014although not to say there weren't good offers, just not what I was looking for.\n\nA month after that, they sent me a goodie box with a Pok\u00e9mon mug (when Pok\u00e9mon go was a thing) and various other stuff.\n\nSo mixed feelings with Hired. The testing is awful.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I had the same experience with Hired. I really don&amp;#39;t like those automated tests and they&amp;#39;re so far from the pulse of what a good developer is.&lt;/p&gt;\n\n&lt;p&gt;A few months later I did actually get a call from Hired\u2014incidentally when I was looking for a new job. They were better than most recruiters, but still sent a lot of jobs that were a long way away from where I was looking. I had around 7\u20138 offers, but rejected them all\u2014although not to say there weren&amp;#39;t good offers, just not what I was looking for.&lt;/p&gt;\n\n&lt;p&gt;A month after that, they sent me a goodie box with a Pok\u00e9mon mug (when Pok\u00e9mon go was a thing) and various other stuff.&lt;/p&gt;\n\n&lt;p&gt;So mixed feelings with Hired. The testing is awful.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7ushk", "score_hidden": false, "stickied": false, "created": 1492131830.0, "created_utc": 1492103030.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7voq6", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg7t4ge", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "That's kind of an intriguing solution, but I think you'd get dinged for not doing a .reduce() and instead doing a .sort().reverse(). It works here because of the way the data structure got built, but it adds a O(logN) function and O(n) step to the solution where a clever reducer would just be O(n)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s kind of an intriguing solution, but I think you&amp;#39;d get dinged for not doing a .reduce() and instead doing a .sort().reverse(). It works here because of the way the data structure got built, but it adds a O(logN) function and O(n) step to the solution where a clever reducer would just be O(n)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7voq6", "score_hidden": false, "stickied": false, "created": 1492132788.0, "created_utc": 1492103988.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8029l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "okawei", "parent_id": "t1_dg7y518", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I actually like this solution the best.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I actually like this solution the best.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8029l", "score_hidden": false, "stickied": false, "created": 1492137436.0, "created_utc": 1492108636.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7y518", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "spryes", "parent_id": "t1_dg7t4ge", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I feel like this is extremely terrible, but is more performant:\n\n    const mostWords = str =&gt; Math.max(...\n                                  str.split(/[?!.]/)\n                                  .map(sentence =&gt; sentence.trim().split(' ').length)\n                                 )\n\nWith a large Lorem Ipsum text sample, performance.now() shows it's about 2-3x faster", "edited": 1492107896.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like this is extremely terrible, but is more performant:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const mostWords = str =&amp;gt; Math.max(...\n                              str.split(/[?!.]/)\n                              .map(sentence =&amp;gt; sentence.trim().split(&amp;#39; &amp;#39;).length)\n                             )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With a large Lorem Ipsum text sample, performance.now() shows it&amp;#39;s about 2-3x faster&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7y518", "score_hidden": false, "stickied": false, "created": 1492135389.0, "created_utc": 1492106589.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7t4ge", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "ings0c", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "My attempt at #1:\n\n    function longestSentence(text) {\n\t    return text\n\t\t    .split(/[\\.\\?\\!]/g)\n\t\t    .map(function(sentence) {\n\t\t    \treturn sentence\n\t\t\t        .split(' ')\n\t\t\t        .filter(function(word) {\n\t\t\t            return word !== '';\n\t\t\t        })\n\t\t\t        .length;\n\t\t    })\n\t\t    .sort()\n\t\t    .reverse()\n\t\t    [0];\n        }", "edited": 1492101944.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My attempt at #1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function longestSentence(text) {\n    return text\n        .split(/[\\.\\?\\!]/g)\n        .map(function(sentence) {\n            return sentence\n                .split(&amp;#39; &amp;#39;)\n                .filter(function(word) {\n                    return word !== &amp;#39;&amp;#39;;\n                })\n                .length;\n        })\n        .sort()\n        .reverse()\n        [0];\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7t4ge", "score_hidden": false, "stickied": false, "created": 1492130056.0, "created_utc": 1492101256.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7w3dd", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg7uaxa", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "That is *really* clever! How'd you figure that one out?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That is &lt;em&gt;really&lt;/em&gt; clever! How&amp;#39;d you figure that one out?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7w3dd", "score_hidden": false, "stickied": false, "created": 1492133215.0, "created_utc": 1492104415.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7uaxa", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "diego0020", "parent_id": "t1_dg7r0f9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Maybe you don't need a loop, you only need to count all the integers between sqrt(A) and sqrt(B), something like:\n\n    Math.floor(Math.sqrt(B)) - Math.ceil(Math.sqrt(A)) + 1\n\nWith some additional to take care of negatives.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe you don&amp;#39;t need a loop, you only need to count all the integers between sqrt(A) and sqrt(B), something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Math.floor(Math.sqrt(B)) - Math.ceil(Math.sqrt(A)) + 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With some additional to take care of negatives.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7uaxa", "score_hidden": false, "stickied": false, "created": 1492131319.0, "created_utc": 1492102519.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7r0f9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kiswa", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Not going to mess with RegEx right now, but your second solution can be drastically simplified:\n\n\n    function solution(A, B) {\n      var numSquares = 0;\n    \n      for (var i = A; i &lt;= B; i++) {\n        if (Math.sqrt(i) % 1 === 0) numSquares++;\n      }\n      \n      return numSquares;\n    }\n\nAlthough, with the way you worded it I would change the for loop to not include the first and last numbers. I'd also include basic sanity checks:\n\n    function solution(A, B) {\n      if (typeof A !== 'number' || typeof B !== 'number') return 0;\n\n      var numSquares = 0;\n    \n      for (var i = A + 1; i &lt; B; i++) {\n        if (Math.sqrt(i) % 1 === 0) numSquares++;\n      }\n      \n      return numSquares;\n    }", "edited": 1492099383.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not going to mess with RegEx right now, but your second solution can be drastically simplified:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution(A, B) {\n  var numSquares = 0;\n\n  for (var i = A; i &amp;lt;= B; i++) {\n    if (Math.sqrt(i) % 1 === 0) numSquares++;\n  }\n\n  return numSquares;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although, with the way you worded it I would change the for loop to not include the first and last numbers. I&amp;#39;d also include basic sanity checks:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution(A, B) {\n  if (typeof A !== &amp;#39;number&amp;#39; || typeof B !== &amp;#39;number&amp;#39;) return 0;\n\n  var numSquares = 0;\n\n  for (var i = A + 1; i &amp;lt; B; i++) {\n    if (Math.sqrt(i) % 1 === 0) numSquares++;\n  }\n\n  return numSquares;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7r0f9", "score_hidden": false, "stickied": false, "created": 1492127809.0, "created_utc": 1492099009.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8yaj8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "daveonhols", "parent_id": "t1_dg8y693", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Missing , from split maybe??\nAlso I would just reduce on the lengths directly not the sentences themselves, I.e. track shortest length as a number not the sentence, you don't need to look up length a second time at end.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Missing , from split maybe??\nAlso I would just reduce on the lengths directly not the sentences themselves, I.e. track shortest length as a number not the sentence, you don&amp;#39;t need to look up length a second time at end.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8yaj8", "score_hidden": false, "stickied": false, "created": 1492190111.0, "created_utc": 1492161311.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dga37cl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "neRok00", "parent_id": "t1_dg8y693", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Because your code presumes that a sentence with more characters is the one with more words, which is not the case.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Because your code presumes that a sentence with more characters is the one with more words, which is not the case.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga37cl", "score_hidden": false, "stickied": false, "created": 1492248797.0, "created_utc": 1492219997.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8y693", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg8lwgb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8y693", "score_hidden": false, "stickied": false, "created": 1492189717.0, "created_utc": 1492160917.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8lwgb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "neRok00", "parent_id": "t1_dg88vih", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "    # Your first solution won't work...\n    a = \"If a sentence has lots of small words like this one.\"\n    # And you compare with one like this...\n    s = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"   ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;# Your first solution won&amp;#39;t work...\na = &amp;quot;If a sentence has lots of small words like this one.&amp;quot;\n# And you compare with one like this...\ns = &amp;quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&amp;quot;   \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8lwgb", "score_hidden": false, "stickied": false, "created": 1492164641.0, "created_utc": 1492135841.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg88vih", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg88vih", "score_hidden": false, "stickied": false, "created": 1492147217.0, "created_utc": 1492118417.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8g8m4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rejectedbyhired", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Thanks guys.  Couple of notes...remember you only get 60 minutes to do the 2 exercises. You don't know how hard they are going to be and the questions were written technically so it takes a bit of time to decipher what it wants you to do. In my case, I focused on getting the function to output correctly as opposed to elegance or performance, but it was my fault for not using the extra time to look over my work cause I was so focused on getting the output correct.\n\nFor question 1, they don't test for performance for this one, only the correct answer. You had to test for edge cases. Sentences like: '  Hi my name is Joe.! ! ! !  !???   ?? How are you .  . . ?? ..' etc... hence the multiple regex replaces. I'm not a pro at regex and performance didn't matter so just dumped it in.\n\nQuestion 2. Definitely missed the boat on this one. As I mentioned in my post, I shouldve just used the first for loop and the foreach was unnecessary as well as getting rid of the negatives. I didn't think about performance on this one, just getting the solution correct. Had about 10 min left and should have taken all the time to fix the code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks guys.  Couple of notes...remember you only get 60 minutes to do the 2 exercises. You don&amp;#39;t know how hard they are going to be and the questions were written technically so it takes a bit of time to decipher what it wants you to do. In my case, I focused on getting the function to output correctly as opposed to elegance or performance, but it was my fault for not using the extra time to look over my work cause I was so focused on getting the output correct.&lt;/p&gt;\n\n&lt;p&gt;For question 1, they don&amp;#39;t test for performance for this one, only the correct answer. You had to test for edge cases. Sentences like: &amp;#39;  Hi my name is Joe.! ! ! !  !???   ?? How are you .  . . ?? ..&amp;#39; etc... hence the multiple regex replaces. I&amp;#39;m not a pro at regex and performance didn&amp;#39;t matter so just dumped it in.&lt;/p&gt;\n\n&lt;p&gt;Question 2. Definitely missed the boat on this one. As I mentioned in my post, I shouldve just used the first for loop and the foreach was unnecessary as well as getting rid of the negatives. I didn&amp;#39;t think about performance on this one, just getting the solution correct. Had about 10 min left and should have taken all the time to fix the code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8g8m4", "score_hidden": false, "stickied": false, "created": 1492156825.0, "created_utc": 1492128025.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7tqpq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "limits660", "parent_id": "t1_dg7soqn", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I think maybe there was a misunderstanding.  It was more of a passive technique, not directly hiring.  Was under the impression hired and those firms herd the cattle and make the correct people available to look at for a price.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think maybe there was a misunderstanding.  It was more of a passive technique, not directly hiring.  Was under the impression hired and those firms herd the cattle and make the correct people available to look at for a price.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7tqpq", "score_hidden": false, "stickied": false, "created": 1492130723.0, "created_utc": 1492101923.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7soqn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lared930", "parent_id": "t1_dg7qp9t", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; I wish these firms would slowly build trust in the candidates meaning pose a question weekly, give coders some time to work through the problem and then submit results. Over time you would get a sense of what the coder can and cannot do but also provide feedback to help them learn.\n\nThis doesn't really work since it takes a ton of time, and experienced people will likely tell them to fuck off if they learned that getting hired will take at least a month.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I wish these firms would slowly build trust in the candidates meaning pose a question weekly, give coders some time to work through the problem and then submit results. Over time you would get a sense of what the coder can and cannot do but also provide feedback to help them learn.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This doesn&amp;#39;t really work since it takes a ton of time, and experienced people will likely tell them to fuck off if they learned that getting hired will take at least a month.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7soqn", "score_hidden": false, "stickied": false, "created": 1492129585.0, "created_utc": 1492100785.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7vzoa", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg7qp9t", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I agree he has potential in the future---if only because he created correct solutions.\n\nRule #1, get it correct. Rule #2, get it elegant. Rule #3, get it fast.\n\nHe's succeeding in #1, but failing in #2 and #3, which is why they dinged him.\n\nHe created an array to iterate over a list of numbers from 1-10. Now... sure it's what I'd do in Python because I'm so used to the range() function, but technically this is a terrible solution because it requires an array of N to be instantiated, so the function takes more memory that it needs to.\n\nIn javascript, the proper way to iterate across a range of numbers is.... a for loop.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree he has potential in the future---if only because he created correct solutions.&lt;/p&gt;\n\n&lt;p&gt;Rule #1, get it correct. Rule #2, get it elegant. Rule #3, get it fast.&lt;/p&gt;\n\n&lt;p&gt;He&amp;#39;s succeeding in #1, but failing in #2 and #3, which is why they dinged him.&lt;/p&gt;\n\n&lt;p&gt;He created an array to iterate over a list of numbers from 1-10. Now... sure it&amp;#39;s what I&amp;#39;d do in Python because I&amp;#39;m so used to the range() function, but technically this is a terrible solution because it requires an array of N to be instantiated, so the function takes more memory that it needs to.&lt;/p&gt;\n\n&lt;p&gt;In javascript, the proper way to iterate across a range of numbers is.... a for loop.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7vzoa", "score_hidden": false, "stickied": false, "created": 1492133107.0, "created_utc": 1492104307.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg8yd0v", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "daveonhols", "parent_id": "t1_dg7qp9t", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I don't agree with this, this are not that hard and decent filter questions. An employer is trying to hire someone not spend a week waiting for them to figure this out.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t agree with this, this are not that hard and decent filter questions. An employer is trying to hire someone not spend a week waiting for them to figure this out.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg8yd0v", "score_hidden": false, "stickied": false, "created": 1492190337.0, "created_utc": 1492161537.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7qp9t", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "limits660", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I wouldn't read too much into it.  These so called tests probably don't reflect your true potential as a coder.  I really don't like them and I wish firms would take a better approach to them.\n\nI wish these firms would slowly build trust in the candidates meaning pose a question weekly, give coders some time to work through the problem and then submit results.  Over time you would get a sense of what the coder can and cannot do but also provide feedback to help them learn.\n\nOnly advice is don't let it deter you.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wouldn&amp;#39;t read too much into it.  These so called tests probably don&amp;#39;t reflect your true potential as a coder.  I really don&amp;#39;t like them and I wish firms would take a better approach to them.&lt;/p&gt;\n\n&lt;p&gt;I wish these firms would slowly build trust in the candidates meaning pose a question weekly, give coders some time to work through the problem and then submit results.  Over time you would get a sense of what the coder can and cannot do but also provide feedback to help them learn.&lt;/p&gt;\n\n&lt;p&gt;Only advice is don&amp;#39;t let it deter you.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7qp9t", "score_hidden": false, "stickied": false, "created": 1492127478.0, "created_utc": 1492098678.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7xrwt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bajunio", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Were you allowed to choose your language?  \n\nHere is a quick Ruby Method for #1:\n\n    def word_count(text)\n      sentences = text.split(/[!.?]/).sort!\n      words     = sentences[0].split(\" \")\n      return words.size\n    end\n\nHere is my edit so I can include another Ruby Method, this time for #2:\n\n    def number_of_squares(int1, int2)\n      i = int1\n      array = Array.new()\n      while i &lt; int2\n        i += 1\n        array.push(i)\n      end\n      array.pop\n      array.select { |number| Math.sqrt(number) % 1 == 0}.size\n    end\n", "edited": 1492107575.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Were you allowed to choose your language?  &lt;/p&gt;\n\n&lt;p&gt;Here is a quick Ruby Method for #1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def word_count(text)\n  sentences = text.split(/[!.?]/).sort!\n  words     = sentences[0].split(&amp;quot; &amp;quot;)\n  return words.size\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is my edit so I can include another Ruby Method, this time for #2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def number_of_squares(int1, int2)\n  i = int1\n  array = Array.new()\n  while i &amp;lt; int2\n    i += 1\n    array.push(i)\n  end\n  array.pop\n  array.select { |number| Math.sqrt(number) % 1 == 0}.size\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7xrwt", "score_hidden": false, "stickied": false, "created": 1492135002.0, "created_utc": 1492106202.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7w6oq", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg7rqgf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "The fact that you can tell what he's doing, does not make it \"good\" code----it makes it a simple problem, with a short and correct solution.\n\nIf there were any bugs, disentangling that regex replace chain might have been hairy.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The fact that you can tell what he&amp;#39;s doing, does not make it &amp;quot;good&amp;quot; code----it makes it a simple problem, with a short and correct solution.&lt;/p&gt;\n\n&lt;p&gt;If there were any bugs, disentangling that regex replace chain might have been hairy.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7w6oq", "score_hidden": false, "stickied": false, "created": 1492133315.0, "created_utc": 1492104515.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7rqgf", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "redbluerat", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ok answer 1 is perfect. Something has gone very badly wrong if they're not passing that because your solution is the most logical way.\n\nHaha, the same for the second.\n\nWow, these tests are very stupid if you're failing. It's good logical and clear code. Performance should absolutely not be tested here (and, indeed, should be done at the end of a project when tweaking long running functions). Clear, readable, code is the priority.\n\nAlso, JS performance is counter intuitive and, many times, requires refactoring in a way that reduces the readability of the code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok answer 1 is perfect. Something has gone very badly wrong if they&amp;#39;re not passing that because your solution is the most logical way.&lt;/p&gt;\n\n&lt;p&gt;Haha, the same for the second.&lt;/p&gt;\n\n&lt;p&gt;Wow, these tests are very stupid if you&amp;#39;re failing. It&amp;#39;s good logical and clear code. Performance should absolutely not be tested here (and, indeed, should be done at the end of a project when tweaking long running functions). Clear, readable, code is the priority.&lt;/p&gt;\n\n&lt;p&gt;Also, JS performance is counter intuitive and, many times, requires refactoring in a way that reduces the readability of the code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7rqgf", "score_hidden": false, "stickied": false, "created": 1492128583.0, "created_utc": 1492099783.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_655hi9", "likes": null, "replies": "", "user_reports": [], "id": "dg7pxgl", "gilded": 0, "archived": false, "score": -11, "report_reasons": null, "author": "d_ssembler", "parent_id": "t3_655hi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "solution,  dont suck", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;solution,  dont suck&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg7pxgl", "score_hidden": false, "stickied": false, "created": 1492126658.0, "created_utc": 1492097858.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -11}}], "after": null, "before": null}}]