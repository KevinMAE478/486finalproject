[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just thought I&amp;#39;d share a process I came up with for upgrading password security on an old site of mine without the users knowing or having to do anything. I do not consider myself a security expert, so I&amp;#39;d also welcome comments about any issues with this process!&lt;/p&gt;\n\n&lt;p&gt;My old site was still using SHA hashes to store passwords and I wanted to upgrade it to use BCRYPT (via the php &lt;code&gt;password_hash()&lt;/code&gt; function), but I didn&amp;#39;t want to force a password change on my users, so this is what I did:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;I updated the login code so that if the SHA hash of the entered password didn&amp;#39;t match, it checks it against BCRYPT. If that didn&amp;#39;t match either, it checks it with a BCRYPT of the SHA hash and (if it matches) re-saves the BCRYPT of the actual password.&lt;/li&gt;\n&lt;li&gt;I updated the account page code so that when a user changes their password it uses BCRYPT to hash it.&lt;/li&gt;\n&lt;li&gt;I used BCRYPT to hash all of the SHA hashed passwords stored in the database.&lt;/li&gt;\n&lt;li&gt;I removed the part of the code from 1. that checks if the old SHA hash matches, so it now just checks the BCRYPT hash and the BCRYPT hash of the SHA hash.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now all the passwords in the database are BCRYPTed and my users don&amp;#39;t know it happened. The next time they login, their password is updated in the system to be inline with best practice. Users who don&amp;#39;t login again for a long time (or ever) have a more secure hash of their password. I suspect that 99% of the time the BCRYPT of the SHA hash of the password is just as secure as a BCRYPT of the password, and certainly better as an interim solution than just leaving it as the SHA hash.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I didn&amp;#39;t mention it explicitly in the above process, but I also salt the password, even though &lt;code&gt;password_hash()&lt;/code&gt; does it as well. Why? Because (a) I am in the habit of always salting and it didn&amp;#39;t occur to me to break that habit, (b) it doesn&amp;#39;t hurt to do it and (c) if for some reason the hashing function is changed in the future to something that doesn&amp;#39;t salt, the salting is still there in the code to make sure it happens.&lt;/p&gt;\n\n&lt;p&gt;EDIT 2: As per &lt;a href=\"https://www.reddit.com/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/dgdwhff/\"&gt;this comment&lt;/a&gt; from &lt;a href=\"/u/NikkoTheGreeko\"&gt;/u/NikkoTheGreeko&lt;/a&gt;, I am updating the code to check whether the password entered by the user looks like an SHA hash from one of my backups (40 characters long, 0-9 and a-f only). If it does, then I will deny login and email the user a link to reset their password using the existing forgotten password process. I will also email an alert to myself so I know one of my backups has likely been compromised!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Just thought I'd share a process I came up with for upgrading password security on an old site of mine without the users knowing or having to do anything. I do not consider myself a security expert, so I'd also welcome comments about any issues with this process!\n\nMy old site was still using SHA hashes to store passwords and I wanted to upgrade it to use BCRYPT (via the php `password_hash()` function), but I didn't want to force a password change on my users, so this is what I did:\n\n1. I updated the login code so that if the SHA hash of the entered password didn't match, it checks it against BCRYPT. If that didn't match either, it checks it with a BCRYPT of the SHA hash and (if it matches) re-saves the BCRYPT of the actual password.\n2. I updated the account page code so that when a user changes their password it uses BCRYPT to hash it.\n3. I used BCRYPT to hash all of the SHA hashed passwords stored in the database.\n4. I removed the part of the code from 1. that checks if the old SHA hash matches, so it now just checks the BCRYPT hash and the BCRYPT hash of the SHA hash.\n\nNow all the passwords in the database are BCRYPTed and my users don't know it happened. The next time they login, their password is updated in the system to be inline with best practice. Users who don't login again for a long time (or ever) have a more secure hash of their password. I suspect that 99% of the time the BCRYPT of the SHA hash of the password is just as secure as a BCRYPT of the password, and certainly better as an interim solution than just leaving it as the SHA hash.\n\nEDIT: I didn't mention it explicitly in the above process, but I also salt the password, even though `password_hash()` does it as well. Why? Because (a) I am in the habit of always salting and it didn't occur to me to break that habit, (b) it doesn't hurt to do it and (c) if for some reason the hashing function is changed in the future to something that doesn't salt, the salting is still there in the code to make sure it happens.\n\nEDIT 2: As per [this comment](https://www.reddit.com/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/dgdwhff/) from /u/NikkoTheGreeko, I am updating the code to check whether the password entered by the user looks like an SHA hash from one of my backups (40 characters long, 0-9 and a-f only). If it does, then I will deny login and email the user a link to reset their password using the existing forgotten password process. I will also email an alert to myself so I know one of my backups has likely been compromised!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65vify", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 288, "report_reasons": null, "author": "lindymad", "saved": false, "mod_reports": [], "name": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "self.webdev", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qs0q", "edited": 1492456631.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/", "num_reports": null, "locked": false, "stickied": false, "created": 1492464187.0, "url": "https://www.reddit.com/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/", "author_flair_text": null, "quarantine": false, "title": "Upgrading password security without users noticing", "created_utc": 1492435387.0, "distinguished": null, "media": null, "upvote_ratio": 0.95, "num_comments": 83, "visited": false, "subreddit_type": "public", "ups": 288}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdiq54", "gilded": 0, "archived": false, "score": 115, "report_reasons": null, "author": "midasgoldentouch", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Yep, this is how you plan or feature changes with 0 downtime. Good job OP!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep, this is how you plan or feature changes with 0 downtime. Good job OP!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdiq54", "score_hidden": false, "stickied": false, "created": 1492467005.0, "created_utc": 1492438205.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 115}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgehh01", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Pyromine", "parent_id": "t1_dgee6nw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "famous last words", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;famous last words&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgehh01", "score_hidden": false, "stickied": false, "created": 1492508424.0, "created_utc": 1492479624.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgelpsl", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "SupaSlide", "parent_id": "t1_dgejoyr", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "But don't forget to check they they are working, as in working backups. IIRC GitLab had backups that existed but didn't work, so they too may have been getting \"Successfully Backed Up!\" notifications but in reality they were useless files.\n\nJust don't want you to have the great GitLab Crash 2.0 on your hands :P", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But don&amp;#39;t forget to check they they are working, as in working backups. IIRC GitLab had backups that existed but didn&amp;#39;t work, so they too may have been getting &amp;quot;Successfully Backed Up!&amp;quot; notifications but in reality they were useless files.&lt;/p&gt;\n\n&lt;p&gt;Just don&amp;#39;t want you to have the great GitLab Crash 2.0 on your hands :P&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgelpsl", "score_hidden": false, "stickied": false, "created": 1492513558.0, "created_utc": 1492484758.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgejoyr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgei0sd", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Oh I remember reading that :) I get an email if one of them fails and they are automatically uploaded to a secondary server (I get an email if that fails as well).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh I remember reading that :) I get an email if one of them fails and they are automatically uploaded to a secondary server (I get an email if that fails as well).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgejoyr", "score_hidden": false, "stickied": false, "created": 1492511033.0, "created_utc": 1492482233.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgei0sd", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "SupaSlide", "parent_id": "t1_dgee6nw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You better be darn sure those daily backups work. Check out this report of what happened to [GitLab's database which had multiple backups.](https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You better be darn sure those daily backups work. Check out this report of what happened to &lt;a href=\"https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/\"&gt;GitLab&amp;#39;s database which had multiple backups.&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgei0sd", "score_hidden": false, "stickied": false, "created": 1492509071.0, "created_utc": 1492480271.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgee6nw", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgedkby", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I have backups for 7 days in case of a problem, but for this system there's no need for historical backups.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have backups for 7 days in case of a problem, but for this system there&amp;#39;s no need for historical backups.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgee6nw", "score_hidden": false, "stickied": false, "created": 1492504335.0, "created_utc": 1492475535.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgedkby", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "hardolaf", "parent_id": "t1_dge6z8n", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You have no historical backups?!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You have no historical backups?!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgedkby", "score_hidden": false, "stickied": false, "created": 1492503553.0, "created_utc": 1492474753.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dge6z8n", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dge3y64", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Actually for this system there's no real requirement to keep more than one backup (it currently does daily backups, with backups older than 7 days deleted automatically), so I have simply run a new backup and deleted the old ones :)", "edited": 1492467842.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Actually for this system there&amp;#39;s no real requirement to keep more than one backup (it currently does daily backups, with backups older than 7 days deleted automatically), so I have simply run a new backup and deleted the old ones :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge6z8n", "score_hidden": false, "stickied": false, "created": 1492495068.0, "created_utc": 1492466268.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge3y64", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "NikkoTheGreeko", "parent_id": "t1_dgdycay", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; I will also send me an alert so I know a backup was probably compromised.\n\nGood idea.  Probably a good idea to also encrypt the backups and take them offline as well.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I will also send me an alert so I know a backup was probably compromised.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Good idea.  Probably a good idea to also encrypt the backups and take them offline as well.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge3y64", "score_hidden": false, "stickied": false, "created": 1492491399.0, "created_utc": 1492462599.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgeg4vu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgefypx", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This is why I salted the passwords, so it should be pretty difficult to get that database and also the reason I wanted to move to a stronger encryption.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is why I salted the passwords, so it should be pretty difficult to get that database and also the reason I wanted to move to a stronger encryption.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgeg4vu", "score_hidden": false, "stickied": false, "created": 1492506747.0, "created_utc": 1492477947.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgefypx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "gerbs", "parent_id": "t1_dgecmbc", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I'm not worried that someone will crack the password and log into your site: I'm worried that someone will crack the password and sell a giant username:password database. Users are stupid and use the same username and password for everything, so theoretically I can take that table of info and go over to banks, Facebook, Google, and see what I can get in to.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not worried that someone will crack the password and log into your site: I&amp;#39;m worried that someone will crack the password and sell a giant username:password database. Users are stupid and use the same username and password for everything, so theoretically I can take that table of info and go over to banks, Facebook, Google, and see what I can get in to.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgefypx", "score_hidden": false, "stickied": false, "created": 1492506536.0, "created_utc": 1492477736.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgecmbc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dge9bwk", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "My understanding was that the problem is that if someone got a hold of the backup, they could then use the sha hash as the password to login to the site, which works because the code checks both the BCRYPT of the password and the BCRYPT of the SHA of the password. If you enter the SHA of the password directly, it will match on the BCRYPT of the password. Therefore testing if it looks like an SHA hash prevents this attack.\n\nAs for cracking the SHA passwords, this was a risk before and after the update I did, so I don't think the comment is referring to that issue.\n\nI guess the downvotes were because it *was* what was meant, but also perhaps because of the (incorrect) assumption that the SHA passwords were not salted.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My understanding was that the problem is that if someone got a hold of the backup, they could then use the sha hash as the password to login to the site, which works because the code checks both the BCRYPT of the password and the BCRYPT of the SHA of the password. If you enter the SHA of the password directly, it will match on the BCRYPT of the password. Therefore testing if it looks like an SHA hash prevents this attack.&lt;/p&gt;\n\n&lt;p&gt;As for cracking the SHA passwords, this was a risk before and after the update I did, so I don&amp;#39;t think the comment is referring to that issue.&lt;/p&gt;\n\n&lt;p&gt;I guess the downvotes were because it &lt;em&gt;was&lt;/em&gt; what was meant, but also perhaps because of the (incorrect) assumption that the SHA passwords were not salted.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgecmbc", "score_hidden": false, "stickied": false, "created": 1492502346.0, "created_utc": 1492473546.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge9bwk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sybia123", "parent_id": "t1_dge81pq", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Yeah, I don't know why you were downvoted. The user wouldn't be entering a SHA password on your site, so testing if it looks like a SHA hash does nothing. If your SHA backup is compromised, the hacker can crack the SHA passwords and get the plaintext password. They would then log into the site with the plaintext password, not the SHA hash...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, I don&amp;#39;t know why you were downvoted. The user wouldn&amp;#39;t be entering a SHA password on your site, so testing if it looks like a SHA hash does nothing. If your SHA backup is compromised, the hacker can crack the SHA passwords and get the plaintext password. They would then log into the site with the plaintext password, not the SHA hash...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge9bwk", "score_hidden": false, "stickied": false, "created": 1492498077.0, "created_utc": 1492469277.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge81pq", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "VoiceNGO", "parent_id": "t1_dgdycay", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "That's not what's meant.  Someone entering an SHA hash doesn't do anything.  If someone gets ahold of your backup database with the old SHA passwords in it, assuming they're not salted they can crack the entire database pretty quickly.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s not what&amp;#39;s meant.  Someone entering an SHA hash doesn&amp;#39;t do anything.  If someone gets ahold of your backup database with the old SHA passwords in it, assuming they&amp;#39;re not salted they can crack the entire database pretty quickly.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge81pq", "score_hidden": false, "stickied": false, "created": 1492496407.0, "created_utc": 1492467607.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdycay", "gilded": 0, "archived": false, "score": 16, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdwhff", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It took me a couple of comments, but now that I understand how this could happen, I am making an update to the code as follows:\n\nIf the password entered by the user looks like an SHA hash (40 characters long, 0-9 and a-f only) then I will email the user a link to reset their password using the existing forgotten password process. I will also send me an alert so I know a backup was probably compromised.", "edited": 1492456480.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It took me a couple of comments, but now that I understand how this could happen, I am making an update to the code as follows:&lt;/p&gt;\n\n&lt;p&gt;If the password entered by the user looks like an SHA hash (40 characters long, 0-9 and a-f only) then I will email the user a link to reset their password using the existing forgotten password process. I will also send me an alert so I know a backup was probably compromised.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdycay", "score_hidden": false, "stickied": false, "created": 1492485098.0, "created_utc": 1492456298.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 16}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdx1mb", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdwvio", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; You can take the old hashed passwords and use them in your login form \n\nHow do you mean? ~~If you put the old hashed password in the login form, it will be BCRYPTed and will never match what is in the database for the user.~~\n\n&gt; any user account who hasn't had their password changed from Plain Text-&gt;Bcrypt.\n\nBut I changed all user's passwords and none of them were in plain text in the first place, they all went SHA-&gt;BCRYPT\n\nEDIT: I take it back, I understand now - I thought that the salting would prevent that problem, but it does not. I have now accounted for this - see the edit to my post.", "edited": 1492457083.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You can take the old hashed passwords and use them in your login form &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;How do you mean? &lt;del&gt;If you put the old hashed password in the login form, it will be BCRYPTed and will never match what is in the database for the user.&lt;/del&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;any user account who hasn&amp;#39;t had their password changed from Plain Text-&amp;gt;Bcrypt.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;But I changed all user&amp;#39;s passwords and none of them were in plain text in the first place, they all went SHA-&amp;gt;BCRYPT&lt;/p&gt;\n\n&lt;p&gt;EDIT: I take it back, I understand now - I thought that the salting would prevent that problem, but it does not. I have now accounted for this - see the edit to my post.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdx1mb", "score_hidden": false, "stickied": false, "created": 1492483627.0, "created_utc": 1492454827.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwvio", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "NikkoTheGreeko", "parent_id": "t1_dgdwpzk", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You can take the old hashed passwords and use them in your login form to authenticate any user account who hasn't had their password changed from Plain Text-&gt;Bcrypt.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can take the old hashed passwords and use them in your login form to authenticate any user account who hasn&amp;#39;t had their password changed from Plain Text-&amp;gt;Bcrypt.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdwvio", "score_hidden": false, "stickied": false, "created": 1492483435.0, "created_utc": 1492454635.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwpzk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdwhff", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Can you expand further on this? How can I determine the plain text password if all I have is the SHA hash of the (salted) password and either the BCRYPT hash of that SHA hash, or the BCRYPT hash of the password (differently salted)?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you expand further on this? How can I determine the plain text password if all I have is the SHA hash of the (salted) password and either the BCRYPT hash of that SHA hash, or the BCRYPT hash of the password (differently salted)?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdwpzk", "score_hidden": false, "stickied": false, "created": 1492483262.0, "created_utc": 1492454462.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwhff", "gilded": 0, "archived": false, "score": 32, "report_reasons": null, "author": "NikkoTheGreeko", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This is commonly how it's done.  Just be aware that your server backups now contain plain text passwords (the old SHA hashed passwords are as secure as plain text if someone gets access to the backup of your user's table).", "edited": 1492462401.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is commonly how it&amp;#39;s done.  Just be aware that your server backups now contain plain text passwords (the old SHA hashed passwords are as secure as plain text if someone gets access to the backup of your user&amp;#39;s table).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdwhff", "score_hidden": false, "stickied": false, "created": 1492482992.0, "created_utc": 1492454192.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 32}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdz6d4", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "daytodave", "parent_id": "t1_dgdxrsb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "OP only has the SHA hashes saved, but wants to update the database to only store BCRYPT hashes. So she updates the database to store the BCRYPTs of the SHAs, and the login page to check the BCRYPT of the SHA of whatever was entered.\n\nOP would rather have just the BCRYPT hash of the password, but she can't do that directly because of course the actual passwords aren't saved anywhere.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OP only has the SHA hashes saved, but wants to update the database to only store BCRYPT hashes. So she updates the database to store the BCRYPTs of the SHAs, and the login page to check the BCRYPT of the SHA of whatever was entered.&lt;/p&gt;\n\n&lt;p&gt;OP would rather have just the BCRYPT hash of the password, but she can&amp;#39;t do that directly because of course the actual passwords aren&amp;#39;t saved anywhere.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdz6d4", "score_hidden": false, "stickied": false, "created": 1492486054.0, "created_utc": 1492457254.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdxrsb", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "madcapmonster", "parent_id": "t1_dgdn37c", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "What purpose would that serve? I can't picture a situation where this would actually match. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What purpose would that serve? I can&amp;#39;t picture a situation where this would actually match. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdxrsb", "score_hidden": false, "stickied": false, "created": 1492484451.0, "created_utc": 1492455651.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgem712", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SituationSoap", "parent_id": "t1_dgdn37c", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "There's no need for an intermediate step; if the SHA has matches, simply update the DB with the new Bcrypt hash. Sunset old passwords about three months after you do this by requiring password changes on any accounts with an old hash.\n\nIt's a quarter of the engineering and none of the silly security risks and just as invisible for users.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s no need for an intermediate step; if the SHA has matches, simply update the DB with the new Bcrypt hash. Sunset old passwords about three months after you do this by requiring password changes on any accounts with an old hash.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a quarter of the engineering and none of the silly security risks and just as invisible for users.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgem712", "score_hidden": false, "stickied": false, "created": 1492514163.0, "created_utc": 1492485363.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdn37c", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "renaissancenow", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I like this.  The idea of using BCRYPT on the SHA hashes as an intermediate step never occurred to me - I can totally see myself using this approach in a couple of places.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like this.  The idea of using BCRYPT on the SHA hashes as an intermediate step never occurred to me - I can totally see myself using this approach in a couple of places.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdn37c", "score_hidden": false, "stickied": false, "created": 1492472500.0, "created_utc": 1492443700.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdveof", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "scootstah", "parent_id": "t1_dgdo04p", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This. You might see something and go \"hmm, I wonder why they didn't do XYZ? I'll just go ahead and add that.\" Well, there is probably a very good reason that things are the way they are. Leave crypto shit alone and just use what you're given.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This. You might see something and go &amp;quot;hmm, I wonder why they didn&amp;#39;t do XYZ? I&amp;#39;ll just go ahead and add that.&amp;quot; Well, there is probably a very good reason that things are the way they are. Leave crypto shit alone and just use what you&amp;#39;re given.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdveof", "score_hidden": false, "stickied": false, "created": 1492481782.0, "created_utc": 1492452982.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdo04p", "gilded": 0, "archived": false, "score": 43, "report_reasons": null, "author": "Klathmon", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This is a great write up, but I just wanted to caution one thing.\n\nDon't muck with security primitives yourself unless you know very well what you are doing. You mentioned that you added your own salt on top of the one that is already added by `password_hash`. That should be fine, but you should be very wary of doing things like this.\n\nSecurity is hard, and sometimes things that feel more secure are actually less secure, sometimes significantly.\n\nA common one is people like to \"double encrypt\" things feeling like it makes them more secure, but in reality all a naive implementation of this does is double the amount of keys they need to work with. And secure key management is by far the most dangerous and difficult part of secure crypto.\n\n\nJust in the future, if you aren't 100% sure what you are doing, stick to what the experts recommend. Nothing more, nothing less. At the very least you will reduce complexity and maintenance costs, and at best you could prevent an \"unknown to you\" vulnerability.", "edited": 1492445057.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is a great write up, but I just wanted to caution one thing.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t muck with security primitives yourself unless you know very well what you are doing. You mentioned that you added your own salt on top of the one that is already added by &lt;code&gt;password_hash&lt;/code&gt;. That should be fine, but you should be very wary of doing things like this.&lt;/p&gt;\n\n&lt;p&gt;Security is hard, and sometimes things that feel more secure are actually less secure, sometimes significantly.&lt;/p&gt;\n\n&lt;p&gt;A common one is people like to &amp;quot;double encrypt&amp;quot; things feeling like it makes them more secure, but in reality all a naive implementation of this does is double the amount of keys they need to work with. And secure key management is by far the most dangerous and difficult part of secure crypto.&lt;/p&gt;\n\n&lt;p&gt;Just in the future, if you aren&amp;#39;t 100% sure what you are doing, stick to what the experts recommend. Nothing more, nothing less. At the very least you will reduce complexity and maintenance costs, and at best you could prevent an &amp;quot;unknown to you&amp;quot; vulnerability.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdo04p", "score_hidden": false, "stickied": false, "created": 1492473546.0, "created_utc": 1492444746.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 43}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdsav9", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdqmb2", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; you now have code in your code base that has to be maintained for the purpose of users who haven't logged in for years, you have to ask yourself is it worth it?\n\nIn my opinion, yes it's worth it. It's only a few extra lines of code and it saves being an annoyance to users.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;you now have code in your code base that has to be maintained for the purpose of users who haven&amp;#39;t logged in for years, you have to ask yourself is it worth it?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In my opinion, yes it&amp;#39;s worth it. It&amp;#39;s only a few extra lines of code and it saves being an annoyance to users.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdsav9", "score_hidden": false, "stickied": false, "created": 1492478349.0, "created_utc": 1492449549.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdqmb2", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "samboskull", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Good write up, I remember having the same problem at my last job (Only MD5 hashed passwords...) and solved it exactly the same: New login table, create an \"OldPassword\" column that stored the old MD5 hash'd password and then a \"NewPassword\" that would be empty or store their new BCrypt password.\n\nYou've gone an interesting way with encrypting the SHA hashes though, which does make sense however you now have code in your code base that has to be maintained for the purpose of users who haven't logged in for years, you have to ask yourself is it worth it?\n\nThe approach we took was 6 months after the change rolled out, anyone that hadn't logged in (and been 'upgraded' as it were) would just have their legacy hash removed and would have to reset their password.  Doubled up as confirming their e-mail was still valid and their user-pass combo hadn't been compromised.\n\nKnowing my old company though, that legacy cheese is still in there, festering away until some new junior dev with no clue about password security is tasked with fixing it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good write up, I remember having the same problem at my last job (Only MD5 hashed passwords...) and solved it exactly the same: New login table, create an &amp;quot;OldPassword&amp;quot; column that stored the old MD5 hash&amp;#39;d password and then a &amp;quot;NewPassword&amp;quot; that would be empty or store their new BCrypt password.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;ve gone an interesting way with encrypting the SHA hashes though, which does make sense however you now have code in your code base that has to be maintained for the purpose of users who haven&amp;#39;t logged in for years, you have to ask yourself is it worth it?&lt;/p&gt;\n\n&lt;p&gt;The approach we took was 6 months after the change rolled out, anyone that hadn&amp;#39;t logged in (and been &amp;#39;upgraded&amp;#39; as it were) would just have their legacy hash removed and would have to reset their password.  Doubled up as confirming their e-mail was still valid and their user-pass combo hadn&amp;#39;t been compromised.&lt;/p&gt;\n\n&lt;p&gt;Knowing my old company though, that legacy cheese is still in there, festering away until some new junior dev with no clue about password security is tasked with fixing it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdqmb2", "score_hidden": false, "stickied": false, "created": 1492476474.0, "created_utc": 1492447674.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge7hjk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dge40m3", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "That's been the bulk of it recently. I had a decent php MySQL project in January/February, but that reached completion. I joined a local hackers who help 501c3's who don't have much IT collective, just for networking purposes, and have started down the path of learning laravel as of last weekend. I feel like that might be a bit more promising in helping look beyond my immediate area. Point is I'm trying to diversify, but again, my geographic point sucks. Didn't realize it before I moved here, unfortunately ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s been the bulk of it recently. I had a decent php MySQL project in January/February, but that reached completion. I joined a local hackers who help 501c3&amp;#39;s who don&amp;#39;t have much IT collective, just for networking purposes, and have started down the path of learning laravel as of last weekend. I feel like that might be a bit more promising in helping look beyond my immediate area. Point is I&amp;#39;m trying to diversify, but again, my geographic point sucks. Didn&amp;#39;t realize it before I moved here, unfortunately &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge7hjk", "score_hidden": false, "stickied": false, "created": 1492495694.0, "created_utc": 1492466894.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge40m3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "scootstah", "parent_id": "t1_dge3d3x", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "So all of your paid work is done with OpenCart?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So all of your paid work is done with OpenCart?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge40m3", "score_hidden": false, "stickied": false, "created": 1492491474.0, "created_utc": 1492462674.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge3d3x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dge1mzp", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I wish that the area I'm in had enough paying work available so I could pick and choose better, but unfortunately that's not the case. And I've wasted so much time hunting for gigs on Upwork, if I ever get a job there for even $40/hour, after 100 hours my effective rate will be $6/hour. Rather frustrated, to be honest. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wish that the area I&amp;#39;m in had enough paying work available so I could pick and choose better, but unfortunately that&amp;#39;s not the case. And I&amp;#39;ve wasted so much time hunting for gigs on Upwork, if I ever get a job there for even $40/hour, after 100 hours my effective rate will be $6/hour. Rather frustrated, to be honest. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge3d3x", "score_hidden": false, "stickied": false, "created": 1492490748.0, "created_utc": 1492461948.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge3eih", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dge1mzp", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "But, on the bright side, on this one website, everyone's password is securely hashed. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But, on the bright side, on this one website, everyone&amp;#39;s password is securely hashed. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge3eih", "score_hidden": false, "stickied": false, "created": 1492490792.0, "created_utc": 1492461992.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge1mzp", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "scootstah", "parent_id": "t1_dgdw97w", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Personally, I wouldn't really put any further work into that project. I don't know why anyone is still even using it. The owner is a big stubborn prick who goes out of his way to ignore security concerns.\n\nSecurity is paramount in a project of that nature.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Personally, I wouldn&amp;#39;t really put any further work into that project. I don&amp;#39;t know why anyone is still even using it. The owner is a big stubborn prick who goes out of his way to ignore security concerns.&lt;/p&gt;\n\n&lt;p&gt;Security is paramount in a project of that nature.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge1mzp", "score_hidden": false, "stickied": false, "created": 1492488824.0, "created_utc": 1492460024.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdw97w", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dgdvgdt", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "i had seen the debates previously, but also saw that no one actually provided code, thought maybe if I actually did that it might make its way in. \n\nSo, I provided code, AND updated the install routines to increase the size of the password fields, and clearly noted in my pull request the necessity of changing that field size and it was accepted into the dev branch! Only, it was reversed a short time later - I have a feeling that he accepted the code, didn't check the size of the password field in the DB and got locked out.\n\nWhat I would do if I went the VQMOD route is check the size of the password field, and change it if necessary - but since I was contributing to the base install, I thought it was pointless to check everytime a login function was called.\n\nOh well...\n\nI can put it out as a free VQMOD if there is any interest. Have the code for both 2.2 / 2.3 and 2.3 dev branch (which is different - they're getting rid of the separate affiliate table). ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;i had seen the debates previously, but also saw that no one actually provided code, thought maybe if I actually did that it might make its way in. &lt;/p&gt;\n\n&lt;p&gt;So, I provided code, AND updated the install routines to increase the size of the password fields, and clearly noted in my pull request the necessity of changing that field size and it was accepted into the dev branch! Only, it was reversed a short time later - I have a feeling that he accepted the code, didn&amp;#39;t check the size of the password field in the DB and got locked out.&lt;/p&gt;\n\n&lt;p&gt;What I would do if I went the VQMOD route is check the size of the password field, and change it if necessary - but since I was contributing to the base install, I thought it was pointless to check everytime a login function was called.&lt;/p&gt;\n\n&lt;p&gt;Oh well...&lt;/p&gt;\n\n&lt;p&gt;I can put it out as a free VQMOD if there is any interest. Have the code for both 2.2 / 2.3 and 2.3 dev branch (which is different - they&amp;#39;re getting rid of the separate affiliate table). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdw97w", "score_hidden": false, "stickied": false, "created": 1492482733.0, "created_utc": 1492453933.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdvgdt", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "scootstah", "parent_id": "t1_dgdrqeo", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Good luck\u200b getting OpenCart to care about security.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good luck\u200b getting OpenCart to care about security.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdvgdt", "score_hidden": false, "stickied": false, "created": 1492481834.0, "created_utc": 1492453034.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdyd75", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dgdxag5", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I picked up a gig working on an Opencart-based website. Not my first choice, but I've come to enjoy it. I also haven't explored Woo or Magento that much, but I'm strained to think of any functionality that this store needs that isn't either provided by Opencart, available as an extension, or which I could create myself.\n\nPutting aside the password nonsense that we all see, what exactly are the benefits of the other mainstays (magento and woocommerce) compared to Opencart?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I picked up a gig working on an Opencart-based website. Not my first choice, but I&amp;#39;ve come to enjoy it. I also haven&amp;#39;t explored Woo or Magento that much, but I&amp;#39;m strained to think of any functionality that this store needs that isn&amp;#39;t either provided by Opencart, available as an extension, or which I could create myself.&lt;/p&gt;\n\n&lt;p&gt;Putting aside the password nonsense that we all see, what exactly are the benefits of the other mainstays (magento and woocommerce) compared to Opencart?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdyd75", "score_hidden": false, "stickied": false, "created": 1492485125.0, "created_utc": 1492456325.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdxag5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pushad", "parent_id": "t1_dgdrqeo", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "If you can, run as far away from OpenCart as you can... Ugh.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you can, run as far away from OpenCart as you can... Ugh.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdxag5", "score_hidden": false, "stickied": false, "created": 1492483906.0, "created_utc": 1492455106.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgejfp5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sockjuggler", "parent_id": "t1_dgebckh", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "the grass in magento valley is XML colored", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;the grass in magento valley is XML colored&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgejfp5", "score_hidden": false, "stickied": false, "created": 1492510731.0, "created_utc": 1492481931.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgebckh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dbbeginner", "parent_id": "t1_dgeb1ri", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I had seen his rants before, specifically about password hashing, but i thought \"hey, maybe rather than just complaining about it, I'll provide a solution and see how that goes\". \n\nI'm currently wrapping up an Opencart project, and would take on whatever comes my way next. Not being a fan of Wordpress, I'd hope it might be Magento just so I can see how green the grass is there. But I'd do OC again as well, I'm actually pretty fluent with it now, it's just a shame its creator thinks he's Linus :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I had seen his rants before, specifically about password hashing, but i thought &amp;quot;hey, maybe rather than just complaining about it, I&amp;#39;ll provide a solution and see how that goes&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently wrapping up an Opencart project, and would take on whatever comes my way next. Not being a fan of Wordpress, I&amp;#39;d hope it might be Magento just so I can see how green the grass is there. But I&amp;#39;d do OC again as well, I&amp;#39;m actually pretty fluent with it now, it&amp;#39;s just a shame its creator thinks he&amp;#39;s Linus :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgebckh", "score_hidden": false, "stickied": false, "created": 1492500725.0, "created_utc": 1492471925.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgeb1ri", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ngr900", "parent_id": "t1_dgdrqeo", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Don't you know about the creator of Opencart? The guy's a huge asshole, he declines virtually all pull requests and is very, very rude to contributors. In fact, if assholes had assholes, he would be that. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Don&amp;#39;t you know about the creator of Opencart? The guy&amp;#39;s a huge asshole, he declines virtually all pull requests and is very, very rude to contributors. In fact, if assholes had assholes, he would be that. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgeb1ri", "score_hidden": false, "stickied": false, "created": 1492500337.0, "created_utc": 1492471537.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdrqeo", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "dbbeginner", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I actually provided a pull request to Opencart's Git Repo to do all of this, and migrate old passwords into the new format upon successful login for compatibility purposes.\n\nhttps://github.com/opencart/opencart/pull/5234\n\nThey accepted it in the Dev branch, then reversed it :( \n\nWas thinking about putting a VQMOD out there, but it could cause a real pain, if someone started using that, then updated to a new Opencart Version which broke the mod, then they would have to manually enter new hashes into their database until a new Mod had been released. \n\nAgain, I'd be happy to put it on Github or the OC extension store if there's interest.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I actually provided a pull request to Opencart&amp;#39;s Git Repo to do all of this, and migrate old passwords into the new format upon successful login for compatibility purposes.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/opencart/opencart/pull/5234\"&gt;https://github.com/opencart/opencart/pull/5234&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;They accepted it in the Dev branch, then reversed it :( &lt;/p&gt;\n\n&lt;p&gt;Was thinking about putting a VQMOD out there, but it could cause a real pain, if someone started using that, then updated to a new Opencart Version which broke the mod, then they would have to manually enter new hashes into their database until a new Mod had been released. &lt;/p&gt;\n\n&lt;p&gt;Again, I&amp;#39;d be happy to put it on Github or the OC extension store if there&amp;#39;s interest.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdrqeo", "score_hidden": false, "stickied": false, "created": 1492477717.0, "created_utc": 1492448917.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge3o2e", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Freeky", "parent_id": "t1_dgdw1nj", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; if you were double hashing something that was appreciably longer than 40 characters you'd be substantially increasing the odds of a hash collision on your BCrypt hash by doing this.\n\nBCrypt's only a 184 bit hash as it is, feeding it a 160 bit hash isn't really reducing the search space by any useful amount - that's still far more entropy than any reasonable password.\n\nAlso note that bcrypt isn't great at handling longer passwords.  I quote from [Colin Percival's scrypt paper](https://www.tarsnap.com/scrypt/scrypt.pdf):\n\n&gt; &gt; *It is also worth noting that while bcrypt is stronger than PBKDF2 for most types of passwords, it falls behind for long passphrases; this results from bcrypt\u2019s inability to use more than the first 55 characters of a passphrase*\n\nHe suggests pre-hashing as a reasonable solution:\n\n&gt;&gt; *implementors of systems which rely on bcrypt might be well-advised to either work around this limitation (e.g., by \u201cprehashing\u201d a passphrase to make it fit into the 55-character limit)*\n\n(bcrypt truncates at 72 bytes, but the designers only specify support up to 56 bytes including a terminating NULL byte - mirroring the Blowfish 448 bit key size limit).\n\nThe main thing to remember when doing this is to encode the hash in a printable form, since bcrypt isn't NULL-byte safe (another limitation which pre-hashing eliminates).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;if you were double hashing something that was appreciably longer than 40 characters you&amp;#39;d be substantially increasing the odds of a hash collision on your BCrypt hash by doing this.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;BCrypt&amp;#39;s only a 184 bit hash as it is, feeding it a 160 bit hash isn&amp;#39;t really reducing the search space by any useful amount - that&amp;#39;s still far more entropy than any reasonable password.&lt;/p&gt;\n\n&lt;p&gt;Also note that bcrypt isn&amp;#39;t great at handling longer passwords.  I quote from &lt;a href=\"https://www.tarsnap.com/scrypt/scrypt.pdf\"&gt;Colin Percival&amp;#39;s scrypt paper&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;It is also worth noting that while bcrypt is stronger than PBKDF2 for most types of passwords, it falls behind for long passphrases; this results from bcrypt\u2019s inability to use more than the first 55 characters of a passphrase&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;He suggests pre-hashing as a reasonable solution:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;implementors of systems which rely on bcrypt might be well-advised to either work around this limitation (e.g., by \u201cprehashing\u201d a passphrase to make it fit into the 55-character limit)&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;(bcrypt truncates at 72 bytes, but the designers only specify support up to 56 bytes including a terminating NULL byte - mirroring the Blowfish 448 bit key size limit).&lt;/p&gt;\n\n&lt;p&gt;The main thing to remember when doing this is to encode the hash in a printable form, since bcrypt isn&amp;#39;t NULL-byte safe (another limitation which pre-hashing eliminates).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge3o2e", "score_hidden": false, "stickied": false, "created": 1492491086.0, "created_utc": 1492462286.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdw1nj", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Killfile", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; I suspect that 99% of the time the BCRYPT of the SHA hash of the password is just as secure as a BCRYPT of the password, and certainly better as an interim solution than just leaving it as the SHA hash.\n\nOdd are pretty good that you're right and the kind of mathematical chops someone would need to have to take advantage of any emergent patterns would limit your attackers to highly motivated national governments.  You're almost certainly safe doing this.\n\nThat said, tread carefully here.  In theory you could have a problem depending on the length of the hash you get out of your SHA function.  Now, by default that's 40 characters, which is probably longer than your user's passwords by a factor of four but if you were double hashing something that was appreciably longer than 40 characters you'd be substantially increasing the odds of a hash collision on your BCrypt hash by doing this.  \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I suspect that 99% of the time the BCRYPT of the SHA hash of the password is just as secure as a BCRYPT of the password, and certainly better as an interim solution than just leaving it as the SHA hash.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Odd are pretty good that you&amp;#39;re right and the kind of mathematical chops someone would need to have to take advantage of any emergent patterns would limit your attackers to highly motivated national governments.  You&amp;#39;re almost certainly safe doing this.&lt;/p&gt;\n\n&lt;p&gt;That said, tread carefully here.  In theory you could have a problem depending on the length of the hash you get out of your SHA function.  Now, by default that&amp;#39;s 40 characters, which is probably longer than your user&amp;#39;s passwords by a factor of four but if you were double hashing something that was appreciably longer than 40 characters you&amp;#39;d be substantially increasing the odds of a hash collision on your BCrypt hash by doing this.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdw1nj", "score_hidden": false, "stickied": false, "created": 1492482498.0, "created_utc": 1492453698.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdrncb", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "DCudmore", "parent_id": "t1_dgdqfmz", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ah, didn't understand that clearly before.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah, didn&amp;#39;t understand that clearly before.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdrncb", "score_hidden": false, "stickied": false, "created": 1492477621.0, "created_utc": 1492448821.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdqfmz", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdpz8u", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I'm not sure I understand. SHA is effectively already eliminated in terms of something that can be accessed by a potential attacker, because the SHA hash is now hashed with BCRYPT. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not sure I understand. SHA is effectively already eliminated in terms of something that can be accessed by a potential attacker, because the SHA hash is now hashed with BCRYPT. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdqfmz", "score_hidden": false, "stickied": false, "created": 1492476276.0, "created_utc": 1492447476.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdpz8u", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "DCudmore", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "How will you eliminate SHA in the end if you can't ensure that everyone logs in at least once from this point?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How will you eliminate SHA in the end if you can&amp;#39;t ensure that everyone logs in at least once from this point?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdpz8u", "score_hidden": false, "stickied": false, "created": 1492475772.0, "created_utc": 1492446972.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgebx0a", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "BrQQQ", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "One quite minor drawback I see is that you won't know which password has already been \"upgraded\". This means if you ever change the hashing algorithm again and again, you're going to either have to write some pretty shitty code to maintain the compatibility or just say screw it and reset everybody's password.\n\nIf you had a way of knowing which passwords haven't been upgraded yet and you ever decide to change the hashing algorithm again, you can forcefully reset all the old unupgraded passwords first, and then use pretty much the same workflow as you have now with the new algorithm. \n\nIf you store the date of the last password change, that can also be a way to find out if the password has been upgraded.\n\nActually, on second thoughts, moving away from bcrypt will require a different workflow either way. You either have to force a password reset or you have to specifically store the bcrypt salt for each password in a new column. You can't someNewHash(bcrypt(password)) like you did bcrypt(sha(password)), because bcrypt will produce a different hash (with a different random salt) each time, unless you can supply the salt yourself.", "edited": 1492473578.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One quite minor drawback I see is that you won&amp;#39;t know which password has already been &amp;quot;upgraded&amp;quot;. This means if you ever change the hashing algorithm again and again, you&amp;#39;re going to either have to write some pretty shitty code to maintain the compatibility or just say screw it and reset everybody&amp;#39;s password.&lt;/p&gt;\n\n&lt;p&gt;If you had a way of knowing which passwords haven&amp;#39;t been upgraded yet and you ever decide to change the hashing algorithm again, you can forcefully reset all the old unupgraded passwords first, and then use pretty much the same workflow as you have now with the new algorithm. &lt;/p&gt;\n\n&lt;p&gt;If you store the date of the last password change, that can also be a way to find out if the password has been upgraded.&lt;/p&gt;\n\n&lt;p&gt;Actually, on second thoughts, moving away from bcrypt will require a different workflow either way. You either have to force a password reset or you have to specifically store the bcrypt salt for each password in a new column. You can&amp;#39;t someNewHash(bcrypt(password)) like you did bcrypt(sha(password)), because bcrypt will produce a different hash (with a different random salt) each time, unless you can supply the salt yourself.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgebx0a", "score_hidden": false, "stickied": false, "created": 1492501441.0, "created_utc": 1492472641.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdncgc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gRoberts84", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I done something fairly similar but had to be backwards compatible :(\n\nA service I maintain is currently written in ColdFusion and uses the worst version of cfmx_compat to hash and validate passwords.\n\nMy role was to come in and write a PHP API that uses the existing database, but also work with the existing.\n\nUltimately the difference between the two hashed passwords meant I could easily identify whether the password should be validated using a PHP implementation of cfmx_compat or phpass. \n\nWhen needed, I had it set to identify the user based on their email/username first and then validate the password. If it used the cfmx_compat hash, then it would use the supplied plain text password to refresh it using phpass, ultimately automatically updating them as users logged in.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I done something fairly similar but had to be backwards compatible :(&lt;/p&gt;\n\n&lt;p&gt;A service I maintain is currently written in ColdFusion and uses the worst version of cfmx_compat to hash and validate passwords.&lt;/p&gt;\n\n&lt;p&gt;My role was to come in and write a PHP API that uses the existing database, but also work with the existing.&lt;/p&gt;\n\n&lt;p&gt;Ultimately the difference between the two hashed passwords meant I could easily identify whether the password should be validated using a PHP implementation of cfmx_compat or phpass. &lt;/p&gt;\n\n&lt;p&gt;When needed, I had it set to identify the user based on their email/username first and then validate the password. If it used the cfmx_compat hash, then it would use the supplied plain text password to refresh it using phpass, ultimately automatically updating them as users logged in.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdncgc", "score_hidden": false, "stickied": false, "created": 1492472793.0, "created_utc": 1492443993.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdw6xe", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "Killfile", "parent_id": "t1_dgdqbbf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Note that when you're doing this you don't want to create a side-channel attack.  Make sure that *even if the username is not found* you're still hashing the provided password and using it in the query.  \n\nThat way an attacker can't use the difference in response times to determine if he's going after a valid username or not.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Note that when you&amp;#39;re doing this you don&amp;#39;t want to create a side-channel attack.  Make sure that &lt;em&gt;even if the username is not found&lt;/em&gt; you&amp;#39;re still hashing the provided password and using it in the query.  &lt;/p&gt;\n\n&lt;p&gt;That way an attacker can&amp;#39;t use the difference in response times to determine if he&amp;#39;s going after a valid username or not.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdw6xe", "score_hidden": false, "stickied": false, "created": 1492482662.0, "created_utc": 1492453862.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 11}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdrdqc", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "BesottedScot", "parent_id": "t1_dgdqbbf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Aye. 11 or 12 is about the sweet spot just now between security and time taken to process (you don't want users waiting forever to login). (IMO) ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Aye. 11 or 12 is about the sweet spot just now between security and time taken to process (you don&amp;#39;t want users waiting forever to login). (IMO) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdrdqc", "score_hidden": false, "stickied": false, "created": 1492477322.0, "created_utc": 1492448522.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdqbbf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdpq6t", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I set the cost option as 11, I think that's what you mean?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I set the cost option as 11, I think that&amp;#39;s what you mean?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdqbbf", "score_hidden": false, "stickied": false, "created": 1492476144.0, "created_utc": 1492447344.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdpq6t", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jftuga", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "What bcrypt work factor are you using? \n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What bcrypt work factor are you using? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdpq6t", "score_hidden": false, "stickied": false, "created": 1492475492.0, "created_utc": 1492446692.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgduv78", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgduevv", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I wrote a PHP script to do it", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wrote a PHP script to do it&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgduv78", "score_hidden": false, "stickied": false, "created": 1492481175.0, "created_utc": 1492452375.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgduevv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Inva_", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "How did you BCRYPT the passwords stored in the DB? An SQL BCRYPT function does exist, or a php script you made?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How did you BCRYPT the passwords stored in the DB? An SQL BCRYPT function does exist, or a php script you made?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgduevv", "score_hidden": false, "stickied": false, "created": 1492480676.0, "created_utc": 1492451876.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge1rtk", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Freeky", "parent_id": "t1_dge09gb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Well, there's brute force, and we can apply a *lot* of that to cryptographic hashes.\n\nHashcat on a GTX 1080 can crack about 8.6 billion SHA-1's per second.  The same hardware will crack BCrypt(11) at a whopping 200 per second.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, there&amp;#39;s brute force, and we can apply a &lt;em&gt;lot&lt;/em&gt; of that to cryptographic hashes.&lt;/p&gt;\n\n&lt;p&gt;Hashcat on a GTX 1080 can crack about 8.6 billion SHA-1&amp;#39;s per second.  The same hardware will crack BCrypt(11) at a whopping 200 per second.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge1rtk", "score_hidden": false, "stickied": false, "created": 1492488970.0, "created_utc": 1492460170.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgedaf7", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "pleurplus", "parent_id": "t1_dge5yg1", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You are right on your first point.\n\nBut don't use SHA as a password hash even with multiple iterations, it's not made for that, a simple bitcoin ASIC can make SHA256 hashs fast as fuck, hashs made for passwords are made to be slow.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are right on your first point.&lt;/p&gt;\n\n&lt;p&gt;But don&amp;#39;t use SHA as a password hash even with multiple iterations, it&amp;#39;s not made for that, a simple bitcoin ASIC can make SHA256 hashs fast as fuck, hashs made for passwords are made to be slow.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgedaf7", "score_hidden": false, "stickied": false, "created": 1492503209.0, "created_utc": 1492474409.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgenyf4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Freeky", "parent_id": "t1_dge5yg1", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; You can have multiple rounds of SHA hashes to achieve the same result\n\nbcrypt/11 takes 200ms to run on my server.  An attacker with a GTX 1080 can run that hash 200 times/second.\n\nTo get the same GPU down to 200 hashes/sec with iterated SHA1 would take 43 million iterations - corresponding to *54 seconds* of CPU time.\n\n&gt; brute-force is never going to work if you have semi-decent password validation\n\nPassword validation can never be more than best-effort, even ignoring the fact that if you're too fascist users will just go elsewhere.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You can have multiple rounds of SHA hashes to achieve the same result&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;bcrypt/11 takes 200ms to run on my server.  An attacker with a GTX 1080 can run that hash 200 times/second.&lt;/p&gt;\n\n&lt;p&gt;To get the same GPU down to 200 hashes/sec with iterated SHA1 would take 43 million iterations - corresponding to &lt;em&gt;54 seconds&lt;/em&gt; of CPU time.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;brute-force is never going to work if you have semi-decent password validation&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Password validation can never be more than best-effort, even ignoring the fact that if you&amp;#39;re too fascist users will just go elsewhere.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgenyf4", "score_hidden": false, "stickied": false, "created": 1492516650.0, "created_utc": 1492487850.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge5yg1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "bad_sector", "parent_id": "t1_dge16g2", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "- Collision is completely irrelevant for password cracking, there is no perimage attack\n- You can have multiple rounds of SHA hashes to achieve the same result\n- brute-force is never going to work if you have semi-decent password validation\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;ul&gt;\n&lt;li&gt;Collision is completely irrelevant for password cracking, there is no perimage attack&lt;/li&gt;\n&lt;li&gt;You can have multiple rounds of SHA hashes to achieve the same result&lt;/li&gt;\n&lt;li&gt;brute-force is never going to work if you have semi-decent password validation&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge5yg1", "score_hidden": false, "stickied": false, "created": 1492493793.0, "created_utc": 1492464993.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge16g2", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "ayeshrajans", "parent_id": "t1_dge09gb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "- SHA1 now has a PoC from Google with a collision. \n- None of the SHA algorithms, despite the \"s\" that stands for `secure` is suitable for _password_ hashing. SHA hashes are inexpensive to calculate in masses, and modern GPUs can calculate too fast that they made rainbow tables obsolete. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;ul&gt;\n&lt;li&gt;SHA1 now has a PoC from Google with a collision. &lt;/li&gt;\n&lt;li&gt;None of the SHA algorithms, despite the &amp;quot;s&amp;quot; that stands for &lt;code&gt;secure&lt;/code&gt; is suitable for &lt;em&gt;password&lt;/em&gt; hashing. SHA hashes are inexpensive to calculate in masses, and modern GPUs can calculate too fast that they made rainbow tables obsolete. &lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge16g2", "score_hidden": false, "stickied": false, "created": 1492488310.0, "created_utc": 1492459510.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge9wyk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "BrQQQ", "parent_id": "t1_dge09gb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Umm, because it's extremely fast to calculate and requires you to do a lot of manual, error-prone work to make it even a little bit suitable for secure password hashing?\n\nBcrypt is superior in nearly every single way, why wouldn't you switch?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Umm, because it&amp;#39;s extremely fast to calculate and requires you to do a lot of manual, error-prone work to make it even a little bit suitable for secure password hashing?&lt;/p&gt;\n\n&lt;p&gt;Bcrypt is superior in nearly every single way, why wouldn&amp;#39;t you switch?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge9wyk", "score_hidden": false, "stickied": false, "created": 1492498843.0, "created_utc": 1492470043.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge09gb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bad_sector", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "What is wrong with SHA though? There is no know attack against it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What is wrong with SHA though? There is no know attack against it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge09gb", "score_hidden": false, "stickied": false, "created": 1492487277.0, "created_utc": 1492458477.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge1e63", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dge0qtb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; I like the idea, but do you keep the password hashes in separate DB fields? If not, couldn't a returning user (from before the switch) use either their password or a SHA hash of their password to log in? They would effectively have two functional passwords (I presume this is a no-no, however realistically unexploitable).\n\nYes, you are right, this was also mentioned in [this comment](https://www.reddit.com/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/dgdwhff/). I hadn't thought of this and have now updated the code as per my edit in the post to counteract this possibility.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I like the idea, but do you keep the password hashes in separate DB fields? If not, couldn&amp;#39;t a returning user (from before the switch) use either their password or a SHA hash of their password to log in? They would effectively have two functional passwords (I presume this is a no-no, however realistically unexploitable).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, you are right, this was also mentioned in &lt;a href=\"https://www.reddit.com/r/webdev/comments/65vify/upgrading_password_security_without_users_noticing/dgdwhff/\"&gt;this comment&lt;/a&gt;. I hadn&amp;#39;t thought of this and have now updated the code as per my edit in the post to counteract this possibility.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge1e63", "score_hidden": false, "stickied": false, "created": 1492488550.0, "created_utc": 1492459750.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge0qtb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Blieque", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I like the idea, but do you keep the password hashes in separate DB fields? If not, couldn't a returning user (from before the switch) use either their password *or* a SHA hash of their password to log in? They would effectively have two functional passwords (I presume this is a no-no, however realistically unexploitable).\n\nI would be tempted to create a new DB field for each user, e.g., `password_migrated` and bcrypt-hash all the current SHA hashes. Set the new field to false for all current users, and then check it when users log in again. If false, use SHA and bcrypt to verify, then update the hash field with a plain bcrypt hash and update the boolean field. If you wanted to be more robust to potential further password policy changes in the future, I suppose it would be best to use a counter or date rather than a boolean.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like the idea, but do you keep the password hashes in separate DB fields? If not, couldn&amp;#39;t a returning user (from before the switch) use either their password &lt;em&gt;or&lt;/em&gt; a SHA hash of their password to log in? They would effectively have two functional passwords (I presume this is a no-no, however realistically unexploitable).&lt;/p&gt;\n\n&lt;p&gt;I would be tempted to create a new DB field for each user, e.g., &lt;code&gt;password_migrated&lt;/code&gt; and bcrypt-hash all the current SHA hashes. Set the new field to false for all current users, and then check it when users log in again. If false, use SHA and bcrypt to verify, then update the hash field with a plain bcrypt hash and update the boolean field. If you wanted to be more robust to potential further password policy changes in the future, I suppose it would be best to use a counter or date rather than a boolean.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge0qtb", "score_hidden": false, "stickied": false, "created": 1492487818.0, "created_utc": 1492459018.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge1cqi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ayeshrajans", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "There are Drupal and Wordpress plugins that switch out their default password mechanism to what the OP said, but uses `password_needs_rehash()` to determine whether a recalculation is necessary. \n\n - Drupal: https://www.drupal.org/project/password_hash\n - Wordpress: https://wordpress.org/plugins/password-hash/\n\n(Shameless self-promotion of course)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are Drupal and Wordpress plugins that switch out their default password mechanism to what the OP said, but uses &lt;code&gt;password_needs_rehash()&lt;/code&gt; to determine whether a recalculation is necessary. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Drupal: &lt;a href=\"https://www.drupal.org/project/password_hash\"&gt;https://www.drupal.org/project/password_hash&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Wordpress: &lt;a href=\"https://wordpress.org/plugins/password-hash/\"&gt;https://wordpress.org/plugins/password-hash/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;(Shameless self-promotion of course)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge1cqi", "score_hidden": false, "stickied": false, "created": 1492488505.0, "created_utc": 1492459705.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge9ihw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "midri", "parent_id": "t1_dge6uun", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Your SHA1's themselves being leaked is not super helpful to an attacker if they don't know your salt... [Reference](https://www.reddit.com/r/AskNetsec/comments/3i7bgh/how_long_would_it_take_to_crack_a_sha1_and_md5/cudwrlj/). If they KNOW your salt and how it's used with your input to generate the hash, yes it's fairly easy if they have an english word/s only password.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your SHA1&amp;#39;s themselves being leaked is not super helpful to an attacker if they don&amp;#39;t know your salt... &lt;a href=\"https://www.reddit.com/r/AskNetsec/comments/3i7bgh/how_long_would_it_take_to_crack_a_sha1_and_md5/cudwrlj/\"&gt;Reference&lt;/a&gt;. If they KNOW your salt and how it&amp;#39;s used with your input to generate the hash, yes it&amp;#39;s fairly easy if they have an english word/s only password.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge9ihw", "score_hidden": false, "stickied": false, "created": 1492498319.0, "created_utc": 1492469519.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge6uun", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dge678i", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I would say it's much less dangerous (although still very dangerous) because it doesn't compromise other services that the user might have re-used their password on.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would say it&amp;#39;s much less dangerous (although still very dangerous) because it doesn&amp;#39;t compromise other services that the user might have re-used their password on.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge6uun", "score_hidden": false, "stickied": false, "created": 1492494914.0, "created_utc": 1492466114.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge678i", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "midri", "parent_id": "t1_dge4yyb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "No, but it makes the old hashes effectively a plain text password, which is just as dangerous", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, but it makes the old hashes effectively a plain text password, which is just as dangerous&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge678i", "score_hidden": false, "stickied": false, "created": 1492494094.0, "created_utc": 1492465294.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge4yyb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dge46cf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I wanted to get rid of the SHA hashes completely.\n\nI resolved the attack vector from a compromised backup issue as explained in the edit in my post.\n\nAs a side note, I find the phrase \"plain text repo\" very misleading - it's not like it makes anybody's password visible as plain text.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wanted to get rid of the SHA hashes completely.&lt;/p&gt;\n\n&lt;p&gt;I resolved the attack vector from a compromised backup issue as explained in the edit in my post.&lt;/p&gt;\n\n&lt;p&gt;As a side note, I find the phrase &amp;quot;plain text repo&amp;quot; very misleading - it&amp;#39;s not like it makes anybody&amp;#39;s password visible as plain text.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge4yyb", "score_hidden": false, "stickied": false, "created": 1492492595.0, "created_utc": 1492463795.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge46cf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "midri", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I personally would have left them all SHA1 until the user logs in. When they login I check if the hash I'm comparing against starts with $2a$ and if it does use bycrypt and it does not use sha1 then bcrypt the password and save it to the database if the sha1 matches what user put, that way you slowly phase out all your sha1. As others have explained, your method turns your backups into a plain text repo of passwords for users.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally would have left them all SHA1 until the user logs in. When they login I check if the hash I&amp;#39;m comparing against starts with $2a$ and if it does use bycrypt and it does not use sha1 then bcrypt the password and save it to the database if the sha1 matches what user put, that way you slowly phase out all your sha1. As others have explained, your method turns your backups into a plain text repo of passwords for users.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge46cf", "score_hidden": false, "stickied": false, "created": 1492491658.0, "created_utc": 1492462858.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgei0oh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ayeshrajans", "parent_id": "t1_dge9aeg", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This weekend Ros OK for the current situation, but what if the current hashing algorithm turns out to be crackable and and you move on with the next better algorithm and so on?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This weekend Ros OK for the current situation, but what if the current hashing algorithm turns out to be crackable and and you move on with the next better algorithm and so on?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgei0oh", "score_hidden": false, "stickied": false, "created": 1492509067.0, "created_utc": 1492480267.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge9aeg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Disgruntled__Goat", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "The system that I've seen described before goes like this:\n\n1. Add a new field 'legacy' to your database (bool/tinyint).\n2. Bcrypt all the sha1 hashes, and set 'legacy' to 1 on all users.\n3. When a user logs in, if legacy=1 then check the password using `password_hash(sha1($pw.$salt))` - if correct then rehash the password using bcrypt and set legacy=0 for that user.\n4. If legacy=0 then use the normal `password_hash` workflow.\n\nThis method also guards against the problem mentioned by others where users can log in with a sha1 hash.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The system that I&amp;#39;ve seen described before goes like this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Add a new field &amp;#39;legacy&amp;#39; to your database (bool/tinyint).&lt;/li&gt;\n&lt;li&gt;Bcrypt all the sha1 hashes, and set &amp;#39;legacy&amp;#39; to 1 on all users.&lt;/li&gt;\n&lt;li&gt;When a user logs in, if legacy=1 then check the password using &lt;code&gt;password_hash(sha1($pw.$salt))&lt;/code&gt; - if correct then rehash the password using bcrypt and set legacy=0 for that user.&lt;/li&gt;\n&lt;li&gt;If legacy=0 then use the normal &lt;code&gt;password_hash&lt;/code&gt; workflow.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This method also guards against the problem mentioned by others where users can log in with a sha1 hash.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge9aeg", "score_hidden": false, "stickied": false, "created": 1492498022.0, "created_utc": 1492469222.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dge9aku", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "snuggl", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I once did something similar when I migrated the users of a old closed source system by having the new login method call the old one with the given credentials if it didn't find a matching user, if it authenticated it created an account in the new system with the old account details.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I once did something similar when I migrated the users of a old closed source system by having the new login method call the old one with the given credentials if it didn&amp;#39;t find a matching user, if it authenticated it created an account in the new system with the old account details.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dge9aku", "score_hidden": false, "stickied": false, "created": 1492498028.0, "created_utc": 1492469228.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdkwip", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "JnvSor", "parent_id": "t1_dgdkkhg", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I thought so, I vaguely remembered the [password_hash polyfill](https://github.com/ircmaxell/password_compat/blob/master/lib/password.php) doing that", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I thought so, I vaguely remembered the &lt;a href=\"https://github.com/ircmaxell/password_compat/blob/master/lib/password.php\"&gt;password_hash polyfill&lt;/a&gt; doing that&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdkwip", "score_hidden": false, "stickied": false, "created": 1492469888.0, "created_utc": 1492441088.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdkkhg", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "schlocke", "parent_id": "t1_dgdkb7o", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Password_hash, you tell it which encryption algorithm you want it to use when you set it up.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Password_hash, you tell it which encryption algorithm you want it to use when you set it up.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdkkhg", "score_hidden": false, "stickied": false, "created": 1492469467.0, "created_utc": 1492440667.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdkb7o", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "JnvSor", "parent_id": "t1_dgdiaf7", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Is it bcrypt or password_hash that does the salting?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is it bcrypt or password_hash that does the salting?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdkb7o", "score_hidden": false, "stickied": false, "created": 1492469139.0, "created_utc": 1492440339.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdiaf7", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "bencoder", "parent_id": "t1_dgdhzmd", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Bcrypt does that already", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Bcrypt does that already&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdiaf7", "score_hidden": false, "stickied": false, "created": 1492466377.0, "created_utc": 1492437577.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdlq5t", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdhzmd", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "In fact I do add salting, even though `password_hash()` does already, I just didn't mention it explicitly in the post (I have edited the post to mention it now though!).", "edited": 1492442580.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In fact I do add salting, even though &lt;code&gt;password_hash()&lt;/code&gt; does already, I just didn&amp;#39;t mention it explicitly in the post (I have edited the post to mention it now though!).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdlq5t", "score_hidden": false, "stickied": false, "created": 1492470906.0, "created_utc": 1492442106.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdhzmd", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "SambaMamba", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 1, "body": "You should add salting as well. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You should add salting as well. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdhzmd", "score_hidden": false, "stickied": false, "created": 1492465931.0, "created_utc": 1492437131.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdvc22", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdurhp", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I'm confused - I did run a BCRYPT of the SHA hash on \"the entire database\" as you put it^1. \n\nThe first update allowed people to login with the old process (SHA), the intermediate process (BCRYPT of SHA) or the new process (BCRYPT). This meant that anyone who tried to login while the script was in the process updating peoples passwords would still be able to, regardless of whether the script had updated their specific password yet.\n\nOnce the BCRYPT of the SHA hash for all the users (\"On the entire database\"^1 ) was completed, I then removed that code as per step 4.\n\n^1 I actually had the code check it wasn't already BCRYPTed just in case a user logged in or changed their password while I was running the script, so I wouldn't end up with any double BCRYPTed passwords, so \"On the entire database\" isn't necessarily technically accurate.\n\n\n", "edited": 1492453095.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m confused - I did run a BCRYPT of the SHA hash on &amp;quot;the entire database&amp;quot; as you put it&lt;sup&gt;1.&lt;/sup&gt; &lt;/p&gt;\n\n&lt;p&gt;The first update allowed people to login with the old process (SHA), the intermediate process (BCRYPT of SHA) or the new process (BCRYPT). This meant that anyone who tried to login while the script was in the process updating peoples passwords would still be able to, regardless of whether the script had updated their specific password yet.&lt;/p&gt;\n\n&lt;p&gt;Once the BCRYPT of the SHA hash for all the users (&amp;quot;On the entire database&amp;quot;&lt;sup&gt;1&lt;/sup&gt; ) was completed, I then removed that code as per step 4.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I actually had the code check it wasn&amp;#39;t already BCRYPTed just in case a user logged in or changed their password while I was running the script, so I wouldn&amp;#39;t end up with any double BCRYPTed passwords, so &amp;quot;On the entire database&amp;quot; isn&amp;#39;t necessarily technically accurate.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdvc22", "score_hidden": false, "stickied": false, "created": 1492481700.0, "created_utc": 1492452900.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdurhp", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Salamok", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; I updated the login code so that if the SHA hash of the entered password didn't match,\n\nIsn't the very first thing you listed validating using your old system?  The only change I would have made to your process is a to run:\n\n&gt; BCRYPT of the SHA hash\n\nOn the entire database, then there would be no instances left that were dependent on just the SHA1 by itself.  Still zero down time.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I updated the login code so that if the SHA hash of the entered password didn&amp;#39;t match,&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Isn&amp;#39;t the very first thing you listed validating using your old system?  The only change I would have made to your process is a to run:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;BCRYPT of the SHA hash&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;On the entire database, then there would be no instances left that were dependent on just the SHA1 by itself.  Still zero down time.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdurhp", "score_hidden": false, "stickied": false, "created": 1492481058.0, "created_utc": 1492452258.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65vify", "likes": null, "replies": "", "user_reports": [], "id": "dgdnn3d", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdnhw1", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Thanks! :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdnn3d", "score_hidden": false, "stickied": false, "created": 1492473135.0, "created_utc": 1492444335.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdnhw1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Badrush", "parent_id": "t1_dgdnf34", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Great solution!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great solution!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdnhw1", "score_hidden": false, "stickied": false, "created": 1492472968.0, "created_utc": 1492444168.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdnf34", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "lindymad", "parent_id": "t1_dgdn2h3", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; The only thing you have stored are the BCRYPT Hashes of the SHA Hases of the passwords?\n\nInitially, yes, but as users login that changes to a mix of the BCRYPT hashes of the SHA hashes of the passwords and the BCRYPT hashes of the passwords themselves (which I also salt). \n\nEventually, after every user has logged in (which will probably never happen in reality), all the BCRYPT hashes of the SHA hashes would be gone and I would only be storing the BCRYPT of the passwords.\n\n&gt; Hypothetically, even if someone could reverse engineer the BCRYPT hash they wouldn't see the password. They'd have to then decrypt the SHA hash as well?\n\nCorrect. Very hypothetically :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The only thing you have stored are the BCRYPT Hashes of the SHA Hases of the passwords?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Initially, yes, but as users login that changes to a mix of the BCRYPT hashes of the SHA hashes of the passwords and the BCRYPT hashes of the passwords themselves (which I also salt). &lt;/p&gt;\n\n&lt;p&gt;Eventually, after every user has logged in (which will probably never happen in reality), all the BCRYPT hashes of the SHA hashes would be gone and I would only be storing the BCRYPT of the passwords.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Hypothetically, even if someone could reverse engineer the BCRYPT hash they wouldn&amp;#39;t see the password. They&amp;#39;d have to then decrypt the SHA hash as well?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Correct. Very hypothetically :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdnf34", "score_hidden": false, "stickied": false, "created": 1492472880.0, "created_utc": 1492444080.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdn2h3", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "Badrush", "parent_id": "t3_65vify", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Great write up. Make it seem so effortless and simple.\n\nSo just to clarify... The only thing you have stored are the BCRYPT Hashes of the SHA Hases of the passwords?\n\nHypothetically, even if someone could reverse engineer the BCRYPT hash they wouldn't see the password. They'd have to then decrypt the SHA hash as well?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great write up. Make it seem so effortless and simple.&lt;/p&gt;\n\n&lt;p&gt;So just to clarify... The only thing you have stored are the BCRYPT Hashes of the SHA Hases of the passwords?&lt;/p&gt;\n\n&lt;p&gt;Hypothetically, even if someone could reverse engineer the BCRYPT hash they wouldn&amp;#39;t see the password. They&amp;#39;d have to then decrypt the SHA hash as well?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgdn2h3", "score_hidden": false, "stickied": false, "created": 1492472476.0, "created_utc": 1492443676.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}]