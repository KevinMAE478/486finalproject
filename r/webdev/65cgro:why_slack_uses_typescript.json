[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65cgro", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 151, "report_reasons": null, "author": "MysticalOrangeFruit", "saved": false, "mod_reports": [], "name": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "slack.engineering", "hidden": false, "preview": {"images": [{"source": {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?s=f071c7c5b1a0f00393c0bc1677f9af8c", "width": 1200, "height": 623}, "resolutions": [{"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=108&amp;s=a5967294fe9d43a5a4fc7a561a991545", "width": 108, "height": 56}, {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=216&amp;s=3b76ed9a806a16ddaf664437df36229d", "width": 216, "height": 112}, {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=320&amp;s=07df14837ce244bc39e5d40e3c34ec7d", "width": 320, "height": 166}, {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=640&amp;s=76662359173cf057364b3a7556333b39", "width": 640, "height": 332}, {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=960&amp;s=96f1eaa1a9ebeb0209aec4b472e86ade", "width": 960, "height": 498}, {"url": "https://i.redditmedia.com/8d71-4jqDdJYyFcAcs9Q2tpM-yxGZQiWJjokl9YQ6oQ.jpg?fit=crop&amp;crop=faces%2Centropy&amp;arh=2&amp;w=1080&amp;s=0100319b1fe387875e10b6a1c5bf5235", "width": 1080, "height": 560}], "variants": {}, "id": "U8PtEN6ifaVBhGjjfO3eN9n5l9WGYtd2H2jEdLK3Uvw"}], "enabled": false}, "thumbnail": "https://b.thumbs.redditmedia.com/fFom42vfON0GQMaW8_KKk3CmWHwtwwoJeNUzY-ck2TU.jpg", "subreddit_id": "t5_2qs0q", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "post_hint": "link", "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/65cgro/why_slack_uses_typescript/", "num_reports": null, "locked": false, "stickied": false, "created": 1492204816.0, "url": "https://slack.engineering/typescript-at-slack-a81307fa288d", "author_flair_text": null, "quarantine": false, "title": "Why Slack uses TypeScript", "created_utc": 1492176016.0, "distinguished": null, "media": null, "upvote_ratio": 0.92, "num_comments": 62, "visited": false, "subreddit_type": "public", "ups": 151}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9ltzv", "gilded": 0, "archived": false, "score": 16, "report_reasons": null, "author": "creichert", "parent_id": "t1_dg9lmtb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "100% agree. Types make it so much easier to refactor (I'm using Flow but it's still comparable).\n\nI find they actually make development more simple because I **start** with types to describe what I want to accomplish and build functions around those types.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;100% agree. Types make it so much easier to refactor (I&amp;#39;m using Flow but it&amp;#39;s still comparable).&lt;/p&gt;\n\n&lt;p&gt;I find they actually make development more simple because I &lt;strong&gt;start&lt;/strong&gt; with types to describe what I want to accomplish and build functions around those types.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ltzv", "score_hidden": false, "stickied": false, "created": 1492226370.0, "created_utc": 1492197570.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 16}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dga0d9d", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "mistyfud", "parent_id": "t1_dg9v0kc", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I believe Java alone caused the surge of dynamic languages (Ruby, Python, JavaScript) in the backend web space. You can't really make a good DSL in Java (and thus Groovy was born) and the existence of null pointers means you still have runtime errors. I loved Ruby and the like before I was exposed to a language with a fantastic type system (for me it was Haskell), and now I want everything to be typed :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe Java alone caused the surge of dynamic languages (Ruby, Python, JavaScript) in the backend web space. You can&amp;#39;t really make a good DSL in Java (and thus Groovy was born) and the existence of null pointers means you still have runtime errors. I loved Ruby and the like before I was exposed to a language with a fantastic type system (for me it was Haskell), and now I want everything to be typed :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga0d9d", "score_hidden": false, "stickied": false, "created": 1492244937.0, "created_utc": 1492216137.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgapyk5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Cifize", "parent_id": "t1_dgadt9q", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; For example, C# was popular for years but there were almost no open source packages prior to Mono.\n\nMono was released barely 2 years after .Net, and only 1 year after the 1.1 release of .Net that first started getting commercial traction. C# was an open standard from even before that. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;For example, C# was popular for years but there were almost no open source packages prior to Mono.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Mono was released barely 2 years after .Net, and only 1 year after the 1.1 release of .Net that first started getting commercial traction. C# was an open standard from even before that. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgapyk5", "score_hidden": false, "stickied": false, "created": 1492296608.0, "created_utc": 1492267808.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgariis", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Thought_Ninja", "parent_id": "t1_dgadt9q", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Well articulated.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well articulated.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgariis", "score_hidden": false, "stickied": false, "created": 1492298878.0, "created_utc": 1492270078.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaskul", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pshendry", "parent_id": "t1_dgadt9q", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I disagree, but I'm really not interested in getting into a long-winded debate about it, paricularly not with someone who's patronizing me over the principle of charity. I'm opposing the general defense of JavaScript's merits, not personally attacking your opinions, so try to take things less personally.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I disagree, but I&amp;#39;m really not interested in getting into a long-winded debate about it, paricularly not with someone who&amp;#39;s patronizing me over the principle of charity. I&amp;#39;m opposing the general defense of JavaScript&amp;#39;s merits, not personally attacking your opinions, so try to take things less personally.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaskul", "score_hidden": false, "stickied": false, "created": 1492300378.0, "created_utc": 1492271578.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgadt9q", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "wwalser", "parent_id": "t1_dga7r4v", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I don't really have a problem with your opinion. You're entitled to it of course. I just didn't think any of the originally listed points of learning were compelling: types, consistency, OOP, threading. The only that stands out is consistency, which I would agree that the JS community has struggled to teach new members. Even there though, I would assume that people noticed that coercion pains very early on. The rest are understood trade-offs of language design, none specifics to JS.\n\n&gt; But I think it takes serious cognitive dissonance to think that the language Netscape devs cooked up on the back of a napkin to make icons spin was miraculously also a strong foundation for an application language.\n\nI didn't say that and pretending that I did weakens your points. When reading opposing views I try to read the arguments as if the best possible version of those arguments had been put forth. Doing this helps to construct better grounded counter-points. It also increases the likelihood that I'll be convinced, which is always a good experience. https://en.wikipedia.org/wiki/Principle_of_charity\n\nTo your point, EcmaScript had evolved by the time people were using it for applications. Between Mozilla, Microsoft, Macromedia and Adobe, several teams of world class language engineers had a hand in EcmaScript. The idea that these teams were world class is made by observing that they made practical advances in JIT performance optimization that, at that point in Computer Science, had only been implemented in small talk (and some of them were just research papers).\n\n&gt; there's been an astonishing waste of collective human time and effort\n\nI can agree with parts of that. The community has consistently attempted to make jumps before the larger stack was ready. This seems like a criticism of the platform, not the language. Browsers weren't really competent application platforms when people started creating SPAs and for some reason people seem determined to create games on a platform that isn't great for it (though play.duelyst.com is pretty damned good).\n\n&gt; JS issues and creating endless frameworks to overcome them\n\nEndless frameworks, IMO, has more to do with the JS open source culture and being the most widely used language in the world. A culture of open source is deceptively important here. For example, C# was popular for years but there were almost no open source packages prior to Mono.\n\nFrameworks specifically almost never have to work with overcoming faults of a language. They have to do with facilitating the creation of applications which are common in that language. Some libraries did have to do with overcoming faults but rarely with JavaScript, it was the platform. jQuery is a great example here.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t really have a problem with your opinion. You&amp;#39;re entitled to it of course. I just didn&amp;#39;t think any of the originally listed points of learning were compelling: types, consistency, OOP, threading. The only that stands out is consistency, which I would agree that the JS community has struggled to teach new members. Even there though, I would assume that people noticed that coercion pains very early on. The rest are understood trade-offs of language design, none specifics to JS.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;But I think it takes serious cognitive dissonance to think that the language Netscape devs cooked up on the back of a napkin to make icons spin was miraculously also a strong foundation for an application language.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I didn&amp;#39;t say that and pretending that I did weakens your points. When reading opposing views I try to read the arguments as if the best possible version of those arguments had been put forth. Doing this helps to construct better grounded counter-points. It also increases the likelihood that I&amp;#39;ll be convinced, which is always a good experience. &lt;a href=\"https://en.wikipedia.org/wiki/Principle_of_charity\"&gt;https://en.wikipedia.org/wiki/Principle_of_charity&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To your point, EcmaScript had evolved by the time people were using it for applications. Between Mozilla, Microsoft, Macromedia and Adobe, several teams of world class language engineers had a hand in EcmaScript. The idea that these teams were world class is made by observing that they made practical advances in JIT performance optimization that, at that point in Computer Science, had only been implemented in small talk (and some of them were just research papers).&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;there&amp;#39;s been an astonishing waste of collective human time and effort&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I can agree with parts of that. The community has consistently attempted to make jumps before the larger stack was ready. This seems like a criticism of the platform, not the language. Browsers weren&amp;#39;t really competent application platforms when people started creating SPAs and for some reason people seem determined to create games on a platform that isn&amp;#39;t great for it (though play.duelyst.com is pretty damned good).&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;JS issues and creating endless frameworks to overcome them&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Endless frameworks, IMO, has more to do with the JS open source culture and being the most widely used language in the world. A culture of open source is deceptively important here. For example, C# was popular for years but there were almost no open source packages prior to Mono.&lt;/p&gt;\n\n&lt;p&gt;Frameworks specifically almost never have to work with overcoming faults of a language. They have to do with facilitating the creation of applications which are common in that language. Some libraries did have to do with overcoming faults but rarely with JavaScript, it was the platform. jQuery is a great example here.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgadt9q", "score_hidden": false, "stickied": false, "created": 1492266618.0, "created_utc": 1492237818.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaev6t", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "brtt3000", "parent_id": "t1_dga7r4v", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Maybe. But we'd still be downloading executables if it wasn't for JS.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe. But we&amp;#39;d still be downloading executables if it wasn&amp;#39;t for JS.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaev6t", "score_hidden": false, "stickied": false, "created": 1492269222.0, "created_utc": 1492240422.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7r4v", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "pshendry", "parent_id": "t1_dga74kb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "By \"viable\" I meant \"effective\". You're right, it worked, so it's viable in that sense. But I think it takes serious cognitive dissonance to think that the language Netscape devs cooked up on the back of a napkin to make icons spin was miraculously also a strong foundation for an application language. I think there's been an astonishing waste of collective human time and effort wrestling with JS issues and creating endless frameworks to overcome them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;By &amp;quot;viable&amp;quot; I meant &amp;quot;effective&amp;quot;. You&amp;#39;re right, it worked, so it&amp;#39;s viable in that sense. But I think it takes serious cognitive dissonance to think that the language Netscape devs cooked up on the back of a napkin to make icons spin was miraculously also a strong foundation for an application language. I think there&amp;#39;s been an astonishing waste of collective human time and effort wrestling with JS issues and creating endless frameworks to overcome them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga7r4v", "score_hidden": false, "stickied": false, "created": 1492255362.0, "created_utc": 1492226562.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dga74kb", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "wwalser", "parent_id": "t1_dg9v0kc", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It was a viable application language. Evidence: the millions of applications written using Javascript before TypeScript and ES6. I'm glad things are improving too but after 10 years in industry I find elitism a tired but enduring trend. Side note: JS has had OOP since inception, it just happens to be one of the few ecosystems where fp has consistently won over oo.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It was a viable application language. Evidence: the millions of applications written using Javascript before TypeScript and ES6. I&amp;#39;m glad things are improving too but after 10 years in industry I find elitism a tired but enduring trend. Side note: JS has had OOP since inception, it just happens to be one of the few ecosystems where fp has consistently won over oo.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga74kb", "score_hidden": false, "stickied": false, "created": 1492254391.0, "created_utc": 1492225591.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9v0kc", "gilded": 0, "archived": false, "score": 37, "report_reasons": null, "author": "pshendry", "parent_id": "t1_dg9lmtb", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It's surreal watching the web development world slowly discover all these valuable features of programming languages (types, consistency, OOP, threading), as though they aren't things we've known since the 60's. I'm happy things are progressing, but I childishly feel like I'm owed an apology for all those years of people vehemently defending JavaScript as a viable applications language.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s surreal watching the web development world slowly discover all these valuable features of programming languages (types, consistency, OOP, threading), as though they aren&amp;#39;t things we&amp;#39;ve known since the 60&amp;#39;s. I&amp;#39;m happy things are progressing, but I childishly feel like I&amp;#39;m owed an apology for all those years of people vehemently defending JavaScript as a viable applications language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9v0kc", "score_hidden": false, "stickied": false, "created": 1492237802.0, "created_utc": 1492209002.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 37}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgas8wu", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "planetary_pelt", "parent_id": "t1_dga8h5f", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "fwiw, static vs dynamic typing is an argument as old as vim vs emacs.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;fwiw, static vs dynamic typing is an argument as old as vim vs emacs.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgas8wu", "score_hidden": false, "stickied": false, "created": 1492299911.0, "created_utc": 1492271111.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaeoxd", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dgad24n", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Oh certainly as a pragmatic choice, I'd go with static typing because we have to live with the Javascript runtime that currently exists in the wild.\n\nBut I'd like it if there were a JS 2.0 that had *breaking* runtime changes, not just parser changes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh certainly as a pragmatic choice, I&amp;#39;d go with static typing because we have to live with the Javascript runtime that currently exists in the wild.&lt;/p&gt;\n\n&lt;p&gt;But I&amp;#39;d like it if there were a JS 2.0 that had &lt;em&gt;breaking&lt;/em&gt; runtime changes, not just parser changes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaeoxd", "score_hidden": false, "stickied": false, "created": 1492268774.0, "created_utc": 1492239974.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgad24n", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "wwalser", "parent_id": "t1_dgabxmu", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Even if all of those things were true it wouldn't matter because we can't do any of those things. We can do static typing and it gets us more than those three things combined would get us.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Even if all of those things were true it wouldn&amp;#39;t matter because we can&amp;#39;t do any of those things. We can do static typing and it gets us more than those three things combined would get us.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgad24n", "score_hidden": false, "stickied": false, "created": 1492264937.0, "created_utc": 1492236137.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgabxmu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dga8h5f", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Certain things could make JS easier to handle without introducing static typing.\n\n1. When accessing an undefined felid on an object, respond with a runtime error. \n\n2. When attempting to write to an undefined field from *outside* of its context (i.e. this != this_object ), then respond with a runtime error.\n\n3. Do not coerce any types to integers or strings or any other native type *except* booleans (all objects are 'true').", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Certain things could make JS easier to handle without introducing static typing.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;When accessing an undefined felid on an object, respond with a runtime error. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When attempting to write to an undefined field from &lt;em&gt;outside&lt;/em&gt; of its context (i.e. this != this_object ), then respond with a runtime error.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Do not coerce any types to integers or strings or any other native type &lt;em&gt;except&lt;/em&gt; booleans (all objects are &amp;#39;true&amp;#39;).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgabxmu", "score_hidden": false, "stickied": false, "created": 1492262560.0, "created_utc": 1492233760.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaq90l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Cifize", "parent_id": "t1_dgaa3xu", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You can almost certainly write typescript signatures for your mutable signatures, and you'll still get the benefit of the type system and refactoring support. \n\nTypescript is a total no-brainer for me these days. I won't even consider using vanilla js anywhere I have a choice. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can almost certainly write typescript signatures for your mutable signatures, and you&amp;#39;ll still get the benefit of the type system and refactoring support. &lt;/p&gt;\n\n&lt;p&gt;Typescript is a total no-brainer for me these days. I won&amp;#39;t even consider using vanilla js anywhere I have a choice. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaq90l", "score_hidden": false, "stickied": false, "created": 1492297050.0, "created_utc": 1492268250.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaa3xu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "profile_this", "parent_id": "t1_dga8h5f", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Thanks for the info. I looked into Typescript a while back, but didn't really see the need. It's much easier to incorporate today than it was then. \n\nFor me, I suppose I looked at typechecking as a necessary part of a function. It's something I do, and adjust accordingly. I've even been able to create a nice library of mutable signatures based on routing different signatures to different parts of the same method (to reduce repetition since the core logic is shared).\n\nI do see the benefits of Typescript in a large project with multiple developers.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the info. I looked into Typescript a while back, but didn&amp;#39;t really see the need. It&amp;#39;s much easier to incorporate today than it was then. &lt;/p&gt;\n\n&lt;p&gt;For me, I suppose I looked at typechecking as a necessary part of a function. It&amp;#39;s something I do, and adjust accordingly. I&amp;#39;ve even been able to create a nice library of mutable signatures based on routing different signatures to different parts of the same method (to reduce repetition since the core logic is shared).&lt;/p&gt;\n\n&lt;p&gt;I do see the benefits of Typescript in a large project with multiple developers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaa3xu", "score_hidden": false, "stickied": false, "created": 1492259254.0, "created_utc": 1492230454.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga8h5f", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "wwalser", "parent_id": "t1_dg9tz1j", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I find declaring types helpful when writing a function that accepts a parameter of a specific type, so basically always. Without type checking I often wonder to myself if I should write basic error handling for a programmer passing an argument of the wrong type. I think about things like the capability of my team, other people who are likely to need to maintain this system in the future, how obvious it is that the function take an array and how \"deep\" this function is in the system. It's less likely that someone is going to directly call my function with an argument of the wrong type than it is that this function will get hidden behind a few layers of abstraction, people begin to trust the abstraction then one day someone changes a branch in such as way as to result in an argument of the wrong type being passed.\n\nTypes avoid that fear all together. If someone creates a scenario where the wrong type will be passed, they are told. Immediately. Before production.\n\nThat's just the bottom floor as well. It's one of the first things you'll notice and probably the most powerful confidence builder but there are other benefits in declaring your own types and having those checked in the same way. \n\nI'd also encourage you with a few points. I like dynamic languages, genuinely. I came to an appreciation of the benefits of types after working on fairly large systems. I still use vanilla JS on side projects. However, the combination of Polymorphic types and implicit typing (you don't actually have to provide a type hint in most places) help to maintain the \"feel\" that most people like about dynamic languages. The overall point of your comment seems to be that you don't find architecting systems difficult without types and I completely agree. To me, and I'm sure I differ on this to some people, types aren't about architecture. They are valuable because they eliminate an entire category of errors\u2014a category that has a nasty habit of showing up in prod\u2014at nearly zero cost.\n\nEdit: have an upvote from me as well. I don't visit the sub often but I don't see a problem with asking honest questions :).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I find declaring types helpful when writing a function that accepts a parameter of a specific type, so basically always. Without type checking I often wonder to myself if I should write basic error handling for a programmer passing an argument of the wrong type. I think about things like the capability of my team, other people who are likely to need to maintain this system in the future, how obvious it is that the function take an array and how &amp;quot;deep&amp;quot; this function is in the system. It&amp;#39;s less likely that someone is going to directly call my function with an argument of the wrong type than it is that this function will get hidden behind a few layers of abstraction, people begin to trust the abstraction then one day someone changes a branch in such as way as to result in an argument of the wrong type being passed.&lt;/p&gt;\n\n&lt;p&gt;Types avoid that fear all together. If someone creates a scenario where the wrong type will be passed, they are told. Immediately. Before production.&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s just the bottom floor as well. It&amp;#39;s one of the first things you&amp;#39;ll notice and probably the most powerful confidence builder but there are other benefits in declaring your own types and having those checked in the same way. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d also encourage you with a few points. I like dynamic languages, genuinely. I came to an appreciation of the benefits of types after working on fairly large systems. I still use vanilla JS on side projects. However, the combination of Polymorphic types and implicit typing (you don&amp;#39;t actually have to provide a type hint in most places) help to maintain the &amp;quot;feel&amp;quot; that most people like about dynamic languages. The overall point of your comment seems to be that you don&amp;#39;t find architecting systems difficult without types and I completely agree. To me, and I&amp;#39;m sure I differ on this to some people, types aren&amp;#39;t about architecture. They are valuable because they eliminate an entire category of errors\u2014a category that has a nasty habit of showing up in prod\u2014at nearly zero cost.&lt;/p&gt;\n\n&lt;p&gt;Edit: have an upvote from me as well. I don&amp;#39;t visit the sub often but I don&amp;#39;t see a problem with asking honest questions :).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga8h5f", "score_hidden": false, "stickied": false, "created": 1492256511.0, "created_utc": 1492227711.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgabs8c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dgaagi9", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Classes/modules have analogues in many programming languages which is a good thing for javascript, since new developers coming from those languages can transition their existing experience with the concepts.\n\nI think that being approachable to most programmers is a good thing because Javascript is not an optional part of the web (at least until web assembly is popular). Javascript necessarily must be used if you want *any* kind of dynamism on your web apps or sites.\n\nSo at least in that respect, I think ES6 is a good direction to go in.\n\nI am not particularly eager to too much added---like protected or private variables.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Classes/modules have analogues in many programming languages which is a good thing for javascript, since new developers coming from those languages can transition their existing experience with the concepts.&lt;/p&gt;\n\n&lt;p&gt;I think that being approachable to most programmers is a good thing because Javascript is not an optional part of the web (at least until web assembly is popular). Javascript necessarily must be used if you want &lt;em&gt;any&lt;/em&gt; kind of dynamism on your web apps or sites.&lt;/p&gt;\n\n&lt;p&gt;So at least in that respect, I think ES6 is a good direction to go in.&lt;/p&gt;\n\n&lt;p&gt;I am not particularly eager to too much added---like protected or private variables.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgabs8c", "score_hidden": false, "stickied": false, "created": 1492262265.0, "created_utc": 1492233465.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaagi9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "profile_this", "parent_id": "t1_dga3yir", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Thanks!\n\nI agree that it's nice there is a standardized loading mechanism. It's far from perfect, and underneath it compiles to the same JS we've used for years.\n\nI don't really have a problem with it - I use ES6 for React components. I just worry the language is headed in the wrong direction. It's more structurally sound from a CS perspective, but to me it's saying \"we must do something and this is something\".\n\nSo long as the choice is there, I see no issue at all. Just an unpopular opinion I suppose! ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!&lt;/p&gt;\n\n&lt;p&gt;I agree that it&amp;#39;s nice there is a standardized loading mechanism. It&amp;#39;s far from perfect, and underneath it compiles to the same JS we&amp;#39;ve used for years.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t really have a problem with it - I use ES6 for React components. I just worry the language is headed in the wrong direction. It&amp;#39;s more structurally sound from a CS perspective, but to me it&amp;#39;s saying &amp;quot;we must do something and this is something&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;So long as the choice is there, I see no issue at all. Just an unpopular opinion I suppose! &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaagi9", "score_hidden": false, "stickied": false, "created": 1492259858.0, "created_utc": 1492231058.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dga3yir", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg9tz1j", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I'm upvoting you because even if you are expressing a contrary opinion, at least you are expressing it well.\n\nHowever, I think that more strictness *is* better so long as the freedom to be less strict still exists. That's true with ES6. \n\nIf you were using classes, modules, or your own import system, now there's a standardised variant that while isn't the most powerful, is at least something we can all live with and thus use a base to build on.\n\nI feel that if there is a reoccurring wide-spread semantic that's carried out via boilerplate (e.g. IIFE modules / classes ), then it should be pulled out and made a part of the syntax.\n\nThat's also why I believe types are a good thing, since it codifies the logic of  `if typeof(x) == \"something\"`. But I also think it should be optional, so if its' not useful it can be avoided on a project.", "edited": 1492233096.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m upvoting you because even if you are expressing a contrary opinion, at least you are expressing it well.&lt;/p&gt;\n\n&lt;p&gt;However, I think that more strictness &lt;em&gt;is&lt;/em&gt; better so long as the freedom to be less strict still exists. That&amp;#39;s true with ES6. &lt;/p&gt;\n\n&lt;p&gt;If you were using classes, modules, or your own import system, now there&amp;#39;s a standardised variant that while isn&amp;#39;t the most powerful, is at least something we can all live with and thus use a base to build on.&lt;/p&gt;\n\n&lt;p&gt;I feel that if there is a reoccurring wide-spread semantic that&amp;#39;s carried out via boilerplate (e.g. IIFE modules / classes ), then it should be pulled out and made a part of the syntax.&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s also why I believe types are a good thing, since it codifies the logic of  &lt;code&gt;if typeof(x) == &amp;quot;something&amp;quot;&lt;/code&gt;. But I also think it should be optional, so if its&amp;#39; not useful it can be avoided on a project.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga3yir", "score_hidden": false, "stickied": false, "created": 1492249821.0, "created_utc": 1492221021.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dga8tsi", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "my_blue_snog_box", "parent_id": "t1_dga7k8u", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I try to be a smartass and I make a typo. But you're absolutely right. Thank you", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I try to be a smartass and I make a typo. But you&amp;#39;re absolutely right. Thank you&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga8tsi", "score_hidden": false, "stickied": false, "created": 1492257086.0, "created_utc": 1492228286.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7k8u", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "jkjustjoshing", "parent_id": "t1_dg9zpzh", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It's actually IIFE - Immediately invoked function expression", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s actually IIFE - Immediately invoked function expression&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga7k8u", "score_hidden": false, "stickied": false, "created": 1492255063.0, "created_utc": 1492226263.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9zpzh", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "my_blue_snog_box", "parent_id": "t1_dg9tz1j", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; ~~IFFY~~ IFFE\n\nFTFY", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;&lt;del&gt;IFFY&lt;/del&gt; IFFE&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;FTFY&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9zpzh", "score_hidden": false, "stickied": false, "created": 1492244083.0, "created_utc": 1492215283.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9tz1j", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "profile_this", "parent_id": "t1_dg9lmtb", "subreddit_name_prefixed": "r/webdev", "controversiality": 1, "body": "I don't really understand the problem. As long as your JS is fully tested and in self contained modules, what issues are there? \n\nThe only times I've had trouble as the system grows is when things were too coupled. After I broke each task down as an encapsulated IFFE ( module.exports = (function (){ return Module; }()) ), things are moving swimmingly. \n\nI really tried to get into ES6, but I feel like it bastardizes the syntax. From a CS perspective ES6/ECMA2015 is better. From a practical standpoint, it's not really improving much. It's just different, and more strict. \n\nEdit: love this sub. Never answers, only downvotes.\n\nEdit: yay, semantics!", "edited": 1492216411.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t really understand the problem. As long as your JS is fully tested and in self contained modules, what issues are there? &lt;/p&gt;\n\n&lt;p&gt;The only times I&amp;#39;ve had trouble as the system grows is when things were too coupled. After I broke each task down as an encapsulated IFFE ( module.exports = (function (){ return Module; }()) ), things are moving swimmingly. &lt;/p&gt;\n\n&lt;p&gt;I really tried to get into ES6, but I feel like it bastardizes the syntax. From a CS perspective ES6/ECMA2015 is better. From a practical standpoint, it&amp;#39;s not really improving much. It&amp;#39;s just different, and more strict. &lt;/p&gt;\n\n&lt;p&gt;Edit: love this sub. Never answers, only downvotes.&lt;/p&gt;\n\n&lt;p&gt;Edit: yay, semantics!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9tz1j", "score_hidden": false, "stickied": false, "created": 1492236421.0, "created_utc": 1492207621.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9lmtb", "gilded": 0, "archived": false, "score": 45, "report_reasons": null, "author": "soddi", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Past me: I've never learned a strongly typed language. Started with php and then javascript. Always thought that declaring types will slow me down developing as I have so much more to write and have to fight the typesystem.\n\nI now used typescript for just over a year. The thought of having to touch old code that is not written in typescript gives me axiety. \n\nWith javascript in the past: When codebase grows bigger you reach a point were modifying existing code becomes a nightmare. You try to change things but will most certenly break something else in the process. Most of the time without even knowing it because all tools you have is either a very good unit test suite or constant testing in the browser. And thats the point where developing stops being fun as you are just hunting bugs and don't get anything done anymore.\n\nWith typescript it's ludicrous. Our biggest project currently counts 490 typescript files in sum ~40000 lines of code. I did multiple refactorings to improve code quality or adapt to new needs in the past. And it's just so easy with typescript. Even when shifting 2000 lines of code around, it just works afterwards. Every major fuckup I do, typescript tells me before I even trip over it.\n\nIf you have to work on big codebases I strongly suggest giving typescript a try.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Past me: I&amp;#39;ve never learned a strongly typed language. Started with php and then javascript. Always thought that declaring types will slow me down developing as I have so much more to write and have to fight the typesystem.&lt;/p&gt;\n\n&lt;p&gt;I now used typescript for just over a year. The thought of having to touch old code that is not written in typescript gives me axiety. &lt;/p&gt;\n\n&lt;p&gt;With javascript in the past: When codebase grows bigger you reach a point were modifying existing code becomes a nightmare. You try to change things but will most certenly break something else in the process. Most of the time without even knowing it because all tools you have is either a very good unit test suite or constant testing in the browser. And thats the point where developing stops being fun as you are just hunting bugs and don&amp;#39;t get anything done anymore.&lt;/p&gt;\n\n&lt;p&gt;With typescript it&amp;#39;s ludicrous. Our biggest project currently counts 490 typescript files in sum ~40000 lines of code. I did multiple refactorings to improve code quality or adapt to new needs in the past. And it&amp;#39;s just so easy with typescript. Even when shifting 2000 lines of code around, it just works afterwards. Every major fuckup I do, typescript tells me before I even trip over it.&lt;/p&gt;\n\n&lt;p&gt;If you have to work on big codebases I strongly suggest giving typescript a try.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9lmtb", "score_hidden": false, "stickied": false, "created": 1492226128.0, "created_utc": 1492197328.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 45}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgbkjuc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "tme321", "parent_id": "t1_dgashcr", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It actually does, to some degree, have null checking on flow analysis but yes it is much more limited than what you would find in a purely functional language.  That's just what happens with non functional language.  AFAIK there is no non functional language that has a concept of null that had the type of checks you want.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It actually does, to some degree, have null checking on flow analysis but yes it is much more limited than what you would find in a purely functional language.  That&amp;#39;s just what happens with non functional language.  AFAIK there is no non functional language that has a concept of null that had the type of checks you want.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgbkjuc", "score_hidden": false, "stickied": false, "created": 1492339527.0, "created_utc": 1492310727.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgashcr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planetary_pelt", "parent_id": "t1_dg9me3m", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Typescript doesn't have non-nullable flow analysis. Even with the non-null flag, it only can check the annotation site. Non-nullable types in Typescript become a null union downstream.\n\nFor real non-nullability, look at how Kotlin handles it with platform types since it adds non-nullability on top of Java, a language without it. Even nullable types get refined into non-nullable types when short-circuit on null.\n\nThat's what I was referring to. Typescript has made progress in this area, but this is my main remaining issue with it.", "edited": 1492271665.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Typescript doesn&amp;#39;t have non-nullable flow analysis. Even with the non-null flag, it only can check the annotation site. Non-nullable types in Typescript become a null union downstream.&lt;/p&gt;\n\n&lt;p&gt;For real non-nullability, look at how Kotlin handles it with platform types since it adds non-nullability on top of Java, a language without it. Even nullable types get refined into non-nullable types when short-circuit on null.&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s what I was referring to. Typescript has made progress in this area, but this is my main remaining issue with it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgashcr", "score_hidden": false, "stickied": false, "created": 1492300245.0, "created_utc": 1492271445.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9me3m", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "tme321", "parent_id": "t1_dg9ku1b", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "All types by default are nullable in typescript.  If you turn the no nulls option on in tsconfig you can still explicitly allow nulls with a union type like\n  \n    var x: number | null;\n\nI know it's not exactly the same as C# or whatever but it's been good enough for my usage anyway.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;All types by default are nullable in typescript.  If you turn the no nulls option on in tsconfig you can still explicitly allow nulls with a union type like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var x: number | null;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know it&amp;#39;s not exactly the same as C# or whatever but it&amp;#39;s been good enough for my usage anyway.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9me3m", "score_hidden": false, "stickied": false, "created": 1492227044.0, "created_utc": 1492198244.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9li1u", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "The_Ebb_and_Flow", "parent_id": "t1_dg9ku1b", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9li1u", "score_hidden": false, "stickied": false, "created": 1492225969.0, "created_utc": 1492197169.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ku1b", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "planetary_pelt", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "It's worth a shot, that's for sure.\n\nIt's a lot easier using a statically-typed language than a language like Typescript which is made to add types gradually to perhaps existing Javascript. With Typescript, you have to plug type holes. Libraries you're using might not have types. That's really where the learning curve is with Typescript.\n\nBut switching languages completely (like choosing a compile-to-JS language like Purescript) has its own trade-offs. Most people don't have the luxury to experiment with entirely new languages.\n\nTypescript is pretty good at its goal to add types to Javascript and the tooling is currently better than Flow. The type system isn't the best. I wish it had nullable types, for example. But it makes a project much easier to refactor and think about once you get used to it.\n\nAlso, I wouldn't say you're \"switching\" to Typescript. It's Javascript with annotations and its source can be mechanically converted back to Javascript by removing the few Typescriptisms like import and annotations.\n\n", "edited": 1492196692.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s worth a shot, that&amp;#39;s for sure.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a lot easier using a statically-typed language than a language like Typescript which is made to add types gradually to perhaps existing Javascript. With Typescript, you have to plug type holes. Libraries you&amp;#39;re using might not have types. That&amp;#39;s really where the learning curve is with Typescript.&lt;/p&gt;\n\n&lt;p&gt;But switching languages completely (like choosing a compile-to-JS language like Purescript) has its own trade-offs. Most people don&amp;#39;t have the luxury to experiment with entirely new languages.&lt;/p&gt;\n\n&lt;p&gt;Typescript is pretty good at its goal to add types to Javascript and the tooling is currently better than Flow. The type system isn&amp;#39;t the best. I wish it had nullable types, for example. But it makes a project much easier to refactor and think about once you get used to it.&lt;/p&gt;\n\n&lt;p&gt;Also, I wouldn&amp;#39;t say you&amp;#39;re &amp;quot;switching&amp;quot; to Typescript. It&amp;#39;s Javascript with annotations and its source can be mechanically converted back to Javascript by removing the few Typescriptisms like import and annotations.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ku1b", "score_hidden": false, "stickied": false, "created": 1492225163.0, "created_utc": 1492196363.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgae5wf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "The_Ebb_and_Flow", "parent_id": "t1_dgad8xw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Brilliant!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Brilliant!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgae5wf", "score_hidden": false, "stickied": false, "created": 1492267453.0, "created_utc": 1492238653.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgad8xw", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cheeZer", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; Is it worth switching to Typescript?\n\nThat's the best part about TypeScript: It's a superset of JavaScript. So you are already writing valid TypeScript. And it also supports most of the new ECMAScript features.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Is it worth switching to Typescript?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s the best part about TypeScript: It&amp;#39;s a superset of JavaScript. So you are already writing valid TypeScript. And it also supports most of the new ECMAScript features.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgad8xw", "score_hidden": false, "stickied": false, "created": 1492265352.0, "created_utc": 1492236552.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9v61b", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "twenty7forty2", "parent_id": "t1_dg9lr5n", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "&gt; Flow\n\nIt's been ~~2~~ 0 days since you stumbled upon a new way of writing javascript", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Flow&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s been &lt;del&gt;2&lt;/del&gt; 0 days since you stumbled upon a new way of writing javascript&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9v61b", "score_hidden": false, "stickied": false, "created": 1492238011.0, "created_utc": 1492209211.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9n9yb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "The_Ebb_and_Flow", "parent_id": "t1_dg9lr5n", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I haven't but will check it out, thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I haven&amp;#39;t but will check it out, thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9n9yb", "score_hidden": false, "stickied": false, "created": 1492228107.0, "created_utc": 1492199307.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9lr5n", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "creichert", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Nice, have you tried Flow? I've had a great experience with it building apps with ES6+Flow+React. I highly recommend it for React projects.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice, have you tried Flow? I&amp;#39;ve had a great experience with it building apps with ES6+Flow+React. I highly recommend it for React projects.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9lr5n", "score_hidden": false, "stickied": false, "created": 1492226273.0, "created_utc": 1492197473.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgae88b", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "phpdevster", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "My old codebase was A1 and we used a *LOT* of functional programming patterns. The new codebase I work on is A2 / TS and it relies heavily on ES6 classes.\n\nI like both, to be honest. Well designed functional, duck typed JS remains very well organized and very compact and efficient, and easy to use / modify. ES6 classes and TS is a more verbose way of achieving exactly the same thing, *but*, the nominal typing can make code easier to reason about and give you more confidence in your usage of it, and also spare you from writing entire classes of \"type of\" assertions in your tests.\n\nBut that assumes that the TS has been written with the same care as the functional code. The instant you start Javafying it with shit like `MutableAbstractRequestParamValueFactoryFactory`, you can just pack up and go home. Sometimes, just returning a simple object literal is sufficient...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My old codebase was A1 and we used a &lt;em&gt;LOT&lt;/em&gt; of functional programming patterns. The new codebase I work on is A2 / TS and it relies heavily on ES6 classes.&lt;/p&gt;\n\n&lt;p&gt;I like both, to be honest. Well designed functional, duck typed JS remains very well organized and very compact and efficient, and easy to use / modify. ES6 classes and TS is a more verbose way of achieving exactly the same thing, &lt;em&gt;but&lt;/em&gt;, the nominal typing can make code easier to reason about and give you more confidence in your usage of it, and also spare you from writing entire classes of &amp;quot;type of&amp;quot; assertions in your tests.&lt;/p&gt;\n\n&lt;p&gt;But that assumes that the TS has been written with the same care as the functional code. The instant you start Javafying it with shit like &lt;code&gt;MutableAbstractRequestParamValueFactoryFactory&lt;/code&gt;, you can just pack up and go home. Sometimes, just returning a simple object literal is sufficient...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgae88b", "score_hidden": false, "stickied": false, "created": 1492267612.0, "created_utc": 1492238812.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgai6im", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CompuIves", "parent_id": "t1_dga7hlr", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "At the time I had to choose I was using react in frontend, which had better flow support. Typescript has great node support, so I decided to use both since the syntax don't differ that much. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At the time I had to choose I was using react in frontend, which had better flow support. Typescript has great node support, so I decided to use both since the syntax don&amp;#39;t differ that much. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgai6im", "score_hidden": false, "stickied": false, "created": 1492279119.0, "created_utc": 1492250319.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7hlr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kwhali", "parent_id": "t1_dg9rs0u", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Any reason for using both instead of just one?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Any reason for using both instead of just one?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga7hlr", "score_hidden": false, "stickied": false, "created": 1492254948.0, "created_utc": 1492226148.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9rs0u", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CompuIves", "parent_id": "t1_dg9ewn0", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I've been using Flow for the frontend and Typescript for the backend and I can recommend both. Because of static typing, you automatically document everything you write and the type checker can find so many bugs much more easily.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using Flow for the frontend and Typescript for the backend and I can recommend both. Because of static typing, you automatically document everything you write and the type checker can find so many bugs much more easily.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9rs0u", "score_hidden": false, "stickied": false, "created": 1492233591.0, "created_utc": 1492204791.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ewn0", "gilded": 0, "archived": false, "score": 26, "report_reasons": null, "author": "The_Ebb_and_Flow", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Interesting read, I've been trying to use ES6 as much as possible. Is it worth switching to Typescript?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting read, I&amp;#39;ve been trying to use ES6 as much as possible. Is it worth switching to Typescript?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ewn0", "score_hidden": false, "stickied": false, "created": 1492218188.0, "created_utc": 1492189388.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 26}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9jl6f", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "2uneek", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "since refactoring our angular1 apps to TS &amp; starting to build angular 2 apps, I never wanna work on anything but Typescript projects... Obviously, that's not the case.. but Typescript really is a game changer..", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;since refactoring our angular1 apps to TS &amp;amp; starting to build angular 2 apps, I never wanna work on anything but Typescript projects... Obviously, that&amp;#39;s not the case.. but Typescript really is a game changer..&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9jl6f", "score_hidden": false, "stickied": false, "created": 1492223667.0, "created_utc": 1492194867.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaitia", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "marinespl", "parent_id": "t1_dgaic2j", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ok. I haven't encountered any issues with no-TS code completion including imported objects' properties myself yet.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok. I haven&amp;#39;t encountered any issues with no-TS code completion including imported objects&amp;#39; properties myself yet.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaitia", "score_hidden": false, "stickied": false, "created": 1492281158.0, "created_utc": 1492252358.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaic2j", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jkjustjoshing", "parent_id": "t1_dgahlh8", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Sometimes intellisense can't figure out what properties a given object has so will either give you an option set too large or too small. With a typescript annotation it'll know exactly what to suggest to you. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sometimes intellisense can&amp;#39;t figure out what properties a given object has so will either give you an option set too large or too small. With a typescript annotation it&amp;#39;ll know exactly what to suggest to you. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaic2j", "score_hidden": false, "stickied": false, "created": 1492279625.0, "created_utc": 1492250825.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgahlh8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "marinespl", "parent_id": "t1_dga7mqy", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "How?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgahlh8", "score_hidden": false, "stickied": false, "created": 1492277221.0, "created_utc": 1492248421.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7mqy", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "jkjustjoshing", "parent_id": "t1_dg9u3vz", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Just less useful!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just less useful!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga7mqy", "score_hidden": false, "stickied": false, "created": 1492255169.0, "created_utc": 1492226369.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9u3vz", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "marinespl", "parent_id": "t1_dg9phrz", "subreddit_name_prefixed": "r/webdev", "controversiality": 1, "body": "Intellisense without Typescript is also nice. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Intellisense without Typescript is also nice. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9u3vz", "score_hidden": false, "stickied": false, "created": 1492236598.0, "created_utc": 1492207798.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9phrz", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "omnilynx", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Intellisense with Typescript is so nice.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Intellisense with Typescript is so nice.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9phrz", "score_hidden": false, "stickied": false, "created": 1492230772.0, "created_utc": 1492201972.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9ts70", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "poopycakes", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "For some reason a few years ago when I first heard of TS I was so resistant to it, why would anyone waste their time with this. But now I love it and hate working on old projects that don't use it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For some reason a few years ago when I first heard of TS I was so resistant to it, why would anyone waste their time with this. But now I love it and hate working on old projects that don&amp;#39;t use it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ts70", "score_hidden": false, "stickied": false, "created": 1492236168.0, "created_utc": 1492207368.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9tqmw", "gilded": 0, "archived": false, "score": 28, "report_reasons": null, "author": "HideousNomo", "parent_id": "t1_dg9qtlm", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Slack's groups are structured &lt;groupName&gt;.slack.com , engineering.slack.com is a private slack group\n\nBut I agree, it looks shady.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Slack&amp;#39;s groups are structured &amp;lt;groupName&amp;gt;.slack.com , engineering.slack.com is a private slack group&lt;/p&gt;\n\n&lt;p&gt;But I agree, it looks shady.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9tqmw", "score_hidden": false, "stickied": false, "created": 1492236111.0, "created_utc": 1492207311.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 28}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgaj4nj", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "dbbk", "parent_id": "t1_dg9qtlm", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "If you think that's bad, try http://blog.google", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you think that&amp;#39;s bad, try &lt;a href=\"http://blog.google\"&gt;http://blog.google&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgaj4nj", "score_hidden": false, "stickied": false, "created": 1492282135.0, "created_utc": 1492253335.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9ry0b", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "RalphNLD", "parent_id": "t1_dg9qtlm", "subreddit_name_prefixed": "r/webdev", "controversiality": 1, "body": "Because it's fancy, probably. The novelty factors of these TLDs are still pretty high.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Because it&amp;#39;s fancy, probably. The novelty factors of these TLDs are still pretty high.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ry0b", "score_hidden": false, "stickied": false, "created": 1492233805.0, "created_utc": 1492205005.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dg9r5o3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "asukazama", "parent_id": "t1_dg9qtlm", "subreddit_name_prefixed": "r/webdev", "controversiality": 1, "body": "It's a fad", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a fad&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9r5o3", "score_hidden": false, "stickied": false, "created": 1492232809.0, "created_utc": 1492204009.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9qtlm", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "pandemi", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": ".engineering TLD? Why, instead of say engineering.slack.com? From a users perspective, there's no reason to believe that slack.engineering and slack.com are related in any way.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;.engineering TLD? Why, instead of say engineering.slack.com? From a users perspective, there&amp;#39;s no reason to believe that slack.engineering and slack.com are related in any way.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9qtlm", "score_hidden": false, "stickied": false, "created": 1492232387.0, "created_utc": 1492203587.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgas5fd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CorySimmons", "parent_id": "t1_dgafc7o", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Ah okay that sounds like a much better approach.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah okay that sounds like a much better approach.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgas5fd", "score_hidden": false, "stickied": false, "created": 1492299775.0, "created_utc": 1492270975.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgafc7o", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "waffleau", "parent_id": "t1_dg9vcuy", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "React isn't switching to Flow. I think in the past it was on the roadmap, but they've changed direction. The React team's current position is that they aren't sure what the most effective way to do typing is, so they don't want to be prescriptive.\n\nAs of 15.5, PropTypes have been moved into a separate package (opt-in), with the aim of allowing the developer to decide how they want to handle typing (Flow/Typescript/PropTypes). ", "edited": 1492241938.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;React isn&amp;#39;t switching to Flow. I think in the past it was on the roadmap, but they&amp;#39;ve changed direction. The React team&amp;#39;s current position is that they aren&amp;#39;t sure what the most effective way to do typing is, so they don&amp;#39;t want to be prescriptive.&lt;/p&gt;\n\n&lt;p&gt;As of 15.5, PropTypes have been moved into a separate package (opt-in), with the aim of allowing the developer to decide how they want to handle typing (Flow/Typescript/PropTypes). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgafc7o", "score_hidden": false, "stickied": false, "created": 1492270456.0, "created_utc": 1492241656.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dga9rvc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CorySimmons", "parent_id": "t1_dga33kf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Great answer. I'd offer counterpoints, but tbh, when I tried out Flow on a large project I was pretty disappointed. I remember looking into Typescript and thinking it was better except the concept of \"definitions\" seemed weird. Looking back on it, definitions seem sweet.\n\nI think Flow appeals to me a bit because it's just JS with some sprinkles (remove the sprinkles and the JS works just fine), whereas Typescript seems like another language.\n\nMore debate:\n\nhttps://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887/4\n\nHonestly, it seems like TS is the better pick until Facebook dumps a lot of resources into making Flow nicer.\n\nI got lazy halfway through my Flow project and just stopped using it. Wish something would've forced me to keep going.\n\nEither way, really hope static types take off in the JS world.\n\nWhen can we all just migrate to Elm? :D", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great answer. I&amp;#39;d offer counterpoints, but tbh, when I tried out Flow on a large project I was pretty disappointed. I remember looking into Typescript and thinking it was better except the concept of &amp;quot;definitions&amp;quot; seemed weird. Looking back on it, definitions seem sweet.&lt;/p&gt;\n\n&lt;p&gt;I think Flow appeals to me a bit because it&amp;#39;s just JS with some sprinkles (remove the sprinkles and the JS works just fine), whereas Typescript seems like another language.&lt;/p&gt;\n\n&lt;p&gt;More debate:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887/4\"&gt;https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887/4&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Honestly, it seems like TS is the better pick until Facebook dumps a lot of resources into making Flow nicer.&lt;/p&gt;\n\n&lt;p&gt;I got lazy halfway through my Flow project and just stopped using it. Wish something would&amp;#39;ve forced me to keep going.&lt;/p&gt;\n\n&lt;p&gt;Either way, really hope static types take off in the JS world.&lt;/p&gt;\n\n&lt;p&gt;When can we all just migrate to Elm? :D&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga9rvc", "score_hidden": false, "stickied": false, "created": 1492258670.0, "created_utc": 1492229870.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga33kf", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "karinto", "parent_id": "t1_dg9xmi7", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Well, one thing to note is that packages written in either could be used by the other. Both TypeScript and React's popularities will guarantee that React's TS type definitions will be maintained. \n\nOne difference between Flow and TS is that Flow *only* adds types. You will most likely combine it with Babel or some other transpiler to use newer JS features than your runtime supports. Both Flow and your transpiler still must support the new feature for it to work, and sourcemaps do get more tricky the more layers you add. \n\nTS is a superset of JS that includes an integrated transpiler with great sourcemap support that comes from being integrated. Types for decorator parameters and such just work, because decorator support is part of TS, whereas Flow will only ignore them to be processed by your transpiler.\n\nFlow definitely is more permissive in inferring types. This allows Flow to provide more type inferences where TypeScript may just fallback to \"any\", but Flow can also provide inaccurate types until more annotations are added. With configuration, TypeScript can definitely be tightened down to be even stricter.\n\nThat said, your choice of framework just might be the deciding factor for you. With Angular 2+, it is just way easier with TypeScript, although you can put together a Babel setup with Flow and decorators to mimic it. With React, unless you want to use decorators or other newer features of JS with types, Flow might turn out to be easier, although TS does include jsx support.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, one thing to note is that packages written in either could be used by the other. Both TypeScript and React&amp;#39;s popularities will guarantee that React&amp;#39;s TS type definitions will be maintained. &lt;/p&gt;\n\n&lt;p&gt;One difference between Flow and TS is that Flow &lt;em&gt;only&lt;/em&gt; adds types. You will most likely combine it with Babel or some other transpiler to use newer JS features than your runtime supports. Both Flow and your transpiler still must support the new feature for it to work, and sourcemaps do get more tricky the more layers you add. &lt;/p&gt;\n\n&lt;p&gt;TS is a superset of JS that includes an integrated transpiler with great sourcemap support that comes from being integrated. Types for decorator parameters and such just work, because decorator support is part of TS, whereas Flow will only ignore them to be processed by your transpiler.&lt;/p&gt;\n\n&lt;p&gt;Flow definitely is more permissive in inferring types. This allows Flow to provide more type inferences where TypeScript may just fallback to &amp;quot;any&amp;quot;, but Flow can also provide inaccurate types until more annotations are added. With configuration, TypeScript can definitely be tightened down to be even stricter.&lt;/p&gt;\n\n&lt;p&gt;That said, your choice of framework just might be the deciding factor for you. With Angular 2+, it is just way easier with TypeScript, although you can put together a Babel setup with Flow and decorators to mimic it. With React, unless you want to use decorators or other newer features of JS with types, Flow might turn out to be easier, although TS does include jsx support.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga33kf", "score_hidden": false, "stickied": false, "created": 1492248651.0, "created_utc": 1492219851.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dga3ckc", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "thescience", "parent_id": "t1_dg9xmi7", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I've found the tooling for Typescript to be a nicer experience than Flow.  Especially if using VSCode.  Typescript also works wonderfully with React.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve found the tooling for Typescript to be a nicer experience than Flow.  Especially if using VSCode.  Typescript also works wonderfully with React.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga3ckc", "score_hidden": false, "stickied": false, "created": 1492249001.0, "created_utc": 1492220201.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9xmi7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CorySimmons", "parent_id": "t1_dg9xckh", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Yes I know who made them. And yes, they both can co-exist, as they have, but it seems like FB is making an effort to butt Typescript out of the React ecosystem by pushing Flow into it.\n\nI suppose my question should've been: why work with TS when Flow is going to be the convention for React?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes I know who made them. And yes, they both can co-exist, as they have, but it seems like FB is making an effort to butt Typescript out of the React ecosystem by pushing Flow into it.&lt;/p&gt;\n\n&lt;p&gt;I suppose my question should&amp;#39;ve been: why work with TS when Flow is going to be the convention for React?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9xmi7", "score_hidden": false, "stickied": false, "created": 1492241298.0, "created_utc": 1492212498.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9xckh", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "karinto", "parent_id": "t1_dg9vcuy", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Both React and Flow are made by Facebook, so it makes sense that React chose to use Flow. TypeScript has Microsoft (creator and main sponsor) and Google (Angular), so for the time being, both would coexist.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Both React and Flow are made by Facebook, so it makes sense that React chose to use Flow. TypeScript has Microsoft (creator and main sponsor) and Google (Angular), so for the time being, both would coexist.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9xckh", "score_hidden": false, "stickied": false, "created": 1492240939.0, "created_utc": 1492212139.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9vcuy", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "CorySimmons", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "What about Flow? Isn't React switching to Flow? How does this bode for TypeScript's future?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What about Flow? Isn&amp;#39;t React switching to Flow? How does this bode for TypeScript&amp;#39;s future?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9vcuy", "score_hidden": false, "stickied": false, "created": 1492238267.0, "created_utc": 1492209467.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65cgro", "likes": null, "replies": "", "user_reports": [], "id": "dgazexv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pleunv", "parent_id": "t3_65cgro", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Does TypeScript have any automated polyfilling based on target/browserlist these days? This is such a nice thing to have with babel-preset-env.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Does TypeScript have any automated polyfilling based on target/browserlist these days? This is such a nice thing to have with babel-preset-env.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgazexv", "score_hidden": false, "stickied": false, "created": 1492309791.0, "created_utc": 1492280991.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]