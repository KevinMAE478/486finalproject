[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "webdev", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been freelancing for a year and a half now - I can get most jobs done but I feel like my testing and structuring is all over the place compared to a corporate job where I&amp;#39;d be working in a team.  &lt;/p&gt;\n\n&lt;p&gt;I enjoy working for myself but would like to learn how building, structuring and testing projects would happen in a workplace setting. I mainly develop with NodeJS (Express/Hapi), Angular/Vue and Mongo/CouchDB/MySQL.  &lt;/p&gt;\n\n&lt;p&gt;At the moment I always split my projects into backend and frontend. The backend being an API for the site and the frontend querying the API and serving the data. As for testing, right now I use Mocha and Chai but realise this is quite limited compared to what I could be doing. &lt;/p&gt;\n\n&lt;p&gt;If anyone could point me in the right direction of detailed information on structure/testing within a more professional environment that would be fantastic. &lt;/p&gt;\n\n&lt;p&gt;Many thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been freelancing for a year and a half now - I can get most jobs done but I feel like my testing and structuring is all over the place compared to a corporate job where I'd be working in a team.  \n  \nI enjoy working for myself but would like to learn how building, structuring and testing projects would happen in a workplace setting. I mainly develop with NodeJS (Express/Hapi), Angular/Vue and Mongo/CouchDB/MySQL.  \n  \nAt the moment I always split my projects into backend and frontend. The backend being an API for the site and the frontend querying the API and serving the data. As for testing, right now I use Mocha and Chai but realise this is quite limited compared to what I could be doing. \n\nIf anyone could point me in the right direction of detailed information on structure/testing within a more professional environment that would be fantastic. \n\nMany thanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65d7aw", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 45, "report_reasons": null, "author": "bolt_blue", "saved": false, "mod_reports": [], "name": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "approved_by": null, "over_18": false, "domain": "self.webdev", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qs0q", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/webdev/comments/65d7aw/javascript_where_can_i_learn_to_structure_and/", "num_reports": null, "locked": false, "stickied": false, "created": 1492212861.0, "url": "https://www.reddit.com/r/webdev/comments/65d7aw/javascript_where_can_i_learn_to_structure_and/", "author_flair_text": null, "quarantine": false, "title": "[JavaScript] Where can I learn to structure and test my projects correctly?", "created_utc": 1492184061.0, "distinguished": null, "media": null, "upvote_ratio": 0.89, "num_comments": 10, "visited": false, "subreddit_type": "public", "ups": 45}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": "", "user_reports": [], "id": "dg9fraf", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "alejalapeno", "parent_id": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Honestly I think blog posts about how companies have architected their project, conference presentations, and such are your best bet. You can look at how open-source projects are structured to get an idea but it doesn't always explain the reasoning/methodology they were following.\n\nThe reason I think these are your best bets are because architecting is most often mastered/learned through others in a non-freelance situation, or through your own experiences and discovering what works/doesn't.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Honestly I think blog posts about how companies have architected their project, conference presentations, and such are your best bet. You can look at how open-source projects are structured to get an idea but it doesn&amp;#39;t always explain the reasoning/methodology they were following.&lt;/p&gt;\n\n&lt;p&gt;The reason I think these are your best bets are because architecting is most often mastered/learned through others in a non-freelance situation, or through your own experiences and discovering what works/doesn&amp;#39;t.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9fraf", "score_hidden": false, "stickied": false, "created": 1492219167.0, "created_utc": 1492190367.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": "", "user_reports": [], "id": "dg9g1vq", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Thef19", "parent_id": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Mocha / Chai are just fine for testing. Jasmine as well. We currently use both of these on different projects where i work.\n\nStructuring a lot depends on what tools / frameworks you are using. We use 90% angular, so this is kinda more for that, but you can modify / adjust for any other framework as well. When you structure your app, you want to separate as much of everything as you can. Every controller, service, factory, etc should be in its own file. Each of these files should have a corresponding \"spec\" file for the tests for it.\n\nBeyond this, we generally build our tests into our build process. Gulp, Grunt, or Webpack,  with Karma. Karma will run your tests, and can also generate code coverage reports (which are very useful for seeing how well your unit tests are actually covering your code).\n\nThat is pretty much all there is to structuring and testing your project. Keep everything clean and organized, and make sure you have tests for everything you write.\n\nIf you have more questions, are want more specifics feel free to ask.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mocha / Chai are just fine for testing. Jasmine as well. We currently use both of these on different projects where i work.&lt;/p&gt;\n\n&lt;p&gt;Structuring a lot depends on what tools / frameworks you are using. We use 90% angular, so this is kinda more for that, but you can modify / adjust for any other framework as well. When you structure your app, you want to separate as much of everything as you can. Every controller, service, factory, etc should be in its own file. Each of these files should have a corresponding &amp;quot;spec&amp;quot; file for the tests for it.&lt;/p&gt;\n\n&lt;p&gt;Beyond this, we generally build our tests into our build process. Gulp, Grunt, or Webpack,  with Karma. Karma will run your tests, and can also generate code coverage reports (which are very useful for seeing how well your unit tests are actually covering your code).&lt;/p&gt;\n\n&lt;p&gt;That is pretty much all there is to structuring and testing your project. Keep everything clean and organized, and make sure you have tests for everything you write.&lt;/p&gt;\n\n&lt;p&gt;If you have more questions, are want more specifics feel free to ask.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9g1vq", "score_hidden": false, "stickied": false, "created": 1492219506.0, "created_utc": 1492190706.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": "", "user_reports": [], "id": "dg9sza3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "adarias", "parent_id": "t1_dg9ohhj", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Jasmine actually does not use language chainers.  Those are just method calls which happen to have long names.  Not is actually a new Expectation object with the same methods as Expect, and a flag set to flip the returned value.\n\nIn Chai, all of those chainables are (or return) references to the parent, such that you can use anything in any order.\n\nHere's something that works in Chai that has no equivalent in Jasmine:\n\n    expect([1, 2]).to.be.an('array').that.does.not.include(3);\n\nAs far as I know, language chainers in the sense of orderless, logicless elements, more or less originated in Should.js and were copied essentially wholesale into Chai.  Should.js isn't commonly used these days, but was popular before Chai got big.  I haven't seen them used outside of those two libraries.\n\nYou might encounter language chainers in areas that aren't obviously using chai/shouldjs at a glance, but most of these are actually loading chai as a dependency and then adding their own assertion methods on top.  as an example:\n\n    // sinon\n    assert(spy.calledWith(message));\n\n    // with sinon chai\n    spy.should.have.been.calledWith(message);\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Jasmine actually does not use language chainers.  Those are just method calls which happen to have long names.  Not is actually a new Expectation object with the same methods as Expect, and a flag set to flip the returned value.&lt;/p&gt;\n\n&lt;p&gt;In Chai, all of those chainables are (or return) references to the parent, such that you can use anything in any order.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s something that works in Chai that has no equivalent in Jasmine:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect([1, 2]).to.be.an(&amp;#39;array&amp;#39;).that.does.not.include(3);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As far as I know, language chainers in the sense of orderless, logicless elements, more or less originated in Should.js and were copied essentially wholesale into Chai.  Should.js isn&amp;#39;t commonly used these days, but was popular before Chai got big.  I haven&amp;#39;t seen them used outside of those two libraries.&lt;/p&gt;\n\n&lt;p&gt;You might encounter language chainers in areas that aren&amp;#39;t obviously using chai/shouldjs at a glance, but most of these are actually loading chai as a dependency and then adding their own assertion methods on top.  as an example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// sinon\nassert(spy.calledWith(message));\n\n// with sinon chai\nspy.should.have.been.calledWith(message);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9sza3", "score_hidden": false, "stickied": false, "created": 1492235131.0, "created_utc": 1492206331.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ohhj", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Thef19", "parent_id": "t1_dg9kv70", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "You aren't wrong,  but Chai isn't the only one like that. Jasmine is quite similiar as well with things like\n\n    expect(false).toBeFalsy();\n    expect(method).toHaveBeenCalled();\n    expect(method).not.toHaveBeenCalled();\n\nIt is a pretty common thing amongst many (JS at least, unsure about other languages) Unit Testing frameworks", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You aren&amp;#39;t wrong,  but Chai isn&amp;#39;t the only one like that. Jasmine is quite similiar as well with things like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect(false).toBeFalsy();\nexpect(method).toHaveBeenCalled();\nexpect(method).not.toHaveBeenCalled();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is a pretty common thing amongst many (JS at least, unsure about other languages) Unit Testing frameworks&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ohhj", "score_hidden": false, "stickied": false, "created": 1492229560.0, "created_utc": 1492200760.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9kv70", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "adarias", "parent_id": "t1_dg9ej7f", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "that's chai.\n\nchai.should() is optional, and the more common (though slightly more verbose) way of using chai is saying\n\n    expect(this).to.equal(that);\n\n('be' is actually just a chainer,  it doesn't take args).\n\nNode has an 'assert' module that can be included in lieu of external testing libraries (and I believe most node testing libraries are built on top of this basic assert feature).  this looks like\n\n    assert(value, messageString);\n    assert.deepEqual(actual, expected, messageString);\n\netc., and is easier for people coming from other environments.\n\nwhat libraries like chai provide (besides the syntax) is common assertions that would otherwise require a lot of lengthy repetitive code.  compare\n\n    assert(Object.prototype.hasOwnProperty.call(object, propName))\n    object.should.have.ownProperty(propName);\n\nand you can see why some folks might prefer the chai.should() approach.\n\n---\n\nedit: more on language chainers:\n\nthese don't actually have any meaning, they just continue the chain.\n    \n    expect(true).to.be.true;\n    object.should.have.property(propName);\n\nis exactly the same as\n\n    expect(true).true;\n    object.should.property(propName);\n\nexcept that the first version is obviously more readable.\n\nonly words which have logical meaning (not, any, all) do anything to the chain.\n\nfor this reason, these are also all identical tests ('not' is the only meaningful word in the chain):\n    \n    expect(false).not.to.be.true\n    expect(false).to.not.be.true\n    expect(false).to.be.not.true\n\nonce you realize this, the language part becomes a lot less scary.", "edited": 1492197964.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;that&amp;#39;s chai.&lt;/p&gt;\n\n&lt;p&gt;chai.should() is optional, and the more common (though slightly more verbose) way of using chai is saying&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect(this).to.equal(that);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(&amp;#39;be&amp;#39; is actually just a chainer,  it doesn&amp;#39;t take args).&lt;/p&gt;\n\n&lt;p&gt;Node has an &amp;#39;assert&amp;#39; module that can be included in lieu of external testing libraries (and I believe most node testing libraries are built on top of this basic assert feature).  this looks like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;assert(value, messageString);\nassert.deepEqual(actual, expected, messageString);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc., and is easier for people coming from other environments.&lt;/p&gt;\n\n&lt;p&gt;what libraries like chai provide (besides the syntax) is common assertions that would otherwise require a lot of lengthy repetitive code.  compare&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;assert(Object.prototype.hasOwnProperty.call(object, propName))\nobject.should.have.ownProperty(propName);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and you can see why some folks might prefer the chai.should() approach.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;edit: more on language chainers:&lt;/p&gt;\n\n&lt;p&gt;these don&amp;#39;t actually have any meaning, they just continue the chain.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect(true).to.be.true;\nobject.should.have.property(propName);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is exactly the same as&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect(true).true;\nobject.should.property(propName);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;except that the first version is obviously more readable.&lt;/p&gt;\n\n&lt;p&gt;only words which have logical meaning (not, any, all) do anything to the chain.&lt;/p&gt;\n\n&lt;p&gt;for this reason, these are also all identical tests (&amp;#39;not&amp;#39; is the only meaningful word in the chain):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect(false).not.to.be.true\nexpect(false).to.not.be.true\nexpect(false).to.be.not.true\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;once you realize this, the language part becomes a lot less scary.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9kv70", "score_hidden": false, "stickied": false, "created": 1492225201.0, "created_utc": 1492196401.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ej7f", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "aflashyrhetoric", "parent_id": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Honestly, any sort of top-down primer on Javascript testing would be great for me. I know the \"english-like syntax\" is supposed to be convenient, but it honestly kind of distracts me because it's so foreign.\n\nThings like `this.should.be(that)` are so odd to me. I forgot which testing libraries use this style but yeah.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Honestly, any sort of top-down primer on Javascript testing would be great for me. I know the &amp;quot;english-like syntax&amp;quot; is supposed to be convenient, but it honestly kind of distracts me because it&amp;#39;s so foreign.&lt;/p&gt;\n\n&lt;p&gt;Things like &lt;code&gt;this.should.be(that)&lt;/code&gt; are so odd to me. I forgot which testing libraries use this style but yeah.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9ej7f", "score_hidden": false, "stickied": false, "created": 1492217767.0, "created_utc": 1492188967.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": "", "user_reports": [], "id": "dgais0g", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "yamalight", "parent_id": "t1_dga16qf", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "glad you liked it! :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;glad you liked it! :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dgais0g", "score_hidden": false, "stickied": false, "created": 1492281029.0, "created_utc": 1492252229.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga16qf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "treighton", "parent_id": "t1_dg9mob8", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "This is awesome man! Thanks for sharing!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is awesome man! Thanks for sharing!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga16qf", "score_hidden": false, "stickied": false, "created": 1492246026.0, "created_utc": 1492217226.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9mob8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "yamalight", "parent_id": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "I did a [set of videos](https://www.youtube.com/playlist?list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X) on building client-server app with js, they include videos on testing both [client](https://www.youtube.com/watch?v=elTSjk5NBNg&amp;list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X&amp;index=13) and [server](https://www.youtube.com/watch?v=byYI5dNgMeI&amp;list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X&amp;index=6).  \nI'd also be happy to answer any questions you might have after watching those. Let me know if that helps!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I did a &lt;a href=\"https://www.youtube.com/playlist?list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X\"&gt;set of videos&lt;/a&gt; on building client-server app with js, they include videos on testing both &lt;a href=\"https://www.youtube.com/watch?v=elTSjk5NBNg&amp;amp;list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X&amp;amp;index=13\"&gt;client&lt;/a&gt; and &lt;a href=\"https://www.youtube.com/watch?v=byYI5dNgMeI&amp;amp;list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X&amp;amp;index=6\"&gt;server&lt;/a&gt;.&lt;br/&gt;\nI&amp;#39;d also be happy to answer any questions you might have after watching those. Let me know if that helps!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dg9mob8", "score_hidden": false, "stickied": false, "created": 1492227382.0, "created_utc": 1492198582.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qs0q", "removal_reason": null, "link_id": "t3_65d7aw", "likes": null, "replies": "", "user_reports": [], "id": "dga8m4h", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "XPTranquility", "parent_id": "t3_65d7aw", "subreddit_name_prefixed": "r/webdev", "controversiality": 0, "body": "Karma and Protractor?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Karma and Protractor?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "webdev", "name": "t1_dga8m4h", "score_hidden": false, "stickied": false, "created": 1492256744.0, "created_utc": 1492227944.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]