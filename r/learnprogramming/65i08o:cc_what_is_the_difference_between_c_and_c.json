[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I know C++ fairly well, and C seems really similar to it. What are the key differences between the two, and if I know C++, do I almost know C? They seem almost identical from watching a few tutorials&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I know C++ fairly well, and C seems really similar to it. What are the key differences between the two, and if I know C++, do I almost know C? They seem almost identical from watching a few tutorials", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65i08o", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 18, "report_reasons": null, "author": "freezel0l", "saved": false, "mod_reports": [], "name": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65i08o/cc_what_is_the_difference_between_c_and_c/", "num_reports": null, "locked": false, "stickied": false, "created": 1492271348.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65i08o/cc_what_is_the_difference_between_c_and_c/", "author_flair_text": null, "quarantine": false, "title": "[C/C++] What is the difference between C and C++?", "created_utc": 1492242548.0, "distinguished": null, "media": null, "upvote_ratio": 0.77, "num_comments": 15, "visited": false, "subreddit_type": "public", "ups": 18}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgcbly3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LoyalSol", "parent_id": "t1_dgbrt2q", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt;You could write a C++ compiler using any Turing complete programming language. There is no requirement that says you must use an OO like language to create a compiler for another OO like language.\n\nNo, but it does say that what a OOD language does isn't exactly special either.  A piece of C code is capable of generating the exact same executable file as a C++ code byte for byte (though of course it would be hard to do so in practice). \n\nObject oriented programming was done long before C++ ever became a thing.  It goes as far back as the 1950s before even the original C language was ever developed.   Modern languages simply took those same concepts and formalized their usage.  Languages like C++ don't exactly do anything that isn't already possible in C, it just took things people were already doing and made it so it required fewer lines of code to generate the same result.  \n\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You could write a C++ compiler using any Turing complete programming language. There is no requirement that says you must use an OO like language to create a compiler for another OO like language.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No, but it does say that what a OOD language does isn&amp;#39;t exactly special either.  A piece of C code is capable of generating the exact same executable file as a C++ code byte for byte (though of course it would be hard to do so in practice). &lt;/p&gt;\n\n&lt;p&gt;Object oriented programming was done long before C++ ever became a thing.  It goes as far back as the 1950s before even the original C language was ever developed.   Modern languages simply took those same concepts and formalized their usage.  Languages like C++ don&amp;#39;t exactly do anything that isn&amp;#39;t already possible in C, it just took things people were already doing and made it so it required fewer lines of code to generate the same result.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgcbly3", "score_hidden": false, "stickied": false, "created": 1492393566.0, "created_utc": 1492364766.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbrt2q", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jussij", "parent_id": "t1_dgbpn32", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt;  If it was impossible then you couldn't write C++ compilers in C. \n\nYou could write a C++ compiler using any Turing complete programming language. There is no requirement that says you must use an *OO like language* to create a compiler for another OO like language.\n\n&gt; Yet literally every thing in Python is an object. It's probably one of the most object oriented languages I've ever seen. \n\nUsing that definitions, JavaScript is also a wonderful OOD language as well, since it too defines everything an object.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;If it was impossible then you couldn&amp;#39;t write C++ compilers in C. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You could write a C++ compiler using any Turing complete programming language. There is no requirement that says you must use an &lt;em&gt;OO like language&lt;/em&gt; to create a compiler for another OO like language.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Yet literally every thing in Python is an object. It&amp;#39;s probably one of the most object oriented languages I&amp;#39;ve ever seen. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Using that definitions, JavaScript is also a wonderful OOD language as well, since it too defines everything an object.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbrt2q", "score_hidden": false, "stickied": false, "created": 1492352259.0, "created_utc": 1492323459.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpn32", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LoyalSol", "parent_id": "t1_dgbo1t2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "C is not an \"object oriented language\", but it is still entirely possible to program in an \"object oriented\" way and implement pretty much all of the features you find in C++ in one way or another.  If it was impossible then you couldn't write C++ compilers in C. \n\nIt's mostly the semantics of \"the compiler forces you to do it this way\" vs \"you have the option to do it this way\" similar to how in say C++ you have the option to indent your code where as in Python you are forced to indent your code. \n\nC++ makes doing so easier since is part of the standard where as C requires you to find a library or write your own. \n\n&gt;OOD mandates data encapsulation which not only requires that you keep the data inside the object but also requires the ability to control access to that data from outside of the object.\n\nBy that definition Python isn't OOD since it has no way to truly control outside access to a class variable. Yet literally every thing in Python is an object.  It's probably one of the most object oriented languages I've ever seen. \n", "edited": 1492319249.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C is not an &amp;quot;object oriented language&amp;quot;, but it is still entirely possible to program in an &amp;quot;object oriented&amp;quot; way and implement pretty much all of the features you find in C++ in one way or another.  If it was impossible then you couldn&amp;#39;t write C++ compilers in C. &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s mostly the semantics of &amp;quot;the compiler forces you to do it this way&amp;quot; vs &amp;quot;you have the option to do it this way&amp;quot; similar to how in say C++ you have the option to indent your code where as in Python you are forced to indent your code. &lt;/p&gt;\n\n&lt;p&gt;C++ makes doing so easier since is part of the standard where as C requires you to find a library or write your own. &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;OOD mandates data encapsulation which not only requires that you keep the data inside the object but also requires the ability to control access to that data from outside of the object.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;By that definition Python isn&amp;#39;t OOD since it has no way to truly control outside access to a class variable. Yet literally every thing in Python is an object.  It&amp;#39;s probably one of the most object oriented languages I&amp;#39;ve ever seen. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbpn32", "score_hidden": false, "stickied": false, "created": 1492347778.0, "created_utc": 1492318978.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbo1t2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jussij", "parent_id": "t1_dgatmcu", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "True OOD (Object Oriented design) does require a little more than just the *struct* construct.\n\nFor example:\n\nOOD mandates data encapsulation which not only requires that you keep the data inside the object but also requires the ability to control access to that data from outside of the object.\n\nThe *struct* does give you the first part of that requirement, but there is no way to correctly implement the second part without some help from the compiler. \n\nOOD also makes extensive use of classes, polymorphism (i.e. method overloading), abstractions, interfaces and inheritance. OO languages like C++ will handle all the type checking of these abstractions, interfaces and overloads for correctness and also manage the resulting tangle of vtables through compiler written code.\n\nDoing something similar in C all you could really hope for is some sort of inheritance, with little in the way of checking for correctness and even then the resulting vtables would have to be handled by the programmer through hand written code.\n\nFinally many argue a programming language can't even be consider OO if it does not have a concept of generics (i.e. the Go lang debate) and there may be a hint of truth to that argument. When laying out an OOD you do tend to end up with a lot of generic containers in the final design.\n\nSo with all those limitations, surely it would be better to write C code in the way C code is meant to be written and not try to write C code in a style it was never designed for.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;True OOD (Object Oriented design) does require a little more than just the &lt;em&gt;struct&lt;/em&gt; construct.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;p&gt;OOD mandates data encapsulation which not only requires that you keep the data inside the object but also requires the ability to control access to that data from outside of the object.&lt;/p&gt;\n\n&lt;p&gt;The &lt;em&gt;struct&lt;/em&gt; does give you the first part of that requirement, but there is no way to correctly implement the second part without some help from the compiler. &lt;/p&gt;\n\n&lt;p&gt;OOD also makes extensive use of classes, polymorphism (i.e. method overloading), abstractions, interfaces and inheritance. OO languages like C++ will handle all the type checking of these abstractions, interfaces and overloads for correctness and also manage the resulting tangle of vtables through compiler written code.&lt;/p&gt;\n\n&lt;p&gt;Doing something similar in C all you could really hope for is some sort of inheritance, with little in the way of checking for correctness and even then the resulting vtables would have to be handled by the programmer through hand written code.&lt;/p&gt;\n\n&lt;p&gt;Finally many argue a programming language can&amp;#39;t even be consider OO if it does not have a concept of generics (i.e. the Go lang debate) and there may be a hint of truth to that argument. When laying out an OOD you do tend to end up with a lot of generic containers in the final design.&lt;/p&gt;\n\n&lt;p&gt;So with all those limitations, surely it would be better to write C code in the way C code is meant to be written and not try to write C code in a style it was never designed for.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbo1t2", "score_hidden": false, "stickied": false, "created": 1492344951.0, "created_utc": 1492316151.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgatmcu", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "LoyalSol", "parent_id": "t1_dgaid68", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "OO is a paradigm not an object (no pun intended), it's not about what tools you have to perform the task it's simply how you group your code.  Just because languages like Python, C++, etc. have nice little construct that make it easier for the user doesn't mean you can't structure C code to behave in much the same way. \nIt just requires the user to manually book keep how the objects are created and handled where as languages like C++ have the functionality out of the box.   \n\nBut even in C you have things like structs which are OO constructs that are part of the C standard. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OO is a paradigm not an object (no pun intended), it&amp;#39;s not about what tools you have to perform the task it&amp;#39;s simply how you group your code.  Just because languages like Python, C++, etc. have nice little construct that make it easier for the user doesn&amp;#39;t mean you can&amp;#39;t structure C code to behave in much the same way. \nIt just requires the user to manually book keep how the objects are created and handled where as languages like C++ have the functionality out of the box.   &lt;/p&gt;\n\n&lt;p&gt;But even in C you have things like structs which are OO constructs that are part of the C standard. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgatmcu", "score_hidden": false, "stickied": false, "created": 1492301824.0, "created_utc": 1492273024.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgauedb", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "Holy_City", "parent_id": "t1_dgaid68", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt;Without polymorphism it's simply not OO\n\nYou can implement polymorphism in C. \n\n&gt;You cannot write OO in C.\n\nYes you can. But it's a bitch, that's why they invented C++. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Without polymorphism it&amp;#39;s simply not OO&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can implement polymorphism in C. &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You cannot write OO in C.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes you can. But it&amp;#39;s a bitch, that&amp;#39;s why they invented C++. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgauedb", "score_hidden": false, "stickied": false, "created": 1492302915.0, "created_utc": 1492274115.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaid68", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "tusksrus", "parent_id": "t1_dgahwpm", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Without polymorphism it's simply not OO. Without the other things it's not really OO either.\n\nC is not OO. You cannot write OO in C.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Without polymorphism it&amp;#39;s simply not OO. Without the other things it&amp;#39;s not really OO either.&lt;/p&gt;\n\n&lt;p&gt;C is not OO. You cannot write OO in C.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgaid68", "score_hidden": false, "stickied": false, "created": 1492279724.0, "created_utc": 1492250924.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgahwpm", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "chden", "parent_id": "t1_dgag1kw", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; Move on a few decades and C is still non-OO\n\nIt's perfectly possible to write object-oriented code in C. It's a pattern there, not a feature. Even inheritance is possible if you use \"composition-over-inheritance\". Things get slightly more ugly once you need polymorphism though. You also lose type safety and it's more error-prone since everything is explicit (this however makes C simpler than C++), also RAII is not possible (without compiler extensions).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Move on a few decades and C is still non-OO&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s perfectly possible to write object-oriented code in C. It&amp;#39;s a pattern there, not a feature. Even inheritance is possible if you use &amp;quot;composition-over-inheritance&amp;quot;. Things get slightly more ugly once you need polymorphism though. You also lose type safety and it&amp;#39;s more error-prone since everything is explicit (this however makes C simpler than C++), also RAII is not possible (without compiler extensions).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgahwpm", "score_hidden": false, "stickied": false, "created": 1492278220.0, "created_utc": 1492249420.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgag1kw", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "jussij", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "C++ started off as C with classes, meaning it was designed to be an OO (object oriented) version of the then non-OO C language.\n\nMove on a few decades and C is still non-OO and while C++ still shows those similarities to the C language from which it was born, today they are pretty much two totally different languages.\n\nThese days, if you see C++ code that looks like C then chances are you are just reading poorly written C++.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++ started off as C with classes, meaning it was designed to be an OO (object oriented) version of the then non-OO C language.&lt;/p&gt;\n\n&lt;p&gt;Move on a few decades and C is still non-OO and while C++ still shows those similarities to the C language from which it was born, today they are pretty much two totally different languages.&lt;/p&gt;\n\n&lt;p&gt;These days, if you see C++ code that looks like C then chances are you are just reading poorly written C++.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgag1kw", "score_hidden": false, "stickied": false, "created": 1492272410.0, "created_utc": 1492243610.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgajjwf", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "ziptofaf", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Depends. \n\nThese languages share the same roots but they are very different nowadays - C remained a go-to language when you need low level programming (like embedded devices) and care about details. It also works \"out of the box\", fully natively. Whereas certain concepts of C++ (like exceptions) require a runtime support from your OS. \n\nC++ (especially with C++11 and up) also attempts to do much of the heavy lifting for you via concepts like intelligent pointers, vectors, auto, nullptr etc. \n\nTechnically if you know C++ **well** (meaning you are good at using pointers and understand stack vs heap, how memory allocation works etc) then you won't have much problems with C. \n\nHere's a fun snippet that shows you a valid operation in C and something you most likely won't see in C++ much:\n\n    #include &lt;stdio.h&gt;\n    void copy(char* to, const char* from)\n    {\n\twhile (*to++ = *from++)\n\t\tcontinue;\n    }\n\n    int main()\n    {\n\tchar buffer[200];\n\tcopy(buffer, \"The quick brown fox\");\n    printf(\"%s\", buffer);\n    return 0;\n    }\n\n\nReverse (aka someone knowing C learning C++) is actually harder since writing C-like code in C++ is frowned upon. So you think you write proper code (it compiles and works!) but in reality you are writing something horrible. You are not supposed to use things like null, should avoid manual pointers and C style conversions (so be specific and write static_cast/reinterpret_cast/const_cast etc rather than use (type) from C) and should rely on classes/objects when it comes to bigger projects. \n\n", "edited": 1492254853.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Depends. &lt;/p&gt;\n\n&lt;p&gt;These languages share the same roots but they are very different nowadays - C remained a go-to language when you need low level programming (like embedded devices) and care about details. It also works &amp;quot;out of the box&amp;quot;, fully natively. Whereas certain concepts of C++ (like exceptions) require a runtime support from your OS. &lt;/p&gt;\n\n&lt;p&gt;C++ (especially with C++11 and up) also attempts to do much of the heavy lifting for you via concepts like intelligent pointers, vectors, auto, nullptr etc. &lt;/p&gt;\n\n&lt;p&gt;Technically if you know C++ &lt;strong&gt;well&lt;/strong&gt; (meaning you are good at using pointers and understand stack vs heap, how memory allocation works etc) then you won&amp;#39;t have much problems with C. &lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a fun snippet that shows you a valid operation in C and something you most likely won&amp;#39;t see in C++ much:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\nvoid copy(char* to, const char* from)\n{\nwhile (*to++ = *from++)\n    continue;\n}\n\nint main()\n{\nchar buffer[200];\ncopy(buffer, &amp;quot;The quick brown fox&amp;quot;);\nprintf(&amp;quot;%s&amp;quot;, buffer);\nreturn 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reverse (aka someone knowing C learning C++) is actually harder since writing C-like code in C++ is frowned upon. So you think you write proper code (it compiles and works!) but in reality you are writing something horrible. You are not supposed to use things like null, should avoid manual pointers and C style conversions (so be specific and write static_cast/reinterpret_cast/const_cast etc rather than use (type) from C) and should rely on classes/objects when it comes to bigger projects. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgajjwf", "score_hidden": false, "stickied": false, "created": 1492283434.0, "created_utc": 1492254634.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgal76q", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Coding_Cat", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "many comments here are pointing out the similarities, but they are difficult at best. Especially with modern c++. Don't be confused by the name: they are completely different languages. \n\nIf you are a good C++ programmer you should get a C program to compile without much issue but building a clean project should be difficult. C is almost a subset of C++ syntax wise it's true. But being a good C++ programmer does not mean one is a good C programmer and vice versa. The paradigms are too different.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;many comments here are pointing out the similarities, but they are difficult at best. Especially with modern c++. Don&amp;#39;t be confused by the name: they are completely different languages. &lt;/p&gt;\n\n&lt;p&gt;If you are a good C++ programmer you should get a C program to compile without much issue but building a clean project should be difficult. C is almost a subset of C++ syntax wise it&amp;#39;s true. But being a good C++ programmer does not mean one is a good C programmer and vice versa. The paradigms are too different.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgal76q", "score_hidden": false, "stickied": false, "created": 1492287787.0, "created_utc": 1492258987.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgag9g8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "freezel0l", "parent_id": "t1_dgag3de", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Ok cool. Thanks", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok cool. Thanks&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgag9g8", "score_hidden": false, "stickied": false, "created": 1492273042.0, "created_utc": 1492244242.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgag3de", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Tawagoto2", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "They are fairly similar in a lot of ways. C has deviated from C++ in some minor ways, like I'm quite sure that\n\n    int my_arr[10] = { [5] = 10 };\n\nis valid in C99, whilst being invalid in C++. Of course C++ has bolted on a lot of things like object-orientation, lambdas, constexpr and template meta-programming, that isn't implemented in C unless you write your own tools to add them in.\n\nHaving said that, If you have a good grasp on C++, its likely a case of learning all the things you can't do out of the box when working in C.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They are fairly similar in a lot of ways. C has deviated from C++ in some minor ways, like I&amp;#39;m quite sure that&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int my_arr[10] = { [5] = 10 };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is valid in C99, whilst being invalid in C++. Of course C++ has bolted on a lot of things like object-orientation, lambdas, constexpr and template meta-programming, that isn&amp;#39;t implemented in C unless you write your own tools to add them in.&lt;/p&gt;\n\n&lt;p&gt;Having said that, If you have a good grasp on C++, its likely a case of learning all the things you can&amp;#39;t do out of the box when working in C.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgag3de", "score_hidden": false, "stickied": false, "created": 1492272553.0, "created_utc": 1492243753.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgah3u7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Naf623", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "I recently got lambasted on here for not instinctively knowing that C++ isn't just C with added bells &amp; whistles. I suspect you have it the more difficult way around trying to learn which things don't work going from C++ to C rather than being able to write C and the C++ compiler accepting it, albeit reluctantly.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I recently got lambasted on here for not instinctively knowing that C++ isn&amp;#39;t just C with added bells &amp;amp; whistles. I suspect you have it the more difficult way around trying to learn which things don&amp;#39;t work going from C++ to C rather than being able to write C and the C++ compiler accepting it, albeit reluctantly.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgah3u7", "score_hidden": false, "stickied": false, "created": 1492275669.0, "created_utc": 1492246869.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65i08o", "likes": null, "replies": "", "user_reports": [], "id": "dgag1d1", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Vaelian", "parent_id": "t3_65i08o", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "C is almost a subset of C++ with some [incompatibilities](https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B) and without templates, overloading, lambdas, and object-oriented programming.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C is almost a subset of C++ with some &lt;a href=\"https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B\"&gt;incompatibilities&lt;/a&gt; and without templates, overloading, lambdas, and object-oriented programming.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgag1d1", "score_hidden": false, "stickied": false, "created": 1492272392.0, "created_utc": 1492243592.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}]