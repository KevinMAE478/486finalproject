[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen the example given time and time again with the Venn diagram. But all they ever say is &amp;quot;the rows that exist in both&amp;quot;. How do the columns you select come into play? Do they join based on those columns as well, or only if the entire row is the same in both tables?&lt;/p&gt;\n\n&lt;p&gt;Thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've seen the example given time and time again with the Venn diagram. But all they ever say is \"the rows that exist in both\". How do the columns you select come into play? Do they join based on those columns as well, or only if the entire row is the same in both tables?\n\nThanks.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64s94y", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 54, "report_reasons": null, "author": "FoxMcWeezer", "saved": false, "mod_reports": [], "name": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/64s94y/eli5_left_join_and_inner_join_in_sql/", "num_reports": null, "locked": false, "stickied": false, "created": 1491960176.0, "url": "https://www.reddit.com/r/learnprogramming/comments/64s94y/eli5_left_join_and_inner_join_in_sql/", "author_flair_text": null, "quarantine": false, "title": "ELI5: Left join and inner join in SQL?", "created_utc": 1491931376.0, "distinguished": null, "media": null, "upvote_ratio": 0.92, "num_comments": 13, "visited": false, "subreddit_type": "public", "ups": 54}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg574jx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "8483", "parent_id": "t1_dg4m96f", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Excellent reply! Thank you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Excellent reply! Thank you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg574jx", "score_hidden": false, "stickied": false, "created": 1491986259.0, "created_utc": 1491957459.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4m96f", "gilded": 0, "archived": false, "score": 39, "report_reasons": null, "author": "nekochanwork", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "ELI5 version:\n\n* Join's are used to correlate rows in one table to rows in another table.\n* Rows are correlated together using their key columns in `join` condition\n* An `inner join` requires that a row in the parent table (the table in your `from` clause) must have a correlating row in the child table (the table in your `join` clause). If a record in the parent table has not matching record in the child table, it will not be included in the result set.\n* A `left join` correlates parent and child tables together as well, however it makes the child end of the relationship optional. If a parent record does not have a matching record in the child table, then the columns referencing the child table will be `NULL`.\n\nHere's a concrete example. Let's say we have two tables, `Parent` and `Child`, with the following data:\n\n    Parent\n    ------\n    ParentKey\n    1\n    2\n    3\n    4\n    5\n    \n    Child\n    -----\n    ChildKey    ParentKey\n    1           2\n    2           3\n    3           3\n    4           4\n    5           4\n\nIn an `inner join`, such as:\n\n    select\n        'Parent' as ParentLabel,\n        Parent.*,\n        'Child' as ChildLabel,\n        Child.*\n    from Parent\n    inner join Child on Child.ParentKey = Parent.ParentKey\n\nThe query will return back all rows and all columns for `Parent` and `Child` which can be matched together based on their `ParentKey` column:\n\n    Results\n    -------\n    ParentLabel    ParentKey    ChildLabel    ChildKey    ParentKey\n    Parent         2            Child         1           2\n    Parent         3            Child         2           3\n    Parent         3            Child         3           3 \n    Parent         4            Child         4           4\n    Parent         4            Child         5           4\n\nIn a `left join`, such as:\n\n    select\n        'Parent' as ParentLabel,\n        Parent.*,\n        'Child' as ChildLabel,\n        Child.*\n    from Parent\n    left join Child on Child.ParentKey = Parent.ParentKey\n\nAll rows from `Parent` and any matching rows in the `Child` will be returned. If there is no matching row in `Child`, it's columns in the result set default to `NULL`:\n\n    Results\n    -------\n    ParentLabel    ParentKey    ChildLabel    ChildKey    ParentKey\n    Parent         1            Child         NULL        NULL\n    Parent         2            Child         1           2\n    Parent         3            Child         2           3\n    Parent         3            Child         3           3 \n    Parent         4            Child         4           4\n    Parent         4            Child         5           4\n    Parent         5            Child         NULL        NULL", "edited": 1491932990.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ELI5 version:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Join&amp;#39;s are used to correlate rows in one table to rows in another table.&lt;/li&gt;\n&lt;li&gt;Rows are correlated together using their key columns in &lt;code&gt;join&lt;/code&gt; condition&lt;/li&gt;\n&lt;li&gt;An &lt;code&gt;inner join&lt;/code&gt; requires that a row in the parent table (the table in your &lt;code&gt;from&lt;/code&gt; clause) must have a correlating row in the child table (the table in your &lt;code&gt;join&lt;/code&gt; clause). If a record in the parent table has not matching record in the child table, it will not be included in the result set.&lt;/li&gt;\n&lt;li&gt;A &lt;code&gt;left join&lt;/code&gt; correlates parent and child tables together as well, however it makes the child end of the relationship optional. If a parent record does not have a matching record in the child table, then the columns referencing the child table will be &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Here&amp;#39;s a concrete example. Let&amp;#39;s say we have two tables, &lt;code&gt;Parent&lt;/code&gt; and &lt;code&gt;Child&lt;/code&gt;, with the following data:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Parent\n------\nParentKey\n1\n2\n3\n4\n5\n\nChild\n-----\nChildKey    ParentKey\n1           2\n2           3\n3           3\n4           4\n5           4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In an &lt;code&gt;inner join&lt;/code&gt;, such as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;select\n    &amp;#39;Parent&amp;#39; as ParentLabel,\n    Parent.*,\n    &amp;#39;Child&amp;#39; as ChildLabel,\n    Child.*\nfrom Parent\ninner join Child on Child.ParentKey = Parent.ParentKey\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The query will return back all rows and all columns for &lt;code&gt;Parent&lt;/code&gt; and &lt;code&gt;Child&lt;/code&gt; which can be matched together based on their &lt;code&gt;ParentKey&lt;/code&gt; column:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Results\n-------\nParentLabel    ParentKey    ChildLabel    ChildKey    ParentKey\nParent         2            Child         1           2\nParent         3            Child         2           3\nParent         3            Child         3           3 \nParent         4            Child         4           4\nParent         4            Child         5           4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In a &lt;code&gt;left join&lt;/code&gt;, such as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;select\n    &amp;#39;Parent&amp;#39; as ParentLabel,\n    Parent.*,\n    &amp;#39;Child&amp;#39; as ChildLabel,\n    Child.*\nfrom Parent\nleft join Child on Child.ParentKey = Parent.ParentKey\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All rows from &lt;code&gt;Parent&lt;/code&gt; and any matching rows in the &lt;code&gt;Child&lt;/code&gt; will be returned. If there is no matching row in &lt;code&gt;Child&lt;/code&gt;, it&amp;#39;s columns in the result set default to &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Results\n-------\nParentLabel    ParentKey    ChildLabel    ChildKey    ParentKey\nParent         1            Child         NULL        NULL\nParent         2            Child         1           2\nParent         3            Child         2           3\nParent         3            Child         3           3 \nParent         4            Child         4           4\nParent         4            Child         5           4\nParent         5            Child         NULL        NULL\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4m96f", "score_hidden": false, "stickied": false, "created": 1491961473.0, "created_utc": 1491932673.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 39}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg4m651", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "g051051", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Take a look at the example here: https://www.w3schools.com/sql/sql_join_left.asp\n\nWhat the LEFT JOIN is saying is that you'll get ALL of the rows from the left table (Customer) even if there's no matching row in the right table (Orders).  In other words, you'll get the complete list of all Customers, regardless if they have any orders on file.  The result will return a null for those cases.\n\nIf you were to change it to just be JOIN (instead of LEFT JOIN), then you won't get rows that have the null for the order.\n\nThat web page will let you run the query both ways and see the difference in the result.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take a look at the example here: &lt;a href=\"https://www.w3schools.com/sql/sql_join_left.asp\"&gt;https://www.w3schools.com/sql/sql_join_left.asp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;What the LEFT JOIN is saying is that you&amp;#39;ll get ALL of the rows from the left table (Customer) even if there&amp;#39;s no matching row in the right table (Orders).  In other words, you&amp;#39;ll get the complete list of all Customers, regardless if they have any orders on file.  The result will return a null for those cases.&lt;/p&gt;\n\n&lt;p&gt;If you were to change it to just be JOIN (instead of LEFT JOIN), then you won&amp;#39;t get rows that have the null for the order.&lt;/p&gt;\n\n&lt;p&gt;That web page will let you run the query both ways and see the difference in the result.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4m651", "score_hidden": false, "stickied": false, "created": 1491961378.0, "created_utc": 1491932578.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg52p9f", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "noonespecific", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "These are pretty thorough answers, mine, not so much.\n\n**Inner join** shows you all the records that have the matching fields (that's your *on*) in both tables.\n\n**Left join** shows you all the records from the *left* side of the join, plus any data from corresponding rows that have the matching fields in your on.\n\nSo **inner** is more restrictive than **left**, since it'll only show you stuff that's matching, whereas **left** will show you whatever is in the left side, with whatever extra data it can grab from the right, based on your *on* clause.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;These are pretty thorough answers, mine, not so much.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Inner join&lt;/strong&gt; shows you all the records that have the matching fields (that&amp;#39;s your &lt;em&gt;on&lt;/em&gt;) in both tables.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Left join&lt;/strong&gt; shows you all the records from the &lt;em&gt;left&lt;/em&gt; side of the join, plus any data from corresponding rows that have the matching fields in your on.&lt;/p&gt;\n\n&lt;p&gt;So &lt;strong&gt;inner&lt;/strong&gt; is more restrictive than &lt;strong&gt;left&lt;/strong&gt;, since it&amp;#39;ll only show you stuff that&amp;#39;s matching, whereas &lt;strong&gt;left&lt;/strong&gt; will show you whatever is in the left side, with whatever extra data it can grab from the right, based on your &lt;em&gt;on&lt;/em&gt; clause.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg52p9f", "score_hidden": false, "stickied": false, "created": 1491980306.0, "created_utc": 1491951506.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg5wg6y", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "_Royalty_", "parent_id": "t1_dg5ci9g", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Want to share [this article](https://blog.jooq.org/2016/07/05/say-no-to-venn-diagrams-when-explaining-joins/) which attempts to explain why the SQL venn diagrams aren't a good resource. Although I say this with one posted in my cubicle.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Want to share &lt;a href=\"https://blog.jooq.org/2016/07/05/say-no-to-venn-diagrams-when-explaining-joins/\"&gt;this article&lt;/a&gt; which attempts to explain why the SQL venn diagrams aren&amp;#39;t a good resource. Although I say this with one posted in my cubicle.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg5wg6y", "score_hidden": false, "stickied": false, "created": 1492034757.0, "created_utc": 1492005957.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5ci9g", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "plpn", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "dont forget the standard [visualisation](https://i.stack.imgur.com/1UKp7.png) for this!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;dont forget the standard &lt;a href=\"https://i.stack.imgur.com/1UKp7.png\"&gt;visualisation&lt;/a&gt; for this!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg5ci9g", "score_hidden": false, "stickied": false, "created": 1491993361.0, "created_utc": 1491964561.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg5adha", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "redditor1983", "parent_id": "t1_dg4s9po", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "The columns you specify in the join matter, but the columns you include in the SELECT make no difference (except, if you don't include them, they won't display).\n\nTo put it another way... when you specify a column in the SELECT, it means it will display in your result set. When you specify a column in the join, that tells the database how to join two tables.\n\nChanging a column in the join will likely change your results dramatically. Changing a column in the SELECT will simply display that column or not display it. But it won't change what records are included in your result set.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The columns you specify in the join matter, but the columns you include in the SELECT make no difference (except, if you don&amp;#39;t include them, they won&amp;#39;t display).&lt;/p&gt;\n\n&lt;p&gt;To put it another way... when you specify a column in the SELECT, it means it will display in your result set. When you specify a column in the join, that tells the database how to join two tables.&lt;/p&gt;\n\n&lt;p&gt;Changing a column in the join will likely change your results dramatically. Changing a column in the SELECT will simply display that column or not display it. But it won&amp;#39;t change what records are included in your result set.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg5adha", "score_hidden": false, "stickied": false, "created": 1491990466.0, "created_utc": 1491961666.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg5095i", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "_DukePhillips", "parent_id": "t1_dg4wttv", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "In a sub query like you wrote, you have to use the alias outside of that query. In other cases you can use the alias within the query itself for things like order by, but not where clauses. If my memory serves me correctly.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In a sub query like you wrote, you have to use the alias outside of that query. In other cases you can use the alias within the query itself for things like order by, but not where clauses. If my memory serves me correctly.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg5095i", "score_hidden": false, "stickied": false, "created": 1491977162.0, "created_utc": 1491948362.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4wttv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "FoxMcWeezer", "parent_id": "t1_dg4t8rs", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "If you create a column alias, are you able to refer to that column in an outer select statement? Example:\n\nSELECT new_name FROM (\n    SELECT Id AS new_name FROM Employees\n)\n\nMy question boils down to, when is it legal to refer to aliases, if ever, and when is it not? Thanks.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you create a column alias, are you able to refer to that column in an outer select statement? Example:&lt;/p&gt;\n\n&lt;p&gt;SELECT new_name FROM (\n    SELECT Id AS new_name FROM Employees\n)&lt;/p&gt;\n\n&lt;p&gt;My question boils down to, when is it legal to refer to aliases, if ever, and when is it not? Thanks.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4wttv", "score_hidden": false, "stickied": false, "created": 1491973026.0, "created_utc": 1491944226.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4t8rs", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "fAUXeCKE", "parent_id": "t1_dg4s9po", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Yes, highly important. You may also have to reference the tablename.columnname as well if the fields share the same name between more than one table.\n\nEx: You want to join Customer table to Order table. Customer table and Order table both have the column \"CustomerID\"\n\n    Select Customer.CustomerID, Order.CustomerID\n    From Customer Inner Join Order\n        ON Customer.CustomerID = Order.CustomerID", "edited": 1491940404.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, highly important. You may also have to reference the tablename.columnname as well if the fields share the same name between more than one table.&lt;/p&gt;\n\n&lt;p&gt;Ex: You want to join Customer table to Order table. Customer table and Order table both have the column &amp;quot;CustomerID&amp;quot;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Select Customer.CustomerID, Order.CustomerID\nFrom Customer Inner Join Order\n    ON Customer.CustomerID = Order.CustomerID\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4t8rs", "score_hidden": false, "stickied": false, "created": 1491969023.0, "created_utc": 1491940223.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4s9po", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "FoxMcWeezer", "parent_id": "t1_dg4ojpu", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "The columns you include in the SELECT matter, correct?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The columns you include in the SELECT matter, correct?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4s9po", "score_hidden": false, "stickied": false, "created": 1491967983.0, "created_utc": 1491939183.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4ojpu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "faehnrich", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "[SQL Joins Visualizer](http://sql-joins.leopard.in.ua/)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://sql-joins.leopard.in.ua/\"&gt;SQL Joins Visualizer&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg4ojpu", "score_hidden": false, "stickied": false, "created": 1491963999.0, "created_utc": 1491935199.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_64s94y", "likes": null, "replies": "", "user_reports": [], "id": "dg5enf0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bitsandbytez", "parent_id": "t3_64s94y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "https://www.codeproject.com/kb/database/visual_sql_joins.aspx", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.codeproject.com/kb/database/visual_sql_joins.aspx\"&gt;https://www.codeproject.com/kb/database/visual_sql_joins.aspx&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg5enf0", "score_hidden": false, "stickied": false, "created": 1491996434.0, "created_utc": 1491967634.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]