[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;(string s1 = &amp;quot;hello&amp;quot; + &amp;quot;, &amp;quot;;\n\nerror no string operand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Aren&amp;#39;t &amp;quot;hello&amp;quot; and &amp;quot;, &amp;quot; both strings?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "    (string s1 = \"hello\" + \", \";\n\n    error no string operand\n\nAren't \"hello\" and \", \" both strings?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65hv9r", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 30, "report_reasons": null, "author": "DarkPigeons", "saved": false, "mod_reports": [], "name": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65hv9r/why_is_this_assignment_illegal_in_c_string_s1/", "num_reports": null, "locked": false, "stickied": false, "created": 1492268550.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65hv9r/why_is_this_assignment_illegal_in_c_string_s1/", "author_flair_text": null, "quarantine": false, "title": "Why is this assignment illegal in C++? (string s1 = \"hello\" + \", \";", "created_utc": 1492239750.0, "distinguished": null, "media": null, "upvote_ratio": 0.91, "num_comments": 10, "visited": false, "subreddit_type": "public", "ups": 30}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgb2ulq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "DarkPigeons", "parent_id": "t1_dgaexdj", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thank you!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgb2ulq", "score_hidden": false, "stickied": false, "created": 1492314399.0, "created_utc": 1492285599.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaexdj", "gilded": 0, "archived": false, "score": 24, "report_reasons": null, "author": "draw_me_a_lemon", "parent_id": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "\"hello\" and \", \" are string literals with the type const char *. You cannot add them. They are not std::strings.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;hello&amp;quot; and &amp;quot;, &amp;quot; are string literals with the type const char *. You cannot add them. They are not std::strings.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgaexdj", "score_hidden": false, "stickied": false, "created": 1492269379.0, "created_utc": 1492240579.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 24}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgak83d", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "arbostek", "parent_id": "t1_dgahj5n", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; In C, each string literal is a pretty syntax over a char*\n\nTo be clear, the type of a string literal is actually an array of some size N of char. So \"hello\" has type `char [6]`, not `char *`. It's just that you can use the array to pointer decay behavior in C to just have a pointer to the first element.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;In C, each string literal is a pretty syntax over a char*&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To be clear, the type of a string literal is actually an array of some size N of char. So &amp;quot;hello&amp;quot; has type &lt;code&gt;char [6]&lt;/code&gt;, not &lt;code&gt;char *&lt;/code&gt;. It&amp;#39;s just that you can use the array to pointer decay behavior in C to just have a pointer to the first element.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgak83d", "score_hidden": false, "stickied": false, "created": 1492285338.0, "created_utc": 1492256538.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgb2w7o", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "DarkPigeons", "parent_id": "t1_dgahj5n", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "That makes a lot more sense, thank you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That makes a lot more sense, thank you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgb2w7o", "score_hidden": false, "stickied": false, "created": 1492314458.0, "created_utc": 1492285658.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgahj5n", "gilded": 0, "archived": false, "score": 16, "report_reasons": null, "author": "InternetAussie", "parent_id": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "You have C to thank for this.\n\nIn C, each string literal is a pretty syntax over a `char*`. In C++, it is `const char*` instead, for safety reasons. The statement `\"hello\" + \", \"` is equivalent to adding two pointers together. You cannot add two pointers together, so the line fails to compile.\n\nIf C++ weren't trying to be backwards-compatible with C, we might have first class string literal that don't require suffixes or construction. But this is the best we've got:\n\n    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n    \n    // This adds a new operator that allows the \"THIS IS A STRING\"s syntax. The line could alternately be:\n    //   using namespace std::literals;\n    //   using namespace std::string_literals;\n    using namespace std::literals::string_literals;\n    \n    int main() {\n        std::string str = \"hello\"s + \", \"s;\n        std::cout &lt;&lt; str &lt;&lt; std::endl;\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You have C to thank for this.&lt;/p&gt;\n\n&lt;p&gt;In C, each string literal is a pretty syntax over a &lt;code&gt;char*&lt;/code&gt;. In C++, it is &lt;code&gt;const char*&lt;/code&gt; instead, for safety reasons. The statement &lt;code&gt;&amp;quot;hello&amp;quot; + &amp;quot;, &amp;quot;&lt;/code&gt; is equivalent to adding two pointers together. You cannot add two pointers together, so the line fails to compile.&lt;/p&gt;\n\n&lt;p&gt;If C++ weren&amp;#39;t trying to be backwards-compatible with C, we might have first class string literal that don&amp;#39;t require suffixes or construction. But this is the best we&amp;#39;ve got:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\n\n// This adds a new operator that allows the &amp;quot;THIS IS A STRING&amp;quot;s syntax. The line could alternately be:\n//   using namespace std::literals;\n//   using namespace std::string_literals;\nusing namespace std::literals::string_literals;\n\nint main() {\n    std::string str = &amp;quot;hello&amp;quot;s + &amp;quot;, &amp;quot;s;\n    std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgahj5n", "score_hidden": false, "stickied": false, "created": 1492277017.0, "created_utc": 1492248217.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 16}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgag4ic", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "raevnos", "parent_id": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "You can also have a \n\n    using std::literals::string_literals;\n\nline to be able to have std::string literals:\n\n    std::string s1 = \"hello\"s + \", \"s;\n\n ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can also have a &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using std::literals::string_literals;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;line to be able to have std::string literals:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;std::string s1 = &amp;quot;hello&amp;quot;s + &amp;quot;, &amp;quot;s;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgag4ic", "score_hidden": false, "stickied": false, "created": 1492272644.0, "created_utc": 1492243844.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgafsi0", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Vaelian", "parent_id": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "As mentioned, string literals are not std::strings, however you can concatenate two string literals together by removing the plus sign from between them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As mentioned, string literals are not std::strings, however you can concatenate two string literals together by removing the plus sign from between them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgafsi0", "score_hidden": false, "stickied": false, "created": 1492271695.0, "created_utc": 1492242895.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65hv9r", "likes": null, "replies": "", "user_reports": [], "id": "dgal0qo", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "faehnrich", "parent_id": "t1_dgahuh8", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thank you for explaining why this answer is downvoted.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you for explaining why this answer is downvoted.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgal0qo", "score_hidden": false, "stickied": false, "created": 1492287356.0, "created_utc": 1492258556.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgahuh8", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "thoosequa", "parent_id": "t1_dgaf24v", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "You fixed the problem but didn't answer the question, your formatting is also off.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You fixed the problem but didn&amp;#39;t answer the question, your formatting is also off.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgahuh8", "score_hidden": false, "stickied": false, "created": 1492278033.0, "created_utc": 1492249233.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaf24v", "gilded": 0, "archived": false, "score": -11, "report_reasons": null, "author": "Gotcha1337", "parent_id": "t3_65hv9r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main()\n{\n\tstd::string s1;\n\ts1 = \"hello\";\n\ts1 += ',';\n\tstd::cout &lt;&lt; s1 &lt;&lt; '\\n';\n    return 0;\n}\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;include &amp;lt;iostream&amp;gt;&lt;/h1&gt;\n\n&lt;h1&gt;include &amp;lt;string&amp;gt;&lt;/h1&gt;\n\n&lt;p&gt;int main()\n{\n    std::string s1;\n    s1 = &amp;quot;hello&amp;quot;;\n    s1 += &amp;#39;,&amp;#39;;\n    std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n    return 0;\n}&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgaf24v", "score_hidden": false, "stickied": false, "created": 1492269722.0, "created_utc": 1492240922.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -11}}], "after": null, "before": null}}]