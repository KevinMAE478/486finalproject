[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am confused on the below code why the integer n does not change after the call of goFigure(n). I was under the understanding that int is an primitive and is mutable as a result. I was expecting the value of n to equal 5 but it still equals 12 after running the method. Is there an across the board explanation to determine when an object/primative will be modified? Thanks.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public double goFigure(int n){\n       n = n%7;\n       return (double)(12/n);\n}\n\nint n = 12;\nSystem.out.println(goFigure(n));\nSystem.out.println(&amp;quot; &amp;quot; + n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output: 2.0 12&lt;/p&gt;\n\n&lt;p&gt;Edit: Code was formated incorrectly     &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am confused on the below code why the integer n does not change after the call of goFigure(n). I was under the understanding that int is an primitive and is mutable as a result. I was expecting the value of n to equal 5 but it still equals 12 after running the method. Is there an across the board explanation to determine when an object/primative will be modified? Thanks.\n\n    public double goFigure(int n){\n           n = n%7;\n           return (double)(12/n);\n    }\n        \n    int n = 12;\n    System.out.println(goFigure(n));\n    System.out.println(\" \" + n);\n        \t\t\t\t\n        \t\nOutput: 2.0 12\n    \t\t\t\t\nEdit: Code was formated incorrectly    \t\n    ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Solved", "id": "65364h", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 7, "report_reasons": null, "author": "IsThisUsernameNice", "saved": false, "mod_reports": [], "name": "t3_65364h", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": "solved", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65364h/java_confused_on_mutability_of_primitives_and/", "num_reports": null, "locked": false, "stickied": false, "created": 1492083850.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65364h/java_confused_on_mutability_of_primitives_and/", "author_flair_text": null, "quarantine": false, "title": "[Java] Confused on mutability of primitives and objects in methods with parameters", "created_utc": 1492055050.0, "distinguished": null, "media": null, "upvote_ratio": 0.78, "num_comments": 4, "visited": false, "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65364h", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65364h", "likes": null, "replies": "", "user_reports": [], "id": "dg74nm7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "IsThisUsernameNice", "parent_id": "t1_dg74jn5", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thank you!!!!! Very helpful, I was so confused haha", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you!!!!! Very helpful, I was so confused haha&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg74nm7", "score_hidden": false, "stickied": false, "created": 1492085727.0, "created_utc": 1492056927.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg74jn5", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "lightcloud5", "parent_id": "t3_65364h", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "In Java, all inputs to functions are passed by value (although we should note that object variables are actually *references* to objects, rather than the objects themselves).\n\nTherefore, regardless of the implementation of `goFigure`, we can already state with certainty that given:\n\n    int n = 12;\n    goFigure(n);\n    System.out.println(n);\n\nWill print 12.  This is because `goFigure` (even if you can't read the source code of this function) is unable to modify the value of `n`.\n\nThat's what pass-by-value means -- we pass a copy of the value to the function, so `goFigure` can modify a copied integer, the value of which is discarded after the function terminates.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In Java, all inputs to functions are passed by value (although we should note that object variables are actually &lt;em&gt;references&lt;/em&gt; to objects, rather than the objects themselves).&lt;/p&gt;\n\n&lt;p&gt;Therefore, regardless of the implementation of &lt;code&gt;goFigure&lt;/code&gt;, we can already state with certainty that given:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int n = 12;\ngoFigure(n);\nSystem.out.println(n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will print 12.  This is because &lt;code&gt;goFigure&lt;/code&gt; (even if you can&amp;#39;t read the source code of this function) is unable to modify the value of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s what pass-by-value means -- we pass a copy of the value to the function, so &lt;code&gt;goFigure&lt;/code&gt; can modify a copied integer, the value of which is discarded after the function terminates.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg74jn5", "score_hidden": false, "stickied": false, "created": 1492085563.0, "created_utc": 1492056763.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65364h", "likes": null, "replies": "", "user_reports": [], "id": "dg7euqe", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cjlj", "parent_id": "t3_65364h", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "When you call a function, what it is actually doing is putting the values of the parameters on the top of the stack for the called function to utilise.\n\nSo when you call goFigure, your code will get the value that corresponds to variable n then put it on the top of the stack then call goFigure.\n\ngoFigure now knows that the last value in the stack corresponds to n, and it's this copy that it uses when doing its thing.\n\nOnce the function returns it discards all the stuff it put on the stack and leaves the return value for the calling function to make use of.  In your code you don't make use of it so nothing happens.  The original n = 12 is a different copy that is stored further up the stack, that was created when you originally called *that* function.  Since you didn't put n = goFigure(n), the return value isn't copied to where the n variable was assigned in the stack.\n\n\nObjects are a little different though.  When you assign an instance of an object to a variable, what you are actually doing is assigning a memory address that corresponds to a block of memory that stores the instance variable for that instance of the object.\n\nSo say you have an object Foo that has 2 ints, a char char and a String for instance variables. When you do Foo a = new Foo(), your computer will look for some spare memory that is large enough to hold 2 ints, a char and a reference to a String object, then do whatever's in the constructor and return the address to that block of memory.\n\nThen later on you might have myFunction(a).  This will put the memory address to the block of memory corresponding to the instance you assigned to a on the stack.  If in that function you have a bit of code like fooInstance.myChar = 'c', the function gets the address for the parameter fooInstance from the stack, then changes the bit of memory corresponding to the instance's char variable to 'c'.  After the function returns your variable a still references the same block of memory, so if you print a.myChar it will be 'c'.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When you call a function, what it is actually doing is putting the values of the parameters on the top of the stack for the called function to utilise.&lt;/p&gt;\n\n&lt;p&gt;So when you call goFigure, your code will get the value that corresponds to variable n then put it on the top of the stack then call goFigure.&lt;/p&gt;\n\n&lt;p&gt;goFigure now knows that the last value in the stack corresponds to n, and it&amp;#39;s this copy that it uses when doing its thing.&lt;/p&gt;\n\n&lt;p&gt;Once the function returns it discards all the stuff it put on the stack and leaves the return value for the calling function to make use of.  In your code you don&amp;#39;t make use of it so nothing happens.  The original n = 12 is a different copy that is stored further up the stack, that was created when you originally called &lt;em&gt;that&lt;/em&gt; function.  Since you didn&amp;#39;t put n = goFigure(n), the return value isn&amp;#39;t copied to where the n variable was assigned in the stack.&lt;/p&gt;\n\n&lt;p&gt;Objects are a little different though.  When you assign an instance of an object to a variable, what you are actually doing is assigning a memory address that corresponds to a block of memory that stores the instance variable for that instance of the object.&lt;/p&gt;\n\n&lt;p&gt;So say you have an object Foo that has 2 ints, a char char and a String for instance variables. When you do Foo a = new Foo(), your computer will look for some spare memory that is large enough to hold 2 ints, a char and a reference to a String object, then do whatever&amp;#39;s in the constructor and return the address to that block of memory.&lt;/p&gt;\n\n&lt;p&gt;Then later on you might have myFunction(a).  This will put the memory address to the block of memory corresponding to the instance you assigned to a on the stack.  If in that function you have a bit of code like fooInstance.myChar = &amp;#39;c&amp;#39;, the function gets the address for the parameter fooInstance from the stack, then changes the bit of memory corresponding to the instance&amp;#39;s char variable to &amp;#39;c&amp;#39;.  After the function returns your variable a still references the same block of memory, so if you print a.myChar it will be &amp;#39;c&amp;#39;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg7euqe", "score_hidden": false, "stickied": false, "created": 1492110986.0, "created_utc": 1492082186.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65364h", "likes": null, "replies": "", "user_reports": [], "id": "dg74qxe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planedoctor", "parent_id": "t3_65364h", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; Is there an across the board explanation to determine when an object/primative will be modified?\n\nPrimitives are immutable, including Strings.  Objects are not, unless you make them that way.\n\nYou are conflating re-assigning a new value to a variable with mutating an object.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Is there an across the board explanation to determine when an object/primative will be modified?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Primitives are immutable, including Strings.  Objects are not, unless you make them that way.&lt;/p&gt;\n\n&lt;p&gt;You are conflating re-assigning a new value to a variable with mutating an object.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg74qxe", "score_hidden": false, "stickied": false, "created": 1492085872.0, "created_utc": 1492057072.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]