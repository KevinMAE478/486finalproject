[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m working on a small open-source project. Besides source code, the repository also includes custom tools that can help perform/automate some tasks.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m working on a new feature, on a branch called &lt;code&gt;feature/BigFeature&lt;/code&gt;, which is branched from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In the process of writing BigFeature, I&amp;#39;m thinking about doing two things that could warrant their own branches:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Fixing a long-standing bug that may affect how BigFeature is developed (e.g. with the bug, I would need to write some workarounds first; without it, I can develop BigFeature as intended)&lt;/li&gt;\n&lt;li&gt;Improving the custom tools so that it can help me with testing/developing BigFeature.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;While both of these changes are somewhat related to BigFeature, they could very well be their own independent features.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t think I want to include the bugfix &lt;em&gt;and&lt;/em&gt; the tool change &lt;em&gt;and&lt;/em&gt; BigFeature into one huge branch/Pull Request, but ideally BigFeature will be able to use the changes from the bugfix branch and the tool change branch.&lt;/p&gt;\n\n&lt;p&gt;Another option is I could develop the bugfix and the tool change first, submit a Pull Request, and then wait for them to be merged into master, but that could take a while and I want to continue development on BigFeature as quickly as possible.&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s best git workflow practice for a case like this? &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Primary feature branch needs code from secondary feature branches; what do I do to make this as clean as possible?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm working on a small open-source project. Besides source code, the repository also includes custom tools that can help perform/automate some tasks.\n\nI'm working on a new feature, on a branch called `feature/BigFeature`, which is branched from `master`.\n\nIn the process of writing BigFeature, I'm thinking about doing two things that could warrant their own branches:\n\n1. Fixing a long-standing bug that may affect how BigFeature is developed (e.g. with the bug, I would need to write some workarounds first; without it, I can develop BigFeature as intended)\n2. Improving the custom tools so that it can help me with testing/developing BigFeature.\n\nWhile both of these changes are somewhat related to BigFeature, they could very well be their own independent features.\n\nI don't think I want to include the bugfix *and* the tool change *and* BigFeature into one huge branch/Pull Request, but ideally BigFeature will be able to use the changes from the bugfix branch and the tool change branch.\n\nAnother option is I could develop the bugfix and the tool change first, submit a Pull Request, and then wait for them to be merged into master, but that could take a while and I want to continue development on BigFeature as quickly as possible.\n\nWhat's best git workflow practice for a case like this? \n\n**TL;DR**: Primary feature branch needs code from secondary feature branches; what do I do to make this as clean as possible?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65dea2", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 23, "report_reasons": null, "author": "werzor", "saved": false, "mod_reports": [], "name": "t3_65dea2", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65dea2/git_workflow_whats_best_practice_for_when_a/", "num_reports": null, "locked": false, "stickied": false, "created": 1492214805.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65dea2/git_workflow_whats_best_practice_for_when_a/", "author_flair_text": null, "quarantine": false, "title": "Git workflow - What's best practice for when a feature branch needs changes from another feature branch?", "created_utc": 1492186005.0, "distinguished": null, "media": null, "upvote_ratio": 0.81, "num_comments": 9, "visited": false, "subreddit_type": "public", "ups": 23}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": "", "user_reports": [], "id": "dg9wnk6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "henrebotha", "parent_id": "t1_dg9ux4f", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "As long as the actual changes to files (the actual code being committed) doesn't change somehow in merging, you will not face any problems. The absolute worst thing that can happen is that you have to manually redo your changes on top of master - in such a case you can simply copy the changed files from D to a temp folder, check out master, make &amp; check out a new branch E, and copy the changed files from the temp folder to your repo.\n\nYou can run into conflicts, but this is no different to any other time you collaborate on a repo (i.e. if someone merges something into master that affects your work).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As long as the actual changes to files (the actual code being committed) doesn&amp;#39;t change somehow in merging, you will not face any problems. The absolute worst thing that can happen is that you have to manually redo your changes on top of master - in such a case you can simply copy the changed files from D to a temp folder, check out master, make &amp;amp; check out a new branch E, and copy the changed files from the temp folder to your repo.&lt;/p&gt;\n\n&lt;p&gt;You can run into conflicts, but this is no different to any other time you collaborate on a repo (i.e. if someone merges something into master that affects your work).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9wnk6", "score_hidden": false, "stickied": false, "created": 1492240013.0, "created_utc": 1492211213.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ux4f", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "werzor", "parent_id": "t1_dg9ie0f", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "This is an interesting approach. If I don't get the merge of A and B into C exactly right, will there be any (or if yes, what kind of) consequences or problems when trying to rebase D onto master?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is an interesting approach. If I don&amp;#39;t get the merge of A and B into C exactly right, will there be any (or if yes, what kind of) consequences or problems when trying to rebase D onto master?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9ux4f", "score_hidden": false, "stickied": false, "created": 1492237675.0, "created_utc": 1492208875.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ie0f", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "henrebotha", "parent_id": "t3_65dea2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "1. Do the bugfix on branch A and make a PR. \n2. Do the tool change on branch B and make a PR. \n3. Make a new branch C. Pretend this branch is master. Merge your branches A and B into it as if you are the maintainer. Do it in the same way the maintainer would - e.g. if they normally squash merges, then do that. \n4. Create a new branch D off of C. Do your big feature here. \n5. When A &amp; B get merged into master, you can just rebase D onto master and carry on. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;ol&gt;\n&lt;li&gt;Do the bugfix on branch A and make a PR. &lt;/li&gt;\n&lt;li&gt;Do the tool change on branch B and make a PR. &lt;/li&gt;\n&lt;li&gt;Make a new branch C. Pretend this branch is master. Merge your branches A and B into it as if you are the maintainer. Do it in the same way the maintainer would - e.g. if they normally squash merges, then do that. &lt;/li&gt;\n&lt;li&gt;Create a new branch D off of C. Do your big feature here. &lt;/li&gt;\n&lt;li&gt;When A &amp;amp; B get merged into master, you can just rebase D onto master and carry on. &lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9ie0f", "score_hidden": false, "stickied": false, "created": 1492222232.0, "created_utc": 1492193432.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": "", "user_reports": [], "id": "dg9gcvp", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "amasten", "parent_id": "t3_65dea2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Personnally, I'd go with fixing the bug first, merging, and from there create a brand new branch feature/BigFeature which would be easier to code as you won't have to write workarounds (that you'll delete anyway after fixing it, so it's basically a waste of time).\n\nOnce, you're satisfied with how feature/BigFeature works, you can merge it with master and create a branch for your custom tools to update and once it's done, make another branch for the new version of your bigFeature in order to improve it.\n\nYou first concern should be efficiency. By taking the bug out, you don't waste time later, and by making a functional (even if it's not optimized) feature, you already have a solid ground for testing and improving it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Personnally, I&amp;#39;d go with fixing the bug first, merging, and from there create a brand new branch feature/BigFeature which would be easier to code as you won&amp;#39;t have to write workarounds (that you&amp;#39;ll delete anyway after fixing it, so it&amp;#39;s basically a waste of time).&lt;/p&gt;\n\n&lt;p&gt;Once, you&amp;#39;re satisfied with how feature/BigFeature works, you can merge it with master and create a branch for your custom tools to update and once it&amp;#39;s done, make another branch for the new version of your bigFeature in order to improve it.&lt;/p&gt;\n\n&lt;p&gt;You first concern should be efficiency. By taking the bug out, you don&amp;#39;t waste time later, and by making a functional (even if it&amp;#39;s not optimized) feature, you already have a solid ground for testing and improving it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9gcvp", "score_hidden": false, "stickied": false, "created": 1492219862.0, "created_utc": 1492191062.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": "", "user_reports": [], "id": "dg9ij9m", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lowey2002", "parent_id": "t1_dg9iget", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Oh, also reference the branch you are working on the other PR's. Give some context so the team knows why it's important.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh, also reference the branch you are working on the other PR&amp;#39;s. Give some context so the team knows why it&amp;#39;s important.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9ij9m", "score_hidden": false, "stickied": false, "created": 1492222409.0, "created_utc": 1492193609.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9iget", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lowey2002", "parent_id": "t3_65dea2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "1.  Create a new branch for `long-standing-bug`.   Test, PR and merge into master.\n2.  Create a new branch for `custom-tools`.  Test, PR and merge into master\n3.  Rebase changes from master into `BigFeature`. \n\nYou are right to second guess yourself developing too many changes into `BigFeature`.  It's complex enough as it is and you should look to divide and conquer and be as self contained as possible.   \n\nIt's likely that even after this you need to jump back and make other changes, particularly to `custom-tools`.  No drama; create another branch, rinse and repeat.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;ol&gt;\n&lt;li&gt; Create a new branch for &lt;code&gt;long-standing-bug&lt;/code&gt;.   Test, PR and merge into master.&lt;/li&gt;\n&lt;li&gt; Create a new branch for &lt;code&gt;custom-tools&lt;/code&gt;.  Test, PR and merge into master&lt;/li&gt;\n&lt;li&gt; Rebase changes from master into &lt;code&gt;BigFeature&lt;/code&gt;. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You are right to second guess yourself developing too many changes into &lt;code&gt;BigFeature&lt;/code&gt;.  It&amp;#39;s complex enough as it is and you should look to divide and conquer and be as self contained as possible.   &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s likely that even after this you need to jump back and make other changes, particularly to &lt;code&gt;custom-tools&lt;/code&gt;.  No drama; create another branch, rinse and repeat.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9iget", "score_hidden": false, "stickied": false, "created": 1492222313.0, "created_utc": 1492193513.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65dea2", "likes": null, "replies": "", "user_reports": [], "id": "dg9wxgm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "netherous", "parent_id": "t1_dg9v3qb", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "You wouldn't need to submit PRs for `bugfix` and `tool-enhancement` unless they had commits that had not been merged into `BigFeature`. But you could just merge those yourself. I would have one PR for `BigFeature` and leave the appropriate notes in the PR. The reason to do PRs for the others would be if you feel it's beneficial to bring those changes into master sooner. If this bug you're fixing is affecting the user experience right now, for example, that would be a good reason to have an earlier PR for `bugfix`.\n\nI guess another reason to do PRs on the other branches would be if you wanted someone to review that code independently of `BigFeature`'s changes. If the PR is large and complicated, breaking it down into chunks will help the review. However, people can also diff the code themselves and don't necessarily need a PR for that. It's a matter of preference.", "edited": 1492211811.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You wouldn&amp;#39;t need to submit PRs for &lt;code&gt;bugfix&lt;/code&gt; and &lt;code&gt;tool-enhancement&lt;/code&gt; unless they had commits that had not been merged into &lt;code&gt;BigFeature&lt;/code&gt;. But you could just merge those yourself. I would have one PR for &lt;code&gt;BigFeature&lt;/code&gt; and leave the appropriate notes in the PR. The reason to do PRs for the others would be if you feel it&amp;#39;s beneficial to bring those changes into master sooner. If this bug you&amp;#39;re fixing is affecting the user experience right now, for example, that would be a good reason to have an earlier PR for &lt;code&gt;bugfix&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I guess another reason to do PRs on the other branches would be if you wanted someone to review that code independently of &lt;code&gt;BigFeature&lt;/code&gt;&amp;#39;s changes. If the PR is large and complicated, breaking it down into chunks will help the review. However, people can also diff the code themselves and don&amp;#39;t necessarily need a PR for that. It&amp;#39;s a matter of preference.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9wxgm", "score_hidden": false, "stickied": false, "created": 1492240381.0, "created_utc": 1492211581.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9v3qb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "werzor", "parent_id": "t1_dg9plkx", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thanks. In this workflow, let's say I merge `bugfix` and `tool-enhancement` into `BigFeature` to use them.\n\nNow let's say `BigFeature` is \"finished\". Would I only need to submit a PR for BigFeature (which would also include the `bugfix` and `tool-enhancement` commits - a \"huge\" PR), or would I also submit PRs for `bugfix` and `tool-enhancement` separately?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks. In this workflow, let&amp;#39;s say I merge &lt;code&gt;bugfix&lt;/code&gt; and &lt;code&gt;tool-enhancement&lt;/code&gt; into &lt;code&gt;BigFeature&lt;/code&gt; to use them.&lt;/p&gt;\n\n&lt;p&gt;Now let&amp;#39;s say &lt;code&gt;BigFeature&lt;/code&gt; is &amp;quot;finished&amp;quot;. Would I only need to submit a PR for BigFeature (which would also include the &lt;code&gt;bugfix&lt;/code&gt; and &lt;code&gt;tool-enhancement&lt;/code&gt; commits - a &amp;quot;huge&amp;quot; PR), or would I also submit PRs for &lt;code&gt;bugfix&lt;/code&gt; and &lt;code&gt;tool-enhancement&lt;/code&gt; separately?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9v3qb", "score_hidden": false, "stickied": false, "created": 1492237922.0, "created_utc": 1492209122.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9plkx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "netherous", "parent_id": "t3_65dea2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "The case you're describing is very, very typical to git workflows.\n\nThe way I would handle this in my workplace is that I would go back to where `BigFeature` branched from `master`, and branch again into your `bugfix`and `tool-enhancement` branches. Doing so gives you the option of bringing just the bugfix, and just the tool enhancements into other branches or back into master if they are needed before `BigFeature` is ready. You can also merge those other two branches into `BigFeature` as often as you like.\n\nIt takes some careful thinking about whether you really *need* to do this or not. Sometimes you can split things up, and then on closer inspection, realize they were not as independent as you initially believed, and that it won't be feasible to build them totally separately. It happens to everyone.\n\nWaiting for approval and merge of `bugfix` and `tool-enhancement` before continuing work on `BigFeature` is probably not worth the time. I would treat the integration of `BigFeature` as contingent on those others, even if they have not been approved. If you're really unsure and think they might be categorically rejected, you should run the ideas by the project lead first.\n\nPosing this as a question to the rest of the team is also a good idea, since they know the project better than anyone.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The case you&amp;#39;re describing is very, very typical to git workflows.&lt;/p&gt;\n\n&lt;p&gt;The way I would handle this in my workplace is that I would go back to where &lt;code&gt;BigFeature&lt;/code&gt; branched from &lt;code&gt;master&lt;/code&gt;, and branch again into your &lt;code&gt;bugfix&lt;/code&gt;and &lt;code&gt;tool-enhancement&lt;/code&gt; branches. Doing so gives you the option of bringing just the bugfix, and just the tool enhancements into other branches or back into master if they are needed before &lt;code&gt;BigFeature&lt;/code&gt; is ready. You can also merge those other two branches into &lt;code&gt;BigFeature&lt;/code&gt; as often as you like.&lt;/p&gt;\n\n&lt;p&gt;It takes some careful thinking about whether you really &lt;em&gt;need&lt;/em&gt; to do this or not. Sometimes you can split things up, and then on closer inspection, realize they were not as independent as you initially believed, and that it won&amp;#39;t be feasible to build them totally separately. It happens to everyone.&lt;/p&gt;\n\n&lt;p&gt;Waiting for approval and merge of &lt;code&gt;bugfix&lt;/code&gt; and &lt;code&gt;tool-enhancement&lt;/code&gt; before continuing work on &lt;code&gt;BigFeature&lt;/code&gt; is probably not worth the time. I would treat the integration of &lt;code&gt;BigFeature&lt;/code&gt; as contingent on those others, even if they have not been approved. If you&amp;#39;re really unsure and think they might be categorically rejected, you should run the ideas by the project lead first.&lt;/p&gt;\n\n&lt;p&gt;Posing this as a question to the rest of the team is also a good idea, since they know the project better than anyone.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dg9plkx", "score_hidden": false, "stickied": false, "created": 1492230901.0, "created_utc": 1492202101.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]