[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Basically my first &amp;#39;useful&amp;#39; program aside from the stuff I do in html/css.&lt;/p&gt;\n\n&lt;p&gt;Link : &lt;a href=\"https://github.com/idkaryan/chia-anime-Downloader\"&gt;https://github.com/idkaryan/chia-anime-Downloader&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Learned from &amp;quot;Automate The Boring Stuff With Python&amp;quot; by Al Sweigart which I believe is free to read.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Basically my first 'useful' program aside from the stuff I do in html/css.\n\nLink : https://github.com/idkaryan/chia-anime-Downloader\n\nLearned from \"Automate The Boring Stuff With Python\" by Al Sweigart which I believe is free to read.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65nwzh", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 8, "report_reasons": null, "author": "unwanted_lucidity", "saved": false, "mod_reports": [], "name": "t3_65nwzh", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65nwzh/wrote_a_python_script_to_get_download_links_for/", "num_reports": null, "locked": false, "stickied": false, "created": 1492354269.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65nwzh/wrote_a_python_script_to_get_download_links_for/", "author_flair_text": null, "quarantine": false, "title": "Wrote a python script to get download links for all episodes for any anime from chia-anime.tv. Would really appreciate constructive feedback on my code.", "created_utc": 1492325469.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 7, "visited": false, "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": "", "user_reports": [], "id": "dgc92g9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "unwanted_lucidity", "parent_id": "t1_dgbvaxr", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Will keep that in mind. Thank you!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Will keep that in mind. Thank you!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgc92g9", "score_hidden": false, "stickied": false, "created": 1492390249.0, "created_utc": 1492361449.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvaxr", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "planedoctor", "parent_id": "t3_65nwzh", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Put everything in functions.  Indent consistently.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Put everything in functions.  Indent consistently.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbvaxr", "score_hidden": false, "stickied": false, "created": 1492362251.0, "created_utc": 1492333451.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": "", "user_reports": [], "id": "dgc9996", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "unwanted_lucidity", "parent_id": "t1_dgbzhh2", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thank you! My roommate just up and asked if there was a way to not sit for minutes and get links for all his anime eps at once(he downloads) and I'm so glad that I did it. I know significantly more after this small project, about pyinstaller, a few modules, github markdown and python3. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you! My roommate just up and asked if there was a way to not sit for minutes and get links for all his anime eps at once(he downloads) and I&amp;#39;m so glad that I did it. I know significantly more after this small project, about pyinstaller, a few modules, github markdown and python3. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgc9996", "score_hidden": false, "stickied": false, "created": 1492390481.0, "created_utc": 1492361681.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbzhh2", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Roach-King", "parent_id": "t3_65nwzh", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Great first project! That's the hardest part of starting to learn is finding *something* to do.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great first project! That&amp;#39;s the hardest part of starting to learn is finding &lt;em&gt;something&lt;/em&gt; to do.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbzhh2", "score_hidden": false, "stickied": false, "created": 1492375212.0, "created_utc": 1492346412.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65nwzh", "likes": null, "replies": "", "user_reports": [], "id": "dgdbpb2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "commandlineluser", "parent_id": "t1_dgd8i3r", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; I don't think I fully understand how it worked.\n\nMy bad. So let's say you want to build a list of some numbers times 2:\n\n    &gt;&gt;&gt; doubles = []\n    &gt;&gt;&gt; for n in 1, 2, 3:\n    ...    doubles.append(n * 2)\n    ... \n    &gt;&gt;&gt; doubles\n    [2, 4, 6]\n\nWritten as a list comprehension it would look like\n\n    &gt;&gt;&gt; doubles = [ n * 2 for n in 1, 2, 3 ]\n    &gt;&gt;&gt; doubles\n    [2, 4, 6]\n\nSo you can say that\n\n     result = [ ... for ... in ... ]\n\nis equivalent to\n\n    result = []\n    for ... in ...:\n        result.append(...)\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t think I fully understand how it worked.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;My bad. So let&amp;#39;s say you want to build a list of some numbers times 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; doubles = []\n&amp;gt;&amp;gt;&amp;gt; for n in 1, 2, 3:\n...    doubles.append(n * 2)\n... \n&amp;gt;&amp;gt;&amp;gt; doubles\n[2, 4, 6]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Written as a list comprehension it would look like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; doubles = [ n * 2 for n in 1, 2, 3 ]\n&amp;gt;&amp;gt;&amp;gt; doubles\n[2, 4, 6]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you can say that&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; result = [ ... for ... in ... ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is equivalent to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;result = []\nfor ... in ...:\n    result.append(...)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgdbpb2", "score_hidden": false, "stickied": false, "created": 1492452001.0, "created_utc": 1492423201.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd8i3r", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "unwanted_lucidity", "parent_id": "t1_dgcd9eo", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "All of that is very, very informative. I didn't know any of those tricks. Thanks a lot!\nGoing to look into list comprehensions now. I don't think I fully understand how it worked.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;All of that is very, very informative. I didn&amp;#39;t know any of those tricks. Thanks a lot!\nGoing to look into list comprehensions now. I don&amp;#39;t think I fully understand how it worked.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgd8i3r", "score_hidden": false, "stickied": false, "created": 1492441692.0, "created_utc": 1492412892.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcd9eo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "commandlineluser", "parent_id": "t3_65nwzh", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Cool first project!\n\nIf you'd like a \"fancy\" progress bar you can check out https://github.com/tqdm/tqdm/\n\nUsually when you have `range(len())` there is a simpler way to write it e.g.\n\n    for i in range(len(downloadLinks)):\n        print(downloadLinks[i])\n\nThis can be written just as\n\n    for link in downloadLinks:\n        print(link)\n\nWhen you iterate over a list with `for` you iterate over the elements.\n\nThere's a very informative talk about it if you'd like to check it out.\n\nhttp://nedbatchelder.com/text/iter.html\n\nIn the other examples you are using both `i` and the element in which case you can use `enumerate()` e.g.\n\n    for i, page in enumerate(finalPages):\n\n`enumerate()` gives you back the index and element of an iterable.\n\n    &gt;&gt;&gt; for i, letter in enumerate('abc'):\n    ...     print(i, letter)\n    ... \n    0 a\n    1 b\n    2 c\n\nIf you didn't want to `start` at 0 you can specify it with `start=n` e.g.  \n\n    for i, letter in enumerate('abc', start=1):\n\nAn empty list will evaluate to `False` meaning\n\n    if len(failedPages) &gt; 0:\n\ncan be written as `if failedPages:`\n\nThere is another example of it here:\n\n    if len(finalPage) &gt;= 1:\n        finalPages.append(finalPage[0].attrs['href'])\n\nSo you could just have `if finalPage:` although that is the result of a `select()` you may be interested in `select_one()` \n\nAlso, you can use `tag['attr']` instead of `tag.attrs['attr']` if you wish.\n\nYou will probably soon become aware of *list comprehensions* which are just shorthand syntax for creating lists e.g.\n\n    for i in range(len(animePageEPS)):\n        episodeLinks.append(animePageEPS[i].attrs['href'])\n\nCan be turned into\n\n    episodeLinks = [ episode['href'] for episode in animePageEPS ]\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool first project!&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;d like a &amp;quot;fancy&amp;quot; progress bar you can check out &lt;a href=\"https://github.com/tqdm/tqdm/\"&gt;https://github.com/tqdm/tqdm/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Usually when you have &lt;code&gt;range(len())&lt;/code&gt; there is a simpler way to write it e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i in range(len(downloadLinks)):\n    print(downloadLinks[i])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can be written just as&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for link in downloadLinks:\n    print(link)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you iterate over a list with &lt;code&gt;for&lt;/code&gt; you iterate over the elements.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s a very informative talk about it if you&amp;#39;d like to check it out.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://nedbatchelder.com/text/iter.html\"&gt;http://nedbatchelder.com/text/iter.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In the other examples you are using both &lt;code&gt;i&lt;/code&gt; and the element in which case you can use &lt;code&gt;enumerate()&lt;/code&gt; e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i, page in enumerate(finalPages):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt; gives you back the index and element of an iterable.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; for i, letter in enumerate(&amp;#39;abc&amp;#39;):\n...     print(i, letter)\n... \n0 a\n1 b\n2 c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you didn&amp;#39;t want to &lt;code&gt;start&lt;/code&gt; at 0 you can specify it with &lt;code&gt;start=n&lt;/code&gt; e.g.  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i, letter in enumerate(&amp;#39;abc&amp;#39;, start=1):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An empty list will evaluate to &lt;code&gt;False&lt;/code&gt; meaning&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if len(failedPages) &amp;gt; 0:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can be written as &lt;code&gt;if failedPages:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;There is another example of it here:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if len(finalPage) &amp;gt;= 1:\n    finalPages.append(finalPage[0].attrs[&amp;#39;href&amp;#39;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you could just have &lt;code&gt;if finalPage:&lt;/code&gt; although that is the result of a &lt;code&gt;select()&lt;/code&gt; you may be interested in &lt;code&gt;select_one()&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;Also, you can use &lt;code&gt;tag[&amp;#39;attr&amp;#39;]&lt;/code&gt; instead of &lt;code&gt;tag.attrs[&amp;#39;attr&amp;#39;]&lt;/code&gt; if you wish.&lt;/p&gt;\n\n&lt;p&gt;You will probably soon become aware of &lt;em&gt;list comprehensions&lt;/em&gt; which are just shorthand syntax for creating lists e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i in range(len(animePageEPS)):\n    episodeLinks.append(animePageEPS[i].attrs[&amp;#39;href&amp;#39;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can be turned into&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;episodeLinks = [ episode[&amp;#39;href&amp;#39;] for episode in animePageEPS ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgcd9eo", "score_hidden": false, "stickied": false, "created": 1492395755.0, "created_utc": 1492366955.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]