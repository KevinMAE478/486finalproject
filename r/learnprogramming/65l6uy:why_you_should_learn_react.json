[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to prepend this by saying that I am a professional web and mobile applications developer, and have been at a fast-paced consultant company for the past five years... I saw first-hand how crazy JavaScript has been during this time, with people not knowing which framework or libraries are worth learning. So keep that in mind when reading this. Technology can be really volatile, but I&amp;#39;m &lt;em&gt;hopefully&lt;/em&gt; not steering you in the wrong direction.&lt;/p&gt;\n\n&lt;p&gt;In jQuery, if you clicked a button that you wanted to update several components, you&amp;#39;d have to register event handlers, and then fire off the appropriate callbacks... Anyone who&amp;#39;s done advanced jQuery knows what a pain in the ass this can be at times. Event handlers build up, and there&amp;#39;s not typically a singular source of truth or consistent pattern for how components update unless you manually craft the architecture and patterns yourself.&lt;/p&gt;\n\n&lt;p&gt;Bring in Angular, and sometimes the amount of configuration and how out of control Angular components can be actually takes more away from your project than you gain. (New versions of Angular, which are drastically different, may not have this issue as much.)&lt;/p&gt;\n\n&lt;p&gt;In React, you would simply have a callback function that is just a normal Javascript function (which is what literally everything in React is). That function would update a state value (which is basically just JSON), and then React sees this change, and re-renders your component.&lt;/p&gt;\n\n&lt;p&gt;Probably the biggest benefit React offers, is it allows for viewing your web components in a &amp;quot;stateless&amp;quot; manner, which is why you&amp;#39;ll sometimes see people call React &amp;quot;functional&amp;quot; (like pure functions in mathematics, that only turn a result without modifying state).&lt;/p&gt;\n\n&lt;p&gt;React is able to accomplish this by creating a &amp;quot;shadow DOM&amp;quot; that mimics the real DOM.&lt;/p&gt;\n\n&lt;p&gt;Any time you update one of your component&amp;#39;s &amp;quot;state&amp;quot; values, it refreshes the relevant components in the shadow DOM and then replaces the corresponding real COM components. I think the actual process is a bit more complicated than this because the infrastructure for creating these shadow DOMs has improved (with some browser support as well), but that&amp;#39;s the gist of it.&lt;/p&gt;\n\n&lt;p&gt;Your component will have some logic in it that renders things a different way depending on what the various state values are. For example, it might calculate which class to put on a div, or what value goes in a text input.&lt;/p&gt;\n\n&lt;p&gt;Contrary to some of the hell I went through with overly configurable and very easily complicated Angular components, I want to say that there&amp;#39;s a huge contrast to React in that I have found React components can actually be reusable.&lt;/p&gt;\n\n&lt;p&gt;Also, FLUX lets me continue viewing React in a stateless, one-directional way while also being able to make requests to web services and persist things beyond the component level. (So the SPA - single page application - level, still just JSON, or local storage if you please.)&lt;/p&gt;\n\n&lt;p&gt;So I&amp;#39;m able to use React to build complex desktop and mobile applications where single storage areas can be the controlling values that dictate how views are rendered that may even share or combine overlapping datasets.&lt;/p&gt;\n\n&lt;p&gt;I can do it without having to think about complicated callback chains, which in jQuery and even Angular were sometimes node graphs rather than one-directional flows, or they required me to care a lot more about the lifecycle of the framework than I wanted to...&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;ll still need to import libraries for stuff like web requests, and these days, it&amp;#39;s also important to know something like babel or webpack. Any serious web project is going to have a client-side build process that takes all your JSX files (react) and compiles them down to cross-browser compatible JavaScript, for example. It&amp;#39;s good to have those tools anyways, since it lets you use the most recent edition of JavaScript and have something transpile that to ES4 or whatever.&lt;/p&gt;\n\n&lt;p&gt;So if you were doubting whether React is worth learning, because I too went through the overwhelming, anxiety-ridden mess of what the past few years of front-end development and JavaScript frameworks have been like, I want to say... React is definitely worth learning, and it seems to be here to stay, at least for a little while. People like it. It&amp;#39;s simple. It&amp;#39;s well-supported. I would say React is definitely a step in the right direction for the world of web and mobile applications. Better tools are sure to come out over time, but rest assured that React is still well-supported by the big players and it&amp;#39;s an in-demand market skill. Learning it now will prepare you for whatever is next to come in the future.&lt;/p&gt;\n\n&lt;p&gt;I would say the only tradeoff with something like React is you are simplifying certain things, but it may add a little time to development, especially initially. That being said, I&amp;#39;d rather do what I&amp;#39;m doing in React now than go back to the incomprehensible mess of the previous tools and frameworks I have used.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I want to prepend this by saying that I am a professional web and mobile applications developer, and have been at a fast-paced consultant company for the past five years... I saw first-hand how crazy JavaScript has been during this time, with people not knowing which framework or libraries are worth learning. So keep that in mind when reading this. Technology can be really volatile, but I'm *hopefully* not steering you in the wrong direction.\n\nIn jQuery, if you clicked a button that you wanted to update several components, you'd have to register event handlers, and then fire off the appropriate callbacks... Anyone who's done advanced jQuery knows what a pain in the ass this can be at times. Event handlers build up, and there's not typically a singular source of truth or consistent pattern for how components update unless you manually craft the architecture and patterns yourself.\n\nBring in Angular, and sometimes the amount of configuration and how out of control Angular components can be actually takes more away from your project than you gain. (New versions of Angular, which are drastically different, may not have this issue as much.)\n\nIn React, you would simply have a callback function that is just a normal Javascript function (which is what literally everything in React is). That function would update a state value (which is basically just JSON), and then React sees this change, and re-renders your component.\n\nProbably the biggest benefit React offers, is it allows for viewing your web components in a \"stateless\" manner, which is why you'll sometimes see people call React \"functional\" (like pure functions in mathematics, that only turn a result without modifying state).\n\nReact is able to accomplish this by creating a \"shadow DOM\" that mimics the real DOM.\n\nAny time you update one of your component's \"state\" values, it refreshes the relevant components in the shadow DOM and then replaces the corresponding real COM components. I think the actual process is a bit more complicated than this because the infrastructure for creating these shadow DOMs has improved (with some browser support as well), but that's the gist of it.\n\nYour component will have some logic in it that renders things a different way depending on what the various state values are. For example, it might calculate which class to put on a div, or what value goes in a text input.\n\nContrary to some of the hell I went through with overly configurable and very easily complicated Angular components, I want to say that there's a huge contrast to React in that I have found React components can actually be reusable.\n\nAlso, FLUX lets me continue viewing React in a stateless, one-directional way while also being able to make requests to web services and persist things beyond the component level. (So the SPA - single page application - level, still just JSON, or local storage if you please.)\n\nSo I'm able to use React to build complex desktop and mobile applications where single storage areas can be the controlling values that dictate how views are rendered that may even share or combine overlapping datasets.\n\nI can do it without having to think about complicated callback chains, which in jQuery and even Angular were sometimes node graphs rather than one-directional flows, or they required me to care a lot more about the lifecycle of the framework than I wanted to...\n\nYou'll still need to import libraries for stuff like web requests, and these days, it's also important to know something like babel or webpack. Any serious web project is going to have a client-side build process that takes all your JSX files (react) and compiles them down to cross-browser compatible JavaScript, for example. It's good to have those tools anyways, since it lets you use the most recent edition of JavaScript and have something transpile that to ES4 or whatever.\n\nSo if you were doubting whether React is worth learning, because I too went through the overwhelming, anxiety-ridden mess of what the past few years of front-end development and JavaScript frameworks have been like, I want to say... React is definitely worth learning, and it seems to be here to stay, at least for a little while. People like it. It's simple. It's well-supported. I would say React is definitely a step in the right direction for the world of web and mobile applications. Better tools are sure to come out over time, but rest assured that React is still well-supported by the big players and it's an in-demand market skill. Learning it now will prepare you for whatever is next to come in the future.\n\nI would say the only tradeoff with something like React is you are simplifying certain things, but it may add a little time to development, especially initially. That being said, I'd rather do what I'm doing in React now than go back to the incomprehensible mess of the previous tools and frameworks I have used.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65l6uy", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 9, "report_reasons": null, "author": "TheAdventMaster", "saved": false, "mod_reports": [], "name": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65l6uy/why_you_should_learn_react/", "num_reports": null, "locked": false, "stickied": false, "created": 1492316322.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65l6uy/why_you_should_learn_react/", "author_flair_text": null, "quarantine": false, "title": "Why you should learn React", "created_utc": 1492287522.0, "distinguished": null, "media": null, "upvote_ratio": 0.77, "num_comments": 9, "visited": false, "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": "", "user_reports": [], "id": "dgbv2uj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "c00yt825", "parent_id": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "I don't have react experience, but I do want to counter the anti angular argument a bit. \n\nAngular definitely has a learning curve and a bunch of gotchas, but actually one of the things I love about angular 1 is that it doesn't need a million packages. You could use ts / bower / gulp / grunt whatever if you want, but no one is expecting you to. \n\nLike react, angular also has some serious options for mobile with Cordova and ionic. I've been using that on a relatively big project for the past few months and I'm impressed with the support, maturity and performance that this brings, even if most things aren't native and effectively running in a web view. \n\nOther than that, angular is just another flavor like react. It has great support, active development and loads of open source components and plugins to use. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t have react experience, but I do want to counter the anti angular argument a bit. &lt;/p&gt;\n\n&lt;p&gt;Angular definitely has a learning curve and a bunch of gotchas, but actually one of the things I love about angular 1 is that it doesn&amp;#39;t need a million packages. You could use ts / bower / gulp / grunt whatever if you want, but no one is expecting you to. &lt;/p&gt;\n\n&lt;p&gt;Like react, angular also has some serious options for mobile with Cordova and ionic. I&amp;#39;ve been using that on a relatively big project for the past few months and I&amp;#39;m impressed with the support, maturity and performance that this brings, even if most things aren&amp;#39;t native and effectively running in a web view. &lt;/p&gt;\n\n&lt;p&gt;Other than that, angular is just another flavor like react. It has great support, active development and loads of open source components and plugins to use. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbv2uj", "score_hidden": false, "stickied": false, "created": 1492361499.0, "created_utc": 1492332699.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": "", "user_reports": [], "id": "dgbejo3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pasportit", "parent_id": "t1_dgbe76f", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Oh cool, thank you! React Training looks like what I was looking for. \n\nI did watch [Traversy Media](https://www.youtube.com/playlist?list=PLillGF-RfqbbKWfm3Y_RF57dNGsHnkYqO) YouTube playlist, but it seemed like it skipped a lot of details. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh cool, thank you! React Training looks like what I was looking for. &lt;/p&gt;\n\n&lt;p&gt;I did watch &lt;a href=\"https://www.youtube.com/playlist?list=PLillGF-RfqbbKWfm3Y_RF57dNGsHnkYqO\"&gt;Traversy Media&lt;/a&gt; YouTube playlist, but it seemed like it skipped a lot of details. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbejo3", "score_hidden": false, "stickied": false, "created": 1492330803.0, "created_utc": 1492302003.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbe76f", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "TheAdventMaster", "parent_id": "t1_dgbddqt", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "100% legit answer, I think the resources for learning React are still spread out a bit too much. I don't have a singular, informative source for learning every aspect.\n\nI know FreeCodeCamp has introduced React into its curriculum\n\nCodeCademy also offers some React course materials, but I really do find the CodeCademy philosophy on teaching to be incredibly weird. You learn basically all of the bits except the ones that matter... like how to actually build and run stuff yourself on a local instance.\n\nAnything you'd be able to find, like [this](https://reacttraining.com/online/react-fundamentals), this reddit [thread](https://www.reddit.com/r/reactjs/comments/4n2bxo/whats_the_best_tutorial_to_learn_react/), and [these](https://www.quora.com/What-are-some-good-ways-to-learn-ReactJS) quora [pages](https://www.quora.com/Whats-the-best-place-to-learn-React-js) are about the same thing I would use if I was learning from scratch again.\n\nExperience has also taught me not to underestimate the power of YouTube. There are React courses on there that won't require any registration or anything like that... Probably the quickest way to get started, honestly. Watch a few videos, then evaluate from there what you think the best learning resources are going to be for you personally.\n\nI know videos aren't everyone's learning style, but since I never went through a \"definitive\" resource for learning React (learned it mostly from co-workers and googling), it's hard to give a written resource as a starting point.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;100% legit answer, I think the resources for learning React are still spread out a bit too much. I don&amp;#39;t have a singular, informative source for learning every aspect.&lt;/p&gt;\n\n&lt;p&gt;I know FreeCodeCamp has introduced React into its curriculum&lt;/p&gt;\n\n&lt;p&gt;CodeCademy also offers some React course materials, but I really do find the CodeCademy philosophy on teaching to be incredibly weird. You learn basically all of the bits except the ones that matter... like how to actually build and run stuff yourself on a local instance.&lt;/p&gt;\n\n&lt;p&gt;Anything you&amp;#39;d be able to find, like &lt;a href=\"https://reacttraining.com/online/react-fundamentals\"&gt;this&lt;/a&gt;, this reddit &lt;a href=\"https://www.reddit.com/r/reactjs/comments/4n2bxo/whats_the_best_tutorial_to_learn_react/\"&gt;thread&lt;/a&gt;, and &lt;a href=\"https://www.quora.com/What-are-some-good-ways-to-learn-ReactJS\"&gt;these&lt;/a&gt; quora &lt;a href=\"https://www.quora.com/Whats-the-best-place-to-learn-React-js\"&gt;pages&lt;/a&gt; are about the same thing I would use if I was learning from scratch again.&lt;/p&gt;\n\n&lt;p&gt;Experience has also taught me not to underestimate the power of YouTube. There are React courses on there that won&amp;#39;t require any registration or anything like that... Probably the quickest way to get started, honestly. Watch a few videos, then evaluate from there what you think the best learning resources are going to be for you personally.&lt;/p&gt;\n\n&lt;p&gt;I know videos aren&amp;#39;t everyone&amp;#39;s learning style, but since I never went through a &amp;quot;definitive&amp;quot; resource for learning React (learned it mostly from co-workers and googling), it&amp;#39;s hard to give a written resource as a starting point.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbe76f", "score_hidden": false, "stickied": false, "created": 1492330296.0, "created_utc": 1492301496.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbddqt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pasportit", "parent_id": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Thank you, this was useful, I actually just started learning React - do you have a good resource? \nedit: grammar", "edited": 1492301711.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you, this was useful, I actually just started learning React - do you have a good resource? \nedit: grammar&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbddqt", "score_hidden": false, "stickied": false, "created": 1492329172.0, "created_utc": 1492300372.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": "", "user_reports": [], "id": "dgbin3e", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheAdventMaster", "parent_id": "t1_dgbhhve", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Babel, Webpack, Gulp... they're \"things\", now.\n\nI don't think it's necessary. We use it, but I think you can just include a react JSX include in your HTML and put all JSX in like script/jsx elements.\n\nThe reason these tools are things is that if you're building commercial / production applications, they're incredibly handy.\n\nI know that's frustrating if you're seeing them for the first time, but the fact that the front-end has a build process now means I can write the latest CSS, JavaScript, and JSX and have it all transpiled down to something browsers as far back as IE10 (possibly even IE8?) can understand.\n\nChances are, that's just the way people who do are teaching these tools use them, so that's the easiest way for them to teach it - not necessarily the easiest way for you to learn.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Babel, Webpack, Gulp... they&amp;#39;re &amp;quot;things&amp;quot;, now.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t think it&amp;#39;s necessary. We use it, but I think you can just include a react JSX include in your HTML and put all JSX in like script/jsx elements.&lt;/p&gt;\n\n&lt;p&gt;The reason these tools are things is that if you&amp;#39;re building commercial / production applications, they&amp;#39;re incredibly handy.&lt;/p&gt;\n\n&lt;p&gt;I know that&amp;#39;s frustrating if you&amp;#39;re seeing them for the first time, but the fact that the front-end has a build process now means I can write the latest CSS, JavaScript, and JSX and have it all transpiled down to something browsers as far back as IE10 (possibly even IE8?) can understand.&lt;/p&gt;\n\n&lt;p&gt;Chances are, that&amp;#39;s just the way people who do are teaching these tools use them, so that&amp;#39;s the easiest way for them to teach it - not necessarily the easiest way for you to learn.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbin3e", "score_hidden": false, "stickied": false, "created": 1492336705.0, "created_utc": 1492307905.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbhhve", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "snake_case-kebab-cas", "parent_id": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Why is it that every single React tutorial tries to teach you WebPack beforehand? The cargo culting is beyond annoying in the web dev world. But is WebPack actually *necessary*?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why is it that every single React tutorial tries to teach you WebPack beforehand? The cargo culting is beyond annoying in the web dev world. But is WebPack actually &lt;em&gt;necessary&lt;/em&gt;?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbhhve", "score_hidden": false, "stickied": false, "created": 1492335039.0, "created_utc": 1492306239.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": "", "user_reports": [], "id": "dgbiikc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "TheAdventMaster", "parent_id": "t1_dgbhln0", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Tbh, Vue.js reminds me of Angular. Not sure I would want to use it. I have nothing against it. Our entire toolchain is based around React, though (and that includes React Native as well for mobile applications).\n\nI haven't done anything comparable in Vue.js, so it would be unfair of me to assess it any further than that.\n\nThat being said, we used a lot of different tools before landing on React Native (including Cordova + Reapp), and React Native \"just worked\". The value of having our desktop web app and our native mobile developers knowing roughly the same technologies without suffering performance of capability losses is a huge boost to our team...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Tbh, Vue.js reminds me of Angular. Not sure I would want to use it. I have nothing against it. Our entire toolchain is based around React, though (and that includes React Native as well for mobile applications).&lt;/p&gt;\n\n&lt;p&gt;I haven&amp;#39;t done anything comparable in Vue.js, so it would be unfair of me to assess it any further than that.&lt;/p&gt;\n\n&lt;p&gt;That being said, we used a lot of different tools before landing on React Native (including Cordova + Reapp), and React Native &amp;quot;just worked&amp;quot;. The value of having our desktop web app and our native mobile developers knowing roughly the same technologies without suffering performance of capability losses is a huge boost to our team...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbiikc", "score_hidden": false, "stickied": false, "created": 1492336517.0, "created_utc": 1492307717.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbhln0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "snake_case-kebab-cas", "parent_id": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "What's your take on Vue.js ? I think it looks awesome (especially because you don't need the alien JSX language). \n\nBut I see a lot of people saying to go with React simply because it has FB behind it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What&amp;#39;s your take on Vue.js ? I think it looks awesome (especially because you don&amp;#39;t need the alien JSX language). &lt;/p&gt;\n\n&lt;p&gt;But I see a lot of people saying to go with React simply because it has FB behind it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbhln0", "score_hidden": false, "stickied": false, "created": 1492335188.0, "created_utc": 1492306388.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65l6uy", "likes": null, "replies": "", "user_reports": [], "id": "dgc05n4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "damnreds", "parent_id": "t3_65l6uy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "I only started learning it about 2 months ago so I am by no means an expert, but what you describe sounds a lot like what is possible in Angular (aka Angular 2, or now recently Angular 4), especially the part about the shadow DOM which is also exists in Angular.  Services make sharing information between different components pretty streamlined without needing to pass events around like a hot potato, and Directives make code reuse easy.  AngularJS (aka Angular 1) from what little I know is a completely different beast and can't really be compared to the current versions of Angular.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I only started learning it about 2 months ago so I am by no means an expert, but what you describe sounds a lot like what is possible in Angular (aka Angular 2, or now recently Angular 4), especially the part about the shadow DOM which is also exists in Angular.  Services make sharing information between different components pretty streamlined without needing to pass events around like a hot potato, and Directives make code reuse easy.  AngularJS (aka Angular 1) from what little I know is a completely different beast and can&amp;#39;t really be compared to the current versions of Angular.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgc05n4", "score_hidden": false, "stickied": false, "created": 1492376696.0, "created_utc": 1492347896.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]