[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How would one handle object creation without side-effects?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "How would one handle object creation without side-effects?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "Topic", "id": "65gr59", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 15, "report_reasons": null, "author": "drecklia", "saved": false, "mod_reports": [], "name": "t3_65gr59", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": false, "link_flair_css_class": "topic", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65gr59/does_better_programming_practice_involves/", "num_reports": null, "locked": false, "stickied": false, "created": 1492251109.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65gr59/does_better_programming_practice_involves/", "author_flair_text": null, "quarantine": false, "title": "Does better programming practice involves removing as many side-effects as possible?", "created_utc": 1492222309.0, "distinguished": null, "media": null, "upvote_ratio": 0.82, "num_comments": 11, "visited": false, "subreddit_type": "public", "ups": 15}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": "", "user_reports": [], "id": "dgacnqd", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "aafinx", "parent_id": "t1_dgab4lr", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Yup. That's how you avoid side effects. \n\nYour code should only modify what it owns.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yup. That&amp;#39;s how you avoid side effects. &lt;/p&gt;\n\n&lt;p&gt;Your code should only modify what it owns.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgacnqd", "score_hidden": false, "stickied": false, "created": 1492264059.0, "created_utc": 1492235259.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgab4lr", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "wavefunctionp", "parent_id": "t3_65gr59", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "    function makeObject(myprop){\n        return {\n            prop : myprop\n        }\n    }\n\n    makeObject('test')\n\nThe easiest and perhaps most useful introduction to functional style programming is to simply not use any objects or variables in a function that are not declared as parameters in the signature. If it is not passed into the function by parameter, you don't not touch it. More correctly, you do not change anything that is not declared within the function scope.\n\nThis helps you avoid having a variable changed in unexpected ways. By clearly defining your input and outputs and limiting the scope, it is easier to reason about what is going on.\n\nIn comparison, this is how you get bugs:\n\n    var test = 'foo'\n    \n    function printTest(){\n        return console.log(test)\n    }\n    \n    printTest()\n\nIf something modifies test, you have to track down test in a much larger scope than if you had done this:\n\n    function printTest(myvar){\n        return console.log(myvar)\n    }\n    \n    printTest('foo')\n\nThis is what is meant by avoiding side effects, in case there is a misunderstanding.\n\nIt is perfectly fine to create new objects/variables. It is not so great to modify state (variables) needlessly. Especially global ones. Especially as the scope gets larger. It becomes hard to track what a value is as a given time, and it is more likely that something somewhere modifies it when you didn't intend to do so.\n\nIf these examples seem simplistic, that is the goal. You want your code as simple as possible. It is said that your code should tend to be obvious and a bit boring.\n\nWatch this:\n\nhttps://www.youtube.com/watch?v=7Zlp9rKHGD4\n\nSeriously. Watch it.", "edited": 1492233877.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;function makeObject(myprop){\n    return {\n        prop : myprop\n    }\n}\n\nmakeObject(&amp;#39;test&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The easiest and perhaps most useful introduction to functional style programming is to simply not use any objects or variables in a function that are not declared as parameters in the signature. If it is not passed into the function by parameter, you don&amp;#39;t not touch it. More correctly, you do not change anything that is not declared within the function scope.&lt;/p&gt;\n\n&lt;p&gt;This helps you avoid having a variable changed in unexpected ways. By clearly defining your input and outputs and limiting the scope, it is easier to reason about what is going on.&lt;/p&gt;\n\n&lt;p&gt;In comparison, this is how you get bugs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var test = &amp;#39;foo&amp;#39;\n\nfunction printTest(){\n    return console.log(test)\n}\n\nprintTest()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If something modifies test, you have to track down test in a much larger scope than if you had done this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function printTest(myvar){\n    return console.log(myvar)\n}\n\nprintTest(&amp;#39;foo&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is what is meant by avoiding side effects, in case there is a misunderstanding.&lt;/p&gt;\n\n&lt;p&gt;It is perfectly fine to create new objects/variables. It is not so great to modify state (variables) needlessly. Especially global ones. Especially as the scope gets larger. It becomes hard to track what a value is as a given time, and it is more likely that something somewhere modifies it when you didn&amp;#39;t intend to do so.&lt;/p&gt;\n\n&lt;p&gt;If these examples seem simplistic, that is the goal. You want your code as simple as possible. It is said that your code should tend to be obvious and a bit boring.&lt;/p&gt;\n\n&lt;p&gt;Watch this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=7Zlp9rKHGD4\"&gt;https://www.youtube.com/watch?v=7Zlp9rKHGD4&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Seriously. Watch it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgab4lr", "score_hidden": false, "stickied": false, "created": 1492261043.0, "created_utc": 1492232243.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": "", "user_reports": [], "id": "dga81bm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planedoctor", "parent_id": "t1_dga7zu4", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "That doesn't explain what you are talking about.\n\n&gt; Surfacing arguments is orthogonal to creating objects.\n\n.\n\n&gt; &gt;     How would one handle object creation without side-effects?\n\n&gt; You just create them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That doesn&amp;#39;t explain what you are talking about.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Surfacing arguments is orthogonal to creating objects.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;pre&gt;&lt;code&gt;How would one handle object creation without side-effects?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You just create them.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga81bm", "score_hidden": false, "stickied": false, "created": 1492255809.0, "created_utc": 1492227009.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7zu4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "drecklia", "parent_id": "t1_dga7yfb", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; From here\n&gt; This example:\n&gt; public Program getCurrentProgram(TVGuide guide, int channel) {\n&gt;   Schedule schedule = guide.getSchedule(channel);\n&gt; \n&gt;   Program current = schedule.programAt(new Date());\n&gt; \n&gt;   return current;\n&gt; }\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;From here\nThis example:\npublic Program getCurrentProgram(TVGuide guide, int channel) {\n  Schedule schedule = guide.getSchedule(channel);&lt;/p&gt;\n\n&lt;p&gt;Program current = schedule.programAt(new Date());&lt;/p&gt;\n\n&lt;p&gt;return current;\n}&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga7zu4", "score_hidden": false, "stickied": false, "created": 1492255744.0, "created_utc": 1492226944.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7yfb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planedoctor", "parent_id": "t1_dga7scc", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "&gt; Surfacing arguments is orthogonal to creating objects. What are you talking about here?\n\n&gt; How would one handle object creation without side-effects?\n\nYou just create them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Surfacing arguments is orthogonal to creating objects. What are you talking about here?&lt;/p&gt;\n\n&lt;p&gt;How would one handle object creation without side-effects?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You just create them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga7yfb", "score_hidden": false, "stickied": false, "created": 1492255684.0, "created_utc": 1492226884.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga7scc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "drecklia", "parent_id": "t1_dga775h", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "From [here](http://blog.jenkster.com/2015/12/what-is-functional-programming.html)\n\nThis example:\n\n    public Program getCurrentProgram(TVGuide guide, int channel) {\n      Schedule schedule = guide.getSchedule(channel);\n    \n      Program current = schedule.programAt(new Date());\n    \n      return current;\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;From &lt;a href=\"http://blog.jenkster.com/2015/12/what-is-functional-programming.html\"&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public Program getCurrentProgram(TVGuide guide, int channel) {\n  Schedule schedule = guide.getSchedule(channel);\n\n  Program current = schedule.programAt(new Date());\n\n  return current;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga7scc", "score_hidden": false, "stickied": false, "created": 1492255418.0, "created_utc": 1492226618.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga775h", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planedoctor", "parent_id": "t1_dga6xh1", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Surfacing arguments is orthogonal to creating objects.  What are you talking about here??", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Surfacing arguments is orthogonal to creating objects.  What are you talking about here??&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga775h", "score_hidden": false, "stickied": false, "created": 1492254502.0, "created_utc": 1492225702.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65gr59", "likes": null, "replies": "", "user_reports": [], "id": "dgbj591", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "planedoctor", "parent_id": "t1_dgagfzm", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "It can be worth it to pass in stuff like dates so it's more testable.  But that's a separate thing from removing side-effects.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It can be worth it to pass in stuff like dates so it&amp;#39;s more testable.  But that&amp;#39;s a separate thing from removing side-effects.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgbj591", "score_hidden": false, "stickied": false, "created": 1492337447.0, "created_utc": 1492308647.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgagfzm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "__cxa_throw", "parent_id": "t1_dga6xh1", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "IMHO a lot of the arguments for writing code that way are made by people who spend more time thinking about writing code than actually writing useful software.  Messing with global state in a function usually isn't a good idea, but jumping through hoops to avoid creating an object by calling malloc under the hood is even crazier.  That just punts allocation/initialization to a different area of the program so now the side effects are manifested as a bizarre architecture.", "edited": 1492245002.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;IMHO a lot of the arguments for writing code that way are made by people who spend more time thinking about writing code than actually writing useful software.  Messing with global state in a function usually isn&amp;#39;t a good idea, but jumping through hoops to avoid creating an object by calling malloc under the hood is even crazier.  That just punts allocation/initialization to a different area of the program so now the side effects are manifested as a bizarre architecture.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgagfzm", "score_hidden": false, "stickied": false, "created": 1492273591.0, "created_utc": 1492244791.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga6xh1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "drecklia", "parent_id": "t1_dga5ofy", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "The arguments I have read about surfacing inputs as parameters is that it allows for methods/functions to be more generic and allow for ease of of testing.\n\nWhat would be the argument to not do so?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The arguments I have read about surfacing inputs as parameters is that it allows for methods/functions to be more generic and allow for ease of of testing.&lt;/p&gt;\n\n&lt;p&gt;What would be the argument to not do so?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga6xh1", "score_hidden": false, "stickied": false, "created": 1492254095.0, "created_utc": 1492225295.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga5ofy", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "planedoctor", "parent_id": "t3_65gr59", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "No, unless you're going for 100% functional programming.  And object creation is not necessarily a side effect.  Functional code creates tons of 'objects'.", "edited": 1492226900.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, unless you&amp;#39;re going for 100% functional programming.  And object creation is not necessarily a side effect.  Functional code creates tons of &amp;#39;objects&amp;#39;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dga5ofy", "score_hidden": false, "stickied": false, "created": 1492252306.0, "created_utc": 1492223506.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}]