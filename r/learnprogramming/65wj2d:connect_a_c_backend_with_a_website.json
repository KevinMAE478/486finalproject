[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "learnprogramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi there!&lt;/p&gt;\n\n&lt;p&gt;I am fairly experienced with C++ but have next to no experience with web development - other than basic HTML and CSS.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d be interested in creating a more sophisticated web service - once which utilizes C++ to handle all of the data and stuff (I believe this would be called the server) but the user interacts with it through a web interface.&lt;/p&gt;\n\n&lt;p&gt;For the sake of an example, let&amp;#39;s use facebook. The users interact with everything on the website but all the data is stored/handled on some server (Which i think is written in PHP in this case)&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to learn how to do something similar. Can anyone offer any advice on where to start or any books/tutorials to get me started? Doesn&amp;#39;t matter how technical they appear, just something to get me going is all I need.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi there!\n\nI am fairly experienced with C++ but have next to no experience with web development - other than basic HTML and CSS.\n\nI'd be interested in creating a more sophisticated web service - once which utilizes C++ to handle all of the data and stuff (I believe this would be called the server) but the user interacts with it through a web interface.\n\nFor the sake of an example, let's use facebook. The users interact with everything on the website but all the data is stored/handled on some server (Which i think is written in PHP in this case)\n\nI'd like to learn how to do something similar. Can anyone offer any advice on where to start or any books/tutorials to get me started? Doesn't matter how technical they appear, just something to get me going is all I need.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65wj2d", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 28, "report_reasons": null, "author": "Bollziepon", "saved": false, "mod_reports": [], "name": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "approved_by": null, "over_18": false, "domain": "self.learnprogramming", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2r7yd", "edited": 1492448887.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/learnprogramming/comments/65wj2d/connect_a_c_backend_with_a_website/", "num_reports": null, "locked": false, "stickied": false, "created": 1492474665.0, "url": "https://www.reddit.com/r/learnprogramming/comments/65wj2d/connect_a_c_backend_with_a_website/", "author_flair_text": null, "quarantine": false, "title": "Connect a C++ backend with a website?", "created_utc": 1492445865.0, "distinguished": null, "media": null, "upvote_ratio": 0.85, "num_comments": 7, "visited": false, "subreddit_type": "public", "ups": 28}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": "", "user_reports": [], "id": "dgdsraz", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "ziptofaf", "parent_id": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "To be fair - you can write website back-ends in C++. It's a horrible idea but you can. Well, save for situations when you need it to be FAST. Then C++ makes sense. \n\nAnyways, I suggest you look at [cpp-netlib](http://cpp-netlib.org/) first (or it's equivalent) as it allows you to make a web server fairly painlessly. \n\nFrom then on you just need to understand one thing - everything that's sent between client and server is basically a string. Like this is what your server might receive for instance when you visit a website www.example.com/index.html:\n\n    GET /index.html HTTP/1.1\n    Host: www.example.com\n    User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\n\nYou get a name of the verb (GET in this case, there's also POST and 2 other types but those last 2 are not directly via browsers) and info on what end user wants. \n\nTo that you can respond like this:\n\nstd::string response = \"&lt;html&gt;&lt;head&gt;\"&lt;/head&gt;&lt;body&gt;Hello, I am index!&lt;/body&gt;&lt;/html&gt;;\n\n\n    HTTP/1.1 200 OK\n    Server: myOwnServer/0.0.1\n    Accept-Ranges: bytes\n    Content-Length: response.length();\n    Connection: close\n    Content-Type: text/html\n  \n    response;\n\nThat's it. Simple example of TCP connection. On server end you just have to look at what client wants (aka what's after words GET) - this can specify a format, extra parameters (like \"?query=cat\"). POST is a bit harder since it's separate rather than kept directly in the address field but nothing too scary either. \n\n\nSo it's an absolutely typical C++ application, you just need to write a parser that can understand what user is asking for. And in return you give them HTML/CSS data (as that's what a browser can understand). Where this HTML comes from is up to you - could be literally opening a file and just writing it line by line to a string, could be generated on the fly by code. Up to you. \n\nReason why I dislike C++ for this is that it's too low level. In typical web frameworks and languages more popular for it you don't even need to consider writing a string parser to understand what a user wants. You just do params[:query] and get contents of that.\n\nI have played with C++ for network purposes in the past when I built a little RPG tabletop client. Like so:\n\nhttps://puu.sh/vnjjP/13c151874b.png\n\nI wrote server application in both C++ and Ruby. Ruby version took me 130 lines of code. C++ was 230 or so. Huge overhead for no performance gain in my use case. ", "edited": 1492451523.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;To be fair - you can write website back-ends in C++. It&amp;#39;s a horrible idea but you can. Well, save for situations when you need it to be FAST. Then C++ makes sense. &lt;/p&gt;\n\n&lt;p&gt;Anyways, I suggest you look at &lt;a href=\"http://cpp-netlib.org/\"&gt;cpp-netlib&lt;/a&gt; first (or it&amp;#39;s equivalent) as it allows you to make a web server fairly painlessly. &lt;/p&gt;\n\n&lt;p&gt;From then on you just need to understand one thing - everything that&amp;#39;s sent between client and server is basically a string. Like this is what your server might receive for instance when you visit a website &lt;a href=\"http://www.example.com/index.html:\"&gt;www.example.com/index.html:&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GET /index.html HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You get a name of the verb (GET in this case, there&amp;#39;s also POST and 2 other types but those last 2 are not directly via browsers) and info on what end user wants. &lt;/p&gt;\n\n&lt;p&gt;To that you can respond like this:&lt;/p&gt;\n\n&lt;p&gt;std::string response = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;quot;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;Hello, I am index!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK\nServer: myOwnServer/0.0.1\nAccept-Ranges: bytes\nContent-Length: response.length();\nConnection: close\nContent-Type: text/html\n\nresponse;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s it. Simple example of TCP connection. On server end you just have to look at what client wants (aka what&amp;#39;s after words GET) - this can specify a format, extra parameters (like &amp;quot;?query=cat&amp;quot;). POST is a bit harder since it&amp;#39;s separate rather than kept directly in the address field but nothing too scary either. &lt;/p&gt;\n\n&lt;p&gt;So it&amp;#39;s an absolutely typical C++ application, you just need to write a parser that can understand what user is asking for. And in return you give them HTML/CSS data (as that&amp;#39;s what a browser can understand). Where this HTML comes from is up to you - could be literally opening a file and just writing it line by line to a string, could be generated on the fly by code. Up to you. &lt;/p&gt;\n\n&lt;p&gt;Reason why I dislike C++ for this is that it&amp;#39;s too low level. In typical web frameworks and languages more popular for it you don&amp;#39;t even need to consider writing a string parser to understand what a user wants. You just do params[:query] and get contents of that.&lt;/p&gt;\n\n&lt;p&gt;I have played with C++ for network purposes in the past when I built a little RPG tabletop client. Like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://puu.sh/vnjjP/13c151874b.png\"&gt;https://puu.sh/vnjjP/13c151874b.png&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I wrote server application in both C++ and Ruby. Ruby version took me 130 lines of code. C++ was 230 or so. Huge overhead for no performance gain in my use case. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgdsraz", "score_hidden": false, "stickied": false, "created": 1492478861.0, "created_utc": 1492450061.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": "", "user_reports": [], "id": "dgebrqy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "theoneness", "parent_id": "t1_dge5x4y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "Recently used this approach successfully to integrate C++ written AI for a web based game. Worked for us. nodeschool tutorial here if you want to get the hang of it first: https://github.com/workshopper/goingnative", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Recently used this approach successfully to integrate C++ written AI for a web based game. Worked for us. nodeschool tutorial here if you want to get the hang of it first: &lt;a href=\"https://github.com/workshopper/goingnative\"&gt;https://github.com/workshopper/goingnative&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgebrqy", "score_hidden": false, "stickied": false, "created": 1492501254.0, "created_utc": 1492472454.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge5x4y", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "YouFeedTheFish", "parent_id": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "You could [call your c++ libraries](https://nodejs.org/api/addons.html) from the node.js engine.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could &lt;a href=\"https://nodejs.org/api/addons.html\"&gt;call your c++ libraries&lt;/a&gt; from the node.js engine.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dge5x4y", "score_hidden": false, "stickied": false, "created": 1492493748.0, "created_utc": 1492464948.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": "", "user_reports": [], "id": "dgdsb7c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "thomascgalvin", "parent_id": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "To start with, it's very rare for a web app to be written in C++ these days. Java, PHP, C#, and Python are all more common. There are a handful of c++ [web](https://www.webtoolkit.eu/wt) [app](http://cppcms.com/wikipp/en/page/main) [frameworks](http://www.treefrogframework.org/), but I haven't used any of them.\n\nAssuming you want to write the application from scratch, Apache allows you to deploy a C++ binary using `mod_cgi`, and you can use `std::cout` to write to the `HTTP Request`. The request parameters are set as environment variables that your application can read. Aside from that you're just writing a normal C++ application. It's been years since I've done this, but I believe that's still accurate.\n\nOne major downside to this approach is that you lose state. Each `HTTP Request` spins up a new instance of your executable, so you'd have to load the user session (or whatever) from a database every time someone interacts with your app. To get around that, you could write a daemon process that tracks overall application state, and have the cgi executables talk to it using sockets, but at that point you've basically implemented your own web app framework.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;To start with, it&amp;#39;s very rare for a web app to be written in C++ these days. Java, PHP, C#, and Python are all more common. There are a handful of c++ &lt;a href=\"https://www.webtoolkit.eu/wt\"&gt;web&lt;/a&gt; &lt;a href=\"http://cppcms.com/wikipp/en/page/main\"&gt;app&lt;/a&gt; &lt;a href=\"http://www.treefrogframework.org/\"&gt;frameworks&lt;/a&gt;, but I haven&amp;#39;t used any of them.&lt;/p&gt;\n\n&lt;p&gt;Assuming you want to write the application from scratch, Apache allows you to deploy a C++ binary using &lt;code&gt;mod_cgi&lt;/code&gt;, and you can use &lt;code&gt;std::cout&lt;/code&gt; to write to the &lt;code&gt;HTTP Request&lt;/code&gt;. The request parameters are set as environment variables that your application can read. Aside from that you&amp;#39;re just writing a normal C++ application. It&amp;#39;s been years since I&amp;#39;ve done this, but I believe that&amp;#39;s still accurate.&lt;/p&gt;\n\n&lt;p&gt;One major downside to this approach is that you lose state. Each &lt;code&gt;HTTP Request&lt;/code&gt; spins up a new instance of your executable, so you&amp;#39;d have to load the user session (or whatever) from a database every time someone interacts with your app. To get around that, you could write a daemon process that tracks overall application state, and have the cgi executables talk to it using sockets, but at that point you&amp;#39;ve basically implemented your own web app framework.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgdsb7c", "score_hidden": false, "stickied": false, "created": 1492478361.0, "created_utc": 1492449561.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": "", "user_reports": [], "id": "dge9pul", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ryanstephendavis", "parent_id": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "I've used a Python Flask web app front-end which then uses Python's\u200b subprocess to call an executable written in C++ on the backend.  Learning/using Flask is a great tool.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve used a Python Flask web app front-end which then uses Python&amp;#39;s\u200b subprocess to call an executable written in C++ on the backend.  Learning/using Flask is a great tool.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dge9pul", "score_hidden": false, "stickied": false, "created": 1492498587.0, "created_utc": 1492469787.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2r7yd", "removal_reason": null, "link_id": "t3_65wj2d", "likes": null, "replies": "", "user_reports": [], "id": "dgdsn07", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "lonelybits", "parent_id": "t1_dgds70y", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "It's $15 right now.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s $15 right now.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgdsn07", "score_hidden": false, "stickied": false, "created": 1492478725.0, "created_utc": 1492449925.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgds70y", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Murderwagon", "parent_id": "t3_65wj2d", "subreddit_name_prefixed": "r/learnprogramming", "controversiality": 0, "body": "[This](https://www.udemy.com/the-complete-web-developer-course-2/) course has been incredibly helpful to me learning web development. It's very expensive right now, but I think occasionally it goes on sale--I got it at 90% off (for $20) which was so worth it, so maybe keep an eye out. Context: I have a lot more experience with programming software than for web, and this is helping me learn web dev so much. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.udemy.com/the-complete-web-developer-course-2/\"&gt;This&lt;/a&gt; course has been incredibly helpful to me learning web development. It&amp;#39;s very expensive right now, but I think occasionally it goes on sale--I got it at 90% off (for $20) which was so worth it, so maybe keep an eye out. Context: I have a lot more experience with programming software than for web, and this is helping me learn web dev so much. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "learnprogramming", "name": "t1_dgds70y", "score_hidden": false, "stickied": false, "created": 1492478230.0, "created_utc": 1492449430.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]