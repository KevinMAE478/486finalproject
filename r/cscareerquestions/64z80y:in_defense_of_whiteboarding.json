[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "cscareerquestions", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Many people dont like whiteboarding. It involves algorithmic heavy problem solving, you have no resources to reference, writing on whiteboards are terrible for making changes, and its a big disconnect from what most software engineers do on a daily basis. However, all of the 3-4 &amp;quot;alternative&amp;quot; interview questions/styles Ive come across have all been extremely negative.&lt;/p&gt;\n\n&lt;p&gt;Ive had to pair program with an engineer on a problem he was working with at work. I couldnt offer any real help besides suggesting using a different data structure or structuring the code differently. The logic was not complicated, as is most general day to day stuff, but I didnt know how all of the pieces of code fit together to offer any substantial help. Even worse, the interviewer was focused on solving the problem and that took away his focus from interviewing me. &lt;/p&gt;\n\n&lt;p&gt;Another interview, I was given a complex &amp;quot;real world&amp;quot; problem with 3 paragraphs of context. It was extremely hard to understand and if you thought you were under time pressure with algorithm problems, these real world problems are even worse because they are not as straightforward. I was able to Google stuff and had to reference less common built in libraries but that took up even more of my time. Algorithm questions tend to just stick to common data structures you should know by heart so little document referencing is needed. I would argue that these types of problems are more inline with day to day engineering stuff, but trying to understand the prompt, ask questions, solve, look up documentation and coding the solution in 1 hour is just not enough time.&lt;/p&gt;\n\n&lt;p&gt;For me, I think it comes down to how much can be tested in a limited amount of time and thats why companies do algorithm questions. The two examples above are not bad practices, I just feel that it cannot be done well in 1 hour. Algorithm problems require no context or knowledge of a specific tech stack and allow you to hone in on a persons problem solving skills, their ability to optimize, and if they can turn their solution into code. I see the flaws in the current system and Im all for changing it up, but all of the alternative interviews that Ive done have not gone very well.&lt;/p&gt;\n\n&lt;p&gt;Any thoughts or experiences on these types of interviews trying to move away from algorithmic whiteboarding problems? We all know the downfalls of whiteboarding so no need to make &amp;quot;whiteboarding sucks because...&amp;quot; comments please.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Many people dont like whiteboarding. It involves algorithmic heavy problem solving, you have no resources to reference, writing on whiteboards are terrible for making changes, and its a big disconnect from what most software engineers do on a daily basis. However, all of the 3-4 \"alternative\" interview questions/styles Ive come across have all been extremely negative.\n\nIve had to pair program with an engineer on a problem he was working with at work. I couldnt offer any real help besides suggesting using a different data structure or structuring the code differently. The logic was not complicated, as is most general day to day stuff, but I didnt know how all of the pieces of code fit together to offer any substantial help. Even worse, the interviewer was focused on solving the problem and that took away his focus from interviewing me. \n\nAnother interview, I was given a complex \"real world\" problem with 3 paragraphs of context. It was extremely hard to understand and if you thought you were under time pressure with algorithm problems, these real world problems are even worse because they are not as straightforward. I was able to Google stuff and had to reference less common built in libraries but that took up even more of my time. Algorithm questions tend to just stick to common data structures you should know by heart so little document referencing is needed. I would argue that these types of problems are more inline with day to day engineering stuff, but trying to understand the prompt, ask questions, solve, look up documentation and coding the solution in 1 hour is just not enough time.\n\nFor me, I think it comes down to how much can be tested in a limited amount of time and thats why companies do algorithm questions. The two examples above are not bad practices, I just feel that it cannot be done well in 1 hour. Algorithm problems require no context or knowledge of a specific tech stack and allow you to hone in on a persons problem solving skills, their ability to optimize, and if they can turn their solution into code. I see the flaws in the current system and Im all for changing it up, but all of the alternative interviews that Ive done have not gone very well.\n\nAny thoughts or experiences on these types of interviews trying to move away from algorithmic whiteboarding problems? We all know the downfalls of whiteboarding so no need to make \"whiteboarding sucks because...\" comments please.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64z80y", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 51, "report_reasons": null, "author": "idonthaveamain1", "saved": false, "mod_reports": [], "name": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "approved_by": null, "over_18": false, "domain": "self.cscareerquestions", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2sdpm", "edited": 1492014704.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/cscareerquestions/comments/64z80y/in_defense_of_whiteboarding/", "num_reports": null, "locked": false, "stickied": false, "created": 1492043225.0, "url": "https://www.reddit.com/r/cscareerquestions/comments/64z80y/in_defense_of_whiteboarding/", "author_flair_text": null, "quarantine": false, "title": "In defense of whiteboarding", "created_utc": 1492014425.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 51, "visited": false, "subreddit_type": "public", "ups": 51}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg76ef8", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "WagwanKenobi", "parent_id": "t1_dg6aspd", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "This exactly. It's not so much about the interview process as it is about the attitude of the interviewers.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This exactly. It&amp;#39;s not so much about the interview process as it is about the attitude of the interviewers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg76ef8", "score_hidden": false, "stickied": false, "created": 1492088605.0, "created_utc": 1492059805.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6aspd", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "elliotbot", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I think the differences are overstated. Shitty interviewing is shitty interviewing. \n\nI've had great whiteboard experiences as well as great case study, take-home assignment, pair programming, etc. interview experiences. \n\nI've also had terrible experiences with all of the above.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think the differences are overstated. Shitty interviewing is shitty interviewing. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve had great whiteboard experiences as well as great case study, take-home assignment, pair programming, etc. interview experiences. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve also had terrible experiences with all of the above.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6aspd", "score_hidden": false, "stickied": false, "created": 1492050169.0, "created_utc": 1492021369.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6xeqi", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Bottom_of_a_whale", "parent_id": "t1_dg6u9wk", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "That does make sense", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That does make sense&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6xeqi", "score_hidden": false, "stickied": false, "created": 1492076021.0, "created_utc": 1492047221.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6u9wk", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "wvboltslinger40k", "parent_id": "t1_dg6isra", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Well,  you see, people who want to block Trump's reptilian telepathy powers are perfectly sane. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well,  you see, people who want to block Trump&amp;#39;s reptilian telepathy powers are perfectly sane. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6u9wk", "score_hidden": false, "stickied": false, "created": 1492072226.0, "created_utc": 1492043426.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 15}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6isra", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Bottom_of_a_whale", "parent_id": "t1_dg6bbv4", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Might wanna update your prez references from Obama to Trump now", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Might wanna update your prez references from Obama to Trump now&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6isra", "score_hidden": false, "stickied": false, "created": 1492058395.0, "created_utc": 1492029595.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6bbv4", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "sign_on_the_window", "parent_id": "t1_dg65pdr", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt;General Background / Weeding Out Psychos\n\nWhen I think of psychos, I am thinking of something like:\n\n &gt;Recruiter: So have you done any personal projects?\n    \n&gt;Candidate: I create a program that sends electromagnetic signals to disrupt my brain wave. I use it to block Obama's reptilian telepathy powers. \n  \nor\n&gt; \n&gt; Recruiter: Why do you want to leave your current job?\n&gt; \n&gt; Candidate: Because my boss is a backstabbing bitch.\n\nIs that kind of stuff common? Maybe I am overthinking it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;General Background / Weeding Out Psychos&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When I think of psychos, I am thinking of something like:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Recruiter: So have you done any personal projects?&lt;/p&gt;\n\n&lt;p&gt;Candidate: I create a program that sends electromagnetic signals to disrupt my brain wave. I use it to block Obama&amp;#39;s reptilian telepathy powers. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Recruiter: Why do you want to leave your current job?&lt;/p&gt;\n\n&lt;p&gt;Candidate: Because my boss is a backstabbing bitch.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Is that kind of stuff common? Maybe I am overthinking it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6bbv4", "score_hidden": false, "stickied": false, "created": 1492050702.0, "created_utc": 1492021902.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg7aimn", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "LLJKCicero", "parent_id": "t1_dg65pdr", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Generally agree with this, but I haven't heard of any Big N/hyped unicorn companies doing multi-day on-sites as a standard practice. (it is possible at Google if your first set of interviewers were right on the fence). In fact the on-site schedule you used sounds only slightly shorter than Google's.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Generally agree with this, but I haven&amp;#39;t heard of any Big N/hyped unicorn companies doing multi-day on-sites as a standard practice. (it is possible at Google if your first set of interviewers were right on the fence). In fact the on-site schedule you used sounds only slightly shorter than Google&amp;#39;s.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7aimn", "score_hidden": false, "stickied": false, "created": 1492098279.0, "created_utc": 1492069479.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6m7it", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "chu248", "parent_id": "t1_dg65pdr", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I'd sit through a long interview with Chipotle if they agree to pay me in burritos.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d sit through a long interview with Chipotle if they agree to pay me in burritos.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6m7it", "score_hidden": false, "stickied": false, "created": 1492062265.0, "created_utc": 1492033465.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg65pdr", "gilded": 0, "archived": false, "score": 22, "report_reasons": null, "author": "brewinthevalley", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "There are very few sides to interviewing, and you've nearly named them all. Whiteboarding, word-problems, context-problems, pair programming, take-home assignments. \n\nPart of the issue with how to structure interviews is perception. Candidates judge interview difficulty not on the job requirements but on the perceived reputation of the company. \n\nFor example, I work for the State. If I had a multi-day interview process in which we asked for some of each interview type (whiteboard, pair programming, take home assignment), I would have an extremely small applicant pool. Why? Because echo chambers dictate that candidates should not \"waste time\" on difficult or complex interview processes for (relatively) average paychecks at no-name companies. Google? Sure, expect a multi-day interview with very complex scenarios. Dev Ops for an uknown third-party vendor supporting server-side infrastructure for Chipotle? 1 hour, max, or it's a waste.\n\nOkay then, so in order to widen the pool, I have broader requirements and two-part interviews. Phone screens and onsites. The phone screens consist of:\n\n* Technical Questions\n\n* Proving Resume Claims\n\n* General Background / Weeding Out Psychos\n\nOnsites are scheduled and consist of:\n\n* Whiteboard or Code Review, interviewers choice\n\n* 1 hour live code. Can be contextual question, pair programming, or small complete program. Interviewees choice, open internet.\n\n* 1 hour meet the team. Can consist of more code questions, code review, context questions.\n\n* 1 hour meet with me. More code review, general interview questions, and time for the candidate to ask questions.\n\nThis is as good as I could get it, and seems to work okay. What I try to do is mutual respect. I don't want to waste the candidates time by placing them in only one situation. If they suck at whiteboarding and I force them to white board, that isn't fair and it wastes my time.\n\nOverall, and I get that this is probably Manager Speak, but I think expectations need to relax. I've said it before, but the vast majority of you (and I say you as in the wider, \"new grad\" you) will not work at Big 5 companies. Let's say arbitrarily it's 3%.\n\nSlightly more of you will work at fancy ass startups or Big 100 companies. Let's say 17%. \n\nThis leaves 80% of you to work for average pay at companies you've never heard of. I don't mean you should lower your expectations, but you should definitely relax them. If candidates would allow themselves longer or larger interviews for any job, not just top-tier jobs, quick and dirty whiteboarding would probably fade into a more general process.\n\nAs long as candidates are unwilling to subject themselves to bigger processes due to pay or prestige, hiring teams will need to demand the easiest and quickest routes to judge them.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are very few sides to interviewing, and you&amp;#39;ve nearly named them all. Whiteboarding, word-problems, context-problems, pair programming, take-home assignments. &lt;/p&gt;\n\n&lt;p&gt;Part of the issue with how to structure interviews is perception. Candidates judge interview difficulty not on the job requirements but on the perceived reputation of the company. &lt;/p&gt;\n\n&lt;p&gt;For example, I work for the State. If I had a multi-day interview process in which we asked for some of each interview type (whiteboard, pair programming, take home assignment), I would have an extremely small applicant pool. Why? Because echo chambers dictate that candidates should not &amp;quot;waste time&amp;quot; on difficult or complex interview processes for (relatively) average paychecks at no-name companies. Google? Sure, expect a multi-day interview with very complex scenarios. Dev Ops for an uknown third-party vendor supporting server-side infrastructure for Chipotle? 1 hour, max, or it&amp;#39;s a waste.&lt;/p&gt;\n\n&lt;p&gt;Okay then, so in order to widen the pool, I have broader requirements and two-part interviews. Phone screens and onsites. The phone screens consist of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Technical Questions&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Proving Resume Claims&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;General Background / Weeding Out Psychos&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Onsites are scheduled and consist of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Whiteboard or Code Review, interviewers choice&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 hour live code. Can be contextual question, pair programming, or small complete program. Interviewees choice, open internet.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 hour meet the team. Can consist of more code questions, code review, context questions.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;1 hour meet with me. More code review, general interview questions, and time for the candidate to ask questions.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This is as good as I could get it, and seems to work okay. What I try to do is mutual respect. I don&amp;#39;t want to waste the candidates time by placing them in only one situation. If they suck at whiteboarding and I force them to white board, that isn&amp;#39;t fair and it wastes my time.&lt;/p&gt;\n\n&lt;p&gt;Overall, and I get that this is probably Manager Speak, but I think expectations need to relax. I&amp;#39;ve said it before, but the vast majority of you (and I say you as in the wider, &amp;quot;new grad&amp;quot; you) will not work at Big 5 companies. Let&amp;#39;s say arbitrarily it&amp;#39;s 3%.&lt;/p&gt;\n\n&lt;p&gt;Slightly more of you will work at fancy ass startups or Big 100 companies. Let&amp;#39;s say 17%. &lt;/p&gt;\n\n&lt;p&gt;This leaves 80% of you to work for average pay at companies you&amp;#39;ve never heard of. I don&amp;#39;t mean you should lower your expectations, but you should definitely relax them. If candidates would allow themselves longer or larger interviews for any job, not just top-tier jobs, quick and dirty whiteboarding would probably fade into a more general process.&lt;/p&gt;\n\n&lt;p&gt;As long as candidates are unwilling to subject themselves to bigger processes due to pay or prestige, hiring teams will need to demand the easiest and quickest routes to judge them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg65pdr", "score_hidden": false, "stickied": false, "created": 1492045001.0, "created_utc": 1492016201.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 22}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6qe5w", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "JakeLifts", "parent_id": "t1_dg69zzi", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "If you think about they are about the same. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you think about they are about the same. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6qe5w", "score_hidden": false, "stickied": false, "created": 1492067440.0, "created_utc": 1492038640.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg69zzi", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "Kiony", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "For a second there, I thought the title said \"In defense of waterboarding...\". Wouldv been a different thread entirely.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For a second there, I thought the title said &amp;quot;In defense of waterboarding...&amp;quot;. Wouldv been a different thread entirely.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg69zzi", "score_hidden": false, "stickied": false, "created": 1492049344.0, "created_utc": 1492020544.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6prpm", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "druphoria", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "The only reason whiteboarding is dominant is because, as you stated, everything else sucks even more. Take-home assignments and resumes/references can be easily gamed (what's to stop you from just getting someone else to do a coding challenge for you and then having them explain it to you?) Pair programming on real work is time consuming, full of NDA-related troubles, and equally worthless since the type of work you do day-to-day often varies in difficulty.\n\nWhiteboarding also sucks, but it at least (sort of) tells you something about the persons general reasoning ability. As for the folks who grind the hell out of leetcode and memorize solutions, their success at an interview at least potentially indicates that they were hard working enough to memorize a bunch of solutions.\n\nThe issue with whiteboarding is that trying to solve a problem on a big board with a marker while some fucker is breathing down your neck and nagging you to \"verbalize your thought process\" can kind of screw with your head and prevent you from being in the mental state that you're normally in when you solve problems. Not to mention there's a ton of luck involved, it doesn't actually test skills you'll be using on the job, etc etc.\n\nHonestly I think past work experience, strong peer endorsements, and high quality personal projects are better indicators of performance than the ability to stumble through a bunch of potentially-memorized puzzles while trying not to shit your pants. But in a lot of cases those things are absent, so all you can really do is ask some really hard questions and hope the people who make it through also happen to be smart and good at making software .", "edited": 1492038276.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The only reason whiteboarding is dominant is because, as you stated, everything else sucks even more. Take-home assignments and resumes/references can be easily gamed (what&amp;#39;s to stop you from just getting someone else to do a coding challenge for you and then having them explain it to you?) Pair programming on real work is time consuming, full of NDA-related troubles, and equally worthless since the type of work you do day-to-day often varies in difficulty.&lt;/p&gt;\n\n&lt;p&gt;Whiteboarding also sucks, but it at least (sort of) tells you something about the persons general reasoning ability. As for the folks who grind the hell out of leetcode and memorize solutions, their success at an interview at least potentially indicates that they were hard working enough to memorize a bunch of solutions.&lt;/p&gt;\n\n&lt;p&gt;The issue with whiteboarding is that trying to solve a problem on a big board with a marker while some fucker is breathing down your neck and nagging you to &amp;quot;verbalize your thought process&amp;quot; can kind of screw with your head and prevent you from being in the mental state that you&amp;#39;re normally in when you solve problems. Not to mention there&amp;#39;s a ton of luck involved, it doesn&amp;#39;t actually test skills you&amp;#39;ll be using on the job, etc etc.&lt;/p&gt;\n\n&lt;p&gt;Honestly I think past work experience, strong peer endorsements, and high quality personal projects are better indicators of performance than the ability to stumble through a bunch of potentially-memorized puzzles while trying not to shit your pants. But in a lot of cases those things are absent, so all you can really do is ask some really hard questions and hope the people who make it through also happen to be smart and good at making software .&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6prpm", "score_hidden": false, "stickied": false, "created": 1492066649.0, "created_utc": 1492037849.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg66pgs", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "claylol-", "parent_id": "t1_dg66nuu", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt;Also, there's nothing wrong with memorization. It's memorization without understanding that becomes the issue.\n\nHit the nail on the head fam.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Also, there&amp;#39;s nothing wrong with memorization. It&amp;#39;s memorization without understanding that becomes the issue.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hit the nail on the head fam.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg66pgs", "score_hidden": false, "stickied": false, "created": 1492046021.0, "created_utc": 1492017221.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg66nuu", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "sandwhale-", "parent_id": "t1_dg65l6n", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Well... the interviewers should be tweaking the problems as well as giving follow-up, alternative angles to the problem to see if the candidate can adjust and improvise on the fly; it quickly eliminates people who just hard-memorize problems without understanding it.\n\nAlso, there's nothing wrong with memorization. It's memorization without understanding that becomes the issue.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well... the interviewers should be tweaking the problems as well as giving follow-up, alternative angles to the problem to see if the candidate can adjust and improvise on the fly; it quickly eliminates people who just hard-memorize problems without understanding it.&lt;/p&gt;\n\n&lt;p&gt;Also, there&amp;#39;s nothing wrong with memorization. It&amp;#39;s memorization without understanding that becomes the issue.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg66nuu", "score_hidden": false, "stickied": false, "created": 1492045975.0, "created_utc": 1492017175.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6oabq", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "slbaaron", "parent_id": "t1_dg6acgj", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "As far as my personal experience go that only \"might\" work for Amazon and a few - sometimes. Most put heavy emphasis on communication and ability to fully explain thought process &amp; reasoning on top of a working solution (that's the bare minimum). Usually has to discuss alternative approaches with different advantages. Imagine teaching the interviewer, or actively defending your code (when appropriate) rather than explaining. It's still a specific skill you have to hone for sake of interview, but it's not just memorizing solutions.\n\nI completed my code quite slowly and not the best quality for Google and passed - but of course, it is fully working, optimized code. The feedback is I was constantly talking and trying stuffs when I was stuck so it was easy for the interviewer to understand exactly what I was missing or help me out. I know quite a few people who solved leetcode hard questions in a heartbeat, who still failed to get in Google. \n\nFor internships, almost everyone knows facebook's set. It's not a huge set like Google and while some throw a curveball once in a while, out of 6 people interviewed with FB I know of, we've all gotten common FB questions we've done before. Only 2 passed during / before summer 2015 when they still had a well known lowered bar for expansion. Not me though, none of us after 2016. If only memorization works. Tbf I had a particularly bad day for FB. \n\nMicrosoft is similar in my experience to Google, but slightly more lax when it comes to code quality and q difficulty. Still heavily focuses on communication, reasoning, and optimizations (usually for different goals). Some are so easy, literally find dup or fib, doesn't mean everyone passes.\n\nWith all that said, drilling all the question sets brainlessly is a very consistent way to pass some interviews, but it is by far not the most efficient. I know people who simply complete hundreds of LC questions *multiple times* and land a job. But I also know people who've barely done any LC, glanced through CTCI and practiced with friends once in a while and landed more big offers. If you want to \"game\" the system you can, but if you excell on what the system is designed for, you will do better with less time / effort wasted. \n\nI'm not trying to make the argument this process chooses the best candidate. As always, it's a process to avoid false positives over false negatives. I too prefer this much over the current alternatives.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As far as my personal experience go that only &amp;quot;might&amp;quot; work for Amazon and a few - sometimes. Most put heavy emphasis on communication and ability to fully explain thought process &amp;amp; reasoning on top of a working solution (that&amp;#39;s the bare minimum). Usually has to discuss alternative approaches with different advantages. Imagine teaching the interviewer, or actively defending your code (when appropriate) rather than explaining. It&amp;#39;s still a specific skill you have to hone for sake of interview, but it&amp;#39;s not just memorizing solutions.&lt;/p&gt;\n\n&lt;p&gt;I completed my code quite slowly and not the best quality for Google and passed - but of course, it is fully working, optimized code. The feedback is I was constantly talking and trying stuffs when I was stuck so it was easy for the interviewer to understand exactly what I was missing or help me out. I know quite a few people who solved leetcode hard questions in a heartbeat, who still failed to get in Google. &lt;/p&gt;\n\n&lt;p&gt;For internships, almost everyone knows facebook&amp;#39;s set. It&amp;#39;s not a huge set like Google and while some throw a curveball once in a while, out of 6 people interviewed with FB I know of, we&amp;#39;ve all gotten common FB questions we&amp;#39;ve done before. Only 2 passed during / before summer 2015 when they still had a well known lowered bar for expansion. Not me though, none of us after 2016. If only memorization works. Tbf I had a particularly bad day for FB. &lt;/p&gt;\n\n&lt;p&gt;Microsoft is similar in my experience to Google, but slightly more lax when it comes to code quality and q difficulty. Still heavily focuses on communication, reasoning, and optimizations (usually for different goals). Some are so easy, literally find dup or fib, doesn&amp;#39;t mean everyone passes.&lt;/p&gt;\n\n&lt;p&gt;With all that said, drilling all the question sets brainlessly is a very consistent way to pass some interviews, but it is by far not the most efficient. I know people who simply complete hundreds of LC questions &lt;em&gt;multiple times&lt;/em&gt; and land a job. But I also know people who&amp;#39;ve barely done any LC, glanced through CTCI and practiced with friends once in a while and landed more big offers. If you want to &amp;quot;game&amp;quot; the system you can, but if you excell on what the system is designed for, you will do better with less time / effort wasted. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not trying to make the argument this process chooses the best candidate. As always, it&amp;#39;s a process to avoid false positives over false negatives. I too prefer this much over the current alternatives.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6oabq", "score_hidden": false, "stickied": false, "created": 1492064828.0, "created_utc": 1492036028.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6acgj", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "IAmDumbQuestionAsker", "parent_id": "t1_dg69zbz", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Drilling SAT tests over and over again does reinforce knowledge of algebra and English grammar rules, too. I'm sure memorizing algorithms does teach you something about the concepts behind creating those algos.\n\nI'm just commenting on how it sounds like the way to get better at interviews is to treat them like college entrance exams, and if necessary, invest in teaching resources. So like with the SATs, candidates with time and money to spend will get further, maybe even get jobs at Big 4 companies. Because it's not about what you can build, it's about how well you perform on an exam that's supposed to measure your innate ability, but not difficult to game if you prepare adequately.\n\nI don't know how it's with other industries but it's almost like tech has replicated the college entrance experience.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Drilling SAT tests over and over again does reinforce knowledge of algebra and English grammar rules, too. I&amp;#39;m sure memorizing algorithms does teach you something about the concepts behind creating those algos.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m just commenting on how it sounds like the way to get better at interviews is to treat them like college entrance exams, and if necessary, invest in teaching resources. So like with the SATs, candidates with time and money to spend will get further, maybe even get jobs at Big 4 companies. Because it&amp;#39;s not about what you can build, it&amp;#39;s about how well you perform on an exam that&amp;#39;s supposed to measure your innate ability, but not difficult to game if you prepare adequately.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t know how it&amp;#39;s with other industries but it&amp;#39;s almost like tech has replicated the college entrance experience.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6acgj", "score_hidden": false, "stickied": false, "created": 1492049699.0, "created_utc": 1492020899.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg69zbz", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "idonthaveamain1", "parent_id": "t1_dg68zzq", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I cant tell if you're being condescending. Studying and doing leetcode type algorithm problems is not about memorizing. Its about understanding key concepts/techniques and applying them to similiar problems. If your goal is to memorize, have fun reading CtCI and doing leetcode everytime you have an interview because you forgot the solution to leetcode problem number X.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I cant tell if you&amp;#39;re being condescending. Studying and doing leetcode type algorithm problems is not about memorizing. Its about understanding key concepts/techniques and applying them to similiar problems. If your goal is to memorize, have fun reading CtCI and doing leetcode everytime you have an interview because you forgot the solution to leetcode problem number X.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg69zbz", "score_hidden": false, "stickied": false, "created": 1492049325.0, "created_utc": 1492020525.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg68zzq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "IAmDumbQuestionAsker", "parent_id": "t1_dg66pcj", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Hm, maybe I should shell out for a tutor or a Interview course. Good to get some help in memorization.\n\nIf the way to beat tech interviews is to cram for them like you do for standardized tests, then that's the way the game should be played.", "edited": 1492020558.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hm, maybe I should shell out for a tutor or a Interview course. Good to get some help in memorization.&lt;/p&gt;\n\n&lt;p&gt;If the way to beat tech interviews is to cram for them like you do for standardized tests, then that&amp;#39;s the way the game should be played.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg68zzq", "score_hidden": false, "stickied": false, "created": 1492048316.0, "created_utc": 1492019516.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg66pcj", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "idonthaveamain1", "parent_id": "t1_dg65l6n", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Ive had both experiences of \"Tell me your thought proccess, its okay to not have a working, compiled solution\" (as long as theres some code to show you know what youre doing) and \"Give me a working, compiled solution or shut up\". \n\nIf you have a person who has studied and remembered solutions, why not take him over someone who hasnt studied and remembered solutions? If you know nothing besides the fact that one person put in work to study while another one didnt then the choice is clear. We are back at the \"whiteboarding sucks\" argument with no solution for exactly how to test candidates in 1 hour interviews.\n\nIn an ideal world, we should have better ways to gauge a candidate's ability to do something. However, we are in a world where people can only gauge candidates on a very small, specific area to make a decision about the person entirely due to time and money limitations.\n\nI also have to note that I studied for interviews and its made me a better software engineer. I'm better at recursion, dfs, bfs, dp, binary trees, and system design to name a few. These are things that you might not get to work with often at work but you should know them anyways. Studying gave me a chance to go over these less common topics.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ive had both experiences of &amp;quot;Tell me your thought proccess, its okay to not have a working, compiled solution&amp;quot; (as long as theres some code to show you know what youre doing) and &amp;quot;Give me a working, compiled solution or shut up&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;If you have a person who has studied and remembered solutions, why not take him over someone who hasnt studied and remembered solutions? If you know nothing besides the fact that one person put in work to study while another one didnt then the choice is clear. We are back at the &amp;quot;whiteboarding sucks&amp;quot; argument with no solution for exactly how to test candidates in 1 hour interviews.&lt;/p&gt;\n\n&lt;p&gt;In an ideal world, we should have better ways to gauge a candidate&amp;#39;s ability to do something. However, we are in a world where people can only gauge candidates on a very small, specific area to make a decision about the person entirely due to time and money limitations.&lt;/p&gt;\n\n&lt;p&gt;I also have to note that I studied for interviews and its made me a better software engineer. I&amp;#39;m better at recursion, dfs, bfs, dp, binary trees, and system design to name a few. These are things that you might not get to work with often at work but you should know them anyways. Studying gave me a chance to go over these less common topics.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg66pcj", "score_hidden": false, "stickied": false, "created": 1492046018.0, "created_utc": 1492017218.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg66cpf", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "claylol-", "parent_id": "t1_dg65l6n", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I do agree with you on that point but I also think it's kind of lazy if the interviewer just chooses a problem that everyone has seen, like off of a leetcode/hacker rank type site. That or they ask the same problem but add a miniscule change to the problem just so it won't be a verbatim copy. I think asking more original problems would better instead of just asking a problem that everyone is bound to see frequently. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I do agree with you on that point but I also think it&amp;#39;s kind of lazy if the interviewer just chooses a problem that everyone has seen, like off of a leetcode/hacker rank type site. That or they ask the same problem but add a miniscule change to the problem just so it won&amp;#39;t be a verbatim copy. I think asking more original problems would better instead of just asking a problem that everyone is bound to see frequently. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg66cpf", "score_hidden": false, "stickied": false, "created": 1492045660.0, "created_utc": 1492016860.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6nkt2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "choikwa", "parent_id": "t1_dg65l6n", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "hm.. Isn't interviewing itself a pretty undecidably hard problem? memoization is definitely a technique that is useful.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;hm.. Isn&amp;#39;t interviewing itself a pretty undecidably hard problem? memoization is definitely a technique that is useful.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6nkt2", "score_hidden": false, "stickied": false, "created": 1492063939.0, "created_utc": 1492035139.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg65l6n", "gilded": 0, "archived": false, "score": 44, "report_reasons": null, "author": "TinKnightRisesAgain", "parent_id": "t1_dg64xur", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "In an ideal world, you'd be right.\n\nBut I've done numerous white-boarding interviews, and no one gives a shit about \"your thought process\". It's all about who can solve it quickest, and memorization is the best strategy for that. Until interviewers stop giving points to people who can pretend like they've never seen a problem before, white-boarding is always going to suck.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In an ideal world, you&amp;#39;d be right.&lt;/p&gt;\n\n&lt;p&gt;But I&amp;#39;ve done numerous white-boarding interviews, and no one gives a shit about &amp;quot;your thought process&amp;quot;. It&amp;#39;s all about who can solve it quickest, and memorization is the best strategy for that. Until interviewers stop giving points to people who can pretend like they&amp;#39;ve never seen a problem before, white-boarding is always going to suck.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg65l6n", "score_hidden": false, "stickied": false, "created": 1492044880.0, "created_utc": 1492016080.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 44}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg683uw", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "idonthaveamain1", "parent_id": "t1_dg66hzu", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Thanks for addressing the my point with alternative solutions. That was mainly what I was getting at because we've all discussed whiteboarding to death here. \n\nI think the alternative solutions mentioned could work, but companies are trying to do them with the time constraints of regular 1 hour interviews. I dont think pair programming would be so flawed if it was done onsite so you have more time and if the interviewers narrowed the problems scope down to not having to deal with a large portion of the codebase or think to heavily about how \"everything fits together\".  For example, I use to work on services and in general, they were pretty much all the same format. Interviewers could do something like, \"heres an existing service in production, lets try to make a new service\". This will show how candidates tackle the codebase as if they were hired. For good candidates, they'd probably try and find key areas where the necessary changes need to be made and ignore the \"copy paste\" portions of code. For example, we use springs dependecy injection to create our database object. No need to focus on spring or dependency injection or any of that, just copy paste it to connect with the database like how every other service in the codebase does it. Again, this takes more time and interviewers need to be there fully engaged to support because working with new codebases is still very difficult.\n\nI think the idea is that if you want to try an alternative method, dont just try and cram it into the existing whiteboarding process. Moving away from whiteboarding will likely cost more money, time, and interviewers will need to learn how to not just ask a leetcode problem.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for addressing the my point with alternative solutions. That was mainly what I was getting at because we&amp;#39;ve all discussed whiteboarding to death here. &lt;/p&gt;\n\n&lt;p&gt;I think the alternative solutions mentioned could work, but companies are trying to do them with the time constraints of regular 1 hour interviews. I dont think pair programming would be so flawed if it was done onsite so you have more time and if the interviewers narrowed the problems scope down to not having to deal with a large portion of the codebase or think to heavily about how &amp;quot;everything fits together&amp;quot;.  For example, I use to work on services and in general, they were pretty much all the same format. Interviewers could do something like, &amp;quot;heres an existing service in production, lets try to make a new service&amp;quot;. This will show how candidates tackle the codebase as if they were hired. For good candidates, they&amp;#39;d probably try and find key areas where the necessary changes need to be made and ignore the &amp;quot;copy paste&amp;quot; portions of code. For example, we use springs dependecy injection to create our database object. No need to focus on spring or dependency injection or any of that, just copy paste it to connect with the database like how every other service in the codebase does it. Again, this takes more time and interviewers need to be there fully engaged to support because working with new codebases is still very difficult.&lt;/p&gt;\n\n&lt;p&gt;I think the idea is that if you want to try an alternative method, dont just try and cram it into the existing whiteboarding process. Moving away from whiteboarding will likely cost more money, time, and interviewers will need to learn how to not just ask a leetcode problem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg683uw", "score_hidden": false, "stickied": false, "created": 1492047424.0, "created_utc": 1492018624.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg66hzu", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "sandwhale-", "parent_id": "t1_dg64xur", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt;I feel like a lot of people who bash the whiteboarding process are just salty because they got a problem that wasn't a \"leetcode medium\" or wasn't one of the \"hard\" ones that they studied for. At that point you're just memorizing solutions, not actually solving stuff. Whiteboarding isn't perfect and it never will be, but it's the best thing we have to find out who knows their stuff and who just memorized \"leetcode mediums.\"\n\nI have similar thoughts; many people I know who despise whiteboard interviews tend to perform very poorly on them. \n\nPeople have to understand that interviewers are focused on finding strong candidates as well as **minimizing false positives**. A False Positive hire is someone the company thought was good... but turns out that the developer is complete shit. On the other hand, a False Negative is a candidate who the company decided was not a strong hire and rejected him/her - but the candidate is actually very strong. \n\nCompanies are MUCH more willing to reject a False Negative than accidentally hire a False Positive; a False Negative can simply reapply again and perhaps the next time they'll perform much better and get the job. Besides, a False Negative will probably have a good chance of getting a job offer at another, equally competitive company.\n\nAs mentioned by OP, the alternative interviewing methods have more glaring flaws IMO:  \n\nPair-programming interview doesn't work well unless the candidate has had ample time to learn the code base. Expecting someone who's never seen the code base to contribute anything meaningful in the 1-hour pair-programming interview is insane. \n\nTake-home projects are, in terms of bang per buck, less efficient for most candidates. There's no 'pressure' to perform on the spot, but in exchange you'll have potentially more work to do overall that doesn't transfer into anything else and you also get a different kind of pressure: the pressure to perform at X-level given that you had Y-hours to finish the problem. Also from the interviewer's perspective, it's a logistical nightmare. What's to prevent the candidate from leaking the problem and solution online?\n\nSure, people leak whiteboard problems all the time - but tweaking a whiteboard problem is much much easier than trying to tweak a larger take-home assignment. \n\nAs far as I could tell, although whiteboard interviews is imperfect - it's still the best way to weed out False Positives while also simultaneously analyzing the candidate's problem solving skills.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I feel like a lot of people who bash the whiteboarding process are just salty because they got a problem that wasn&amp;#39;t a &amp;quot;leetcode medium&amp;quot; or wasn&amp;#39;t one of the &amp;quot;hard&amp;quot; ones that they studied for. At that point you&amp;#39;re just memorizing solutions, not actually solving stuff. Whiteboarding isn&amp;#39;t perfect and it never will be, but it&amp;#39;s the best thing we have to find out who knows their stuff and who just memorized &amp;quot;leetcode mediums.&amp;quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I have similar thoughts; many people I know who despise whiteboard interviews tend to perform very poorly on them. &lt;/p&gt;\n\n&lt;p&gt;People have to understand that interviewers are focused on finding strong candidates as well as &lt;strong&gt;minimizing false positives&lt;/strong&gt;. A False Positive hire is someone the company thought was good... but turns out that the developer is complete shit. On the other hand, a False Negative is a candidate who the company decided was not a strong hire and rejected him/her - but the candidate is actually very strong. &lt;/p&gt;\n\n&lt;p&gt;Companies are MUCH more willing to reject a False Negative than accidentally hire a False Positive; a False Negative can simply reapply again and perhaps the next time they&amp;#39;ll perform much better and get the job. Besides, a False Negative will probably have a good chance of getting a job offer at another, equally competitive company.&lt;/p&gt;\n\n&lt;p&gt;As mentioned by OP, the alternative interviewing methods have more glaring flaws IMO:  &lt;/p&gt;\n\n&lt;p&gt;Pair-programming interview doesn&amp;#39;t work well unless the candidate has had ample time to learn the code base. Expecting someone who&amp;#39;s never seen the code base to contribute anything meaningful in the 1-hour pair-programming interview is insane. &lt;/p&gt;\n\n&lt;p&gt;Take-home projects are, in terms of bang per buck, less efficient for most candidates. There&amp;#39;s no &amp;#39;pressure&amp;#39; to perform on the spot, but in exchange you&amp;#39;ll have potentially more work to do overall that doesn&amp;#39;t transfer into anything else and you also get a different kind of pressure: the pressure to perform at X-level given that you had Y-hours to finish the problem. Also from the interviewer&amp;#39;s perspective, it&amp;#39;s a logistical nightmare. What&amp;#39;s to prevent the candidate from leaking the problem and solution online?&lt;/p&gt;\n\n&lt;p&gt;Sure, people leak whiteboard problems all the time - but tweaking a whiteboard problem is much much easier than trying to tweak a larger take-home assignment. &lt;/p&gt;\n\n&lt;p&gt;As far as I could tell, although whiteboard interviews is imperfect - it&amp;#39;s still the best way to weed out False Positives while also simultaneously analyzing the candidate&amp;#39;s problem solving skills.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg66hzu", "score_hidden": false, "stickied": false, "created": 1492045811.0, "created_utc": 1492017011.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6mdjd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "istareatscreens", "parent_id": "t1_dg64xur", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Never had a whiteboard interview. Do you get a chance to think about the problem and internalize it , or do you have people pecking at you asking to explain your thoughts constantly. If it is the latter, I'd suggest this method could be very flawed for many candidates.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Never had a whiteboard interview. Do you get a chance to think about the problem and internalize it , or do you have people pecking at you asking to explain your thoughts constantly. If it is the latter, I&amp;#39;d suggest this method could be very flawed for many candidates.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6mdjd", "score_hidden": false, "stickied": false, "created": 1492062465.0, "created_utc": 1492033665.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg64xur", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "claylol-", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I feel like there's just certain things you should know as a software engineer. Like basic data structures and algs should just be second nature, by basic I mean everything that you can find in an undergraduate textbook. Second, you should know how to spot patterns in a problem and apply what you already know. Once you solve enough problems, you find out that it's really not that hard. Now if the interviewer is applying some weird constraint to the problem then I could see where knowing more advanced data structures/algs would be helpful, but that doesn't happen as often as you would think.\n\nI feel like a lot of people who bash the whiteboarding process are just salty because they got a problem that wasn't a \"leetcode medium\" or wasn't one of the \"hard\" ones that they studied for. At that point you're just memorizing solutions, not actually solving stuff. Whiteboarding isn't perfect and it never will be, but it's the best thing we have to find out who knows their stuff and who just memorized \"leetcode mediums.\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like there&amp;#39;s just certain things you should know as a software engineer. Like basic data structures and algs should just be second nature, by basic I mean everything that you can find in an undergraduate textbook. Second, you should know how to spot patterns in a problem and apply what you already know. Once you solve enough problems, you find out that it&amp;#39;s really not that hard. Now if the interviewer is applying some weird constraint to the problem then I could see where knowing more advanced data structures/algs would be helpful, but that doesn&amp;#39;t happen as often as you would think.&lt;/p&gt;\n\n&lt;p&gt;I feel like a lot of people who bash the whiteboarding process are just salty because they got a problem that wasn&amp;#39;t a &amp;quot;leetcode medium&amp;quot; or wasn&amp;#39;t one of the &amp;quot;hard&amp;quot; ones that they studied for. At that point you&amp;#39;re just memorizing solutions, not actually solving stuff. Whiteboarding isn&amp;#39;t perfect and it never will be, but it&amp;#39;s the best thing we have to find out who knows their stuff and who just memorized &amp;quot;leetcode mediums.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg64xur", "score_hidden": false, "stickied": false, "created": 1492044203.0, "created_utc": 1492015403.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg76hvw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "WagwanKenobi", "parent_id": "t1_dg6g8l5", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Knowledge of data structures and algorithms is still extremely important for the job, though. Programming isn't just about knowing the syntax. If you ever look through a large, quality open-source Java codebase, you'll see Collections data structures basically everywhere.\n\nIn fact, arguably, syntax is the easiest part.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Knowledge of data structures and algorithms is still extremely important for the job, though. Programming isn&amp;#39;t just about knowing the syntax. If you ever look through a large, quality open-source Java codebase, you&amp;#39;ll see Collections data structures basically everywhere.&lt;/p&gt;\n\n&lt;p&gt;In fact, arguably, syntax is the easiest part.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg76hvw", "score_hidden": false, "stickied": false, "created": 1492088766.0, "created_utc": 1492059966.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6g8l5", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "yuga_d", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "One thing not mentioned anywhere in this thread is asking questions about the specific work you will be doing. \n\nSomeone mentioned that the vast majority of devs will work outside Big N and the other handful of prestigious companies. For those positions, doesn't it make sense to just interview candidates based on the tech stack?\n\nIf it's a Java position, just ask Java questions, and ask the kind of questions that aren't just pure memorization. Have the candidate explain their understanding of Java, etc. This makes the most sense to me since you are evaluating the candidate based on the work they're going to be doing.\n\nThen throw in some simple coding problems ranging anywhere from FizzBuzz to some simple algorithms to make sure they don't write nested for loops for a one time pass.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One thing not mentioned anywhere in this thread is asking questions about the specific work you will be doing. &lt;/p&gt;\n\n&lt;p&gt;Someone mentioned that the vast majority of devs will work outside Big N and the other handful of prestigious companies. For those positions, doesn&amp;#39;t it make sense to just interview candidates based on the tech stack?&lt;/p&gt;\n\n&lt;p&gt;If it&amp;#39;s a Java position, just ask Java questions, and ask the kind of questions that aren&amp;#39;t just pure memorization. Have the candidate explain their understanding of Java, etc. This makes the most sense to me since you are evaluating the candidate based on the work they&amp;#39;re going to be doing.&lt;/p&gt;\n\n&lt;p&gt;Then throw in some simple coding problems ranging anywhere from FizzBuzz to some simple algorithms to make sure they don&amp;#39;t write nested for loops for a one time pass.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6g8l5", "score_hidden": false, "stickied": false, "created": 1492055752.0, "created_utc": 1492026952.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6noal", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "wish_theyd_done_it", "parent_id": "t1_dg6iu8q", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "This is absolutely true.  The biggest flaw in all technical interview processes that I've seen is the complete disregard for the *human* being interviewed. \n\nYou can have white boards, and puzzles, and pair programming, and any other clever technique one can think of, but if you can't connect with the human you're interviewing then you absolutely can't assess that person's real skill.  \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is absolutely true.  The biggest flaw in all technical interview processes that I&amp;#39;ve seen is the complete disregard for the &lt;em&gt;human&lt;/em&gt; being interviewed. &lt;/p&gt;\n\n&lt;p&gt;You can have white boards, and puzzles, and pair programming, and any other clever technique one can think of, but if you can&amp;#39;t connect with the human you&amp;#39;re interviewing then you absolutely can&amp;#39;t assess that person&amp;#39;s real skill.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6noal", "score_hidden": false, "stickied": false, "created": 1492064064.0, "created_utc": 1492035264.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg7ipqe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg73m4y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "So google has internal research that hasn't been publicly scrutinized? Aka no peer review? Thanks but no thanks, also, I have in my filing cabinet research that suggests the opposite, but I'm not going to show it, because it's a super secret!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So google has internal research that hasn&amp;#39;t been publicly scrutinized? Aka no peer review? Thanks but no thanks, also, I have in my filing cabinet research that suggests the opposite, but I&amp;#39;m not going to show it, because it&amp;#39;s a super secret!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7ipqe", "score_hidden": false, "stickied": false, "created": 1492118020.0, "created_utc": 1492089220.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg73m4y", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "suavenegotiator69", "parent_id": "t1_dg70ci5", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Well your assumption is that all these companies are wrong. And btw at Google there actually is internal research, for a variety of reasons very little of it has been publicly disclosed. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well your assumption is that all these companies are wrong. And btw at Google there actually is internal research, for a variety of reasons very little of it has been publicly disclosed. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg73m4y", "score_hidden": false, "stickied": false, "created": 1492084165.0, "created_utc": 1492055365.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg7imbp", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg76fao", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "You've jumped the gun, there is not even data that suggests there is correlation with whiteboarding being a useful tool. I can point out that, in addition to the top software companies doing this, also too do the small web Dev shops, financial firms, and everything in between do it. There is no data to suggest it's more helpful than having your interviewees sing \"I'm a little teapot\" successfully in their interview. Because something is simply being done does not make it effective, it just makes it popular.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;ve jumped the gun, there is not even data that suggests there is correlation with whiteboarding being a useful tool. I can point out that, in addition to the top software companies doing this, also too do the small web Dev shops, financial firms, and everything in between do it. There is no data to suggest it&amp;#39;s more helpful than having your interviewees sing &amp;quot;I&amp;#39;m a little teapot&amp;quot; successfully in their interview. Because something is simply being done does not make it effective, it just makes it popular.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7imbp", "score_hidden": false, "stickied": false, "created": 1492117883.0, "created_utc": 1492089083.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg76fao", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "unconventionalcsguy", "parent_id": "t1_dg70ci5", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I haven't seen any such studies, but if you look at all of the most successful large tech companies *and* all of the highest valuation startups, they all use whiteboard interviews. Obviously, this isn't causal, only correlative, but as Randall Munroe says \"Correlation doesn't imply causation, but it does waggle its eyebrows suggestively and gesture furtively while mouthing 'look over there'.\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I haven&amp;#39;t seen any such studies, but if you look at all of the most successful large tech companies &lt;em&gt;and&lt;/em&gt; all of the highest valuation startups, they all use whiteboard interviews. Obviously, this isn&amp;#39;t causal, only correlative, but as Randall Munroe says &amp;quot;Correlation doesn&amp;#39;t imply causation, but it does waggle its eyebrows suggestively and gesture furtively while mouthing &amp;#39;look over there&amp;#39;.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg76fao", "score_hidden": false, "stickied": false, "created": 1492088643.0, "created_utc": 1492059843.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg7xn7s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg7s99f", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I think we are basically on the same page. \n\nMy only argument is that I don't think that whiteboarding is necessarily the best way to get at the information you need to make an informed decision. It is just the way a few, very prestigious companies chose to go about it. They are able to do this because their applicant pools will always be overfilled. For most companies though, whiteboarding most very likely (untested) removes talented, capable engineers from their selection process. We shouldn't be, \"In defense of whiteboarding\", we should be trying to understand the implications of it before plowing forward. It is indefensible because we don't know anything about it, objectively, aside from it being widely practiced across the industry.\n\nLike everything, YMMV with whiteboarding. It is entirely how the company implements it as a practice in interviewing, but again, what mileage are you actually getting out of it? We just don't know.\n\nI would put forth my personal opinions on how I think interviews should work, but they are as equally as unfounded as whiteboarding. I am simply pushing back against the culture of whiteboarding as \"the only way to effectively evaluate engineers\". There just is no real data on it's efficacy, and many pretend there is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think we are basically on the same page. &lt;/p&gt;\n\n&lt;p&gt;My only argument is that I don&amp;#39;t think that whiteboarding is necessarily the best way to get at the information you need to make an informed decision. It is just the way a few, very prestigious companies chose to go about it. They are able to do this because their applicant pools will always be overfilled. For most companies though, whiteboarding most very likely (untested) removes talented, capable engineers from their selection process. We shouldn&amp;#39;t be, &amp;quot;In defense of whiteboarding&amp;quot;, we should be trying to understand the implications of it before plowing forward. It is indefensible because we don&amp;#39;t know anything about it, objectively, aside from it being widely practiced across the industry.&lt;/p&gt;\n\n&lt;p&gt;Like everything, YMMV with whiteboarding. It is entirely how the company implements it as a practice in interviewing, but again, what mileage are you actually getting out of it? We just don&amp;#39;t know.&lt;/p&gt;\n\n&lt;p&gt;I would put forth my personal opinions on how I think interviews should work, but they are as equally as unfounded as whiteboarding. I am simply pushing back against the culture of whiteboarding as &amp;quot;the only way to effectively evaluate engineers&amp;quot;. There just is no real data on it&amp;#39;s efficacy, and many pretend there is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7xn7s", "score_hidden": false, "stickied": false, "created": 1492134867.0, "created_utc": 1492106067.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7s99f", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gpyh", "parent_id": "t1_dg7mw01", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "First, something we both agree on: whiteboard tests are not representative of the job and proficiency (or lack thereof) in that particular exercise doesn't immediately imply the same for the job.\n\nHowever, what you seem to fail to understand are those two points:\n\n1) Whiteboard tests demonstrate proficiency in skills that *are* valuable, even though the exercise is flawed and the skills measured are not always decisive for the job. Among those:\n\n  * Problem solving in the domain of algorithms\n  * Familiarity with data structures\n  * The ability to efficiently communicate a solution or the steps toward a solution\n  * The ability to withstand unusual and stressful situations\n\nAlthough I'm sure it would be interesting, trying to prove that whiteboard tests do measure those skills is superfluous, as it is exactly what interviewers are supposed to test for. If they are not, it is a flaw in the interviewer, not in the test.\n\n2) Interviewing is information gathering in a very resource constrained setting. You need to make an informed decision with the minium investment in time and money. As such, whiteboard testing, with all its flaws has a tremendous advantage: it's quick and cheap. Whatever the problems you see with this method, if you can't come up with something at least as efficient, you're only whining.\n\nAt last, I feel that a discussion on the topic would be lacking if those two things were not addressed:\n\n- The problem lies often in the interviewer who doesn't prepare the tests well. Because it seems easy, they think it *is* easy, but it surely is not. It's tempting to just vomit an exercise from a data structure book without taking the time to determine what the test is supposed to look for. Good interviewers will pick unusual exercises that will truly test your problem solving skills instead of selecting for the applicants who learned the solutions by heart. Also, good interviews will not put so much emphasis on getting the answer right. They will be more interested in how the applicant tried to solve the problem and how they communicated.\n- Most of the time what is discussed is not the relevance of whiteboard testing as a tool for judging applicants but the relevance as the *only* tool for judging applicants. Whiteboard testing is one way of (perhaps poorly) measuring a subset of all the skills that are valuable in a software developer. Used alone, it will prove itself very lacking, but it's quite complimentary with other methods.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First, something we both agree on: whiteboard tests are not representative of the job and proficiency (or lack thereof) in that particular exercise doesn&amp;#39;t immediately imply the same for the job.&lt;/p&gt;\n\n&lt;p&gt;However, what you seem to fail to understand are those two points:&lt;/p&gt;\n\n&lt;p&gt;1) Whiteboard tests demonstrate proficiency in skills that &lt;em&gt;are&lt;/em&gt; valuable, even though the exercise is flawed and the skills measured are not always decisive for the job. Among those:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Problem solving in the domain of algorithms&lt;/li&gt;\n&lt;li&gt;Familiarity with data structures&lt;/li&gt;\n&lt;li&gt;The ability to efficiently communicate a solution or the steps toward a solution&lt;/li&gt;\n&lt;li&gt;The ability to withstand unusual and stressful situations&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Although I&amp;#39;m sure it would be interesting, trying to prove that whiteboard tests do measure those skills is superfluous, as it is exactly what interviewers are supposed to test for. If they are not, it is a flaw in the interviewer, not in the test.&lt;/p&gt;\n\n&lt;p&gt;2) Interviewing is information gathering in a very resource constrained setting. You need to make an informed decision with the minium investment in time and money. As such, whiteboard testing, with all its flaws has a tremendous advantage: it&amp;#39;s quick and cheap. Whatever the problems you see with this method, if you can&amp;#39;t come up with something at least as efficient, you&amp;#39;re only whining.&lt;/p&gt;\n\n&lt;p&gt;At last, I feel that a discussion on the topic would be lacking if those two things were not addressed:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The problem lies often in the interviewer who doesn&amp;#39;t prepare the tests well. Because it seems easy, they think it &lt;em&gt;is&lt;/em&gt; easy, but it surely is not. It&amp;#39;s tempting to just vomit an exercise from a data structure book without taking the time to determine what the test is supposed to look for. Good interviewers will pick unusual exercises that will truly test your problem solving skills instead of selecting for the applicants who learned the solutions by heart. Also, good interviews will not put so much emphasis on getting the answer right. They will be more interested in how the applicant tried to solve the problem and how they communicated.&lt;/li&gt;\n&lt;li&gt;Most of the time what is discussed is not the relevance of whiteboard testing as a tool for judging applicants but the relevance as the &lt;em&gt;only&lt;/em&gt; tool for judging applicants. Whiteboard testing is one way of (perhaps poorly) measuring a subset of all the skills that are valuable in a software developer. Used alone, it will prove itself very lacking, but it&amp;#39;s quite complimentary with other methods.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7s99f", "score_hidden": false, "stickied": false, "created": 1492129134.0, "created_utc": 1492100334.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7mw01", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg7iz5d", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "It doesn't though, that was my original hypothesis. The conditions under which you do a whiteboarding test are nothing like the conditions under which you do your work on a day-to-day basis. Yes, there is some overlap in that you need to understand the basics of programming, but it otherwise tests for things that are completely useless as a metric for success. \n\nHow often do you write code without using reference for a problem you aren't completely sure about? How often do you write code for you company under the scrutiny of someone's eye while they nitpick you on the spot, under extremely strict time?\n \nThe answer is never.\n\nWorthiness has yet to be proved, it has not been proven to be more or less effective than any other interview method.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It doesn&amp;#39;t though, that was my original hypothesis. The conditions under which you do a whiteboarding test are nothing like the conditions under which you do your work on a day-to-day basis. Yes, there is some overlap in that you need to understand the basics of programming, but it otherwise tests for things that are completely useless as a metric for success. &lt;/p&gt;\n\n&lt;p&gt;How often do you write code without using reference for a problem you aren&amp;#39;t completely sure about? How often do you write code for you company under the scrutiny of someone&amp;#39;s eye while they nitpick you on the spot, under extremely strict time?&lt;/p&gt;\n\n&lt;p&gt;The answer is never.&lt;/p&gt;\n\n&lt;p&gt;Worthiness has yet to be proved, it has not been proven to be more or less effective than any other interview method.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7mw01", "score_hidden": false, "stickied": false, "created": 1492123318.0, "created_utc": 1492094518.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7iz5d", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "gpyh", "parent_id": "t1_dg7ih18", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "We don't know for sure if it translates into better employees, but we know that it selects for skills deemed valuable. This is more than enough to make it worthwhile. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We don&amp;#39;t know for sure if it translates into better employees, but we know that it selects for skills deemed valuable. This is more than enough to make it worthwhile. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7iz5d", "score_hidden": false, "stickied": false, "created": 1492118397.0, "created_utc": 1492089597.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ih18", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg7bxzn", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "It kind of does though, right? What do we actually know about the affects of whiteboarding? Basically nothing. It is no better or worse than any other untested hypothesis. My argument is that, you don't know how good it it, or if it is better than any alternative, because that data doesn't exist.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It kind of does though, right? What do we actually know about the affects of whiteboarding? Basically nothing. It is no better or worse than any other untested hypothesis. My argument is that, you don&amp;#39;t know how good it it, or if it is better than any alternative, because that data doesn&amp;#39;t exist.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7ih18", "score_hidden": false, "stickied": false, "created": 1492117669.0, "created_utc": 1492088869.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bxzn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "gpyh", "parent_id": "t1_dg70ci5", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "And I've never seen any research that suggests that it doesn't. It doesn't need to be proven to be useful, it just needs to be sensible.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And I&amp;#39;ve never seen any research that suggests that it doesn&amp;#39;t. It doesn&amp;#39;t need to be proven to be useful, it just needs to be sensible.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7bxzn", "score_hidden": false, "stickied": false, "created": 1492102526.0, "created_utc": 1492073726.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg70ci5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t1_dg6u4c8", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I've never seen any research that suggests objectively that those companies that do whiteboard interviews end up with a stronger engineering team. You assume this because many companies do it, particularly the large companies. The idea that it is better to do it than not do it at all hasn't even been tested, it is just a broad assumption. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve never seen any research that suggests objectively that those companies that do whiteboard interviews end up with a stronger engineering team. You assume this because many companies do it, particularly the large companies. The idea that it is better to do it than not do it at all hasn&amp;#39;t even been tested, it is just a broad assumption. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg70ci5", "score_hidden": false, "stickied": false, "created": 1492079678.0, "created_utc": 1492050878.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6u4c8", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "idonthaveamain1", "parent_id": "t1_dg6iu8q", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "College itself doesnt test for success at software engineering. Going to college for comp sci is literally different skills than being a software engineer. However, most companies and people will choose the compsci grad over someone without a degree. Thats because you have limited time to gauge a persons abilities. Comp sci grad was able to get a 4 year degree. Non compsci grad was not able to so why should we hire the non compsci grad? Candidate A can solve these problems and write the code for it, candidate B cannot. Guess who the company is going to choose.\n\nAgain, people are just saying \"whiteboarding algorithmic problems is shit...\". Okay now tell me a solution. Most people agree its shit buts its what works the best so companies will continue to do it. SATs will exist, GRE will exist, college exams will exist, and algorithmic whiteboarding problems will exist unless we can find something better. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;College itself doesnt test for success at software engineering. Going to college for comp sci is literally different skills than being a software engineer. However, most companies and people will choose the compsci grad over someone without a degree. Thats because you have limited time to gauge a persons abilities. Comp sci grad was able to get a 4 year degree. Non compsci grad was not able to so why should we hire the non compsci grad? Candidate A can solve these problems and write the code for it, candidate B cannot. Guess who the company is going to choose.&lt;/p&gt;\n\n&lt;p&gt;Again, people are just saying &amp;quot;whiteboarding algorithmic problems is shit...&amp;quot;. Okay now tell me a solution. Most people agree its shit buts its what works the best so companies will continue to do it. SATs will exist, GRE will exist, college exams will exist, and algorithmic whiteboarding problems will exist unless we can find something better. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6u4c8", "score_hidden": false, "stickied": false, "created": 1492072043.0, "created_utc": 1492043243.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6iu8q", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "4_teh_lulz", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Whiteboarding doesn't test for success at your job. It tests how well you can write code under strict scrutiny without reference. They are literally different skills. The problem with whiteboarding is that it doesn't tell you anything about the candidate with regard to how well they will perform at your company. Unless your company employs engineers to write code in front of strangers all day with no help.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whiteboarding doesn&amp;#39;t test for success at your job. It tests how well you can write code under strict scrutiny without reference. They are literally different skills. The problem with whiteboarding is that it doesn&amp;#39;t tell you anything about the candidate with regard to how well they will perform at your company. Unless your company employs engineers to write code in front of strangers all day with no help.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6iu8q", "score_hidden": false, "stickied": false, "created": 1492058437.0, "created_utc": 1492029637.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg68eya", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "DisruptiveHarbinger", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I've had a pair programming session over Skype screen sharing, with Atlassian. It was a self-contained project for the only purpose of that technical interview. I failed miserably but overall I thought it was a pretty clever way to evaluate my skills. Being thrown at a proprietary codebase and a day-to-day task doesn't sound like a great idea though.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve had a pair programming session over Skype screen sharing, with Atlassian. It was a self-contained project for the only purpose of that technical interview. I failed miserably but overall I thought it was a pretty clever way to evaluate my skills. Being thrown at a proprietary codebase and a day-to-day task doesn&amp;#39;t sound like a great idea though.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg68eya", "score_hidden": false, "stickied": false, "created": 1492047731.0, "created_utc": 1492018931.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg7inwh", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ThomasJCarcetti", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "**If** I lived outside the DC area and wanted to interview candidates I would definitely see the advantages of whiteboarding as you are able to explain your logic clearly to the interviewer and explain your thought process. \n\nHowever as I have stated before inside the DC area whiteboarding is very rare to see. That being said, I understand it's purpose and I am tolerant of it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; I lived outside the DC area and wanted to interview candidates I would definitely see the advantages of whiteboarding as you are able to explain your logic clearly to the interviewer and explain your thought process. &lt;/p&gt;\n\n&lt;p&gt;However as I have stated before inside the DC area whiteboarding is very rare to see. That being said, I understand it&amp;#39;s purpose and I am tolerant of it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7inwh", "score_hidden": false, "stickied": false, "created": 1492117947.0, "created_utc": 1492089147.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6mmkc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "csasker", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "The main problem with whiteboarding is not the board itself, it's the type of problems. They are rarely used in most companies, and more important questions like domain knowledge or how the person act with project management or asking for help is not pushed so much.\n\n90% of bad developers I worked with is not bad coders, they are just bad at the rest, and \"team players\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The main problem with whiteboarding is not the board itself, it&amp;#39;s the type of problems. They are rarely used in most companies, and more important questions like domain knowledge or how the person act with project management or asking for help is not pushed so much.&lt;/p&gt;\n\n&lt;p&gt;90% of bad developers I worked with is not bad coders, they are just bad at the rest, and &amp;quot;team players&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6mmkc", "score_hidden": false, "stickied": false, "created": 1492062766.0, "created_utc": 1492033966.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dga3ayk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "RealTalkOnly", "parent_id": "t1_dg784pp", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt; I'd buckle down and try to COMPETE against my competition if I really wanted to get into X reputable company\n\nLuckily I don't care about working for X reputable company precisely for the reason that I don't want to spend my time preparing for their interviews.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;d buckle down and try to COMPETE against my competition if I really wanted to get into X reputable company&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Luckily I don&amp;#39;t care about working for X reputable company precisely for the reason that I don&amp;#39;t want to spend my time preparing for their interviews.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dga3ayk", "score_hidden": false, "stickied": false, "created": 1492248934.0, "created_utc": 1492220134.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg784pp", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "multivites123", "parent_id": "t1_dg77fat", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Eh, I'd like to beg otherwise. Interviews are predominantly white-boarding for a reason. Think of it in terms of supply and demand.\nIf you're a hiring manager at a pretty reputable company, naturally you're going to have relatively a lot more applicants than you would at, a private no name one. In that case, you need an effective process that saves *everyone* time. How can we efficiently gauge a candidates ability when compared to others? If you're a hiring manager at a no namer, it's probably less likely you will interview candidates this way. It all comes down to the most efficient possible way to compare candidates interested in the position GIVEN how much demand there is for the job position. So, instead of getting pissed at the process, I'd buckle down and try to COMPETE against my competition if I really wanted to get into X reputable company. For the most part, interview questions are designed so that a solution isn't easily identifiable unless you critically think about it. Unless you're a serious CS GOD.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Eh, I&amp;#39;d like to beg otherwise. Interviews are predominantly white-boarding for a reason. Think of it in terms of supply and demand.\nIf you&amp;#39;re a hiring manager at a pretty reputable company, naturally you&amp;#39;re going to have relatively a lot more applicants than you would at, a private no name one. In that case, you need an effective process that saves &lt;em&gt;everyone&lt;/em&gt; time. How can we efficiently gauge a candidates ability when compared to others? If you&amp;#39;re a hiring manager at a no namer, it&amp;#39;s probably less likely you will interview candidates this way. It all comes down to the most efficient possible way to compare candidates interested in the position GIVEN how much demand there is for the job position. So, instead of getting pissed at the process, I&amp;#39;d buckle down and try to COMPETE against my competition if I really wanted to get into X reputable company. For the most part, interview questions are designed so that a solution isn&amp;#39;t easily identifiable unless you critically think about it. Unless you&amp;#39;re a serious CS GOD.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg784pp", "score_hidden": false, "stickied": false, "created": 1492092114.0, "created_utc": 1492063314.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg8e95e", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "RealTalkOnly", "parent_id": "t1_dg7bwlt", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Brainteasers also demonstrate problem solving skills, I just don't ask them because I'd rather spend my interview time discussing things more relevant to the job", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Brainteasers also demonstrate problem solving skills, I just don&amp;#39;t ask them because I&amp;#39;d rather spend my interview time discussing things more relevant to the job&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg8e95e", "score_hidden": false, "stickied": false, "created": 1492154163.0, "created_utc": 1492125363.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bwlt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gpyh", "parent_id": "t1_dg77fat", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "They are not divorced from day to day work. They allow you to display yoir problem solving skills, as well as the ability to explain your reasoning, which are both exactly what is asked of you on the job.\n\nGranted, they are not *the job*. But they are a decent enough proxy.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They are not divorced from day to day work. They allow you to display yoir problem solving skills, as well as the ability to explain your reasoning, which are both exactly what is asked of you on the job.&lt;/p&gt;\n\n&lt;p&gt;Granted, they are not &lt;em&gt;the job&lt;/em&gt;. But they are a decent enough proxy.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg7bwlt", "score_hidden": false, "stickied": false, "created": 1492102405.0, "created_utc": 1492073605.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg77fat", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "RealTalkOnly", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 1, "body": "Whiteboarding is masturbation used by recent CS grads who want to feel good about themselves and justify their own 4 years studying CS in school. Companies do it to give off the impression of being a place for top talent (aka copying what the big 4 tech corporations do), and because candidates willing to jump through arbitrary hoops are more likely to be obedient and subservient.\n\nThese interviews are completely divorced from the actual day to day work, and most of these engineers will never encounter these algorithm type problems in their jobs.\n\nThe reason whiteboarding is dominant isn't because it's the most effective, it's because that's how all the prestigious tech companies do it. Most people don't have the consciousness and/or balls to think for themselves and counter the status quo. It's the whole \"nobody got fired for hiring IBM\" syndrome, and it's pathetic.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whiteboarding is masturbation used by recent CS grads who want to feel good about themselves and justify their own 4 years studying CS in school. Companies do it to give off the impression of being a place for top talent (aka copying what the big 4 tech corporations do), and because candidates willing to jump through arbitrary hoops are more likely to be obedient and subservient.&lt;/p&gt;\n\n&lt;p&gt;These interviews are completely divorced from the actual day to day work, and most of these engineers will never encounter these algorithm type problems in their jobs.&lt;/p&gt;\n\n&lt;p&gt;The reason whiteboarding is dominant isn&amp;#39;t because it&amp;#39;s the most effective, it&amp;#39;s because that&amp;#39;s how all the prestigious tech companies do it. Most people don&amp;#39;t have the consciousness and/or balls to think for themselves and counter the status quo. It&amp;#39;s the whole &amp;quot;nobody got fired for hiring IBM&amp;quot; syndrome, and it&amp;#39;s pathetic.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg77fat", "score_hidden": false, "stickied": false, "created": 1492090567.0, "created_utc": 1492061767.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_64z80y", "likes": null, "replies": "", "user_reports": [], "id": "dg6n0a1", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "CriticalLobster", "parent_id": "t3_64z80y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 1, "body": "Whiteboarding is the easiest part, you find that almost universally all developers who don't like doing it are weak developers that have problems with algorithms or crippling anxiety. It's a pretty bad sign.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whiteboarding is the easiest part, you find that almost universally all developers who don&amp;#39;t like doing it are weak developers that have problems with algorithms or crippling anxiety. It&amp;#39;s a pretty bad sign.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dg6n0a1", "score_hidden": false, "stickied": false, "created": 1492063224.0, "created_utc": 1492034424.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}]