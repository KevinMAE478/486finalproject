[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "cscareerquestions", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;(DISCLAIMER: I have virtually no background in functional/declarative programming outside SQL.  Never used a Java Stream, Trying to learn about this stuff today)   &lt;/p&gt;\n\n&lt;p&gt;So I&amp;#39;ve been watching some videos from industry graybeards preaching how the future is functional programming and about the dangers of state.      &lt;/p&gt;\n\n&lt;p&gt;I hear Venkat Subramaniam saying things like imperative programming is ugly and overly complicated, and now he will use a declarative approach (like Java Streams) anywhere that he can first.    &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;So I think my question is, where can you not use functional/declarative programming?  Is there anything it can&amp;#39;t do?  &lt;/p&gt;\n\n&lt;p&gt;Likewise are there any places where you shouldn&amp;#39;t use something like Java 1.8 Streams?      &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "(DISCLAIMER: I have virtually no background in functional/declarative programming outside SQL.  Never used a Java Stream, Trying to learn about this stuff today)   \n\n\nSo I've been watching some videos from industry graybeards preaching how the future is functional programming and about the dangers of state.      \n\nI hear Venkat Subramaniam saying things like imperative programming is ugly and overly complicated, and now he will use a declarative approach (like Java Streams) anywhere that he can first.    \n\n----------------------------------------------------\n\n\nSo I think my question is, where can you not use functional/declarative programming?  Is there anything it can't do?  \n\nLikewise are there any places where you shouldn't use something like Java 1.8 Streams?      \n\n\n\n\n\n  ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65shgc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 11, "report_reasons": null, "author": "sillyQuestionsSure", "saved": false, "mod_reports": [], "name": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "approved_by": null, "over_18": false, "domain": "self.cscareerquestions", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2sdpm", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/cscareerquestions/comments/65shgc/what_can_functional_programming_not_do/", "num_reports": null, "locked": false, "stickied": false, "created": 1492418477.0, "url": "https://www.reddit.com/r/cscareerquestions/comments/65shgc/what_can_functional_programming_not_do/", "author_flair_text": null, "quarantine": false, "title": "What can functional programming NOT do?", "created_utc": 1492389677.0, "distinguished": null, "media": null, "upvote_ratio": 0.83, "num_comments": 34, "visited": false, "subreddit_type": "public", "ups": 11}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdtqz3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "terjon", "parent_id": "t1_dgcy7mt", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "More, definitely more.  I remember F# being the future circa 2001-2002.  I just don't think it is well suited for gnarly business logic (you know, they stuff most of us deal with).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;More, definitely more.  I remember F# being the future circa 2001-2002.  I just don&amp;#39;t think it is well suited for gnarly business logic (you know, they stuff most of us deal with).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdtqz3", "score_hidden": false, "stickied": false, "created": 1492479950.0, "created_utc": 1492451150.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcy7mt", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "elliotbot", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I feel like functional programming has been the future for probably like 10 years now ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like functional programming has been the future for probably like 10 years now &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcy7mt", "score_hidden": false, "stickied": false, "created": 1492423666.0, "created_utc": 1492394866.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd1efa", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "MengerianMango", "parent_id": "t1_dgcwsoj", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "MirageOS seems pretty nice. You just have to encapsulate all the dirty. Functional languages help with that, or at least nudge you in the right direction, I'd think.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;MirageOS seems pretty nice. You just have to encapsulate all the dirty. Functional languages help with that, or at least nudge you in the right direction, I&amp;#39;d think.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd1efa", "score_hidden": false, "stickied": false, "created": 1492428154.0, "created_utc": 1492399354.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcwsoj", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "cooldude_323", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I certainly wouldn't use functional programming for say... writing a kernel.  Anything with lots and lots of state and state accessories is probably a bad idea.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I certainly wouldn&amp;#39;t use functional programming for say... writing a kernel.  Anything with lots and lots of state and state accessories is probably a bad idea.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcwsoj", "score_hidden": false, "stickied": false, "created": 1492421701.0, "created_utc": 1492392901.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd3k7t", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "SeverianTheSleeper", "parent_id": "t1_dgd05p1", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "State is *not* evil or bad. Nobody in the FP world is saying that. State is very necessary in most programs! What is evil is *unnecessary* state.\n\nI like the approach used in Clojure where a stateful variable must be declared as such, and everything else is stateless by default. That way the programmer has to opt in to state.\n\nBy the way, the whole reason this is a point of contention these days is that it becomes exceedingly hard to deal with shared state in a multithreaded environment. It is surprisingly difficult to get things like mutex and thread visibility to work correctly, and it's very hard to eyeball some code to see if there is a deadlock. It's so hard to do right that the community has kind of come to the decision that we should side-step the problem entirely by avoiding state as much as possible.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;State is &lt;em&gt;not&lt;/em&gt; evil or bad. Nobody in the FP world is saying that. State is very necessary in most programs! What is evil is &lt;em&gt;unnecessary&lt;/em&gt; state.&lt;/p&gt;\n\n&lt;p&gt;I like the approach used in Clojure where a stateful variable must be declared as such, and everything else is stateless by default. That way the programmer has to opt in to state.&lt;/p&gt;\n\n&lt;p&gt;By the way, the whole reason this is a point of contention these days is that it becomes exceedingly hard to deal with shared state in a multithreaded environment. It is surprisingly difficult to get things like mutex and thread visibility to work correctly, and it&amp;#39;s very hard to eyeball some code to see if there is a deadlock. It&amp;#39;s so hard to do right that the community has kind of come to the decision that we should side-step the problem entirely by avoiding state as much as possible.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3k7t", "score_hidden": false, "stickied": false, "created": 1492431535.0, "created_utc": 1492402735.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd3ngg", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "throwawayshampoo_", "parent_id": "t1_dgd32lx", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "You can, you use a tail recursive implementation (no computations between the recursive call and returning from the function) such that the compiler will know to use a single stack frame. This is a pretty important topic in FP, I recommend you look up \"tail call optimization\"   ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can, you use a tail recursive implementation (no computations between the recursive call and returning from the function) such that the compiler will know to use a single stack frame. This is a pretty important topic in FP, I recommend you look up &amp;quot;tail call optimization&amp;quot;   &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3ngg", "score_hidden": false, "stickied": false, "created": 1492431684.0, "created_utc": 1492402884.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd32lx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgd2xun", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Can you run an infinite recursive loop without getting a stack overflow error ?    \nMemory would eventually fill up just with return addresses of function calls right?     ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you run an infinite recursive loop without getting a stack overflow error ?&lt;br/&gt;\nMemory would eventually fill up just with return addresses of function calls right?     &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd32lx", "score_hidden": false, "stickied": false, "created": 1492430726.0, "created_utc": 1492401926.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd2xun", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "throwawayshampoo_", "parent_id": "t1_dgd1cs9", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Nope, you pass the state as an argument to a recursive function that does the machine part. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope, you pass the state as an argument to a recursive function that does the machine part. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd2xun", "score_hidden": false, "stickied": false, "created": 1492430510.0, "created_utc": 1492401710.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd3y1g", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lmouelle", "parent_id": "t1_dgd1cs9", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "No, not at all. There are a few ways, one I like is the continuation passing style in scheme. Scheme has tall call optimization (not just recursive ones), so each state can be a function that transitions by calling a different function representing a different state", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, not at all. There are a few ways, one I like is the continuation passing style in scheme. Scheme has tall call optimization (not just recursive ones), so each state can be a function that transitions by calling a different function representing a different state&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3y1g", "score_hidden": false, "stickied": false, "created": 1492432175.0, "created_utc": 1492403375.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd3mv8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SeverianTheSleeper", "parent_id": "t1_dgd1cs9", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Most FP languages provide facilities to create and access state variables. So yes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Most FP languages provide facilities to create and access state variables. So yes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3mv8", "score_hidden": false, "stickied": false, "created": 1492431657.0, "created_utc": 1492402857.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdkxug", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "samelaaaa", "parent_id": "t1_dgd1cs9", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Definitely not; in fact that's a first class construct in Erlang/OTP. If you're interested check out http://erlang.org/doc/man/gen_fsm.html", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Definitely not; in fact that&amp;#39;s a first class construct in Erlang/OTP. If you&amp;#39;re interested check out &lt;a href=\"http://erlang.org/doc/man/gen_fsm.html\"&gt;http://erlang.org/doc/man/gen_fsm.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdkxug", "score_hidden": false, "stickied": false, "created": 1492469933.0, "created_utc": 1492441133.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd1cs9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgd13b3", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Would the entire concept of a 'finite state machine' be impossible to do in FP?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Would the entire concept of a &amp;#39;finite state machine&amp;#39; be impossible to do in FP?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd1cs9", "score_hidden": false, "stickied": false, "created": 1492428091.0, "created_utc": 1492399291.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd13b3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lmouelle", "parent_id": "t1_dgd05p1", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "State is easy to fuck up, but sometime's it's unavoidable or far more convenient than the stateless approach. Avoiding state entirely isn't the goal, it's to *mitigate* the negative effects and opt out of it where possible. \n\nOOP isn't going away. In fact, \"proper\" OOP feels a lot like FP in my opinion. Smalltalk/Ruby is not that far off from some FP principles.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;State is easy to fuck up, but sometime&amp;#39;s it&amp;#39;s unavoidable or far more convenient than the stateless approach. Avoiding state entirely isn&amp;#39;t the goal, it&amp;#39;s to &lt;em&gt;mitigate&lt;/em&gt; the negative effects and opt out of it where possible. &lt;/p&gt;\n\n&lt;p&gt;OOP isn&amp;#39;t going away. In fact, &amp;quot;proper&amp;quot; OOP feels a lot like FP in my opinion. Smalltalk/Ruby is not that far off from some FP principles.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd13b3", "score_hidden": false, "stickied": false, "created": 1492427708.0, "created_utc": 1492398908.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdd4qe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jb3689", "parent_id": "t1_dgd05p1", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Most algorithms in books don't bind state to objects so those algorithms are all still useful. If they do, you just need to serialize the state jnto a map or something an pass that as an argument. Some algorithms like tree traversal are already recursive. Queues and stacks are really useful for turning things into recursive equivalents.\n\nMany OOP concepts still transfer too. You can still encapsulate functions in modules and have Factories or whatever", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Most algorithms in books don&amp;#39;t bind state to objects so those algorithms are all still useful. If they do, you just need to serialize the state jnto a map or something an pass that as an argument. Some algorithms like tree traversal are already recursive. Queues and stacks are really useful for turning things into recursive equivalents.&lt;/p&gt;\n\n&lt;p&gt;Many OOP concepts still transfer too. You can still encapsulate functions in modules and have Factories or whatever&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdd4qe", "score_hidden": false, "stickied": false, "created": 1492456430.0, "created_utc": 1492427630.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd05p1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgczp8n", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Oh.  \nI was getting the impression that people were saying pretty much any state was evil and there might be some clever way to redesign the problem so that FP could solve it.       \n\nSo I guess all my learning about writing tedious imperative algorithms and OOP concepts wasn't totally wasted?    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh.&lt;br/&gt;\nI was getting the impression that people were saying pretty much any state was evil and there might be some clever way to redesign the problem so that FP could solve it.       &lt;/p&gt;\n\n&lt;p&gt;So I guess all my learning about writing tedious imperative algorithms and OOP concepts wasn&amp;#39;t totally wasted?    &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd05p1", "score_hidden": false, "stickied": false, "created": 1492426377.0, "created_utc": 1492397577.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgczp8n", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "jb3689", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Scoping is a pain in FP. For example, in OOP you might have a composite object whichh encapsulates some hierarchy of objects. This is difficult to do in FP. I've especially run into this in Erlang when I want to create parallel process hierarchies\n\nImmutable lists are also not as elegant as linked lists for some problems\n\nLong story short - I find problems which are better represented with referential data structures to be more difficult in FP languages", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Scoping is a pain in FP. For example, in OOP you might have a composite object whichh encapsulates some hierarchy of objects. This is difficult to do in FP. I&amp;#39;ve especially run into this in Erlang when I want to create parallel process hierarchies&lt;/p&gt;\n\n&lt;p&gt;Immutable lists are also not as elegant as linked lists for some problems&lt;/p&gt;\n\n&lt;p&gt;Long story short - I find problems which are better represented with referential data structures to be more difficult in FP languages&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgczp8n", "score_hidden": false, "stickied": false, "created": 1492425750.0, "created_utc": 1492396950.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgczxf9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CookLevin", "parent_id": "t1_dgcyz6y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "You're right; I meant lazy by default. Haskell supports keywords for strict evaluation (don't remember them off the top of my head) and other eager-by-default languages can have lazy evaluation via suspended functions.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re right; I meant lazy by default. Haskell supports keywords for strict evaluation (don&amp;#39;t remember them off the top of my head) and other eager-by-default languages can have lazy evaluation via suspended functions.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgczxf9", "score_hidden": false, "stickied": false, "created": 1492426053.0, "created_utc": 1492397253.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdg639", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "thedufer", "parent_id": "t1_dgcyz6y", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "That construct does not require laziness. In OCaml, for example, it constructs a circular linked list.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That construct does not require laziness. In OCaml, for example, it constructs a circular linked list.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdg639", "score_hidden": false, "stickied": false, "created": 1492462994.0, "created_utc": 1492434194.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcyz6y", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "cooldude_323", "parent_id": "t1_dgcyh27", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt; I would also point out that lazy evaluation is absolutely not a requirement of FP languages. Haskell is really the only common language I know that uses it.\n\nwut?\n\nlet rec ones = 1::ones is not uncommon.  F# also supports lazy eval + async, though I think they have segregated it.\n\n\nIn almost all environments, higher abstraction is the best choice.  Not many people are programming on microcontrollers these days.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I would also point out that lazy evaluation is absolutely not a requirement of FP languages. Haskell is really the only common language I know that uses it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;wut?&lt;/p&gt;\n\n&lt;p&gt;let rec ones = 1::ones is not uncommon.  F# also supports lazy eval + async, though I think they have segregated it.&lt;/p&gt;\n\n&lt;p&gt;In almost all environments, higher abstraction is the best choice.  Not many people are programming on microcontrollers these days.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcyz6y", "score_hidden": false, "stickied": false, "created": 1492424728.0, "created_utc": 1492395928.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcyh27", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CookLevin", "parent_id": "t1_dgcxfz1", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "The sequential time complexity analysis is basically the same for lazy and eager evaluation models. The difficulty comes in analyzing the space complexity and parallel time complexity (or span). \n\nI would also point out that lazy evaluation is absolutely not a requirement of FP languages. Haskell is really the only common language I know that uses it.\n\nIn general, the weakness of FP languages is that the abstractions that these languages provide are not zero-cost, which has large implications in performance driven environments. Graph algorithms in FP languages are also a pain in the ass to code.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The sequential time complexity analysis is basically the same for lazy and eager evaluation models. The difficulty comes in analyzing the space complexity and parallel time complexity (or span). &lt;/p&gt;\n\n&lt;p&gt;I would also point out that lazy evaluation is absolutely not a requirement of FP languages. Haskell is really the only common language I know that uses it.&lt;/p&gt;\n\n&lt;p&gt;In general, the weakness of FP languages is that the abstractions that these languages provide are not zero-cost, which has large implications in performance driven environments. Graph algorithms in FP languages are also a pain in the ass to code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcyh27", "score_hidden": false, "stickied": false, "created": 1492424031.0, "created_utc": 1492395231.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcxfz1", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgcwytn", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Could you go into more detail on that?  \n\nBecause that's exactly what I was wondering too, how to analyze and compare the bigO for Streams and the like.    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Could you go into more detail on that?  &lt;/p&gt;\n\n&lt;p&gt;Because that&amp;#39;s exactly what I was wondering too, how to analyze and compare the bigO for Streams and the like.    &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcxfz1", "score_hidden": false, "stickied": false, "created": 1492422586.0, "created_utc": 1492393786.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcwytn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "8991throwaway", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Although there are fairly few downsides to FP (From my understanding of it -- I'm still an undergrad), the main one is (Aside from things to do with actually learning it) that it's difficult to predict the time/space complexity of lazy evaluation.", "edited": 1492397694.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Although there are fairly few downsides to FP (From my understanding of it -- I&amp;#39;m still an undergrad), the main one is (Aside from things to do with actually learning it) that it&amp;#39;s difficult to predict the time/space complexity of lazy evaluation.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgcwytn", "score_hidden": false, "stickied": false, "created": 1492421930.0, "created_utc": 1492393130.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd1t7d", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MengerianMango", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Lazy languages are harder to analyze for time and space complexity. See \"Purely Functional Data Structures\" by Okasaki.\n\nNot all functional languages are lazy. In strict, pure functional languages (ocaml, lisp, scheme), some algorithms are impossible to implement with the same time complexity as in an imperative language. http://stackoverflow.com/questions/1990464/efficiency-of-purely-functional-programming\n\n(Those languages are strict by default, but support lazy eval with some extra effort.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lazy languages are harder to analyze for time and space complexity. See &amp;quot;Purely Functional Data Structures&amp;quot; by Okasaki.&lt;/p&gt;\n\n&lt;p&gt;Not all functional languages are lazy. In strict, pure functional languages (ocaml, lisp, scheme), some algorithms are impossible to implement with the same time complexity as in an imperative language. &lt;a href=\"http://stackoverflow.com/questions/1990464/efficiency-of-purely-functional-programming\"&gt;http://stackoverflow.com/questions/1990464/efficiency-of-purely-functional-programming&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(Those languages are strict by default, but support lazy eval with some extra effort.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd1t7d", "score_hidden": false, "stickied": false, "created": 1492428751.0, "created_utc": 1492399951.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdbkar", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "stealthtaccount", "parent_id": "t1_dgd3yx0", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I can vouch for this. \n\nThere is also a company that has software that is used by many corporations and universities, and the majority of their code is Scala backend. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can vouch for this. &lt;/p&gt;\n\n&lt;p&gt;There is also a company that has software that is used by many corporations and universities, and the majority of their code is Scala backend. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdbkar", "score_hidden": false, "stickied": false, "created": 1492451525.0, "created_utc": 1492422725.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdcyi5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SeverianTheSleeper", "parent_id": "t1_dgd3yx0", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Yeah, like I said, I enjoy FP and it's good for a lot of problems. I personally would rather use a functional language. But if I was going to build a company knowing I would have to staff 100+ engineers and train them vs. building everything in Java and have thousands of experts already available for hire..", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, like I said, I enjoy FP and it&amp;#39;s good for a lot of problems. I personally would rather use a functional language. But if I was going to build a company knowing I would have to staff 100+ engineers and train them vs. building everything in Java and have thousands of experts already available for hire..&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdcyi5", "score_hidden": false, "stickied": false, "created": 1492455947.0, "created_utc": 1492427147.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd3yx0", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "throwawayshampoo_", "parent_id": "t1_dgd37iv", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "&gt; I cannot imagine\n\nVirtually all of Jane Street runs on OCaml, to provide a data point \n\n&gt; It's just plain harder to understand functional code\n\nOnly because most people start in the imperative world, so the transition includes some amount of time spent rewiring your brain and getting it to stop trying to see functional concepts in terms of OOP analogs. \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I cannot imagine&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Virtually all of Jane Street runs on OCaml, to provide a data point &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;It&amp;#39;s just plain harder to understand functional code&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Only because most people start in the imperative world, so the transition includes some amount of time spent rewiring your brain and getting it to stop trying to see functional concepts in terms of OOP analogs. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3yx0", "score_hidden": false, "stickied": false, "created": 1492432218.0, "created_utc": 1492403418.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd3t6n", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgd37iv", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Thanks for your insights and for describing them so well.    \nI have gained higher understanding.  \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for your insights and for describing them so well.&lt;br/&gt;\nI have gained higher understanding.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd3t6n", "score_hidden": false, "stickied": false, "created": 1492431951.0, "created_utc": 1492403151.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd37iv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SeverianTheSleeper", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "I recently wrote a fairly simple but somewhat large Clojure program. Fiddling with Clojure made it really appreciate the different strengths of OOP and FP.\n\nIn FP, it's very easy to write stateless processors to munge data. Map/reduce is a very powerful technique for extracting values from data, and it's especially powerful when handling large data sets that cannot fit in memory and so must be \"streamed\" in batches from one processor to the next. IMO this is where functional programming really shines.\n\nOOP is very good at modeling relational data -- that is, any problem that can be solved using \"is-a\" and \"has-a\" type relations. If you view OOP through a functional lens, it is essentially a complex layered DSL enabling special mappings between sets of values. E.g., a bank account number to a user's name in a non-OO would just be a map whereas in an OO language that mapping becomes reified as a \"User\" class. In practical terms this makes it much easier in many cases to express these types of relationships in code.\n\nTo say it a bit more pithily, OOP reifies relations. The cost you pay for that convenience is boilerplate and added complexity.\n\nTo be a bit more practical about it, I cannot imagine usage of a functional language scaling well across a large team of programmers. It's just plain harder to understand declarative/functional code and most programmers are already  proficient in imperative modes. So while there are many cases where FP is a great solution for modeling and solving certain types of problems (like analytics), I strongly doubt we will see the day that FP completely replaces OOP. Most software is written for enterprise, and business logic by its nature is easier to write and maintain with an OO language.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I recently wrote a fairly simple but somewhat large Clojure program. Fiddling with Clojure made it really appreciate the different strengths of OOP and FP.&lt;/p&gt;\n\n&lt;p&gt;In FP, it&amp;#39;s very easy to write stateless processors to munge data. Map/reduce is a very powerful technique for extracting values from data, and it&amp;#39;s especially powerful when handling large data sets that cannot fit in memory and so must be &amp;quot;streamed&amp;quot; in batches from one processor to the next. IMO this is where functional programming really shines.&lt;/p&gt;\n\n&lt;p&gt;OOP is very good at modeling relational data -- that is, any problem that can be solved using &amp;quot;is-a&amp;quot; and &amp;quot;has-a&amp;quot; type relations. If you view OOP through a functional lens, it is essentially a complex layered DSL enabling special mappings between sets of values. E.g., a bank account number to a user&amp;#39;s name in a non-OO would just be a map whereas in an OO language that mapping becomes reified as a &amp;quot;User&amp;quot; class. In practical terms this makes it much easier in many cases to express these types of relationships in code.&lt;/p&gt;\n\n&lt;p&gt;To say it a bit more pithily, OOP reifies relations. The cost you pay for that convenience is boilerplate and added complexity.&lt;/p&gt;\n\n&lt;p&gt;To be a bit more practical about it, I cannot imagine usage of a functional language scaling well across a large team of programmers. It&amp;#39;s just plain harder to understand declarative/functional code and most programmers are already  proficient in imperative modes. So while there are many cases where FP is a great solution for modeling and solving certain types of problems (like analytics), I strongly doubt we will see the day that FP completely replaces OOP. Most software is written for enterprise, and business logic by its nature is easier to write and maintain with an OO language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd37iv", "score_hidden": false, "stickied": false, "created": 1492430950.0, "created_utc": 1492402150.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgedpw7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "thedufer", "parent_id": "t1_dgduvtm", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Functional languages typically use balanced binary trees instead of hashtables, which have slightly worse average-case characteristics (most operations are `log(n)` instead of `1`) but similar worst-case characteristics, and play much more nicely with functional semantics.\n\nSometimes you really need a hashtable, though, which is why functional languages with explicit mutation primitives are nice.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Functional languages typically use balanced binary trees instead of hashtables, which have slightly worse average-case characteristics (most operations are &lt;code&gt;log(n)&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;) but similar worst-case characteristics, and play much more nicely with functional semantics.&lt;/p&gt;\n\n&lt;p&gt;Sometimes you really need a hashtable, though, which is why functional languages with explicit mutation primitives are nice.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgedpw7", "score_hidden": false, "stickied": false, "created": 1492503750.0, "created_utc": 1492474950.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgduvtm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Agent_03", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Hashtables.  Functional languages struggle with them, and unfortunately for many algorithms they are by far the most efficient data structure to use.  There are alternative associative data structures for functional languages, but they're generally much less efficient.\n\nFunctional programming excels at data filtering and transformation, and writing code without side effects can simplify debugging.  However there are some cases where code is much simpler or faster when you're allowed to retain state, and in these cases the only sane thing is to fall back to imperative approaches.\n\nFor these reasons, the future of functional programming is probably dirty.  By that I mean:\n\n* Impure functional languages that let you fall back to other paradigms where needed\n* Incorporation of functional features into mainstream multi-paradigm languages, as force multipliers.  \n    - Python has done this for a long time, and enjoyed great success as a result, since it makes for terse and easily followed code\n    - JavaScript functional features are at the heart of modern design (tied closely to promises &amp; callbacks)\n    - Java added functional features as of Java 8 Streams, and they were one of the most popular new features \n    - Ruby supports it, naturally\n    - and so on...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hashtables.  Functional languages struggle with them, and unfortunately for many algorithms they are by far the most efficient data structure to use.  There are alternative associative data structures for functional languages, but they&amp;#39;re generally much less efficient.&lt;/p&gt;\n\n&lt;p&gt;Functional programming excels at data filtering and transformation, and writing code without side effects can simplify debugging.  However there are some cases where code is much simpler or faster when you&amp;#39;re allowed to retain state, and in these cases the only sane thing is to fall back to imperative approaches.&lt;/p&gt;\n\n&lt;p&gt;For these reasons, the future of functional programming is probably dirty.  By that I mean:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Impure functional languages that let you fall back to other paradigms where needed&lt;/li&gt;\n&lt;li&gt;Incorporation of functional features into mainstream multi-paradigm languages, as force multipliers.&lt;br/&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python has done this for a long time, and enjoyed great success as a result, since it makes for terse and easily followed code&lt;/li&gt;\n&lt;li&gt;JavaScript functional features are at the heart of modern design (tied closely to promises &amp;amp; callbacks)&lt;/li&gt;\n&lt;li&gt;Java added functional features as of Java 8 Streams, and they were one of the most popular new features &lt;/li&gt;\n&lt;li&gt;Ruby supports it, naturally&lt;/li&gt;\n&lt;li&gt;and so on...&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgduvtm", "score_hidden": false, "stickied": false, "created": 1492481195.0, "created_utc": 1492452395.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgee3bl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "thedufer", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Functional programming is a fuzzy term that typically means some combination of things.  Some examples - pure functions, immutable data, good type systems, first-class functions.  Some of these things have recently become quite common in many mainstream languages (first-class functions), some are slowly gaining popularity (good type systems), and others are pretty far out from mainstream programming or may never become popular.\n\nOf course, functional languages are Turing-complete - that is, they are just as capable as any other languages of performing any given computation.  However, they tend to come with some benefits (immutable data is easier to reason about, for example) and balancing costs (some high-performance structures can't be represented immutably).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Functional programming is a fuzzy term that typically means some combination of things.  Some examples - pure functions, immutable data, good type systems, first-class functions.  Some of these things have recently become quite common in many mainstream languages (first-class functions), some are slowly gaining popularity (good type systems), and others are pretty far out from mainstream programming or may never become popular.&lt;/p&gt;\n\n&lt;p&gt;Of course, functional languages are Turing-complete - that is, they are just as capable as any other languages of performing any given computation.  However, they tend to come with some benefits (immutable data is easier to reason about, for example) and balancing costs (some high-performance structures can&amp;#39;t be represented immutably).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgee3bl", "score_hidden": false, "stickied": false, "created": 1492504223.0, "created_utc": 1492475423.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgd0cga", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sillyQuestionsSure", "parent_id": "t1_dgczgp3", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "(Disclaimer: No idea what I'm talking about)  \nYeah.  I can see how global state is bad for testing, and but again games pretty much require some global state.   \n\nI can't imagine games are the the only area where state, and especially global state are so necessary.  \nWhat can we generalize about games that makes this the case?  Is this a property of event-driven programming?  Anything involving infinite loops?  What else falls into that category?  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(Disclaimer: No idea what I&amp;#39;m talking about)&lt;br/&gt;\nYeah.  I can see how global state is bad for testing, and but again games pretty much require some global state.   &lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t imagine games are the the only area where state, and especially global state are so necessary.&lt;br/&gt;\nWhat can we generalize about games that makes this the case?  Is this a property of event-driven programming?  Anything involving infinite loops?  What else falls into that category?  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgd0cga", "score_hidden": false, "stickied": false, "created": 1492426645.0, "created_utc": 1492397845.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgczgp3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "FZeroRacer", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Video games. It's certainly possible to write a game in a functional language but as games scale up in complexity avoiding state is almost impossible and the benefits you gain are arguable at best.\n\nI think FP is another one of those industry fads that seem to roll around where it's claimed to solve all problems and how previous paradigms are just so barbaric. I agree with the core concept of minimizing state when possible but disagree with attempting to force a square peg into every hole you can find.  You should assess each situation and see which paradigm fits the best, not just assume one is always wrong or right.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Video games. It&amp;#39;s certainly possible to write a game in a functional language but as games scale up in complexity avoiding state is almost impossible and the benefits you gain are arguable at best.&lt;/p&gt;\n\n&lt;p&gt;I think FP is another one of those industry fads that seem to roll around where it&amp;#39;s claimed to solve all problems and how previous paradigms are just so barbaric. I agree with the core concept of minimizing state when possible but disagree with attempting to force a square peg into every hole you can find.  You should assess each situation and see which paradigm fits the best, not just assume one is always wrong or right.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgczgp3", "score_hidden": false, "stickied": false, "created": 1492425416.0, "created_utc": 1492396616.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2sdpm", "removal_reason": null, "link_id": "t3_65shgc", "likes": null, "replies": "", "user_reports": [], "id": "dgdbi3j", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "stealthtaccount", "parent_id": "t3_65shgc", "subreddit_name_prefixed": "r/cscareerquestions", "controversiality": 0, "body": "Functional programming seems to be a lot harder to debug, from my experience. Implicits and type inferencing are a pain if your ide is being obnoxious. \n\nThe reason that I use it, and my current company uses it, is because streams can lower memory usage, and stateless things with no side effects tend to make asynchronous/parallel code much easier to deal with. \n\nI recently did a project with a functional approach in Java, and had very little need to work around race conditions as a result. \n\nIt seems that most of the companies that use/are going to use functional programming usually use something like Scala, where you can do imperative things when it's easier and makes more sense to, and as a result confine all the stateful /side effect stuff in boxes when you have to. \n\n \n\nOn Java 8 streams, there are some interesting performance tests out there. For simple calculations and programs, you probably want to just use an iterator. But for anything more than a 1 line comparison or simple function, streams are barely behind for loops as far as speed (from my experience). Plus the parallel streams feature is pretty great. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Functional programming seems to be a lot harder to debug, from my experience. Implicits and type inferencing are a pain if your ide is being obnoxious. &lt;/p&gt;\n\n&lt;p&gt;The reason that I use it, and my current company uses it, is because streams can lower memory usage, and stateless things with no side effects tend to make asynchronous/parallel code much easier to deal with. &lt;/p&gt;\n\n&lt;p&gt;I recently did a project with a functional approach in Java, and had very little need to work around race conditions as a result. &lt;/p&gt;\n\n&lt;p&gt;It seems that most of the companies that use/are going to use functional programming usually use something like Scala, where you can do imperative things when it&amp;#39;s easier and makes more sense to, and as a result confine all the stateful /side effect stuff in boxes when you have to. &lt;/p&gt;\n\n&lt;p&gt;On Java 8 streams, there are some interesting performance tests out there. For simple calculations and programs, you probably want to just use an iterator. But for anything more than a 1 line comparison or simple function, streams are barely behind for loops as far as speed (from my experience). Plus the parallel streams feature is pretty great. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "cscareerquestions", "name": "t1_dgdbi3j", "score_hidden": false, "stickied": false, "created": 1492451318.0, "created_utc": 1492422518.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}]