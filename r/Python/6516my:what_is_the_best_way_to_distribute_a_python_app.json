[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Long story short, I&amp;#39;ve got a command line app I need to get onto computers at a couple of public health labs. It&amp;#39;s used by a bunch of scientists and doctors who I don&amp;#39;t think are extremely computer-literate and I don&amp;#39;t have access to the computers themselves (certainly not remote, maybe after driving a ways).&lt;/p&gt;\n\n&lt;p&gt;My code exists in two packages, both of which I&amp;#39;d say are packaged following best practices. There is a simple console script entry point in the setup.py of one of them. All other dependencies are available from Pypi. However, these include things like Numpy and Scipy, which have a pretty complex build process and depend on some system libraries being present (OpenBLAS / LAPACK). One of my packages also includes some Cython modules.&lt;/p&gt;\n\n&lt;p&gt;I pretty much need something completely self-contained. This only needs to be installed on Ubuntu 14.04, but the packages use some features of 3.5 and the default software repository only includes version 3.4. Besides, I don&amp;#39;t think I can count on remote installation of packages working (Python or otherwise) because these machines need to be HIPPA compliant and who knows what their network/firewall situation is.&lt;/p&gt;\n\n&lt;p&gt;Last time around I whipped up some really ugly self-installer that downloaded Anaconda and created a separate environment to keep dependencies isolated, but that was really messy. This time I was looking into making a .deb package with &lt;a href=\"https://github.com/spotify/dh-virtualenv\"&gt;dh-virtualenv&lt;/a&gt; but don&amp;#39;t like having to build Cython, Numpy and Scipy myself. I think I can probably just tar a miniconda environment and send it to them with another simple installer script but I&amp;#39;d like to know if there&amp;#39;s a better option.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Long story short, I've got a command line app I need to get onto computers at a couple of public health labs. It's used by a bunch of scientists and doctors who I don't think are extremely computer-literate and I don't have access to the computers themselves (certainly not remote, maybe after driving a ways).\n\nMy code exists in two packages, both of which I'd say are packaged following best practices. There is a simple console script entry point in the setup.py of one of them. All other dependencies are available from Pypi. However, these include things like Numpy and Scipy, which have a pretty complex build process and depend on some system libraries being present (OpenBLAS / LAPACK). One of my packages also includes some Cython modules.\n\nI pretty much need something completely self-contained. This only needs to be installed on Ubuntu 14.04, but the packages use some features of 3.5 and the default software repository only includes version 3.4. Besides, I don't think I can count on remote installation of packages working (Python or otherwise) because these machines need to be HIPPA compliant and who knows what their network/firewall situation is.\n\nLast time around I whipped up some really ugly self-installer that downloaded Anaconda and created a separate environment to keep dependencies isolated, but that was really messy. This time I was looking into making a .deb package with [dh-virtualenv](https://github.com/spotify/dh-virtualenv) but don't like having to build Cython, Numpy and Scipy myself. I think I can probably just tar a miniconda environment and send it to them with another simple installer script but I'd like to know if there's a better option.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "6516my", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 21, "report_reasons": null, "author": "Jumpy89", "saved": false, "mod_reports": [], "name": "t3_6516my", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/6516my/what_is_the_best_way_to_distribute_a_python_app/", "num_reports": null, "locked": false, "stickied": false, "created": 1492061642.0, "url": "https://www.reddit.com/r/Python/comments/6516my/what_is_the_best_way_to_distribute_a_python_app/", "author_flair_text": null, "quarantine": false, "title": "What is the best way to distribute a Python app with complex dependencies and C extensions?", "created_utc": 1492032842.0, "distinguished": null, "media": null, "upvote_ratio": 0.94, "num_comments": 18, "visited": false, "subreddit_type": "public", "ups": 21}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg9cegt", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "juliusc", "parent_id": "t1_dg8vy0e", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Great! Glad you liked my suggestion!!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great! Glad you liked my suggestion!!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9cegt", "score_hidden": false, "stickied": false, "created": 1492215382.0, "created_utc": 1492186582.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8vy0e", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Jumpy89", "parent_id": "t1_dg8sz3w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah, it's more work but it's great that it creates a completely dedicated environment for building and packaging. You can be sure that you have all your dependencies completely correct that way. It also solved my issue with needing numpy to build one of my packages (needed `numpy.get_include()` for the Cython extensions, but that means you can't even run the setup.py without numpy installed so you can't even read `serup_requires`).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, it&amp;#39;s more work but it&amp;#39;s great that it creates a completely dedicated environment for building and packaging. You can be sure that you have all your dependencies completely correct that way. It also solved my issue with needing numpy to build one of my packages (needed &lt;code&gt;numpy.get_include()&lt;/code&gt; for the Cython extensions, but that means you can&amp;#39;t even run the setup.py without numpy installed so you can&amp;#39;t even read &lt;code&gt;serup_requires&lt;/code&gt;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg8vy0e", "score_hidden": false, "stickied": false, "created": 1492182911.0, "created_utc": 1492154111.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg8sz3w", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "juliusc", "parent_id": "t1_dg72n5b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Sure, everything needs to be a conda package, but `conda-build` is great tool to build compiled extensions and any kind of package in general.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sure, everything needs to be a conda package, but &lt;code&gt;conda-build&lt;/code&gt; is great tool to build compiled extensions and any kind of package in general.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg8sz3w", "score_hidden": false, "stickied": false, "created": 1492176032.0, "created_utc": 1492147232.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg72n5b", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Jumpy89", "parent_id": "t1_dg6va97", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "So it turns out that to install your own packages they have to be built as conda packages. Kind of annoying, but I think I'm figuring it out. It actually simplifies the build process a bit once you've added all the metadata.\n\nThe installer is pretty great though, I should just be able to add a post-install bash script that adds a link to the executable and it's just a single step for whoever's installing it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So it turns out that to install your own packages they have to be built as conda packages. Kind of annoying, but I think I&amp;#39;m figuring it out. It actually simplifies the build process a bit once you&amp;#39;ve added all the metadata.&lt;/p&gt;\n\n&lt;p&gt;The installer is pretty great though, I should just be able to add a post-install bash script that adds a link to the executable and it&amp;#39;s just a single step for whoever&amp;#39;s installing it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg72n5b", "score_hidden": false, "stickied": false, "created": 1492082746.0, "created_utc": 1492053946.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg6wmr0", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Jumpy89", "parent_id": "t1_dg6va97", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This looks like it could be perfect.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This looks like it could be perfect.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6wmr0", "score_hidden": false, "stickied": false, "created": 1492075056.0, "created_utc": 1492046256.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6va97", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "juliusc", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Take a look at [Constructor](https://github.com/conda/constructor/). It's the tool used by Continuum guys to create Anaconda/Miniconda installers.\n\nI think it's the perfect tool for your needs.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take a look at &lt;a href=\"https://github.com/conda/constructor/\"&gt;Constructor&lt;/a&gt;. It&amp;#39;s the tool used by Continuum guys to create Anaconda/Miniconda installers.&lt;/p&gt;\n\n&lt;p&gt;I think it&amp;#39;s the perfect tool for your needs.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6va97", "score_hidden": false, "stickied": false, "created": 1492073404.0, "created_utc": 1492044604.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg6tdw3", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "edric_garran", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If all the dependencies are pip installable, the simplest way is to just pip install -t distdir and have all dependencies in the same directory. \nTools like pyinstaller and cxfreeze go further and give you a standalone distributable package, so that's probably what you need.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If all the dependencies are pip installable, the simplest way is to just pip install -t distdir and have all dependencies in the same directory. \nTools like pyinstaller and cxfreeze go further and give you a standalone distributable package, so that&amp;#39;s probably what you need.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6tdw3", "score_hidden": false, "stickied": false, "created": 1492071150.0, "created_utc": 1492042350.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg854rr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "wandering_blue", "parent_id": "t1_dg79k4w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Docker can run an interactive session.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Docker can run an interactive session.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg854rr", "score_hidden": false, "stickied": false, "created": 1492142943.0, "created_utc": 1492114143.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg79k4w", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Jumpy89", "parent_id": "t1_dg793nc", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Is docker suitable for a command line app? I thought it was more for things that needed to run continuously, like web services.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is docker suitable for a command line app? I thought it was more for things that needed to run continuously, like web services.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg79k4w", "score_hidden": false, "stickied": false, "created": 1492095647.0, "created_utc": 1492066847.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg793nc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "alexprengere", "parent_id": "t1_dg784ve", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Really, take a look at Docker!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Really, take a look at Docker!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg793nc", "score_hidden": false, "stickied": false, "created": 1492094453.0, "created_utc": 1492065653.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg784ve", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "denfromufa", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Pyinstaller, cx_freeze, pynsist, constructor, nuitka, docker", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pyinstaller, cx_freeze, pynsist, constructor, nuitka, docker&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg784ve", "score_hidden": false, "stickied": false, "created": 1492092124.0, "created_utc": 1492063324.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg7uxma", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "brejoc", "parent_id": "t1_dg6txh5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'd second fpm. And if you're\u200b open to experiments you can check out [basalt](https://github.com/basalt/basalt/blob/master/README.md).\nPS: I'm the author of basalt. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d second fpm. And if you&amp;#39;re\u200b open to experiments you can check out &lt;a href=\"https://github.com/basalt/basalt/blob/master/README.md\"&gt;basalt&lt;/a&gt;.\nPS: I&amp;#39;m the author of basalt. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7uxma", "score_hidden": false, "stickied": false, "created": 1492131982.0, "created_utc": 1492103182.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6txh5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6txh5", "score_hidden": false, "stickied": false, "created": 1492071812.0, "created_utc": 1492043012.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg79ktf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "stibbons_", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Standard way is to build wheel, which hold the code and compiled module for a given machine.\nThere is no standard way of packing all dependencies in a single executable. Pex is a great candidate.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Standard way is to build wheel, which hold the code and compiled module for a given machine.\nThere is no standard way of packing all dependencies in a single executable. Pex is a great candidate.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg79ktf", "score_hidden": false, "stickied": false, "created": 1492095697.0, "created_utc": 1492066897.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg6sdgc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "efmccurdy", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Can you include wheel files taken from here in your .deb package?\n\nhttps://pypi.python.org/pypi/numpy\n\nhttps://pypi.python.org/pypi/scipy", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you include wheel files taken from here in your .deb package?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.python.org/pypi/numpy\"&gt;https://pypi.python.org/pypi/numpy&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.python.org/pypi/scipy\"&gt;https://pypi.python.org/pypi/scipy&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6sdgc", "score_hidden": false, "stickied": false, "created": 1492069872.0, "created_utc": 1492041072.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg6wxyf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "P8zvli", "parent_id": "t1_dg6wjyz", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; I believe stdeb creates a different debian package for every Python package.\n\nDepends on how you package it, if you include the packages you need in your setup.py script before you build and bdist_deb it they will be packed into the .deb file. (You need to give distutils the name of the package and the path to it)\n\n&gt; And I still run into the same problem with needing to link to system libraries.\n\nIf you're dynamically linking system libraries with the distutils ``Extension`` class stdeb will check the package that library belongs to as a dependency and dpkg will alert the user with the name of the missing dependency if any are missing.", "edited": 1492048479.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I believe stdeb creates a different debian package for every Python package.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Depends on how you package it, if you include the packages you need in your setup.py script before you build and bdist_deb it they will be packed into the .deb file. (You need to give distutils the name of the package and the path to it)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;And I still run into the same problem with needing to link to system libraries.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If you&amp;#39;re dynamically linking system libraries with the distutils &lt;code&gt;Extension&lt;/code&gt; class stdeb will check the package that library belongs to as a dependency and dpkg will alert the user with the name of the missing dependency if any are missing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6wxyf", "score_hidden": false, "stickied": false, "created": 1492075447.0, "created_utc": 1492046647.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6wjyz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Jumpy89", "parent_id": "t1_dg6vvk4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I believe stdeb creates a different debian package for every Python package. And I still run into the same problem with needing to link to system libraries.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe stdeb creates a different debian package for every Python package. And I still run into the same problem with needing to link to system libraries.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6wjyz", "score_hidden": false, "stickied": false, "created": 1492074961.0, "created_utc": 1492046161.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6vvk4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "P8zvli", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If installing .deb packages is on the table what's wrong with using distutils or setuptools and [stdeb](https://pypi.python.org/pypi/stdeb/0.8.5) to make a .deb package?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If installing .deb packages is on the table what&amp;#39;s wrong with using distutils or setuptools and &lt;a href=\"https://pypi.python.org/pypi/stdeb/0.8.5\"&gt;stdeb&lt;/a&gt; to make a .deb package?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6vvk4", "score_hidden": false, "stickied": false, "created": 1492074122.0, "created_utc": 1492045322.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_6516my", "likes": null, "replies": "", "user_reports": [], "id": "dg7cr0k", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Tomarse", "parent_id": "t3_6516my", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I usually cx_freeze it and then bundle the files into an msi.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I usually cx_freeze it and then bundle the files into an msi.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7cr0k", "score_hidden": false, "stickied": false, "created": 1492105011.0, "created_utc": 1492076211.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]