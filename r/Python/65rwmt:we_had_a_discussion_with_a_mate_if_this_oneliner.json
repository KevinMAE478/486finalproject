[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;One-liner in quotes because it still spans on multiple lines:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def event_filter(*funcs, **attributes):\n    &amp;quot;&amp;quot;&amp;quot;Filter events through functions and by attributes.\n\n    Usage example:\n\n        @event_filter(\n            # Filter with a function (get access to self)\n            lambda self, e: e.key in self.bindings,\n\n            # Filter based on event&amp;#39;s attributes \n            type=pygame.KEYDOWN,\n        )\n        def handle_event(self, event):\n            ...\n    &amp;quot;&amp;quot;&amp;quot;&amp;quot; \n    def decorator(handle_event):\n        def wrapper(self, event):\n            return handle_event(self, event) if (\n                all(func(self, event) for func in funcs) and\n                all(getattr(event, k) == v for k, v in attributes.items())\n            ) else None\n        return wrapper\n    return decorator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The debated part is this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return handle_event(self, event) if (\n    all(func(self, event) for func in funcs) and\n    all(getattr(event, k) == v for k, v in attributes.items())\n) else None\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It just looks ugly and hard-to-read to me, but it&amp;#39;s got a good use (or two) of  the &lt;code&gt;all()&lt;/code&gt; function for sure. What do other pythonistas think, am I just old school to avoid this?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Also, if others do find this ugly, how would you write it instead? Here are a few I&amp;#39;ve been tinkering over in my head:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if any(not func(self, event) for func in funcs):\n    return\nif any(getattr(event, key) != value for key, value in attributes.items()):\n    return\nreturn handle_event(self, event)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or a plain &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for func in funcs:\n    if not func(self, event):\n        return\nfor key, value in attributes:\n    if getattr(event, key) != value:\n        return\nreturn handle_event(self, event)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "One-liner in quotes because it still spans on multiple lines:\n\n    def event_filter(*funcs, **attributes):\n        \"\"\"Filter events through functions and by attributes.\n\n        Usage example:\n\n            @event_filter(\n                # Filter with a function (get access to self)\n                lambda self, e: e.key in self.bindings,\n\n                # Filter based on event's attributes \n                type=pygame.KEYDOWN,\n            )\n            def handle_event(self, event):\n                ...\n        \"\"\"\" \n        def decorator(handle_event):\n            def wrapper(self, event):\n                return handle_event(self, event) if (\n                    all(func(self, event) for func in funcs) and\n                    all(getattr(event, k) == v for k, v in attributes.items())\n                ) else None\n            return wrapper\n        return decorator\n\nThe debated part is this:\n\n    return handle_event(self, event) if (\n        all(func(self, event) for func in funcs) and\n        all(getattr(event, k) == v for k, v in attributes.items())\n    ) else None\n\nIt just looks ugly and hard-to-read to me, but it's got a good use (or two) of  the `all()` function for sure. What do other pythonistas think, am I just old school to avoid this?\n\n**Edit:** Also, if others do find this ugly, how would you write it instead? Here are a few I've been tinkering over in my head:\n\n    if any(not func(self, event) for func in funcs):\n        return\n    if any(getattr(event, key) != value for key, value in attributes.items()):\n        return\n    return handle_event(self, event)\n\nOr a plain `for` loop:\n\n    for func in funcs:\n        if not func(self, event):\n            return\n    for key, value in attributes:\n        if getattr(event, key) != value:\n            return\n    return handle_event(self, event)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65rwmt", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 9, "report_reasons": null, "author": "markusmeskanen", "saved": false, "mod_reports": [], "name": "t3_65rwmt", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": 1492382841.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65rwmt/we_had_a_discussion_with_a_mate_if_this_oneliner/", "num_reports": null, "locked": false, "stickied": false, "created": 1492411362.0, "url": "https://www.reddit.com/r/Python/comments/65rwmt/we_had_a_discussion_with_a_mate_if_this_oneliner/", "author_flair_text": null, "quarantine": false, "title": "We had a discussion with a mate if this \"one-liner\" decorator is Pythonic, any opinions?", "created_utc": 1492382562.0, "distinguished": null, "media": null, "upvote_ratio": 0.71, "num_comments": 8, "visited": false, "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": "", "user_reports": [], "id": "dgd38zn", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "EsperCharmMyself", "parent_id": "t1_dgcpnlp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt;Not sure why you'd want to explicitly return None when it would be easier to fall off of the end of the function.\n\nIMHO functions should either explicitly return from every (non-exceptional) code path, or not explicitly return at all. It's too easy for the reader to forget about the implicit `return None`, and there's no downside to being explicit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Not sure why you&amp;#39;d want to explicitly return None when it would be easier to fall off of the end of the function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;IMHO functions should either explicitly return from every (non-exceptional) code path, or not explicitly return at all. It&amp;#39;s too easy for the reader to forget about the implicit &lt;code&gt;return None&lt;/code&gt;, and there&amp;#39;s no downside to being explicit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd38zn", "score_hidden": false, "stickied": false, "created": 1492431012.0, "created_utc": 1492402212.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": "", "user_reports": [], "id": "dgcyfbo", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "cymrow", "parent_id": "t1_dgctiiv", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "In this case, sure. It seems the function calls may be expensive. Most of the cases where I've needed this have either been cheap calculations in which simplicity wins, or involved `or` statements.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In this case, sure. It seems the function calls may be expensive. Most of the cases where I&amp;#39;ve needed this have either been cheap calculations in which simplicity wins, or involved &lt;code&gt;or&lt;/code&gt; statements.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcyfbo", "score_hidden": false, "stickied": false, "created": 1492423963.0, "created_utc": 1492395163.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgctiiv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "markusmeskanen", "parent_id": "t1_dgcrihi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's better to return after every check though (if the check failed), so you don't end up wasting time processing the remaining checks.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s better to return after every check though (if the check failed), so you don&amp;#39;t end up wasting time processing the remaining checks.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgctiiv", "score_hidden": false, "stickied": false, "created": 1492417389.0, "created_utc": 1492388589.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcrihi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cymrow", "parent_id": "t1_dgcpnlp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This is what I do when I have complex logic to handle. Process each step individually and give it a good name. Then the `if` statement can be read at a glance, and you know where to look for more detail.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is what I do when I have complex logic to handle. Process each step individually and give it a good name. Then the &lt;code&gt;if&lt;/code&gt; statement can be read at a glance, and you know where to look for more detail.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcrihi", "score_hidden": false, "stickied": false, "created": 1492414683.0, "created_utc": 1492385883.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcpnlp", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "ingolemo", "parent_id": "t3_65rwmt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That's a perfectly good use of `all` but that's no reason to use a one-liner. Not sure why you'd want to explicitly return None when it would be easier to fall off of the end of the function.\n\n    passes_funcs = all(func(self, event) for func in funcs)\n    passes_attrs = all(getattr(event, k) == v for k, v in attributes.items())\n    if passes_funcs and passes_attrs:\n        return handle_event(self, event)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a perfectly good use of &lt;code&gt;all&lt;/code&gt; but that&amp;#39;s no reason to use a one-liner. Not sure why you&amp;#39;d want to explicitly return None when it would be easier to fall off of the end of the function.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;passes_funcs = all(func(self, event) for func in funcs)\npasses_attrs = all(getattr(event, k) == v for k, v in attributes.items())\nif passes_funcs and passes_attrs:\n    return handle_event(self, event)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcpnlp", "score_hidden": false, "stickied": false, "created": 1492412127.0, "created_utc": 1492383327.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": "", "user_reports": [], "id": "dgd79d9", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "XNormal", "parent_id": "t3_65rwmt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "    match = (\n        all(func(self, event) for func in funcs) and\n        all(getattr(event, k) == v for k, v in attributes.items())\n    )\n    return handle_event(self, event) if match else None\n\nMy favorite method of rewriting large expressions is to take subparts and give them a name. Unlike the other rewrites proposed, this one does not convert an expression into control flow.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;match = (\n    all(func(self, event) for func in funcs) and\n    all(getattr(event, k) == v for k, v in attributes.items())\n)\nreturn handle_event(self, event) if match else None\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My favorite method of rewriting large expressions is to take subparts and give them a name. Unlike the other rewrites proposed, this one does not convert an expression into control flow.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd79d9", "score_hidden": false, "stickied": false, "created": 1492438828.0, "created_utc": 1492410028.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": "", "user_reports": [], "id": "dgcstdf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pydry", "parent_id": "t3_65rwmt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt;It just looks ugly and hard-to-read to me\n\nLooks nice to me. I'd much prefer to see it over the other two.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;It just looks ugly and hard-to-read to me&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Looks nice to me. I&amp;#39;d much prefer to see it over the other two.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcstdf", "score_hidden": false, "stickied": false, "created": 1492416444.0, "created_utc": 1492387644.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65rwmt", "likes": null, "replies": "", "user_reports": [], "id": "dgd725i", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheFarwind", "parent_id": "t3_65rwmt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I disagree with it being hard to read -- Just following the logic of your one-liner (particularly with how you've indented the lines) I think it's easy to see what's happening. You can kinda read it aloud and say a complete thought. Written imperatively, there's too much extra crap between the important bits.\n\nI think examples like this are where functional style (your main example) are better than imperative style (your third example), simply because as the logic gets more complex, you avoid the deeply nested if statements that can become unmanageable.\n\nYou're second example I don't like, because it breaks up the logic.\n\n(I feel like a snob after writing this. I apologize).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I disagree with it being hard to read -- Just following the logic of your one-liner (particularly with how you&amp;#39;ve indented the lines) I think it&amp;#39;s easy to see what&amp;#39;s happening. You can kinda read it aloud and say a complete thought. Written imperatively, there&amp;#39;s too much extra crap between the important bits.&lt;/p&gt;\n\n&lt;p&gt;I think examples like this are where functional style (your main example) are better than imperative style (your third example), simply because as the logic gets more complex, you avoid the deeply nested if statements that can become unmanageable.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re second example I don&amp;#39;t like, because it breaks up the logic.&lt;/p&gt;\n\n&lt;p&gt;(I feel like a snob after writing this. I apologize).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd725i", "score_hidden": false, "stickied": false, "created": 1492438386.0, "created_utc": 1492409586.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]