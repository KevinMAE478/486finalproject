[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was profiling some unittest code because CI took too long and I found out someone put &lt;code&gt;time.sleep(30)&lt;/code&gt; inside some test. The code tests if generated oauth tokens get invalidated after 30s. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve heard that unittest should not take more than 0.1 seconds so naturally I&amp;#39;d like it gone. &lt;/p&gt;\n\n&lt;p&gt;And I just realized I can mock &lt;code&gt;datetime.datetime.now()&lt;/code&gt; with MagicMock, problem solved! Thanks guys!&lt;/p&gt;\n\n&lt;p&gt;edit: Does anyone know how to set bcrypt rounds low when testing?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I was profiling some unittest code because CI took too long and I found out someone put `time.sleep(30)` inside some test. The code tests if generated oauth tokens get invalidated after 30s. \n\nI've heard that unittest should not take more than 0.1 seconds so naturally I'd like it gone. \n\nAnd I just realized I can mock `datetime.datetime.now()` with MagicMock, problem solved! Thanks guys!\n\n\n edit: Does anyone know how to set bcrypt rounds low when testing?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65nakd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 3, "report_reasons": null, "author": "qria", "saved": false, "mod_reports": [], "name": "t3_65nakd", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": 1492391275.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65nakd/best_way_to_unittest_timedependent_behaviors/", "num_reports": null, "locked": false, "stickied": false, "created": 1492343543.0, "url": "https://www.reddit.com/r/Python/comments/65nakd/best_way_to_unittest_timedependent_behaviors/", "author_flair_text": null, "quarantine": false, "title": "Best way to unittest time-dependent behaviors?", "created_utc": 1492314743.0, "distinguished": null, "media": null, "upvote_ratio": 0.68, "num_comments": 2, "visited": false, "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65nakd", "likes": null, "replies": "", "user_reports": [], "id": "dgcue3m", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "kurashu89", "parent_id": "t3_65nakd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You want most of your unit tests run fast, but having a few slow ones is okay (though 30 seconds is but a much). \n\nI'm not sure I'd reach for patching classes as a first thought - [though I'll cop to doing it, albeit for other reasons](https://github.com/justanr/datestuff/blob/master/tests/conftest.py) \n\nAssuming the code that generates/validates the tokens accepts some sort of clock (doubtful, most people tend to just call datetime constructors) you can just give it a datetime-like class that returns whatever time you want. Alternatively, create a fake token in the test that's already expired and use that instead. \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You want most of your unit tests run fast, but having a few slow ones is okay (though 30 seconds is but a much). &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not sure I&amp;#39;d reach for patching classes as a first thought - &lt;a href=\"https://github.com/justanr/datestuff/blob/master/tests/conftest.py\"&gt;though I&amp;#39;ll cop to doing it, albeit for other reasons&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Assuming the code that generates/validates the tokens accepts some sort of clock (doubtful, most people tend to just call datetime constructors) you can just give it a datetime-like class that returns whatever time you want. Alternatively, create a fake token in the test that&amp;#39;s already expired and use that instead. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcue3m", "score_hidden": false, "stickied": false, "created": 1492418574.0, "created_utc": 1492389774.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65nakd", "likes": null, "replies": "", "user_reports": [], "id": "dgdavv5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "maxnoe", "parent_id": "t3_65nakd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "We use the freezegun library to manipulate time for unit tests. Check it out!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We use the freezegun library to manipulate time for unit tests. Check it out!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdavv5", "score_hidden": false, "stickied": false, "created": 1492449181.0, "created_utc": 1492420381.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]