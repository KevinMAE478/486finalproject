[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "651gti", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 92, "report_reasons": null, "author": "SDisPater", "saved": false, "mod_reports": [], "name": "t3_651gti", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/651gti/poet_dependency_management_for_python/", "num_reports": null, "locked": false, "stickied": false, "created": 1492064449.0, "url": "https://github.com/sdispater/poet", "author_flair_text": null, "quarantine": false, "title": "Poet: Dependency Management for Python", "created_utc": 1492035649.0, "distinguished": null, "media": null, "upvote_ratio": 0.93, "num_comments": 37, "visited": false, "subreddit_type": "public", "ups": 92}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7guif", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Corm", "parent_id": "t1_dg6uri4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm sitting here trying to think of why those 2 problems should be different (like that other guy said) but I can't think of why. \n\nWhy not have an all-in-one solution? What's the tradeoff?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m sitting here trying to think of why those 2 problems should be different (like that other guy said) but I can&amp;#39;t think of why. &lt;/p&gt;\n\n&lt;p&gt;Why not have an all-in-one solution? What&amp;#39;s the tradeoff?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7guif", "score_hidden": false, "stickied": false, "created": 1492115087.0, "created_utc": 1492086287.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dge6i5c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg9jdgm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "At the moment, it's not possible to use packaging and publishing separatly from dependency management. Also, `poet` uses `pip-tools` to resolve dependencies.\n\nAnd if you like the `requirements.txt` generated by `pip-tools` (which I can understand) you light also like the `poetry.lock` file generated by `poet`:\n\n    [root]\n    name = \"pypoet\"\n    version = \"0.3.2\"\n\n    [features]\n    markdown-readme = [\n        \"pypandoc\"\n    ]\n    \n    [[package]]\n    name = \"args\"\n    version = \"0.1.0\"\n    category = \"main\"\n    optional = false\n    checksum = [\n        \"sha256:a785b8d837625e9b61c39108532d95b85274acd679693b71ebb5156848fcf814\"\n    ]\n    python = [\n        \"*\"\n    ]\n    \n    [[package]]\n    name = \"backpack\"\n    version = \"0.1\"\n    category = \"main\"\n    optional = false\n    checksum = [\n        \"sha256:0162cf7b34c810ba4ddbbd32a1e5e804ef96fcf2fea5ce2848aa4950770d3893\"\n    ]\n    python = [\n        \"*\"\n    ]\n    \n    [[package]]\n    name = \"cleo\"\n    category = \"main\"\n    optional = false\n    checksum = [\n        \"sha1:36289fd83ab70ab9f844e305a4f4e50f3c918bd8\"\n    ]\n    python = [\n        \"*\"\n    ]\n    [package.version]\n    git = \"git+https://github.com/sdispater/cleo.git\"\n    rev = \"36289fd83ab70ab9f844e305a4f4e50f3c918bd8\"\u00a0", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At the moment, it&amp;#39;s not possible to use packaging and publishing separatly from dependency management. Also, &lt;code&gt;poet&lt;/code&gt; uses &lt;code&gt;pip-tools&lt;/code&gt; to resolve dependencies.&lt;/p&gt;\n\n&lt;p&gt;And if you like the &lt;code&gt;requirements.txt&lt;/code&gt; generated by &lt;code&gt;pip-tools&lt;/code&gt; (which I can understand) you light also like the &lt;code&gt;poetry.lock&lt;/code&gt; file generated by &lt;code&gt;poet&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[root]\nname = &amp;quot;pypoet&amp;quot;\nversion = &amp;quot;0.3.2&amp;quot;\n\n[features]\nmarkdown-readme = [\n    &amp;quot;pypandoc&amp;quot;\n]\n\n[[package]]\nname = &amp;quot;args&amp;quot;\nversion = &amp;quot;0.1.0&amp;quot;\ncategory = &amp;quot;main&amp;quot;\noptional = false\nchecksum = [\n    &amp;quot;sha256:a785b8d837625e9b61c39108532d95b85274acd679693b71ebb5156848fcf814&amp;quot;\n]\npython = [\n    &amp;quot;*&amp;quot;\n]\n\n[[package]]\nname = &amp;quot;backpack&amp;quot;\nversion = &amp;quot;0.1&amp;quot;\ncategory = &amp;quot;main&amp;quot;\noptional = false\nchecksum = [\n    &amp;quot;sha256:0162cf7b34c810ba4ddbbd32a1e5e804ef96fcf2fea5ce2848aa4950770d3893&amp;quot;\n]\npython = [\n    &amp;quot;*&amp;quot;\n]\n\n[[package]]\nname = &amp;quot;cleo&amp;quot;\ncategory = &amp;quot;main&amp;quot;\noptional = false\nchecksum = [\n    &amp;quot;sha1:36289fd83ab70ab9f844e305a4f4e50f3c918bd8&amp;quot;\n]\npython = [\n    &amp;quot;*&amp;quot;\n]\n[package.version]\ngit = &amp;quot;git+https://github.com/sdispater/cleo.git&amp;quot;\nrev = &amp;quot;36289fd83ab70ab9f844e305a4f4e50f3c918bd8&amp;quot;\u00a0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge6i5c", "score_hidden": false, "stickied": false, "created": 1492494469.0, "created_utc": 1492465669.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9jdgm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "AndydeCleyre", "parent_id": "t1_dg7plun", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Can you do the reverse -- just use the packaging and publishing, while relying on other methods (pip-tools) for dependency management?\n\nFor example, with [some aliases](https://pastebin.com/LymbdMKx), I manage like this:\n\n    # create/activate venv with pip-tools, synced to requirements.txt:\n    envin\n\n    # add modules to requirements.in:\n    pipa requests plumbum structlog\n\n    # compile requirements.txt from requirements.in, with dep versions and reasons:\n    pipc\n\n    # sync env according to requirements.txt:\n    pips\n\n    # bump specific required module version:\n    pipu requests\n\n    # bump all required module versions:\n    pipu\n\nAnd the requirements.txt files are beautiful, IMO.\n\nWith this `requirements.in`:\n\n    ipython\n    plumbum\n\nWe get this `requirements.txt`:\n\n    decorator==4.0.11         # via ipython, traitlets\n    ipython-genutils==0.2.0   # via traitlets\n    ipython==5.3.0\n    pexpect==4.2.1            # via ipython\n    pickleshare==0.7.4        # via ipython\n    plumbum==1.6.3\n    prompt-toolkit==1.0.14    # via ipython\n    ptyprocess==0.5.1         # via pexpect\n    pygments==2.2.0           # via ipython\n    simplegeneric==0.8.1      # via ipython\n    six==1.10.0               # via prompt-toolkit, traitlets\n    traitlets==4.3.2          # via ipython\n    wcwidth==0.1.7            # via prompt-toolkit", "edited": 1492226565.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you do the reverse -- just use the packaging and publishing, while relying on other methods (pip-tools) for dependency management?&lt;/p&gt;\n\n&lt;p&gt;For example, with &lt;a href=\"https://pastebin.com/LymbdMKx\"&gt;some aliases&lt;/a&gt;, I manage like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# create/activate venv with pip-tools, synced to requirements.txt:\nenvin\n\n# add modules to requirements.in:\npipa requests plumbum structlog\n\n# compile requirements.txt from requirements.in, with dep versions and reasons:\npipc\n\n# sync env according to requirements.txt:\npips\n\n# bump specific required module version:\npipu requests\n\n# bump all required module versions:\npipu\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the requirements.txt files are beautiful, IMO.&lt;/p&gt;\n\n&lt;p&gt;With this &lt;code&gt;requirements.in&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ipython\nplumbum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We get this &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;decorator==4.0.11         # via ipython, traitlets\nipython-genutils==0.2.0   # via traitlets\nipython==5.3.0\npexpect==4.2.1            # via ipython\npickleshare==0.7.4        # via ipython\nplumbum==1.6.3\nprompt-toolkit==1.0.14    # via ipython\nptyprocess==0.5.1         # via pexpect\npygments==2.2.0           # via ipython\nsimplegeneric==0.8.1      # via ipython\nsix==1.10.0               # via prompt-toolkit, traitlets\ntraitlets==4.3.2          # via ipython\nwcwidth==0.1.7            # via prompt-toolkit\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9jdgm", "score_hidden": false, "stickied": false, "created": 1492223402.0, "created_utc": 1492194602.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7plun", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg7bfwt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You can just use the dependency management part if you want, it's not mandatory to use the packaging and publishing features.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can just use the dependency management part if you want, it&amp;#39;s not mandatory to use the packaging and publishing features.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7plun", "score_hidden": false, "stickied": false, "created": 1492126313.0, "created_utc": 1492097513.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7bfwt", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "prickneck", "parent_id": "t1_dg6uri4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I would personally see them as two discrete problems and not one big problem to be solved by one big \"all-in-one tool\". \n\nBut whatever you're into.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would personally see them as two discrete problems and not one big problem to be solved by one big &amp;quot;all-in-one tool&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;But whatever you&amp;#39;re into.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7bfwt", "score_hidden": false, "stickied": false, "created": 1492100985.0, "created_utc": 1492072185.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uri4", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg6udma", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "pipenv only handles dependencies and eases virtualenv handling but in the end to package and publish your package to pypi you will still need to create a MANIFEST.in, a setup.py file and so on. So, as I see it the Pipfile file only replaces the requirements.txt which is used by pip.\n\nSo, pipenv only solves part of the problem while poet tries to be a all-in-one tool to handle the standard Python package and application workflow.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;pipenv only handles dependencies and eases virtualenv handling but in the end to package and publish your package to pypi you will still need to create a MANIFEST.in, a setup.py file and so on. So, as I see it the Pipfile file only replaces the requirements.txt which is used by pip.&lt;/p&gt;\n\n&lt;p&gt;So, pipenv only solves part of the problem while poet tries to be a all-in-one tool to handle the standard Python package and application workflow.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6uri4", "score_hidden": false, "stickied": false, "created": 1492072796.0, "created_utc": 1492043996.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6udma", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "singleton11", "parent_id": "t1_dg6nzqr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What difference between poet and pipenv?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What difference between poet and pipenv?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6udma", "score_hidden": false, "stickied": false, "created": 1492072350.0, "created_utc": 1492043550.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7mmjt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "epage", "parent_id": "t1_dg6nzqr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This looks awesome.  I've been loving cargo and frustrated with Python's packaging story.\n\nHas work started on [configuration](http://doc.crates.io/config.html) so we can configure the equivalent of pip.ini like custom pypi servers, find-links, etc?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This looks awesome.  I&amp;#39;ve been loving cargo and frustrated with Python&amp;#39;s packaging story.&lt;/p&gt;\n\n&lt;p&gt;Has work started on &lt;a href=\"http://doc.crates.io/config.html\"&gt;configuration&lt;/a&gt; so we can configure the equivalent of pip.ini like custom pypi servers, find-links, etc?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7mmjt", "score_hidden": false, "stickied": false, "created": 1492123010.0, "created_utc": 1492094210.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6nzqr", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "SDisPater", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Poet is a new tool for Python to help you declare, manage and install dependencies of your projects.\n\nI started building it because I wanted to have something simpler than what is currently existing.\n\nPackaging system and dependency management in Python is rather convoluted and hard to understand for newcomers. Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: `setup.py`, `requirements.txt`, `setup.cfg`, `MANIFEST.in`.\n\nSo I wanted a tool that would limit everything to a single configuration file to do everything: dependency management, packaging and publishing.\n\nIt takes inspiration in tools that exist in other languages, like `composer` (PHP) or `cargo` (Rust). The `poetry.toml` file is mostly the same as the `Cargo.toml` one for example.\n\nNote that there is no magic here, `poet` uses existing tools (`pip`, `twine`, `setuptools`, `distutils`, `pip-tools`) under the hood to achieve that in a more intuitive way.\n\nI would also like to point out that, at this time, it is highly experimental and mostly still at a proof of concept stage but I\u2019d gladly appreciate feedback and pull requests to improve it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Poet is a new tool for Python to help you declare, manage and install dependencies of your projects.&lt;/p&gt;\n\n&lt;p&gt;I started building it because I wanted to have something simpler than what is currently existing.&lt;/p&gt;\n\n&lt;p&gt;Packaging system and dependency management in Python is rather convoluted and hard to understand for newcomers. Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;MANIFEST.in&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So I wanted a tool that would limit everything to a single configuration file to do everything: dependency management, packaging and publishing.&lt;/p&gt;\n\n&lt;p&gt;It takes inspiration in tools that exist in other languages, like &lt;code&gt;composer&lt;/code&gt; (PHP) or &lt;code&gt;cargo&lt;/code&gt; (Rust). The &lt;code&gt;poetry.toml&lt;/code&gt; file is mostly the same as the &lt;code&gt;Cargo.toml&lt;/code&gt; one for example.&lt;/p&gt;\n\n&lt;p&gt;Note that there is no magic here, &lt;code&gt;poet&lt;/code&gt; uses existing tools (&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt;, &lt;code&gt;distutils&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;) under the hood to achieve that in a more intuitive way.&lt;/p&gt;\n\n&lt;p&gt;I would also like to point out that, at this time, it is highly experimental and mostly still at a proof of concept stage but I\u2019d gladly appreciate feedback and pull requests to improve it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6nzqr", "score_hidden": false, "stickied": false, "created": 1492064456.0, "created_utc": 1492035656.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg79b9y", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "iBlag", "parent_id": "t1_dg6uw0k", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Agreed, this looks super cool!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Agreed, this looks super cool!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg79b9y", "score_hidden": false, "stickied": false, "created": 1492094985.0, "created_utc": 1492066185.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uw0k", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Duroktar", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "While I haven't tried it (yet) I must say the cli _looks_ stellar. Good job sir.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;While I haven&amp;#39;t tried it (yet) I must say the cli &lt;em&gt;looks&lt;/em&gt; stellar. Good job sir.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6uw0k", "score_hidden": false, "stickied": false, "created": 1492072951.0, "created_utc": 1492044151.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg6yn39", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg6xl7q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Like I said, it's a proof of concept of what a decent dependency manager and packaging tool could look like. Python really need one. I mean, a lot of other languages already have one (like composer for PHP or cargo for Rust) and Python really drags behind.\n\nAnd to be fair, there are not much of these tools in Python. We have pip, even though I think it's sub par, pip-tools which really good at properly resolving dependencies and that's why poet uses it and pipenv which only adresses the issue of dependencies and virtualenvs but is not as good as pip-tools. I may be missing some but I think those are the most popular right now. And it's understandable because it's a tough subject to tackle.\n\nFinally I agree completely that we should have a tool like this in the stdlib but yet we still have none.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like I said, it&amp;#39;s a proof of concept of what a decent dependency manager and packaging tool could look like. Python really need one. I mean, a lot of other languages already have one (like composer for PHP or cargo for Rust) and Python really drags behind.&lt;/p&gt;\n\n&lt;p&gt;And to be fair, there are not much of these tools in Python. We have pip, even though I think it&amp;#39;s sub par, pip-tools which really good at properly resolving dependencies and that&amp;#39;s why poet uses it and pipenv which only adresses the issue of dependencies and virtualenvs but is not as good as pip-tools. I may be missing some but I think those are the most popular right now. And it&amp;#39;s understandable because it&amp;#39;s a tough subject to tackle.&lt;/p&gt;\n\n&lt;p&gt;Finally I agree completely that we should have a tool like this in the stdlib but yet we still have none.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6yn39", "score_hidden": false, "stickied": false, "created": 1492077552.0, "created_utc": 1492048752.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg6xlsn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "xkcd_transcriber", "parent_id": "t1_dg6xl7q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "[Image](https://imgs.xkcd.com/comics/standards.png)\n\n[Mobile](https://m.xkcd.com/927/)\n\n**Title:** Standards\n\n**Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\\-USB\\. Or is it micro\\-USB? Shit\\.\n\n[Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation)\n\n**Stats:** This comic has been referenced 4436 times, representing 2.8637% of referenced xkcds.\n\n---\n^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd\u00a0sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop\u00a0Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dg6xlsn)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://imgs.xkcd.com/comics/standards.png\"&gt;Image&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://m.xkcd.com/927/\"&gt;Mobile&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Title:&lt;/strong&gt; Standards&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Title-text:&lt;/strong&gt; Fortunately, the charging one has been solved now that we&amp;#39;ve all standardized on mini-USB. Or is it micro-USB? Shit.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.explainxkcd.com/wiki/index.php/927#Explanation\"&gt;Comic Explanation&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stats:&lt;/strong&gt; This comic has been referenced 4436 times, representing 2.8637% of referenced xkcds.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;a href=\"https://www.xkcd.com\"&gt;xkcd.com&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;|&lt;/sup&gt; &lt;sup&gt;&lt;a href=\"https://www.reddit.com/r/xkcd/\"&gt;xkcd\u00a0sub&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;|&lt;/sup&gt; &lt;sup&gt;&lt;a href=\"https://www.reddit.com/r/xkcd_transcriber/\"&gt;Problems/Bugs?&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;|&lt;/sup&gt; &lt;sup&gt;&lt;a href=\"http://xkcdref.info/statistics/\"&gt;Statistics&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;|&lt;/sup&gt; &lt;sup&gt;&lt;a href=\"https://reddit.com/message/compose/?to=xkcd_transcriber&amp;amp;subject=ignore%20me&amp;amp;message=ignore%20me\"&gt;Stop\u00a0Replying&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;|&lt;/sup&gt; &lt;sup&gt;&lt;a href=\"https://reddit.com/message/compose/?to=xkcd_transcriber&amp;amp;subject=delete&amp;amp;message=delete%20t1_dg6xlsn\"&gt;Delete&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6xlsn", "score_hidden": false, "stickied": false, "created": 1492076262.0, "created_utc": 1492047462.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7gumn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rabbyburns", "parent_id": "t1_dg6xl7q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The cool thing here is that if it does get past proof of concept he could always draft a PEP for it. Doesn't mean it would make it in, but it's possble.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The cool thing here is that if it does get past proof of concept he could always draft a PEP for it. Doesn&amp;#39;t mean it would make it in, but it&amp;#39;s possble.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7gumn", "score_hidden": false, "stickied": false, "created": 1492115093.0, "created_utc": 1492086293.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6xl7q", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "gandalfx", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "[Obligatory xkcd](https://xkcd.com/927/)\n\nThe interface looks decent. I'm just not sure if it's a good idea to try and throw another inofficial tool/standard into the mix. Most likely it won't catch on, but if it does we'll have to deal with yet another one that isn't supported by every project\u2026 Ideally you'd want one official tool (part of the std library!) with a properly defined interface.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://xkcd.com/927/\"&gt;Obligatory xkcd&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The interface looks decent. I&amp;#39;m just not sure if it&amp;#39;s a good idea to try and throw another inofficial tool/standard into the mix. Most likely it won&amp;#39;t catch on, but if it does we&amp;#39;ll have to deal with yet another one that isn&amp;#39;t supported by every project\u2026 Ideally you&amp;#39;d want one official tool (part of the std library!) with a properly defined interface.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6xl7q", "score_hidden": false, "stickied": false, "created": 1492076243.0, "created_utc": 1492047443.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7py9i", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg7fnen", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yes, it generates the necessary file internally but it's transparent for the user. So any package built an publish with poet will still work with pip or other standard tools.\n\nRegarding virtualenvs, I agree that people shouldn't have to worry about it. It's definitely something I have in my mind.\n\nAnd thanks for the kind words. I really appreciate it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, it generates the necessary file internally but it&amp;#39;s transparent for the user. So any package built an publish with poet will still work with pip or other standard tools.&lt;/p&gt;\n\n&lt;p&gt;Regarding virtualenvs, I agree that people shouldn&amp;#39;t have to worry about it. It&amp;#39;s definitely something I have in my mind.&lt;/p&gt;\n\n&lt;p&gt;And thanks for the kind words. I really appreciate it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7py9i", "score_hidden": false, "stickied": false, "created": 1492126682.0, "created_utc": 1492097882.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7fnen", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think you are on to something here.\n\nI'm going to follow this project.\n\nDoes it generate the setup.py, requirements.txt and MANIFEST.IN file and setup.cfg ? So that to make your package is installable without poet I mean.\n\nYou probably want to add virtualenv management in the mix like pipenv did (but less inflexible). Eventually it's also a complexity that should be abstracted away.\n\nGood luck on this project. The community needs something like that. And more.\n\nDo not listen to the people telling your it's one more solution to the problem. Because currently we don't have one GOOD solution to the problem. So I'll welcome anyone willing to put in the work to try.\n\nHave a look at some related projects like conda, pew, python pbr, snake food and pireqs for inspirations of all the potential features a good Python packaging tookit help with.", "edited": 1492084282.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think you are on to something here.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m going to follow this project.&lt;/p&gt;\n\n&lt;p&gt;Does it generate the setup.py, requirements.txt and MANIFEST.IN file and setup.cfg ? So that to make your package is installable without poet I mean.&lt;/p&gt;\n\n&lt;p&gt;You probably want to add virtualenv management in the mix like pipenv did (but less inflexible). Eventually it&amp;#39;s also a complexity that should be abstracted away.&lt;/p&gt;\n\n&lt;p&gt;Good luck on this project. The community needs something like that. And more.&lt;/p&gt;\n\n&lt;p&gt;Do not listen to the people telling your it&amp;#39;s one more solution to the problem. Because currently we don&amp;#39;t have one GOOD solution to the problem. So I&amp;#39;ll welcome anyone willing to put in the work to try.&lt;/p&gt;\n\n&lt;p&gt;Have a look at some related projects like conda, pew, python pbr, snake food and pireqs for inspirations of all the potential features a good Python packaging tookit help with.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7fnen", "score_hidden": false, "stickied": false, "created": 1492112793.0, "created_utc": 1492083993.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dge7rsy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg7kv9s", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yes, it should land in the next `0.4.0`\u00a0version.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, it should land in the next &lt;code&gt;0.4.0&lt;/code&gt;\u00a0version.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge7rsy", "score_hidden": false, "stickied": false, "created": 1492496058.0, "created_utc": 1492467258.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7kv9s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "whereswalden90", "parent_id": "t1_dg72vvy", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Any plans to support the general entry_points use case? This one is a dealbreaker for me since I use entry_points to support a plugin system.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Any plans to support the general entry_points use case? This one is a dealbreaker for me since I use entry_points to support a plugin system.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7kv9s", "score_hidden": false, "stickied": false, "created": 1492120898.0, "created_utc": 1492092098.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7pqqu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg7mfsx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's not possible at the moment. But you can file an issue\u00a0on the repository. I am really open to suggestions to improve it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not possible at the moment. But you can file an issue\u00a0on the repository. I am really open to suggestions to improve it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7pqqu", "score_hidden": false, "stickied": false, "created": 1492126462.0, "created_utc": 1492097662.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7mfsx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "epage", "parent_id": "t1_dg72vvy", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; This is already covered for console scripts by using the scripts section.\n\nHow do you handle other forms of `entry_points`, like registering with flake8?\n\nhttp://flake8.pycqa.org/en/latest/plugin-development/registering-plugins.html\nhttps://docs.openstack.org/developer/stevedore/", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;This is already covered for console scripts by using the scripts section.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;How do you handle other forms of &lt;code&gt;entry_points&lt;/code&gt;, like registering with flake8?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://flake8.pycqa.org/en/latest/plugin-development/registering-plugins.html\"&gt;http://flake8.pycqa.org/en/latest/plugin-development/registering-plugins.html&lt;/a&gt;\n&lt;a href=\"https://docs.openstack.org/developer/stevedore/\"&gt;https://docs.openstack.org/developer/stevedore/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7mfsx", "score_hidden": false, "stickied": false, "created": 1492122794.0, "created_utc": 1492093994.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg72vvy", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg717yq", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "At the moment, poet handles basic cases but I want to improve it.\n\n&gt; entry_points\n\nThis is already covered for console scripts by using the `scripts` section.\n\n    [scripts]\n    poet = 'poet:app.run'\n\nHere, we will have the poet script installed which will execute app.run in the poet package.\n\n&gt; Dynamic requirements depending on the version of python installing the package\n\nThis is something I want to support by providing a python version for dependencies like so:\n\n    [dependencies]\n    pathlib2 = { version = \"^2.2\", python = \"~2.7\" }\n\nHere the `pathlib2` package would only installed for Python 2.7.\n\n&gt; find_packages and package_dir\n\n`find_packages` is replaced by the `include` directive. In your example it would be:\n\n    include = ['src/**/*']\n\nPoet automatically detectes packages and modules provided by the `include` directive and populate the `packages` and `py_modules` of the setup.\n\n`package_dir` however is not currently supported.\n\n&gt; Compiled extensions (C family and Cython, etc) \n\nC extensions are supported via the `extensions` section:\n\n    [extensions]\n    \"my.module\" = \"my/module.c\"\n\nCython extensions however are not currently supported.\n\n&gt; Complicated builds\n\nIt's not currently supported but that's something I have thought about and I wonder if it could be possible to take a similar approach as [cargo](http://doc.crates.io/build-script.html) by providing a `build` directive to handle those cases.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At the moment, poet handles basic cases but I want to improve it.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;entry_points&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is already covered for console scripts by using the &lt;code&gt;scripts&lt;/code&gt; section.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[scripts]\npoet = &amp;#39;poet:app.run&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, we will have the poet script installed which will execute app.run in the poet package.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Dynamic requirements depending on the version of python installing the package&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is something I want to support by providing a python version for dependencies like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[dependencies]\npathlib2 = { version = &amp;quot;^2.2&amp;quot;, python = &amp;quot;~2.7&amp;quot; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the &lt;code&gt;pathlib2&lt;/code&gt; package would only installed for Python 2.7.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;find_packages and package_dir&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;find_packages&lt;/code&gt; is replaced by the &lt;code&gt;include&lt;/code&gt; directive. In your example it would be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;include = [&amp;#39;src/**/*&amp;#39;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Poet automatically detectes packages and modules provided by the &lt;code&gt;include&lt;/code&gt; directive and populate the &lt;code&gt;packages&lt;/code&gt; and &lt;code&gt;py_modules&lt;/code&gt; of the setup.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;package_dir&lt;/code&gt; however is not currently supported.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Compiled extensions (C family and Cython, etc) &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;C extensions are supported via the &lt;code&gt;extensions&lt;/code&gt; section:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[extensions]\n&amp;quot;my.module&amp;quot; = &amp;quot;my/module.c&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cython extensions however are not currently supported.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Complicated builds&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s not currently supported but that&amp;#39;s something I have thought about and I wonder if it could be possible to take a similar approach as &lt;a href=\"http://doc.crates.io/build-script.html\"&gt;cargo&lt;/a&gt; by providing a &lt;code&gt;build&lt;/code&gt; directive to handle those cases.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg72vvy", "score_hidden": false, "stickied": false, "created": 1492083092.0, "created_utc": 1492054292.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg717yq", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "kurashu89", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If this is meant to replace *all* the files for installing and publishing packages with a simple configuration file, how will this handle:\n\n* setup_requires\n* entry_points\n* [Dynamic requirements depending on the version of python installing the package](https://github.com/justanr/marshmallow_enum/blob/master/setup.py) \n* [find_packages and package_dir](https://github.com/justanr/flask-allows/blob/master/setup.py)\n* Packages that do stuff like read a file and yank config info out (author, version, etc) \n* Compiled extensions (C family and Cython, etc) \n* [Complicated builds](https://github.com/zzzeek/sqlalchemy/blob/master/setup.py) \n\nSome of these seem straightforward (most of them are just configuration driven) others require orchestration to pull off. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If this is meant to replace &lt;em&gt;all&lt;/em&gt; the files for installing and publishing packages with a simple configuration file, how will this handle:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;setup_requires&lt;/li&gt;\n&lt;li&gt;entry_points&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/justanr/marshmallow_enum/blob/master/setup.py\"&gt;Dynamic requirements depending on the version of python installing the package&lt;/a&gt; &lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/justanr/flask-allows/blob/master/setup.py\"&gt;find_packages and package_dir&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Packages that do stuff like read a file and yank config info out (author, version, etc) &lt;/li&gt;\n&lt;li&gt;Compiled extensions (C family and Cython, etc) &lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/zzzeek/sqlalchemy/blob/master/setup.py\"&gt;Complicated builds&lt;/a&gt; &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Some of these seem straightforward (most of them are just configuration driven) others require orchestration to pull off. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg717yq", "score_hidden": false, "stickied": false, "created": 1492080815.0, "created_utc": 1492052015.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg77rax", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "ay0shi", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Excellent job, sir!\n\nAre you planning on adding first-class venv support? If there was a way to specify venvs in a .toml file, it could open up things like using pyenv-virutalenv, and would simplify setup for IDEs. Eventually, poet could create a venv for you, that would make things even easier. Cargo itself doesn't support toolchains, as those are managed by rustup and dependencies are installed in a project  directory, but in python's case things are much trickier - I can't count the number of times I polluted the wrong venv with unrelated packages, so it had to be rebuilt from scratch. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Excellent job, sir!&lt;/p&gt;\n\n&lt;p&gt;Are you planning on adding first-class venv support? If there was a way to specify venvs in a .toml file, it could open up things like using pyenv-virutalenv, and would simplify setup for IDEs. Eventually, poet could create a venv for you, that would make things even easier. Cargo itself doesn&amp;#39;t support toolchains, as those are managed by rustup and dependencies are installed in a project  directory, but in python&amp;#39;s case things are much trickier - I can&amp;#39;t count the number of times I polluted the wrong venv with unrelated packages, so it had to be rebuilt from scratch. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg77rax", "score_hidden": false, "stickied": false, "created": 1492091283.0, "created_utc": 1492062483.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg6zajr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pipinstalluniverse", "parent_id": "t1_dg6yt3p", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Ah I see, that's cool!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah I see, that&amp;#39;s cool!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6zajr", "score_hidden": false, "stickied": false, "created": 1492078369.0, "created_utc": 1492049569.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6yt3p", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg6yf10", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Poet is not only about dependency management, it's also about making packaging and publishing of packaging much easier than the tools we currently have provide.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Poet is not only about dependency management, it&amp;#39;s also about making packaging and publishing of packaging much easier than the tools we currently have provide.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6yt3p", "score_hidden": false, "stickied": false, "created": 1492077767.0, "created_utc": 1492048967.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6yf10", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pipinstalluniverse", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Using virtualenvs ...\n\n    pip freeze &gt;&gt; requirements.txt\n    pip install -r requirements.txt\n\nedit: cool publishing of packages ", "edited": 1492049587.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using virtualenvs ...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt;&amp;gt; requirements.txt\npip install -r requirements.txt\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit: cool publishing of packages &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6yf10", "score_hidden": false, "stickied": false, "created": 1492077268.0, "created_utc": 1492048468.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7dnob", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ksion", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "So this is basically Rust's Cargo for Python? Not bad :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So this is basically Rust&amp;#39;s Cargo for Python? Not bad :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7dnob", "score_hidden": false, "stickied": false, "created": 1492107750.0, "created_utc": 1492078950.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg6zvb6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "justphysics", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Eager to give this a shot. I will play around with it in the next few days. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Eager to give this a shot. I will play around with it in the next few days. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg6zvb6", "score_hidden": false, "stickied": false, "created": 1492079081.0, "created_utc": 1492050281.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg70uil", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "JLDork", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'll check it out! This definitely looks great. I've run into a lot of dependency management issues before and, despite using python for the past 3 years, find it annoying to publish a package to pip.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ll check it out! This definitely looks great. I&amp;#39;ve run into a lot of dependency management issues before and, despite using python for the past 3 years, find it annoying to publish a package to pip.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg70uil", "score_hidden": false, "stickied": false, "created": 1492080322.0, "created_utc": 1492051522.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg76qiy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Revon", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Looks really nice! I'm excited to watch this mature. Python packaging is a mess.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Looks really nice! I&amp;#39;m excited to watch this mature. Python packaging is a mess.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg76qiy", "score_hidden": false, "stickied": false, "created": 1492089197.0, "created_utc": 1492060397.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7aagk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MeshachBlue", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How does this compare to conda?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How does this compare to conda?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7aagk", "score_hidden": false, "stickied": false, "created": 1492097648.0, "created_utc": 1492068848.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7abde", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "i_like_trains_a_lot1", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; python\n&gt;\n&gt; A list of Python versions for which the package is compatible. **Required**\n\nThis is gold! There are just too many packages out there that are python2 only but will install without problems on any Python.\n\nI think I'll be using this!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;python&lt;/p&gt;\n\n&lt;p&gt;A list of Python versions for which the package is compatible. &lt;strong&gt;Required&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is gold! There are just too many packages out there that are python2 only but will install without problems on any Python.&lt;/p&gt;\n\n&lt;p&gt;I think I&amp;#39;ll be using this!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7abde", "score_hidden": false, "stickied": false, "created": 1492097720.0, "created_utc": 1492068920.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dg7q2bs", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "SDisPater", "parent_id": "t1_dg7m3vd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I won't lie: if you already have the necessary files I don't think you should change it to replace them with poet. For new projects however you could certainly try it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I won&amp;#39;t lie: if you already have the necessary files I don&amp;#39;t think you should change it to replace them with poet. For new projects however you could certainly try it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7q2bs", "score_hidden": false, "stickied": false, "created": 1492126802.0, "created_utc": 1492098002.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7m3vd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "erez27", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Looks nice. Python could definitely use better package management.\n\nQuestion: Are there any benefits for an existing package to migrate to poet? I already went through the trouble of writing setup.py and MANIFEST.in, am I missing out on anything?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Looks nice. Python could definitely use better package management.&lt;/p&gt;\n\n&lt;p&gt;Question: Are there any benefits for an existing package to migrate to poet? I already went through the trouble of writing setup.py and MANIFEST.in, am I missing out on anything?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg7m3vd", "score_hidden": false, "stickied": false, "created": 1492122401.0, "created_utc": 1492093601.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_651gti", "likes": null, "replies": "", "user_reports": [], "id": "dge7wwj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "RemindMeBot", "parent_id": "t1_dge7wc1", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I will be messaging you on [**2017-05-17 22:17:10 UTC**](http://www.wolframalpha.com/input/?i=2017-05-17 22:17:10 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1)\n\n[**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1]%0A%0ARemindMe!  1 month) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dge7wwj)\n\n_____\n\n|[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/)\n|-|-|-|-|-|-|", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I will be messaging you on &lt;a href=\"http://www.wolframalpha.com/input/?i=2017-05-17%2022:17:10%20UTC%20To%20Local%20Time\"&gt;&lt;strong&gt;2017-05-17 22:17:10 UTC&lt;/strong&gt;&lt;/a&gt; to remind you of &lt;a href=\"https://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1\"&gt;&lt;strong&gt;this link.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://np.reddit.com/message/compose/?to=RemindMeBot&amp;amp;subject=Reminder&amp;amp;message=%5Bhttps://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1%5D%0A%0ARemindMe!%20%201%20month\"&gt;&lt;strong&gt;CLICK THIS LINK&lt;/strong&gt;&lt;/a&gt; to send a PM to also be reminded and to reduce spam.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;Parent commenter can &lt;/sup&gt; &lt;a href=\"http://np.reddit.com/message/compose/?to=RemindMeBot&amp;amp;subject=Delete%20Comment&amp;amp;message=Delete!%20dge7wwj\"&gt;&lt;sup&gt;delete this message to hide from others.&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;a href=\"http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/\"&gt;&lt;sup&gt;FAQs&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;th&gt;&lt;a href=\"http://np.reddit.com/message/compose/?to=RemindMeBot&amp;amp;subject=Reminder&amp;amp;message=%5BLINK%20INSIDE%20SQUARE%20BRACKETS%20else%20default%20to%20FAQs%5D%0A%0ANOTE:%20Don&amp;#x27;t%20forget%20to%20add%20the%20time%20options%20after%20the%20command.%0A%0ARemindMe!\"&gt;&lt;sup&gt;Custom&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;th&gt;&lt;a href=\"http://np.reddit.com/message/compose/?to=RemindMeBot&amp;amp;subject=List%20Of%20Reminders&amp;amp;message=MyReminders!\"&gt;&lt;sup&gt;Your Reminders&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;th&gt;&lt;a href=\"http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;amp;subject=Feedback\"&gt;&lt;sup&gt;Feedback&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;th&gt;&lt;a href=\"https://github.com/SIlver--/remindmebot-reddit\"&gt;&lt;sup&gt;Code&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;th&gt;&lt;a href=\"https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/\"&gt;&lt;sup&gt;Browser Extensions&lt;/sup&gt;&lt;/a&gt;&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge7wwj", "score_hidden": false, "stickied": false, "created": 1492496235.0, "created_utc": 1492467435.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge7wc1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "whereswalden90", "parent_id": "t3_651gti", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "RemindMe! 1 month", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;RemindMe! 1 month&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge7wc1", "score_hidden": false, "stickied": false, "created": 1492496215.0, "created_utc": 1492467415.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]