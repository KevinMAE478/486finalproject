[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I am writing a program in Python and need to extract the code of some specific functions from a C or C++ source file. I only know the name of the functions and with this information I want to extract the code for that function.\nI have found &lt;a href=\"https://github.com/eliben/pycparser\"&gt;pycparser&lt;/a&gt; but there is now example/documentation on how to extract the source code of a specific function. There is one example that can find the line where a specific function starts but I also was able to determine the starting line with regex.&lt;/p&gt;\n\n&lt;p&gt;How would you do it?  Do you know any good python package that can do it or would you implement it on your own?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi,\n\nI am writing a program in Python and need to extract the code of some specific functions from a C or C++ source file. I only know the name of the functions and with this information I want to extract the code for that function.\nI have found [pycparser](https://github.com/eliben/pycparser) but there is now example/documentation on how to extract the source code of a specific function. There is one example that can find the line where a specific function starts but I also was able to determine the starting line with regex.\n\nHow would you do it?  Do you know any good python package that can do it or would you implement it on your own?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65vk69", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 5, "report_reasons": null, "author": "greenecoon", "saved": false, "mod_reports": [], "name": "t3_65vk69", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65vk69/parse_cc_code_and_extract_function/", "num_reports": null, "locked": false, "stickied": false, "created": 1492464752.0, "url": "https://www.reddit.com/r/Python/comments/65vk69/parse_cc_code_and_extract_function/", "author_flair_text": null, "quarantine": false, "title": "Parse C/C++ code and extract function", "created_utc": 1492435952.0, "distinguished": null, "media": null, "upvote_ratio": 0.78, "num_comments": 9, "visited": false, "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": "", "user_reports": [], "id": "dgdmk1m", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "greenecoon", "parent_id": "t1_dgdm6op", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks, I'll take a look.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks, I&amp;#39;ll take a look.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdmk1m", "score_hidden": false, "stickied": false, "created": 1492471884.0, "created_utc": 1492443084.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdm6op", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ptmcg", "parent_id": "t3_65vk69", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "There is a C subset parser at the pyparsing examples page: http://pyparsing.wikispaces.com/file/view/oc.py", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is a C subset parser at the pyparsing examples page: &lt;a href=\"http://pyparsing.wikispaces.com/file/view/oc.py\"&gt;http://pyparsing.wikispaces.com/file/view/oc.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdm6op", "score_hidden": false, "stickied": false, "created": 1492471453.0, "created_utc": 1492442653.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": "", "user_reports": [], "id": "dge8olt", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Lorkki", "parent_id": "t1_dge641y", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "There's no difference between \"simple\" and \"advanced\" parsing here, though. C++ is a complex language and any code introspection you do with ad-hoc tooling will end up fragile at best.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s no difference between &amp;quot;simple&amp;quot; and &amp;quot;advanced&amp;quot; parsing here, though. C++ is a complex language and any code introspection you do with ad-hoc tooling will end up fragile at best.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge8olt", "score_hidden": false, "stickied": false, "created": 1492497226.0, "created_utc": 1492468426.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dge641y", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "greenecoon", "parent_id": "t1_dge55y7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks, i first try the idea of colpabar and if I need more advanced parsing I try clang :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks, i first try the idea of colpabar and if I need more advanced parsing I try clang :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge641y", "score_hidden": false, "stickied": false, "created": 1492493985.0, "created_utc": 1492465185.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": "", "user_reports": [], "id": "dge561h", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "GitHubPermalinkBot", "parent_id": "t1_dge55y7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Make sure you use canonical links when linking to a file/directory on GitHub. On GitHub, you can press the \"y\" key to update the URL to a permalink to the exact version of the file/directory you see -- [source](https://help.github.com/articles/getting-permanent-links-to-files/).\n\nI've tried to fix your links:\n\nRelative | Canonical\n-|-\n https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py | https://github.com/llvm-mirror/clang/blob/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/clang/cindex.py\n https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex | https://github.com/llvm-mirror/clang/tree/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/examples/cindex\n\nShoot me a PM if you think I'm doing something wrong.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Make sure you use canonical links when linking to a file/directory on GitHub. On GitHub, you can press the &amp;quot;y&amp;quot; key to update the URL to a permalink to the exact version of the file/directory you see -- &lt;a href=\"https://help.github.com/articles/getting-permanent-links-to-files/\"&gt;source&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve tried to fix your links:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Relative&lt;/th&gt;\n&lt;th&gt;Canonical&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py\"&gt;https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://github.com/llvm-mirror/clang/blob/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/clang/cindex.py\"&gt;https://github.com/llvm-mirror/clang/blob/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/clang/cindex.py&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex\"&gt;https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://github.com/llvm-mirror/clang/tree/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/examples/cindex\"&gt;https://github.com/llvm-mirror/clang/tree/4b44baf46b47a7e6addbaed0b4c7c99a5e0647fb/bindings/python/examples/cindex&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Shoot me a PM if you think I&amp;#39;m doing something wrong.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge561h", "score_hidden": false, "stickied": false, "created": 1492492836.0, "created_utc": 1492464036.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge55y7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Lorkki", "parent_id": "t3_65vk69", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If you need to parse C++, then Clang is probably the answer. The only exception is if you're parsing generated code that's guaranteed to be patterned in a very specific way.\n\nDocumentation isn't great, though. The best reference for the Python bindings is [the source code](https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py) ([with scarce examples](https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex)), while the libclang API at large is [described in Doxygen](http://clang.llvm.org/doxygen/group__CINDEX.html).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you need to parse C++, then Clang is probably the answer. The only exception is if you&amp;#39;re parsing generated code that&amp;#39;s guaranteed to be patterned in a very specific way.&lt;/p&gt;\n\n&lt;p&gt;Documentation isn&amp;#39;t great, though. The best reference for the Python bindings is &lt;a href=\"https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py\"&gt;the source code&lt;/a&gt; (&lt;a href=\"https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex\"&gt;with scarce examples&lt;/a&gt;), while the libclang API at large is &lt;a href=\"http://clang.llvm.org/doxygen/group__CINDEX.html\"&gt;described in Doxygen&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge55y7", "score_hidden": false, "stickied": false, "created": 1492492833.0, "created_utc": 1492464033.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": "", "user_reports": [], "id": "dge6cd2", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "eliben", "parent_id": "t3_65vk69", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "For C99, see https://github.com/eliben/pycparser\n\nFor C++, you should be using Clang's Python bindings. You can also use this for C, of course, but if C is all you need pycparser's learning curve is much easier", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For C99, see &lt;a href=\"https://github.com/eliben/pycparser\"&gt;https://github.com/eliben/pycparser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For C++, you should be using Clang&amp;#39;s Python bindings. You can also use this for C, of course, but if C is all you need pycparser&amp;#39;s learning curve is much easier&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge6cd2", "score_hidden": false, "stickied": false, "created": 1492494270.0, "created_utc": 1492465470.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65vk69", "likes": null, "replies": "", "user_reports": [], "id": "dge3t0g", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "greenecoon", "parent_id": "t1_dge2ntg", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks, I just had the same idea but was not sure if I should try it :) now I will try it tomorrow, thanks :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks, I just had the same idea but was not sure if I should try it :) now I will try it tomorrow, thanks :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge3t0g", "score_hidden": false, "stickied": false, "created": 1492491237.0, "created_utc": 1492462437.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dge2ntg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "colpabar", "parent_id": "t3_65vk69", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You just need to extract the code as a string? I think using the library you linked might be overkill, since it deals with actually parsing the code, and from what I understand you're just looking to extract some of it.\n\nIf you can assume that the code you're reading is valid (it compiles), then I would probably write my own. Use a regex to find the function signature, then just track the curly braces using a list as a stack. Whenever you see a `{`, push it on to the stack (append), and whenever you see a `}`, pop the last `}` from the stack. The function is over when the stack is empty.\n\nThis is assuming you don't know anything about the way the source code is formatted. If you did know, it could be easier. There are a ton of different ways to go about this.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You just need to extract the code as a string? I think using the library you linked might be overkill, since it deals with actually parsing the code, and from what I understand you&amp;#39;re just looking to extract some of it.&lt;/p&gt;\n\n&lt;p&gt;If you can assume that the code you&amp;#39;re reading is valid (it compiles), then I would probably write my own. Use a regex to find the function signature, then just track the curly braces using a list as a stack. Whenever you see a &lt;code&gt;{&lt;/code&gt;, push it on to the stack (append), and whenever you see a &lt;code&gt;}&lt;/code&gt;, pop the last &lt;code&gt;}&lt;/code&gt; from the stack. The function is over when the stack is empty.&lt;/p&gt;\n\n&lt;p&gt;This is assuming you don&amp;#39;t know anything about the way the source code is formatted. If you did know, it could be easier. There are a ton of different ways to go about this.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge2ntg", "score_hidden": false, "stickied": false, "created": 1492489958.0, "created_utc": 1492461158.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]