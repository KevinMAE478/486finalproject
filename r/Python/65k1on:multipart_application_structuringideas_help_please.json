[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello. Recently I&amp;#39;ve been thinking of a personal project that would have a database/backend part, as well as an active listener to receive/respond to texts.&lt;/p&gt;\n\n&lt;p&gt;The application will allow users to reserve study rooms. I would like users to be able to text a number (probably going to use Twilio or maybe use the SMTP library with an email), and what they send is processed and uploaded to the database. For example, if the number 111-111-1111 (in a contacts dictionary known as, say, Joe) texts &amp;quot;Room 1&amp;quot; - this would upload to the database that Joe is occupying room 1. I would then like to start a timer, of say, an hour, that will message Joe when he needs to leave the room. &lt;/p&gt;\n\n&lt;p&gt;I am trying to think of the best way to create/structure an application like this. Right now, I envision 3 separate files/processes: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;An active listener for incoming messages/texts&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A main function that accesses the database &amp;amp; locally stores current rooms occupied&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A timer function that either counts down an hour from start time (or sets a variable 1 hour from the received message time and iterates a while True statement every minute and texts when current time is equal to the time variable)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If I break it up into 3 processes, I am guessing I will have to share data between each application - that is possible, correct? My ideas are very scattered right now, so I truly appreciate any suggestions/ideas, thank you very much!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello. Recently I've been thinking of a personal project that would have a database/backend part, as well as an active listener to receive/respond to texts.\n\nThe application will allow users to reserve study rooms. I would like users to be able to text a number (probably going to use Twilio or maybe use the SMTP library with an email), and what they send is processed and uploaded to the database. For example, if the number 111-111-1111 (in a contacts dictionary known as, say, Joe) texts \"Room 1\" - this would upload to the database that Joe is occupying room 1. I would then like to start a timer, of say, an hour, that will message Joe when he needs to leave the room. \n\nI am trying to think of the best way to create/structure an application like this. Right now, I envision 3 separate files/processes: \n\n* An active listener for incoming messages/texts\n\n* A main function that accesses the database &amp; locally stores current rooms occupied\n\n* A timer function that either counts down an hour from start time (or sets a variable 1 hour from the received message time and iterates a while True statement every minute and texts when current time is equal to the time variable)\n\nIf I break it up into 3 processes, I am guessing I will have to share data between each application - that is possible, correct? My ideas are very scattered right now, so I truly appreciate any suggestions/ideas, thank you very much!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65k1on", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 16, "report_reasons": null, "author": "joshman458", "saved": false, "mod_reports": [], "name": "t3_65k1on", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65k1on/multipart_application_structuringideas_help_please/", "num_reports": null, "locked": false, "stickied": false, "created": 1492303622.0, "url": "https://www.reddit.com/r/Python/comments/65k1on/multipart_application_structuringideas_help_please/", "author_flair_text": null, "quarantine": false, "title": "Multi-Part Application Structuring/Ideas Help, Please", "created_utc": 1492274822.0, "distinguished": null, "media": null, "upvote_ratio": 0.83, "num_comments": 6, "visited": false, "subreddit_type": "public", "ups": 16}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": "", "user_reports": [], "id": "dgcchbd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "joshman458", "parent_id": "t1_dgb4dc1", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thank you for this! I will look look at celery! ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you for this! I will look look at celery! &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcchbd", "score_hidden": false, "stickied": false, "created": 1492394708.0, "created_utc": 1492365908.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb4dc1", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "earthboundkid", "parent_id": "t3_65k1on", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This is pretty much a textbook case for [Celery](http://www.celeryproject.org).\n\nSome thoughts:\n\n- Never poll! If your solution to some problem is, \"I'll check every n-interval to see if it's time to do something,\" that's polling, and it's probably sub-optimal. Use Celery to schedule tasks instead.\n\n- You've got two different ways of thinking about the data model: the state of the world now, and the historical stream of events that got you to the state of the world now. However you store the stream should be the canonical record, and the state of the world now should be a caching layer on top of that to make lookups faster. Pay attention to how you do this! It's very easy to choose the wrong level of abstraction and make this much harder than it needs to be.\n\n- The text thing seems exciting, but there's no particular reason to use a text message instead of a webpage to sign up for a room. In fact, you'll probably need a webpage to list what rooms are free when anyway. So, keep things flexible enough that you can easily support both modes of interaction. Heck, you could also support a Slack bot or Telegram or whatever if you structure it well enough.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is pretty much a textbook case for &lt;a href=\"http://www.celeryproject.org\"&gt;Celery&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Some thoughts:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Never poll! If your solution to some problem is, &amp;quot;I&amp;#39;ll check every n-interval to see if it&amp;#39;s time to do something,&amp;quot; that&amp;#39;s polling, and it&amp;#39;s probably sub-optimal. Use Celery to schedule tasks instead.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You&amp;#39;ve got two different ways of thinking about the data model: the state of the world now, and the historical stream of events that got you to the state of the world now. However you store the stream should be the canonical record, and the state of the world now should be a caching layer on top of that to make lookups faster. Pay attention to how you do this! It&amp;#39;s very easy to choose the wrong level of abstraction and make this much harder than it needs to be.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The text thing seems exciting, but there&amp;#39;s no particular reason to use a text message instead of a webpage to sign up for a room. In fact, you&amp;#39;ll probably need a webpage to list what rooms are free when anyway. So, keep things flexible enough that you can easily support both modes of interaction. Heck, you could also support a Slack bot or Telegram or whatever if you structure it well enough.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgb4dc1", "score_hidden": false, "stickied": false, "created": 1492316484.0, "created_utc": 1492287684.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": "", "user_reports": [], "id": "dgct7yf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "psykzz", "parent_id": "t1_dgccm2g", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I've not really used firebase, but if you're new to SQL  -\n SQLAlchemy is a good package to start with.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve not really used firebase, but if you&amp;#39;re new to SQL  -\n SQLAlchemy is a good package to start with.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgct7yf", "score_hidden": false, "stickied": false, "created": 1492417005.0, "created_utc": 1492388205.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgccm2g", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "joshman458", "parent_id": "t1_dgbd2lc", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thank you so much for this! I really appreciate you giving me a great starting point! I don't know much about SQL, especially integrating it with Python - I was thinking of using the python-firebase library (even though it's significantly outdated, I've gotten it to work for past projects). Would the above code be able to function similar with replacing the SQL parts with Firebase? Thanks again!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you so much for this! I really appreciate you giving me a great starting point! I don&amp;#39;t know much about SQL, especially integrating it with Python - I was thinking of using the python-firebase library (even though it&amp;#39;s significantly outdated, I&amp;#39;ve gotten it to work for past projects). Would the above code be able to function similar with replacing the SQL parts with Firebase? Thanks again!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgccm2g", "score_hidden": false, "stickied": false, "created": 1492394887.0, "created_utc": 1492366087.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbd2lc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "psykzz", "parent_id": "t3_65k1on", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "For me this is 2 parts, with an extra \"maintenance\" function to seed the DB.\n\nYou could have a crontab running every minute. This polls the DB finds anyone who's room has expired since last poll and sends them a message to GTFO.\n\nYou would then have a small flask web server, that is connected to twillo that listens for texts, checks if the room is free and replies with either, Yes or no, depending on if the room is already taken.\n\nCrontab would look something like this.\n\n    import things, stuff, twillo\n    \n    def main():\n        expired_rooms = SQL(\"SELECT user.name, user.phone FROM user INNER JOIN room ON user.current_room == room.id WHERE room.booked_until &lt; now()\")\n        for row in expired_rooms:\n            SQL('UPDATE user SET current_room = %s', None)\n            twillo.send_message(row['user.phone'], 'Your time is up, GTFO')\n    \n    \n    if __name__ == '__main__':\n        main()\n\nTo handle the text messages, something like this\n\n    from flask import Flask\n    \n    HOUR = 60 * 60\n    \n    app = Flask(__name__)\n    \n    @app.route('/message')\n    def message():\n        data = request.get_json()\n        # Don't forget to excape user input!\n        free_room = SQL('SELECT room.id FROM room WHERE room.free_until &gt; now AND room.name == %s', data['room']) \n        if not free_room:\n            twillo.send(data['from_number'], 'Room not free try again')\n            return\n    \n        SQL('UPDATE room SET free_until = %s', (date.now() + HOUR))\n        SQL('UPDATE user SET current_room = %s', free_room)\n        twillo.send(data['from_number'], 'Room booked you have to get out in ')\n    \n        \nAnd if you need to seed the first set of entries just loop over some csv and throw them in\n\n    import csv\n    \n    def main():\n        with open('free_room_list.csv') as fh:\n            lines = fh.readlines()\n            for line in lines:\n                 # There is a CSV library that does this much better.\n                row = line.split(',')\n                SQL('INSERT INTO room (name, free_until) VALUES %s %s', row['name'], row['free_until'])\n    \n    if __name__ == '__main__':\n        main()", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For me this is 2 parts, with an extra &amp;quot;maintenance&amp;quot; function to seed the DB.&lt;/p&gt;\n\n&lt;p&gt;You could have a crontab running every minute. This polls the DB finds anyone who&amp;#39;s room has expired since last poll and sends them a message to GTFO.&lt;/p&gt;\n\n&lt;p&gt;You would then have a small flask web server, that is connected to twillo that listens for texts, checks if the room is free and replies with either, Yes or no, depending on if the room is already taken.&lt;/p&gt;\n\n&lt;p&gt;Crontab would look something like this.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import things, stuff, twillo\n\ndef main():\n    expired_rooms = SQL(&amp;quot;SELECT user.name, user.phone FROM user INNER JOIN room ON user.current_room == room.id WHERE room.booked_until &amp;lt; now()&amp;quot;)\n    for row in expired_rooms:\n        SQL(&amp;#39;UPDATE user SET current_room = %s&amp;#39;, None)\n        twillo.send_message(row[&amp;#39;user.phone&amp;#39;], &amp;#39;Your time is up, GTFO&amp;#39;)\n\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To handle the text messages, something like this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from flask import Flask\n\nHOUR = 60 * 60\n\napp = Flask(__name__)\n\n@app.route(&amp;#39;/message&amp;#39;)\ndef message():\n    data = request.get_json()\n    # Don&amp;#39;t forget to excape user input!\n    free_room = SQL(&amp;#39;SELECT room.id FROM room WHERE room.free_until &amp;gt; now AND room.name == %s&amp;#39;, data[&amp;#39;room&amp;#39;]) \n    if not free_room:\n        twillo.send(data[&amp;#39;from_number&amp;#39;], &amp;#39;Room not free try again&amp;#39;)\n        return\n\n    SQL(&amp;#39;UPDATE room SET free_until = %s&amp;#39;, (date.now() + HOUR))\n    SQL(&amp;#39;UPDATE user SET current_room = %s&amp;#39;, free_room)\n    twillo.send(data[&amp;#39;from_number&amp;#39;], &amp;#39;Room booked you have to get out in &amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And if you need to seed the first set of entries just loop over some csv and throw them in&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import csv\n\ndef main():\n    with open(&amp;#39;free_room_list.csv&amp;#39;) as fh:\n        lines = fh.readlines()\n        for line in lines:\n             # There is a CSV library that does this much better.\n            row = line.split(&amp;#39;,&amp;#39;)\n            SQL(&amp;#39;INSERT INTO room (name, free_until) VALUES %s %s&amp;#39;, row[&amp;#39;name&amp;#39;], row[&amp;#39;free_until&amp;#39;])\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbd2lc", "score_hidden": false, "stickied": false, "created": 1492328744.0, "created_utc": 1492299944.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65k1on", "likes": null, "replies": "", "user_reports": [], "id": "dgb3hx3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "joshman458", "parent_id": "t1_dgb34hy", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks for your response! I hate to sound clueless; however, I don't fully understand the HTTP part with Python (still sort of new to Python). Would you be able to possibly provide some links where I could understand more of how I might make use of an HTTP server with this project, please? Thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for your response! I hate to sound clueless; however, I don&amp;#39;t fully understand the HTTP part with Python (still sort of new to Python). Would you be able to possibly provide some links where I could understand more of how I might make use of an HTTP server with this project, please? Thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgb3hx3", "score_hidden": false, "stickied": false, "created": 1492315281.0, "created_utc": 1492286481.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb34hy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_65k1on", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgb34hy", "score_hidden": false, "stickied": false, "created": 1492314765.0, "created_utc": 1492285965.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]