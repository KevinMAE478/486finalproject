[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey, \nso I built a script that gets a POST request (using Flask) with a search query,  searches YouTube for a video, and than casts it to my chromecast. \nthe problem is that the video doesn&amp;#39;t play and the screen just shows the YouTube logo.\n Any ideas on how to solve it? &lt;/p&gt;\n\n&lt;p&gt;edit: \nthis is the part of the code that casts to youTube:&lt;/p&gt;\n\n&lt;p&gt;import pychromecast\nfrom pychromecast.controllers.youtube import YouTubeController&lt;/p&gt;\n\n&lt;p&gt;chromecasts = pychromecast.get_chromecasts()\ncast = next(cc for cc in chromecasts if cc.device.friendly_name == cast_name)\nyt = YouTubeController()\ncast.register_handler(yt)\nyt.play_media(youtube_id)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey, \nso I built a script that gets a POST request (using Flask) with a search query,  searches YouTube for a video, and than casts it to my chromecast. \nthe problem is that the video doesn't play and the screen just shows the YouTube logo.\n Any ideas on how to solve it? \n\nedit: \nthis is the part of the code that casts to youTube:\n\nimport pychromecast\nfrom pychromecast.controllers.youtube import YouTubeController\n\nchromecasts = pychromecast.get_chromecasts()\ncast = next(cc for cc in chromecasts if cc.device.friendly_name == cast_name)\nyt = YouTubeController()\ncast.register_handler(yt)\nyt.play_media(youtube_id)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65d7x6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 7, "report_reasons": null, "author": "pixeltoucher", "saved": false, "mod_reports": [], "name": "t3_65d7x6", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": 1492185736.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65d7x6/casting_to_chromecast_with_pychromecast/", "num_reports": null, "locked": false, "stickied": false, "created": 1492213042.0, "url": "https://www.reddit.com/r/Python/comments/65d7x6/casting_to_chromecast_with_pychromecast/", "author_flair_text": null, "quarantine": false, "title": "Casting to chromecast with pychromecast", "created_utc": 1492184242.0, "distinguished": null, "media": null, "upvote_ratio": 0.89, "num_comments": 7, "visited": false, "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": "", "user_reports": [], "id": "dg9bn3s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pixeltoucher", "parent_id": "t1_dg9b2nv", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "good point. posted it now", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;good point. posted it now&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9bn3s", "score_hidden": false, "stickied": false, "created": 1492214554.0, "created_utc": 1492185754.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9b2nv", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "joesacher", "parent_id": "t3_65d7x6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Serious question.  How would you expect anyone to know how to solve it with no code posted?  We have no idea what you did.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Serious question.  How would you expect anyone to know how to solve it with no code posted?  We have no idea what you did.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9b2nv", "score_hidden": false, "stickied": false, "created": 1492213902.0, "created_utc": 1492185102.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": "", "user_reports": [], "id": "dg9rhbv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pixeltoucher", "parent_id": "t1_dg9mwso", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah but it works only as a command line argument I think ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah but it works only as a command line argument I think &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9rhbv", "score_hidden": false, "stickied": false, "created": 1492233219.0, "created_utc": 1492204419.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9mwso", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Nodja", "parent_id": "t1_dg9izky", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It seems the youtube controller doesn't work. Someone forked it and kinda fixed it.\n\nhttps://github.com/balloob/pychromecast/issues/62\n\nhttps://github.com/ur1katz/pychromecast", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It seems the youtube controller doesn&amp;#39;t work. Someone forked it and kinda fixed it.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/balloob/pychromecast/issues/62\"&gt;https://github.com/balloob/pychromecast/issues/62&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ur1katz/pychromecast\"&gt;https://github.com/ur1katz/pychromecast&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9mwso", "score_hidden": false, "stickied": false, "created": 1492227667.0, "created_utc": 1492198867.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9izky", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pixeltoucher", "parent_id": "t1_dg9il12", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah that didn't work either... ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah that didn&amp;#39;t work either... &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9izky", "score_hidden": false, "stickied": false, "created": 1492222945.0, "created_utc": 1492194145.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9il12", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Nodja", "parent_id": "t3_65d7x6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "According to the [source code](https://github.com/balloob/pychromecast/blob/master/pychromecast/controllers/youtube.py#L32) you should be using the play_video method, not the play_media one.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;According to the &lt;a href=\"https://github.com/balloob/pychromecast/blob/master/pychromecast/controllers/youtube.py#L32\"&gt;source code&lt;/a&gt; you should be using the play_video method, not the play_media one.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9il12", "score_hidden": false, "stickied": false, "created": 1492222466.0, "created_utc": 1492193666.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65d7x6", "likes": null, "replies": "", "user_reports": [], "id": "dgbhm70", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "tk421whyarentyouatyo", "parent_id": "t3_65d7x6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "see if this helps. you'll also need urllib, pafy, and re modules\n\n    cast_search_query\n\nis the youtube string to search\n\n    def search_youtube(query):\n        html_content = urllib.request.urlopen(\"https://www.youtube.com/results?{}\".format(query))\n        search_results = re.findall(r'href=\\\"\\/watch\\?v=(.{11})', html_content.read().decode())\n        print(\"search results:\\n{}\".format(search_results))\n        return search_results\n\n    import pychromecast, pafy, urllib\n\n    CHROMECASTS = pychromecast.get_chromecasts()\n    cast = CHROMECASTS[0]\n    cast.wait()\n    request_meta = urllib.parse.urlencode({\"search_query\": cast_search_query})\n    first_found = search_youtube(request_meta)[0]\n    media_metadata = pafy_object(first_found)\n    print(media_metadata.allstreams)\n    url = media_metadata.getbest('mp4').url_https\n    mc = cast.media_controller\n    mc.play_media(url, 'video/mp4')\n    mc.block_until_active()\n\nedit: you makin' a skill? ;-)\n\nthere are a few assumptions made with this code that could otherwise be edited... first, my code searches for all chromecasts available on a network and picks the first one (CHROMECASTS[0]). I believe you already have code to identify the chromecast you wish to use. Second, this code assumes you want/have the bandwidth for the best possible stream, in mp4 form. There are other stream options available through the pafy object's (media_metadata in the above example) .allstreams list.", "edited": 1492307663.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;see if this helps. you&amp;#39;ll also need urllib, pafy, and re modules&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cast_search_query\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is the youtube string to search&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def search_youtube(query):\n    html_content = urllib.request.urlopen(&amp;quot;https://www.youtube.com/results?{}&amp;quot;.format(query))\n    search_results = re.findall(r&amp;#39;href=\\&amp;quot;\\/watch\\?v=(.{11})&amp;#39;, html_content.read().decode())\n    print(&amp;quot;search results:\\n{}&amp;quot;.format(search_results))\n    return search_results\n\nimport pychromecast, pafy, urllib\n\nCHROMECASTS = pychromecast.get_chromecasts()\ncast = CHROMECASTS[0]\ncast.wait()\nrequest_meta = urllib.parse.urlencode({&amp;quot;search_query&amp;quot;: cast_search_query})\nfirst_found = search_youtube(request_meta)[0]\nmedia_metadata = pafy_object(first_found)\nprint(media_metadata.allstreams)\nurl = media_metadata.getbest(&amp;#39;mp4&amp;#39;).url_https\nmc = cast.media_controller\nmc.play_media(url, &amp;#39;video/mp4&amp;#39;)\nmc.block_until_active()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit: you makin&amp;#39; a skill? ;-)&lt;/p&gt;\n\n&lt;p&gt;there are a few assumptions made with this code that could otherwise be edited... first, my code searches for all chromecasts available on a network and picks the first one (CHROMECASTS[0]). I believe you already have code to identify the chromecast you wish to use. Second, this code assumes you want/have the bandwidth for the best possible stream, in mp4 form. There are other stream options available through the pafy object&amp;#39;s (media_metadata in the above example) .allstreams list.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbhm70", "score_hidden": false, "stickied": false, "created": 1492335210.0, "created_utc": 1492306410.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]