[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been looking for a simple way to cleanly handle command line arguments, with defaults, for ages. Yes argparse is great, but it&amp;#39;s massively over-engineered for simple little utility scripts. Without third part modules like docopt, the only alternative seemed to be if/then/else on the length and elements in sys.argv which always looks ugly and un-pythonic. Surely there&amp;#39;s a better way? Then I got thinking about function argument defaults...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import sys\n\ndef get_args(name=&amp;#39;scriptname&amp;#39;, first=&amp;#39;a&amp;#39;, second=2):\n   return first, int(second)\n\nfirst, second = get_args(*sys.argv)\nprint first, second\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;./test.py&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;a 2&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;./test.py A&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A 2&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;./test.py A 20&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A 20&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s not ideal though because traditionally the most required argument would usually appear on the far right of a command line, but with this if you want to provide the 2nd or later argument you have to provide all previous arguments. But I don&amp;#39;t want to complicate it because the whole point is to be terse and obvious.&lt;/p&gt;\n\n&lt;p&gt;Does anyone else have a good way to perform this routine but awkward task?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been looking for a simple way to cleanly handle command line arguments, with defaults, for ages. Yes argparse is great, but it's massively over-engineered for simple little utility scripts. Without third part modules like docopt, the only alternative seemed to be if/then/else on the length and elements in sys.argv which always looks ugly and un-pythonic. Surely there's a better way? Then I got thinking about function argument defaults...\n\n    import sys\n    \n    def get_args(name='scriptname', first='a', second=2):\n       return first, int(second)\n    \n    first, second = get_args(*sys.argv)\n    print first, second\n\n\n&gt; ./test.py\n\na 2\n\n&gt; ./test.py A\n\nA 2\n\n&gt; ./test.py A 20\n\nA 20\n\nIt's not ideal though because traditionally the most required argument would usually appear on the far right of a command line, but with this if you want to provide the 2nd or later argument you have to provide all previous arguments. But I don't want to complicate it because the whole point is to be terse and obvious.\n\nDoes anyone else have a good way to perform this routine but awkward task?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64q2lf", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 3, "report_reasons": null, "author": "simon_hibbs", "saved": false, "mod_reports": [], "name": "t3_64q2lf", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/64q2lf/simple_command_line_option_handling_with_defaults/", "num_reports": null, "locked": false, "stickied": false, "created": 1491936231.0, "url": "https://www.reddit.com/r/Python/comments/64q2lf/simple_command_line_option_handling_with_defaults/", "author_flair_text": null, "quarantine": false, "title": "Simple command line option handling with defaults", "created_utc": 1491907431.0, "distinguished": null, "media": null, "upvote_ratio": 0.72, "num_comments": 4, "visited": false, "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_64q2lf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_64q2lf", "likes": null, "replies": "", "user_reports": [], "id": "dg8uxp4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sermidean", "parent_id": "t1_dg46dke", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('first', default='a')\n    parser.add_argument('second', type=int, default=2)\n    args = parser.parse_args()", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;import argparse&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;parser = argparse.ArgumentParser()\nparser.add_argument(&amp;#39;first&amp;#39;, default=&amp;#39;a&amp;#39;)\nparser.add_argument(&amp;#39;second&amp;#39;, type=int, default=2)\nargs = parser.parse_args()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg8uxp4", "score_hidden": false, "stickied": false, "created": 1492180309.0, "created_utc": 1492151509.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg46dke", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "boiledgoobers", "parent_id": "t3_64q2lf", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Sorry to be annoying but... argparse. It's not THAT much extra I don't think. And you get the help text displayed for free. You haven't addressed that aspect yet. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry to be annoying but... argparse. It&amp;#39;s not THAT much extra I don&amp;#39;t think. And you get the help text displayed for free. You haven&amp;#39;t addressed that aspect yet. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg46dke", "score_hidden": false, "stickied": false, "created": 1491942173.0, "created_utc": 1491913373.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_64q2lf", "likes": null, "replies": "", "user_reports": [], "id": "dg4a7pg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Eryole", "parent_id": "t3_64q2lf", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Some lib doing the job:\nhttps://pypi.python.org/pypi/begins/0.9\n\nor\n\nhttp://clize.readthedocs.io/en/stable/\n\nmore complexe maybe?\nhttp://click.pocoo.org/5/\n\nThere exist a lot of libs, with different level of complexity, using decorated function, or even parsing a docstring like\n\nhttps://github.com/docopt/docopt/", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some lib doing the job:\n&lt;a href=\"https://pypi.python.org/pypi/begins/0.9\"&gt;https://pypi.python.org/pypi/begins/0.9&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://clize.readthedocs.io/en/stable/\"&gt;http://clize.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;more complexe maybe?\n&lt;a href=\"http://click.pocoo.org/5/\"&gt;http://click.pocoo.org/5/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There exist a lot of libs, with different level of complexity, using decorated function, or even parsing a docstring like&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/docopt/docopt/\"&gt;https://github.com/docopt/docopt/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg4a7pg", "score_hidden": false, "stickied": false, "created": 1491947892.0, "created_utc": 1491919092.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_64q2lf", "likes": null, "replies": "", "user_reports": [], "id": "dg4a9qb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jwink3101", "parent_id": "t3_64q2lf", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How to handle CLI is a very opinionated and personal thing. Everyone has their own views.\n\nPersonally, I use `getopt` which is in the standard library. Your code ends up longer but you have near full control (only thing I think it is missing is optional arguments. Either a flag has an argument or it doesn't)\n\nThen, you can build your code like the following (untested):\n\n    import getopt\n    import sys\n\n    usage = \"\"\"\\\n    demo CLI\n\n    Usage:\n        python demo.py [OPTIONS] arg1 [arg2 ...]\n\n    Options: \n        -a,--one        : Sets the `a` flag\n        -b,--two VAL    : Sets the `b` flag with VAL\n        -c,--three      : Sets the `c` flag\n        -h,--help       : Help\n\n    Arguments:\n    \n        arg1            : Required. First arg\n\n        Additional arguments optional\n    \"\"\"\n\n    argv = sys.argv[1:] # I make this a separate variable in case I want to easily pass it\n\n    # TIP: Keep these in alphabetical order\n    SHORT = 'ab:ch' # Short args are a string. `:` means needs an argument\n    LONG = ['one','two=','three','help'] # Long args are a list, `=` means needs argument\n\n    try:\n        opts, args = getopt.getopt(argv, SHORT,LONG)\n    except getopt.GetoptError as err:\n        print(err) \n        print(usage)\n        sys.exit(2)\n\n    # Defaults:\n    aflag = False\n    bflag = None\n    cflag = False\n\n    for opt,val in opts:\n        if opt in ['-a','--one']:\n            aflag = True\n        elif opt in ['-b','--two']:\n            bflag = val\n        elif opt in ['-c','--three']:\n            cflag = True\n        elif opt in ['-h','--help']:\n            print(usage)\n            sys.exit()\n\n    # Process arguments\n    if len(args) &lt;1:\n\nPros:\n\n- Full control over how things are processed\n- Do not need to add your own logic for things like `-a -c` vs `-ac`\n- No complex API to learn and understand\n- Can more easily implement multiple flags overriding each other\n\nCons:\n\n- WAY MORE TYPING and more verbose\n    - It gets tiring\n- Have to manually manage documentation\n- Can't have optional values.\n- Adding an option requires many changes\n    - help text, short, long, default, parsing `if` block\n\nPersonally, I still use this. I have a boilerplate like the one below and I go from there. But it is a PITA, especially for what should otherwise be fast scripts.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How to handle CLI is a very opinionated and personal thing. Everyone has their own views.&lt;/p&gt;\n\n&lt;p&gt;Personally, I use &lt;code&gt;getopt&lt;/code&gt; which is in the standard library. Your code ends up longer but you have near full control (only thing I think it is missing is optional arguments. Either a flag has an argument or it doesn&amp;#39;t)&lt;/p&gt;\n\n&lt;p&gt;Then, you can build your code like the following (untested):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import getopt\nimport sys\n\nusage = &amp;quot;&amp;quot;&amp;quot;\\\ndemo CLI\n\nUsage:\n    python demo.py [OPTIONS] arg1 [arg2 ...]\n\nOptions: \n    -a,--one        : Sets the `a` flag\n    -b,--two VAL    : Sets the `b` flag with VAL\n    -c,--three      : Sets the `c` flag\n    -h,--help       : Help\n\nArguments:\n\n    arg1            : Required. First arg\n\n    Additional arguments optional\n&amp;quot;&amp;quot;&amp;quot;\n\nargv = sys.argv[1:] # I make this a separate variable in case I want to easily pass it\n\n# TIP: Keep these in alphabetical order\nSHORT = &amp;#39;ab:ch&amp;#39; # Short args are a string. `:` means needs an argument\nLONG = [&amp;#39;one&amp;#39;,&amp;#39;two=&amp;#39;,&amp;#39;three&amp;#39;,&amp;#39;help&amp;#39;] # Long args are a list, `=` means needs argument\n\ntry:\n    opts, args = getopt.getopt(argv, SHORT,LONG)\nexcept getopt.GetoptError as err:\n    print(err) \n    print(usage)\n    sys.exit(2)\n\n# Defaults:\naflag = False\nbflag = None\ncflag = False\n\nfor opt,val in opts:\n    if opt in [&amp;#39;-a&amp;#39;,&amp;#39;--one&amp;#39;]:\n        aflag = True\n    elif opt in [&amp;#39;-b&amp;#39;,&amp;#39;--two&amp;#39;]:\n        bflag = val\n    elif opt in [&amp;#39;-c&amp;#39;,&amp;#39;--three&amp;#39;]:\n        cflag = True\n    elif opt in [&amp;#39;-h&amp;#39;,&amp;#39;--help&amp;#39;]:\n        print(usage)\n        sys.exit()\n\n# Process arguments\nif len(args) &amp;lt;1:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pros:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Full control over how things are processed&lt;/li&gt;\n&lt;li&gt;Do not need to add your own logic for things like &lt;code&gt;-a -c&lt;/code&gt; vs &lt;code&gt;-ac&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;No complex API to learn and understand&lt;/li&gt;\n&lt;li&gt;Can more easily implement multiple flags overriding each other&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Cons:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;WAY MORE TYPING and more verbose\n\n&lt;ul&gt;\n&lt;li&gt;It gets tiring&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Have to manually manage documentation&lt;/li&gt;\n&lt;li&gt;Can&amp;#39;t have optional values.&lt;/li&gt;\n&lt;li&gt;Adding an option requires many changes\n\n&lt;ul&gt;\n&lt;li&gt;help text, short, long, default, parsing &lt;code&gt;if&lt;/code&gt; block&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Personally, I still use this. I have a boilerplate like the one below and I go from there. But it is a PITA, especially for what should otherwise be fast scripts.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg4a9qb", "score_hidden": false, "stickied": false, "created": 1491947965.0, "created_utc": 1491919165.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]