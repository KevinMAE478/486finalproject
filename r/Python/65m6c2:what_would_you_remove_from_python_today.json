[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was looking at 3.6&amp;#39;s release notes, and thought &amp;quot;this new string formatting approach is great&amp;quot; (I&amp;#39;m relatively new to Python, so I don&amp;#39;t have the familiarity with the old approaches. I find them inelegant). But now Python 3 has like a half-dozen ways of formatting a string.&lt;/p&gt;\n\n&lt;p&gt;A lot of things need to stay for backwards compatibility. But if you didn&amp;#39;t have to worry about that, what would you amputate out of Python today?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I was looking at 3.6's release notes, and thought \"this new string formatting approach is great\" (I'm relatively new to Python, so I don't have the familiarity with the old approaches. I find them inelegant). But now Python 3 has like a half-dozen ways of formatting a string.\n\nA lot of things need to stay for backwards compatibility. But if you didn't have to worry about that, what would you amputate out of Python today?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65m6c2", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 41, "report_reasons": null, "author": "blamo111", "saved": false, "mod_reports": [], "name": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65m6c2/what_would_you_remove_from_python_today/", "num_reports": null, "locked": false, "stickied": false, "created": 1492328203.0, "url": "https://www.reddit.com/r/Python/comments/65m6c2/what_would_you_remove_from_python_today/", "author_flair_text": null, "quarantine": false, "title": "What would you remove from Python today?", "created_utc": 1492299403.0, "distinguished": null, "media": null, "upvote_ratio": 0.82, "num_comments": 250, "visited": false, "subreddit_type": "public", "ups": 41}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbung5", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "snaftyroot", "parent_id": "t1_dgbqjyp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "yea, for me unicode handling alone was enough reason to justify a transition", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;yea, for me unicode handling alone was enough reason to justify a transition&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbung5", "score_hidden": false, "stickied": false, "created": 1492360092.0, "created_utc": 1492331292.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbqjyp", "gilded": 0, "archived": false, "score": 26, "report_reasons": null, "author": "abrazilianinreddit", "parent_id": "t1_dgbpsrd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think usually people get attached to a feature that was introduced in python 3 that makes them not want to go back to python 2.\n\nIn my case, it's (default) unicode strings. Since I'm brazilian, I use a lot of strings in unicode. In python 2, it was a pain in the ass, a UnicodeDecodeError would inevitably popup somewhere. With python 3, programming became fun again. ", "edited": 1492366952.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think usually people get attached to a feature that was introduced in python 3 that makes them not want to go back to python 2.&lt;/p&gt;\n\n&lt;p&gt;In my case, it&amp;#39;s (default) unicode strings. Since I&amp;#39;m brazilian, I use a lot of strings in unicode. In python 2, it was a pain in the ass, a UnicodeDecodeError would inevitably popup somewhere. With python 3, programming became fun again. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbqjyp", "score_hidden": false, "stickied": false, "created": 1492349483.0, "created_utc": 1492320683.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 26}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc4o24", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Fevorkillzz", "parent_id": "t1_dgbtqhv", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That's what my school is on so that's what they taught. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s what my school is on so that&amp;#39;s what they taught. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc4o24", "score_hidden": false, "stickied": false, "created": 1492384294.0, "created_utc": 1492355494.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtqhv", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "sushibowl", "parent_id": "t1_dgbpsrd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Because the 2/3 schism harms the python community. Magically getting rid of the old one would solve a lot of pain.\n\nAs an aside, why did you specifically learn 2.7?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Because the 2/3 schism harms the python community. Magically getting rid of the old one would solve a lot of pain.&lt;/p&gt;\n\n&lt;p&gt;As an aside, why did you specifically learn 2.7?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtqhv", "score_hidden": false, "stickied": false, "created": 1492357281.0, "created_utc": 1492328481.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgchvgv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgbpsrd", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think almost 9 years of largely unbackported features really does it for me. From the big - unicode by default, async/await - to the small - generalized unpacking and a functool.update_wrapper that actually works. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think almost 9 years of largely unbackported features really does it for me. From the big - unicode by default, async/await - to the small - generalized unpacking and a functool.update_wrapper that actually works. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgchvgv", "score_hidden": false, "stickied": false, "created": 1492401860.0, "created_utc": 1492373060.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpsrd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Fevorkillzz", "parent_id": "t1_dgbo9o6", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "Why? Sorry I'm new to python and learned python 2.7 and haven't really looked back \n\n&amp;nbsp;\n\nedit: I'd like to add that my school is pretty weird in terms of coding classes. I go to a very good public high in NYC and the coding classes are so backward. For projects that requiring reading and writing data to .txt they didn't allow us to use any data structures so we had to parse through .txt assign all the data or part of the data to a variable and then paste it to another .txt in weird ways. They don't allow us to use while loops instead we can only use normal loops. They don't teach flow control statements for some reason and they never touched upon classes and inheritance and anything related to the fact that Python is an OOP language. I understand some of this is to make us think with building blocks but I'm one of those people who believe that if there is a way to do it easier then you should teach that way and have us use it in the code no point in reinventing the wheel. I understand that the above restrictions are minor and can be good for students to understand stuff in a different way but frankly I think it's kinda dumb. Needless to say, I'm teaching myself now. \n", "edited": 1492383044.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why? Sorry I&amp;#39;m new to python and learned python 2.7 and haven&amp;#39;t really looked back &lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;edit: I&amp;#39;d like to add that my school is pretty weird in terms of coding classes. I go to a very good public high in NYC and the coding classes are so backward. For projects that requiring reading and writing data to .txt they didn&amp;#39;t allow us to use any data structures so we had to parse through .txt assign all the data or part of the data to a variable and then paste it to another .txt in weird ways. They don&amp;#39;t allow us to use while loops instead we can only use normal loops. They don&amp;#39;t teach flow control statements for some reason and they never touched upon classes and inheritance and anything related to the fact that Python is an OOP language. I understand some of this is to make us think with building blocks but I&amp;#39;m one of those people who believe that if there is a way to do it easier then you should teach that way and have us use it in the code no point in reinventing the wheel. I understand that the above restrictions are minor and can be good for students to understand stuff in a different way but frankly I think it&amp;#39;s kinda dumb. Needless to say, I&amp;#39;m teaching myself now. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpsrd", "score_hidden": false, "stickied": false, "created": 1492348078.0, "created_utc": 1492319278.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgbo9o6", "gilded": 0, "archived": false, "score": 76, "report_reasons": null, "author": "noraizon", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python 2", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 2&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbo9o6", "score_hidden": false, "stickied": false, "created": 1492345327.0, "created_utc": 1492316527.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 76}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbvpz1", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "robin-gvx", "parent_id": "t1_dgbp99t", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah, if you supply `==` and one other comparison method, `functools.total_ordering`can sort out the rest.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, if you supply &lt;code&gt;==&lt;/code&gt; and one other comparison method, &lt;code&gt;functools.total_ordering&lt;/code&gt;can sort out the rest.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvpz1", "score_hidden": false, "stickied": false, "created": 1492363674.0, "created_utc": 1492334874.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbp99t", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbk3ur", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think this really depends on your use case. For things whose comparison fits what you see with real numbers, sure. But there are other use cases you can define that require the ability to distinguish between `&gt;` and `&gt;=`.\n\nFor this reason, I wouldn't want to miss out on the multiple comparison functions. I would actually be okay with having both ways of doing it (although they should be mutually exclusive) with the rule that you use `__cmp__` unless you absolutely have to use the others.\n\nFWIW though, functools has a [total_ordering] decorator you can put on a class so you only have to define two ordering methods.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think this really depends on your use case. For things whose comparison fits what you see with real numbers, sure. But there are other use cases you can define that require the ability to distinguish between &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For this reason, I wouldn&amp;#39;t want to miss out on the multiple comparison functions. I would actually be okay with having both ways of doing it (although they should be mutually exclusive) with the rule that you use &lt;code&gt;__cmp__&lt;/code&gt; unless you absolutely have to use the others.&lt;/p&gt;\n\n&lt;p&gt;FWIW though, functools has a [total_ordering] decorator you can put on a class so you only have to define two ordering methods.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbp99t", "score_hidden": false, "stickied": false, "created": 1492347075.0, "created_utc": 1492318275.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbva1c", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "maxm", "parent_id": "t1_dgbttn7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That is true. I have been coding python since 1.5.2 in about year 1999. I dont think i have used it even once.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That is true. I have been coding python since 1.5.2 in about year 1999. I dont think i have used it even once.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbva1c", "score_hidden": false, "stickied": false, "created": 1492362172.0, "created_utc": 1492333372.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcefil", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cdimino", "parent_id": "t1_dgbttn7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "But maybe part of that is because of how big of a headache it is to deal with.  Maybe if it were easier, you'd use it more!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But maybe part of that is because of how big of a headache it is to deal with.  Maybe if it were easier, you&amp;#39;d use it more!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcefil", "score_hidden": false, "stickied": false, "created": 1492397331.0, "created_utc": 1492368531.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbttn7", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "pohmelie", "parent_id": "t1_dgbk3ur", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If you wont say it was Hettinger, nobody cares\u2026 I don't remember anytime I have used operators overload for a \"long long time\" ;)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you wont say it was Hettinger, nobody cares\u2026 I don&amp;#39;t remember anytime I have used operators overload for a &amp;quot;long long time&amp;quot; ;)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbttn7", "score_hidden": false, "stickied": false, "created": 1492357527.0, "created_utc": 1492328727.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbylgk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgby53d", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "My bad, I confused it with natural comparison.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My bad, I confused it with natural comparison.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbylgk", "score_hidden": false, "stickied": false, "created": 1492372966.0, "created_utc": 1492344166.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgby53d", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgbxt56", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Okay, but none of your examples are using \"rich comparisons\".  Maybe you should find out what rich comparisons are.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Okay, but none of your examples are using &amp;quot;rich comparisons&amp;quot;.  Maybe you should find out what rich comparisons are.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgby53d", "score_hidden": false, "stickied": false, "created": 1492371722.0, "created_utc": 1492342922.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxt56", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbxlhm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Rich sorting means that getting the key of the max value from a dict is:\n\nmax(d.items(), key=lambda x: x[1])\n\nIt means sorting by size is:\n\nsorted(iterable, key=len)\n\nI means get the first result of alphabetical order of string representation is:\n\nmin(iterable, key=str)\n\nBasically, any complicated sort become super easy. With cmp, I have to look up first every time what I have to return, then I have to write a full function returning -1/0/1, then debug it because I probably forgot an edge case.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rich sorting means that getting the key of the max value from a dict is:&lt;/p&gt;\n\n&lt;p&gt;max(d.items(), key=lambda x: x[1])&lt;/p&gt;\n\n&lt;p&gt;It means sorting by size is:&lt;/p&gt;\n\n&lt;p&gt;sorted(iterable, key=len)&lt;/p&gt;\n\n&lt;p&gt;I means get the first result of alphabetical order of string representation is:&lt;/p&gt;\n\n&lt;p&gt;min(iterable, key=str)&lt;/p&gt;\n\n&lt;p&gt;Basically, any complicated sort become super easy. With cmp, I have to look up first every time what I have to return, then I have to write a full function returning -1/0/1, then debug it because I probably forgot an edge case.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxt56", "score_hidden": false, "stickied": false, "created": 1492370740.0, "created_utc": 1492341940.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxlhm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgbwlnm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I don't think it makes sorting easier.  I'm pretty sure sorting only uses less than and equals, and only cares about true/false results.  In other words, exactly what ``__cmp__`` provides.  Which makes sense--after all, Python supported sorting long before rich comparison was added.\n\nRich comparison is really for the boolean comparison operators, and the NumPy guys wanted it. It's so you can do things like return something besides True/False from a comparison.  For example, if A and B are matrices, A &lt; B also should return a matrix.  See PEP 207 for more.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t think it makes sorting easier.  I&amp;#39;m pretty sure sorting only uses less than and equals, and only cares about true/false results.  In other words, exactly what &lt;code&gt;__cmp__&lt;/code&gt; provides.  Which makes sense--after all, Python supported sorting long before rich comparison was added.&lt;/p&gt;\n\n&lt;p&gt;Rich comparison is really for the boolean comparison operators, and the NumPy guys wanted it. It&amp;#39;s so you can do things like return something besides True/False from a comparison.  For example, if A and B are matrices, A &amp;lt; B also should return a matrix.  See PEP 207 for more.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxlhm", "score_hidden": false, "stickied": false, "created": 1492370073.0, "created_utc": 1492341273.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwlnm", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbk3ur", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Rich comparison makes sorting so much easier. So it makes creating a rich comparable harder, but since I sort a 1000 times much more often than I create a custom comparable, I'm ok with that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rich comparison makes sorting so much easier. So it makes creating a rich comparable harder, but since I sort a 1000 times much more often than I create a custom comparable, I&amp;#39;m ok with that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwlnm", "score_hidden": false, "stickied": false, "created": 1492366763.0, "created_utc": 1492337963.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcxevz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgcdlhr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The change to comparison in Python 3 is that dissimilar objects can't be compared lesser-than or greater-than.  Unlike Python 2, in Python 3 \"x\" &lt; 3 now throws an exception.  I don't quite understand what your bug was, but if you had an array of bound methods [\"x\".join, \"y\".join], yes, you can still sort that in Python 3.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The change to comparison in Python 3 is that dissimilar objects can&amp;#39;t be compared lesser-than or greater-than.  Unlike Python 2, in Python 3 &amp;quot;x&amp;quot; &amp;lt; 3 now throws an exception.  I don&amp;#39;t quite understand what your bug was, but if you had an array of bound methods [&amp;quot;x&amp;quot;.join, &amp;quot;y&amp;quot;.join], yes, you can still sort that in Python 3.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcxevz", "score_hidden": false, "stickied": false, "created": 1492422546.0, "created_utc": 1492393746.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcdlhr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cathalgarvey", "parent_id": "t1_dgbk3ur", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The Python 2 comparison system was broken, though. I literally refactored code this weekend that accidentally was sorting a list of lists of strings by the `str.join` method..not the method's output, but the actual method. That's bonkers, it should have halted and caught fire! The test cases were only passing by pure luck, and the bug had been in the codebase for years. Afaik, that wouldn't happen in 3?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The Python 2 comparison system was broken, though. I literally refactored code this weekend that accidentally was sorting a list of lists of strings by the &lt;code&gt;str.join&lt;/code&gt; method..not the method&amp;#39;s output, but the actual method. That&amp;#39;s bonkers, it should have halted and caught fire! The test cases were only passing by pure luck, and the bug had been in the codebase for years. Afaik, that wouldn&amp;#39;t happen in 3?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdlhr", "score_hidden": false, "stickied": false, "created": 1492396203.0, "created_utc": 1492367403.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk3ur", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I asked Raymond Hettinger a similar question on my old podcast: what did he *not* like about Python.  It took him a minute to come up with an answer: \"rich comparison\".  I think I agree.  Python originally just had ``__cmp__``, which returned \"less than\", \"equal\", or \"greater than\", like the C function strcmp.  Now we have six functions and plenty of headaches.", "edited": 1492341315.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I asked Raymond Hettinger a similar question on my old podcast: what did he &lt;em&gt;not&lt;/em&gt; like about Python.  It took him a minute to come up with an answer: &amp;quot;rich comparison&amp;quot;.  I think I agree.  Python originally just had &lt;code&gt;__cmp__&lt;/code&gt;, which returned &amp;quot;less than&amp;quot;, &amp;quot;equal&amp;quot;, or &amp;quot;greater than&amp;quot;, like the C function strcmp.  Now we have six functions and plenty of headaches.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk3ur", "score_hidden": false, "stickied": false, "created": 1492338878.0, "created_utc": 1492310078.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcspsk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "okmkz", "parent_id": "t1_dgcj9r0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "At that point the disagreement becomes whether or not you view a string as an atomic value instead of a container of chars", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At that point the disagreement becomes whether or not you view a string as an atomic value instead of a container of chars&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcspsk", "score_hidden": false, "stickied": false, "created": 1492416305.0, "created_utc": 1492387505.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcj9r0", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Boba-Black-Sheep", "parent_id": "t1_dgccxt1", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Fair enough - it does seem fairly Pythonic to me that any type that *seems* iterable should be be.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fair enough - it does seem fairly Pythonic to me that any type that &lt;em&gt;seems&lt;/em&gt; iterable should be be.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcj9r0", "score_hidden": false, "stickied": false, "created": 1492403659.0, "created_utc": 1492374859.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgccxt1", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "beertown", "parent_id": "t1_dgcc9wk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's just matter of what's the typical kind of code you write. Yours seems quite peculiar.\n\nI think iterating over the result of a .chars() method shouldn't be bad for anybody.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s just matter of what&amp;#39;s the typical kind of code you write. Yours seems quite peculiar.&lt;/p&gt;\n\n&lt;p&gt;I think iterating over the result of a .chars() method shouldn&amp;#39;t be bad for anybody.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgccxt1", "score_hidden": false, "stickied": false, "created": 1492395323.0, "created_utc": 1492366523.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcc9wk", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Boba-Black-Sheep", "parent_id": "t1_dgbxwxo", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I find myself iterating through strings like ALL the time, it's one of the features that gives me that 'oh boy isn't Python fun' feeling.\n\n(I do a bunch of work with generative text modelling)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I find myself iterating through strings like ALL the time, it&amp;#39;s one of the features that gives me that &amp;#39;oh boy isn&amp;#39;t Python fun&amp;#39; feeling.&lt;/p&gt;\n\n&lt;p&gt;(I do a bunch of work with generative text modelling)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcc9wk", "score_hidden": false, "stickied": false, "created": 1492394436.0, "created_utc": 1492365636.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxwxo", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "beertown", "parent_id": "t1_dgbvgdj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yes. I don't remember the last time I wrote an iteration over a string's characters. But I know how many times this feature turned out to be very annoying.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes. I don&amp;#39;t remember the last time I wrote an iteration over a string&amp;#39;s characters. But I know how many times this feature turned out to be very annoying.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxwxo", "score_hidden": false, "stickied": false, "created": 1492371054.0, "created_utc": 1492342254.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc8gij", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Fylwind", "parent_id": "t1_dgbvgdj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Oh gosh yes! Yesterday I just wrote some heavy string handling code and I made sure to put a bunch of asserts to disallow strings because far too often I forget that an argument is a list and pass a string instead.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh gosh yes! Yesterday I just wrote some heavy string handling code and I made sure to put a bunch of asserts to disallow strings because far too often I forget that an argument is a list and pass a string instead.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc8gij", "score_hidden": false, "stickied": false, "created": 1492389451.0, "created_utc": 1492360651.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgd845r", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "camh-", "parent_id": "t1_dgd7wu2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Well, TIL.\n\nReferences:\n\nisinstance: https://docs.python.org/3.6/library/functions.html#isinstance\n\n\"virtual\" subclasses (abstract base classes): https://docs.python.org/3.6/glossary.html#term-abstract-base-class\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, TIL.&lt;/p&gt;\n\n&lt;p&gt;References:&lt;/p&gt;\n\n&lt;p&gt;isinstance: &lt;a href=\"https://docs.python.org/3.6/library/functions.html#isinstance\"&gt;https://docs.python.org/3.6/library/functions.html#isinstance&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;virtual&amp;quot; subclasses (abstract base classes): &lt;a href=\"https://docs.python.org/3.6/glossary.html#term-abstract-base-class\"&gt;https://docs.python.org/3.6/glossary.html#term-abstract-base-class&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd845r", "score_hidden": false, "stickied": false, "created": 1492440808.0, "created_utc": 1492412008.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd7wu2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jonrsharpe", "parent_id": "t1_dgd4mf9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "...that's exactly what `isinstance(bar, Iterable)` does, checks it has the right interface. You don't have to explicitly have `Iterable` in its MRO. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;...that&amp;#39;s exactly what &lt;code&gt;isinstance(bar, Iterable)&lt;/code&gt; does, checks it has the right interface. You don&amp;#39;t have to explicitly have &lt;code&gt;Iterable&lt;/code&gt; in its MRO. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd7wu2", "score_hidden": false, "stickied": false, "created": 1492440322.0, "created_utc": 1492411522.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd4mf9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "camh-", "parent_id": "t1_dgcxcgx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "`isinstance(bar, Iterable)` is incorrect, as not all iterables will inherit from `collections.Iterable`.\n\nInstead you should use `hasattr(bar, '__iter__')`. `__iter__()` is what needs to be implemented to implement to the iterator protocol.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;isinstance(bar, Iterable)&lt;/code&gt; is incorrect, as not all iterables will inherit from &lt;code&gt;collections.Iterable&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Instead you should use &lt;code&gt;hasattr(bar, &amp;#39;__iter__&amp;#39;)&lt;/code&gt;. &lt;code&gt;__iter__()&lt;/code&gt; is what needs to be implemented to implement to the iterator protocol.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd4mf9", "score_hidden": false, "stickied": false, "created": 1492433398.0, "created_utc": 1492404598.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcxcgx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "WaitVVut", "parent_id": "t1_dgbvgdj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "    from six import string_types\n    from collections import Iterable\n    \n    def foo(bar):\n        assert isinstance(bar, Iterable) and not isinstance(bar, string_types)\n        for x in bar:\n            yield x", "edited": 1492393849.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;from six import string_types\nfrom collections import Iterable\n\ndef foo(bar):\n    assert isinstance(bar, Iterable) and not isinstance(bar, string_types)\n    for x in bar:\n        yield x\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcxcgx", "score_hidden": false, "stickied": false, "created": 1492422452.0, "created_utc": 1492393652.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgdahyu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "_Wintermute", "parent_id": "t1_dgbvgdj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How python deals with strings is one of the reasons it's loved for quick and dirty bioinformatics/genomics scripts.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How python deals with strings is one of the reasons it&amp;#39;s loved for quick and dirty bioinformatics/genomics scripts.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdahyu", "score_hidden": false, "stickied": false, "created": 1492447825.0, "created_utc": 1492419025.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvgdj", "gilded": 0, "archived": false, "score": 33, "report_reasons": null, "author": "camh-", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Make strings non-iterable. Have a method on string that returns an iterable version of the string. Too often I have seen a string passed where it was meant as a single element, but because an iterable was given, it was iterated and each char of the string is processed.\n\nIt is occasionally useful/necessary to iterate a string, so you still want an iterable version of a string, but not by default.", "edited": 1492389464.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Make strings non-iterable. Have a method on string that returns an iterable version of the string. Too often I have seen a string passed where it was meant as a single element, but because an iterable was given, it was iterated and each char of the string is processed.&lt;/p&gt;\n\n&lt;p&gt;It is occasionally useful/necessary to iterate a string, so you still want an iterable version of a string, but not by default.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvgdj", "score_hidden": false, "stickied": false, "created": 1492362764.0, "created_utc": 1492333964.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 33}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgd6uo5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gwolf23", "parent_id": "t1_dgcznuy", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Well, I am aware of two options I mentioned if we talk about unittesting frameworks. You could probably throw in PyHamcrest assertions and avoid unittest ones. Also, keep in mind that pytest has momentum, just look at all the pytest plugins/addons in PyPi repo.\nFor functional testing there are a bunch of BDD framework options like for instance Behave.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, I am aware of two options I mentioned if we talk about unittesting frameworks. You could probably throw in PyHamcrest assertions and avoid unittest ones. Also, keep in mind that pytest has momentum, just look at all the pytest plugins/addons in PyPi repo.\nFor functional testing there are a bunch of BDD framework options like for instance Behave.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd6uo5", "score_hidden": false, "stickied": false, "created": 1492437921.0, "created_utc": 1492409121.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcznuy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "reIuctant", "parent_id": "t1_dgcgakx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah haha, just been on the lookout for maybe new, better unittesting libraries. Pytest it is I guess :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah haha, just been on the lookout for maybe new, better unittesting libraries. Pytest it is I guess :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcznuy", "score_hidden": false, "stickied": false, "created": 1492425700.0, "created_utc": 1492396900.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcgakx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "gwolf23", "parent_id": "t1_dgccrta", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Welcome to the real world! Even Python does not follow Zen of Python in some cases! ;)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Welcome to the real world! Even Python does not follow Zen of Python in some cases! ;)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcgakx", "score_hidden": false, "stickied": false, "created": 1492399801.0, "created_utc": 1492371001.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgccrta", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "reIuctant", "parent_id": "t1_dgc4aij", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "But isn't magic against the Zen of python? Pretty much why I'm so wary of it. Been looking for less magical, more compliant libraries.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But isn&amp;#39;t magic against the Zen of python? Pretty much why I&amp;#39;m so wary of it. Been looking for less magical, more compliant libraries.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgccrta", "score_hidden": false, "stickied": false, "created": 1492395100.0, "created_utc": 1492366300.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc4aij", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "gwolf23", "parent_id": "t1_dgc3trs", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Recently I've been using pytest. But it is a bit unconventional if you're accustomed to xUnit style. It also seems to have too much magic. All being said I still prefer pytest over unittest.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Recently I&amp;#39;ve been using pytest. But it is a bit unconventional if you&amp;#39;re accustomed to xUnit style. It also seems to have too much magic. All being said I still prefer pytest over unittest.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc4aij", "score_hidden": false, "stickied": false, "created": 1492383741.0, "created_utc": 1492354941.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc3trs", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "reIuctant", "parent_id": "t1_dgbtmz8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Which library is most pythonic? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Which library is most pythonic? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc3trs", "score_hidden": false, "stickied": false, "created": 1492383042.0, "created_utc": 1492354242.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtmz8", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "gwolf23", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Ugly unittest in stdlib. It hurts me every time to write those unpythonic camelcase methods.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ugly unittest in stdlib. It hurts me every time to write those unpythonic camelcase methods.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtmz8", "score_hidden": false, "stickied": false, "created": 1492357005.0, "created_utc": 1492328205.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbuzm2", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "rainlife", "parent_id": "t1_dgbtlhp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Completely agree, I love python byt async is disgusting", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Completely agree, I love python byt async is disgusting&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbuzm2", "score_hidden": false, "stickied": false, "created": 1492361206.0, "created_utc": 1492332406.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbxv7k", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "beertown", "parent_id": "t1_dgbtlhp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I agree, in some way.\n\nI found very hard to wrap my mind around that kind of async programming model. I (personally) think the David Beazley's curio package implements THE CORRECT WAY to do async, and it should be included in the standard library instead of asyncio (or, at least, alongside it).\n\nCan't wait to see the first curio stable release.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree, in some way.&lt;/p&gt;\n\n&lt;p&gt;I found very hard to wrap my mind around that kind of async programming model. I (personally) think the David Beazley&amp;#39;s curio package implements THE CORRECT WAY to do async, and it should be included in the standard library instead of asyncio (or, at least, alongside it).&lt;/p&gt;\n\n&lt;p&gt;Can&amp;#39;t wait to see the first curio stable release.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxv7k", "score_hidden": false, "stickied": false, "created": 1492370912.0, "created_utc": 1492342112.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcdw91", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cathalgarvey", "parent_id": "t1_dgbtlhp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "After getting into Concurrent/Async programming with Go, I was initially pleased to see the emergence of asyncio. But I agree: the approach taken has been too patchy, not ambitious enough, and it's ugly and clunky to use.\n\nThat said.. if I were a maintainer, I wouldn't try anything ambitious anymore, either. The response to Python 3 showed that the community was very willing to \"Mule up\" and create a stink over new language features. Why bother? :/", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After getting into Concurrent/Async programming with Go, I was initially pleased to see the emergence of asyncio. But I agree: the approach taken has been too patchy, not ambitious enough, and it&amp;#39;s ugly and clunky to use.&lt;/p&gt;\n\n&lt;p&gt;That said.. if I were a maintainer, I wouldn&amp;#39;t try anything ambitious anymore, either. The response to Python 3 showed that the community was very willing to &amp;quot;Mule up&amp;quot; and create a stink over new language features. Why bother? :/&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdw91", "score_hidden": false, "stickied": false, "created": 1492396615.0, "created_utc": 1492367815.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgczkdm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ojii", "parent_id": "t1_dgbtlhp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What asyncio in core brought us is a standardized way for different async libraries (twisted, tornado, asyncio, ...) to interoperate. In my tornado project I can use the twisted password hashers and aiobotocore. It's fantastic. \n\nAlso, async/await could not be implemented in a 3rd party library and those are what make async programming tolerable. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What asyncio in core brought us is a standardized way for different async libraries (twisted, tornado, asyncio, ...) to interoperate. In my tornado project I can use the twisted password hashers and aiobotocore. It&amp;#39;s fantastic. &lt;/p&gt;\n\n&lt;p&gt;Also, async/await could not be implemented in a 3rd party library and those are what make async programming tolerable. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgczkdm", "score_hidden": false, "stickied": false, "created": 1492425564.0, "created_utc": 1492396764.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtlhp", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "ikalnitsky", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": ":set heretic mode on\n\nI'd remove asyncio stuff from Python core. IMHO, it's not the best async model (honestly, golang has better one) and I don't like that it's tightly coupled to Python language so the language itself became so complex with async context managers / loops / etc. I'd like to see it as a third party library like it was before.\n\n:set heretic mode off", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;:set heretic mode on&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d remove asyncio stuff from Python core. IMHO, it&amp;#39;s not the best async model (honestly, golang has better one) and I don&amp;#39;t like that it&amp;#39;s tightly coupled to Python language so the language itself became so complex with async context managers / loops / etc. I&amp;#39;d like to see it as a third party library like it was before.&lt;/p&gt;\n\n&lt;p&gt;:set heretic mode off&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtlhp", "score_hidden": false, "stickied": false, "created": 1492356889.0, "created_utc": 1492328089.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcg6yl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "baubleglue", "parent_id": "t1_dgbtgzl", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Every time I write utility to parse data, it uses 25% of CPU (1 of 4). Sometimes I do it in multiple process, but it is not always  straightforward and need validation before use:\n\n1. read source data and push it to one of 4 queues  \n2. start 4 worker processes (worker dump result to Collector Queue or file)\n3. Run process which make final aggregation. \n\n** make sure the worker process: 1) always exist 2) exist only when reader completed\n\nI use python mostly for fast data validation and I want to keep the logic simple. Let's say I need to do same thing as in SQL below \n\n    select a, b, sum(c) from (\n        select distinct a, b, c from source_data\n        where a &gt; N\n    ) group by a, b\n\nIt will take me about couple of minutes to write it in python. How I do the same while utilizing all CPUs?  \n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Every time I write utility to parse data, it uses 25% of CPU (1 of 4). Sometimes I do it in multiple process, but it is not always  straightforward and need validation before use:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;read source data and push it to one of 4 queues&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;start 4 worker processes (worker dump result to Collector Queue or file)&lt;/li&gt;\n&lt;li&gt;Run process which make final aggregation. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;** make sure the worker process: 1) always exist 2) exist only when reader completed&lt;/p&gt;\n\n&lt;p&gt;I use python mostly for fast data validation and I want to keep the logic simple. Let&amp;#39;s say I need to do same thing as in SQL below &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;select a, b, sum(c) from (\n    select distinct a, b, c from source_data\n    where a &amp;gt; N\n) group by a, b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will take me about couple of minutes to write it in python. How I do the same while utilizing all CPUs?  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcg6yl", "score_hidden": false, "stickied": false, "created": 1492399674.0, "created_utc": 1492370874.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtgzl", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "ikalnitsky", "parent_id": "t1_dgbilgt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "GIL is not that bad. It's an issue for parallel CPU-bound computations in *threads* (like computing few Fibonacci numbers) but\n\n* I/O bound applications do not suffer from GIL as it's released on I/O and hence listening some sockets in threads are more than ok\n* CPU bound applications can use multiprocessing to achieve parallel computations (make sense to use for heavy computations though)\n* C-based libraries may release GIL and do fast computations under the hood.\n\nReally, I can't remember when GIL was such a problem in my code. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;GIL is not that bad. It&amp;#39;s an issue for parallel CPU-bound computations in &lt;em&gt;threads&lt;/em&gt; (like computing few Fibonacci numbers) but&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I/O bound applications do not suffer from GIL as it&amp;#39;s released on I/O and hence listening some sockets in threads are more than ok&lt;/li&gt;\n&lt;li&gt;CPU bound applications can use multiprocessing to achieve parallel computations (make sense to use for heavy computations though)&lt;/li&gt;\n&lt;li&gt;C-based libraries may release GIL and do fast computations under the hood.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Really, I can&amp;#39;t remember when GIL was such a problem in my code. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtgzl", "score_hidden": false, "stickied": false, "created": 1492356540.0, "created_utc": 1492327740.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgd8ur2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Saefroch", "parent_id": "t1_dgbilgt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I don't know how much of this is a joke, but it's getting upvoted so maybe people care.\n\nI don't think the GIL is really the problem. The decision to use reference counting and expose that in the C API is the problem. Reference counting is a concurrency-hostile way to manage memory, and in an increasingly concurrent world it's a non-starter. The decision to add the GIL made sense at the time but if Python were designed today I hope a better memory management strategy would be employed. Trying to make reference counting work without a GIL is hard: \nhttps://youtu.be/fgWUwQVoLHo\n\nAll is not lost though. The Python C API provides a way to run outside (release) the GIL. you can make use of this by writing a C extension (not a great option), Cython (better) or with numba (easy). A function with numba's jit applied and `nogil=True` can be run in threads without being held back by the GIL. Numba is limited in scope, but it already covers quite a few applications in data processing.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t know how much of this is a joke, but it&amp;#39;s getting upvoted so maybe people care.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t think the GIL is really the problem. The decision to use reference counting and expose that in the C API is the problem. Reference counting is a concurrency-hostile way to manage memory, and in an increasingly concurrent world it&amp;#39;s a non-starter. The decision to add the GIL made sense at the time but if Python were designed today I hope a better memory management strategy would be employed. Trying to make reference counting work without a GIL is hard: \n&lt;a href=\"https://youtu.be/fgWUwQVoLHo\"&gt;https://youtu.be/fgWUwQVoLHo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;All is not lost though. The Python C API provides a way to run outside (release) the GIL. you can make use of this by writing a C extension (not a great option), Cython (better) or with numba (easy). A function with numba&amp;#39;s jit applied and &lt;code&gt;nogil=True&lt;/code&gt; can be run in threads without being held back by the GIL. Numba is limited in scope, but it already covers quite a few applications in data processing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd8ur2", "score_hidden": false, "stickied": false, "created": 1492442576.0, "created_utc": 1492413776.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbmkso", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "deadmilk", "parent_id": "t1_dgbilgt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You can turn off the GIL in Cython", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can turn off the GIL in Cython&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbmkso", "score_hidden": false, "stickied": false, "created": 1492342579.0, "created_utc": 1492313779.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbilgt", "gilded": 0, "archived": false, "score": 28, "report_reasons": null, "author": "btreecat", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "GIL ;-) ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;GIL ;-) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbilgt", "score_hidden": false, "stickied": false, "created": 1492336637.0, "created_utc": 1492307837.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 28}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc1li8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "murtaza64", "parent_id": "t1_dgbwuew", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I suppose `__join__` methods might be needed, but then again not really if the object supports iteration. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I suppose &lt;code&gt;__join__&lt;/code&gt; methods might be needed, but then again not really if the object supports iteration. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1li8", "score_hidden": false, "stickied": false, "created": 1492379452.0, "created_utc": 1492350652.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwuew", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "enteleform", "parent_id": "t1_dgbk5i0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "`join(iterable, str)` as a built-in would work decently, be left-to-right readable, and not impose any heft to the string or iterable classes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;join(iterable, str)&lt;/code&gt; as a built-in would work decently, be left-to-right readable, and not impose any heft to the string or iterable classes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwuew", "score_hidden": false, "stickied": false, "created": 1492367594.0, "created_utc": 1492338794.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgblqcv", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "spankweasel", "parent_id": "t1_dgbk5i0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Exactly correct (from a language maintenance perspective).  It doesn't make it any less stupid. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Exactly correct (from a language maintenance perspective).  It doesn&amp;#39;t make it any less stupid. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgblqcv", "score_hidden": false, "stickied": false, "created": 1492341268.0, "created_utc": 1492312468.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbv6qu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "call_me_cookie", "parent_id": "t1_dgbk5i0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This makes total sense, nonetheless, I would still find something like PHP's implode() more intuitive than str.join(). ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This makes total sense, nonetheless, I would still find something like PHP&amp;#39;s implode() more intuitive than str.join(). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbv6qu", "score_hidden": false, "stickied": false, "created": 1492361864.0, "created_utc": 1492333064.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk5i0", "gilded": 0, "archived": false, "score": 30, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think the reason Guido hasn't allowed this is because it requires a new method on every iterable.  Adding the \"join\" function to strings inflicts a lot less damage on the language.  IDK if I agree, but then I'm not the language designer here.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think the reason Guido hasn&amp;#39;t allowed this is because it requires a new method on every iterable.  Adding the &amp;quot;join&amp;quot; function to strings inflicts a lot less damage on the language.  IDK if I agree, but then I&amp;#39;m not the language designer here.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk5i0", "score_hidden": false, "stickied": false, "created": 1492338945.0, "created_utc": 1492310145.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 30}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbvvft", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "robin-gvx", "parent_id": "t1_dgblsei", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's not really a backend thing, it's more that every custom iterable would have to implement join, or you'd have to convert them to a list to be able to join them. I much prefer `''.join(generate_strings())` to `list(generate_strings()).join()` from both a performance standpoint, and a API hygiene standpoint.\n\nHaving it on `str` requires one method that only needs to know about iterables, a very generic and basic concept in Python.\n\nHaving it on `list` requires `list` to know about `str` and string concatenation, and now you have to decide for each iterable type \"do implement `join` on this type?\" If yes, now you need another method, and that type needs to know about string concatenation. If not, you have to do a potentially copy of the data to a list to be able to join a string.\n\nPlus, as a regular programmer I now have to know which types I can call `join` on and which need to be converted to a list first.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not really a backend thing, it&amp;#39;s more that every custom iterable would have to implement join, or you&amp;#39;d have to convert them to a list to be able to join them. I much prefer &lt;code&gt;&amp;#39;&amp;#39;.join(generate_strings())&lt;/code&gt; to &lt;code&gt;list(generate_strings()).join()&lt;/code&gt; from both a performance standpoint, and a API hygiene standpoint.&lt;/p&gt;\n\n&lt;p&gt;Having it on &lt;code&gt;str&lt;/code&gt; requires one method that only needs to know about iterables, a very generic and basic concept in Python.&lt;/p&gt;\n\n&lt;p&gt;Having it on &lt;code&gt;list&lt;/code&gt; requires &lt;code&gt;list&lt;/code&gt; to know about &lt;code&gt;str&lt;/code&gt; and string concatenation, and now you have to decide for each iterable type &amp;quot;do implement &lt;code&gt;join&lt;/code&gt; on this type?&amp;quot; If yes, now you need another method, and that type needs to know about string concatenation. If not, you have to do a potentially copy of the data to a list to be able to join a string.&lt;/p&gt;\n\n&lt;p&gt;Plus, as a regular programmer I now have to know which types I can call &lt;code&gt;join&lt;/code&gt; on and which need to be converted to a list first.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvvft", "score_hidden": false, "stickied": false, "created": 1492364206.0, "created_utc": 1492335406.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgblsei", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "spankweasel", "parent_id": "t1_dgbks4k", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Not necessarily.  str.split(c) returns a list.  As u/ExoticMandibles said, it's because it would require a bunch more C code in the backend to make it happen.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not necessarily.  str.split(c) returns a list.  As &lt;a href=\"/u/ExoticMandibles\"&gt;u/ExoticMandibles&lt;/a&gt; said, it&amp;#39;s because it would require a bunch more C code in the backend to make it happen.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgblsei", "score_hidden": false, "stickied": false, "created": 1492341354.0, "created_utc": 1492312554.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbks4k", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "abrazilianinreddit", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Is the reason for being str.join() because the result is a string, and it's supposed to be more intuitive that a string method returns a string?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is the reason for being str.join() because the result is a string, and it&amp;#39;s supposed to be more intuitive that a string method returns a string?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbks4k", "score_hidden": false, "stickied": false, "created": 1492339859.0, "created_utc": 1492311059.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc59tm", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgc1n44", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That would clutter the built-in namespace and a small one is a very important in the Python culture.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That would clutter the built-in namespace and a small one is a very important in the Python culture.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc59tm", "score_hidden": false, "stickied": false, "created": 1492385141.0, "created_utc": 1492356341.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc1n44", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "murtaza64", "parent_id": "t1_dgbwkr1", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As someone else suggested, wouldn't `join(iterable, string)` do the trick and actually be more Pythonic?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As someone else suggested, wouldn&amp;#39;t &lt;code&gt;join(iterable, string)&lt;/code&gt; do the trick and actually be more Pythonic?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1n44", "score_hidden": false, "stickied": false, "created": 1492379530.0, "created_utc": 1492350730.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwkr1", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "\",\".join(iterable) work with any iterable.\n\nI means iterable can be a tuple, a list, a string, a file, a set, a dict, a generator or even a custom user class overriding \\_\\_iter\\_\\_.\n\nDoing it this way is less intuitive, but so much more powerful.\n\nIteration is at the core philosophy of the language. Once you master all the implication of it, you really master Python. \n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;,&amp;quot;.join(iterable) work with any iterable.&lt;/p&gt;\n\n&lt;p&gt;I means iterable can be a tuple, a list, a string, a file, a set, a dict, a generator or even a custom user class overriding __iter__.&lt;/p&gt;\n\n&lt;p&gt;Doing it this way is less intuitive, but so much more powerful.&lt;/p&gt;\n\n&lt;p&gt;Iteration is at the core philosophy of the language. Once you master all the implication of it, you really master Python. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwkr1", "score_hidden": false, "stickied": false, "created": 1492366677.0, "created_utc": 1492337877.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk21g", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "yaxamie", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I felt the same way coming from the ecma world of string.split('.').join(', ').", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I felt the same way coming from the ecma world of string.split(&amp;#39;.&amp;#39;).join(&amp;#39;, &amp;#39;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk21g", "score_hidden": false, "stickied": false, "created": 1492338803.0, "created_utc": 1492310003.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbk4kl", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "liquidpele", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "yea, that one has always bugged me as well... ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;yea, that one has always bugged me as well... &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk4kl", "score_hidden": false, "stickied": false, "created": 1492338908.0, "created_utc": 1492310108.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbvz33", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "robin-gvx", "parent_id": "t1_dgbujnq", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If I had to implement `join` as taking `*args`, I'd do it like this:\n\n    def join(self, it, *args):\n        if args:\n            return self.join([it, *args])\n        # ... standard implementation below ...\n\nThat way 1 arg is always the standard behaviour, and you only get \"autoboxing\" for 2+ args.\n\nBut yeah, just wrap things in a list if the items to be concatenated don't come in an iterable.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If I had to implement &lt;code&gt;join&lt;/code&gt; as taking &lt;code&gt;*args&lt;/code&gt;, I&amp;#39;d do it like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def join(self, it, *args):\n    if args:\n        return self.join([it, *args])\n    # ... standard implementation below ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That way 1 arg is always the standard behaviour, and you only get &amp;quot;autoboxing&amp;quot; for 2+ args.&lt;/p&gt;\n\n&lt;p&gt;But yeah, just wrap things in a list if the items to be concatenated don&amp;#39;t come in an iterable.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvz33", "score_hidden": false, "stickied": false, "created": 1492364561.0, "created_utc": 1492335761.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbujnq", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "jaakhaamer", "parent_id": "t1_dgbs5vn", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What would `','.join('abc')` do?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What would &lt;code&gt;&amp;#39;,&amp;#39;.join(&amp;#39;abc&amp;#39;)&lt;/code&gt; do?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbujnq", "score_hidden": false, "stickied": false, "created": 1492359757.0, "created_utc": 1492330957.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbxy25", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbs5vn", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yes, way easier. Not because it's hard to write, but because I forget every single time and then have to go back later and fix it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, way easier. Not because it&amp;#39;s hard to write, but because I forget every single time and then have to go back later and fix it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxy25", "score_hidden": false, "stickied": false, "created": 1492371148.0, "created_utc": 1492342348.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbs5vn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "beagle3", "parent_id": "t1_dgbpdtx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Seriously? Way easier?\n\n    ','.join(['a','b','c'])\n\nvs\n\n     ','.join('a', 'b', 'c')\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seriously? Way easier?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;#39;,&amp;#39;.join([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;vs&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; &amp;#39;,&amp;#39;.join(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbs5vn", "score_hidden": false, "stickied": false, "created": 1492353118.0, "created_utc": 1492324318.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpdtx", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbjs4z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm okay with `join` being attached to `str`, but I wish it would handle multiple arguments intuitively. You have to pass in an iterable. But how about being able to pass in either an iterable or multiple arguments you want to join? It would make concatenating a few separate strings way easier.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m okay with &lt;code&gt;join&lt;/code&gt; being attached to &lt;code&gt;str&lt;/code&gt;, but I wish it would handle multiple arguments intuitively. You have to pass in an iterable. But how about being able to pass in either an iterable or multiple arguments you want to join? It would make concatenating a few separate strings way easier.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpdtx", "score_hidden": false, "stickied": false, "created": 1492347310.0, "created_utc": 1492318510.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}, {"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgbjs4z", "gilded": 0, "archived": false, "score": 37, "report_reasons": null, "author": "spankweasel", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I wouldn't amputate so to speak but holy crap is ...\n\n    str.join(list)\n\n... just not intuitive.\n\nI know what it's trying to do (I've been a Python dev since 1.5.2) but it's *still* something that irritates me.\n\nedit: I wish it were just:\n\n    list.join(str)\n\nSo:\n\n    ','.join([1,2,3,4])\n\nbecomes\n\n    [1,2,3,4].join(',')\n\nsimply because it *reads* better.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wouldn&amp;#39;t amputate so to speak but holy crap is ...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;str.join(list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... just not intuitive.&lt;/p&gt;\n\n&lt;p&gt;I know what it&amp;#39;s trying to do (I&amp;#39;ve been a Python dev since 1.5.2) but it&amp;#39;s &lt;em&gt;still&lt;/em&gt; something that irritates me.&lt;/p&gt;\n\n&lt;p&gt;edit: I wish it were just:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list.join(str)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;#39;,&amp;#39;.join([1,2,3,4])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;becomes&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[1,2,3,4].join(&amp;#39;,&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;simply because it &lt;em&gt;reads&lt;/em&gt; better.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbjs4z", "score_hidden": false, "stickied": false, "created": 1492338391.0, "created_utc": 1492309591.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 37}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcbjye", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "goldfather8", "parent_id": "t1_dgbxow0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think the ternary operator is correct here\n\n    b = True\n    result = value if b else 0\n\nMore explicit than either approach.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think the ternary operator is correct here&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;b = True\nresult = value if b else 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More explicit than either approach.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcbjye", "score_hidden": false, "stickied": false, "created": 1492393493.0, "created_utc": 1492364693.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxow0", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "beertown", "parent_id": "t1_dgbpp0q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "True, it is very useful. But being forced to explicitly convert the boolean to integer, something like \n\n    b = True\n    result = value * int(b)\n\n\nwould be clearer.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;True, it is very useful. But being forced to explicitly convert the boolean to integer, something like &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;b = True\nresult = value * int(b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be clearer.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxow0", "score_hidden": false, "stickied": false, "created": 1492370373.0, "created_utc": 1492341573.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpp0q", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbif5q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm mixed about this. On the one hand, it is kind of unclean. On the other hand, multiplying by a Boolean can be really convenient, especially in lambda functions.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m mixed about this. On the one hand, it is kind of unclean. On the other hand, multiplying by a Boolean can be really convenient, especially in lambda functions.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpp0q", "score_hidden": false, "stickied": false, "created": 1492347879.0, "created_utc": 1492319079.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbw0zy", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "robin-gvx", "parent_id": "t1_dgbif5q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah, I really wished they got rid of that in Python 3. `issubclass(bool, int)` really only encourage hacks and un-Pythonic code, and introduce subtle bugs if you don't pay attention any time an expression can evaluate to either a `bool` or an integer value (remember kids, check `isinstance(x, bool)` _before_ you check `isinstance(x, int)`).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, I really wished they got rid of that in Python 3. &lt;code&gt;issubclass(bool, int)&lt;/code&gt; really only encourage hacks and un-Pythonic code, and introduce subtle bugs if you don&amp;#39;t pay attention any time an expression can evaluate to either a &lt;code&gt;bool&lt;/code&gt; or an integer value (remember kids, check &lt;code&gt;isinstance(x, bool)&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; you check &lt;code&gt;isinstance(x, int)&lt;/code&gt;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbw0zy", "score_hidden": false, "stickied": false, "created": 1492364749.0, "created_utc": 1492335949.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc1pgw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "murtaza64", "parent_id": "t1_dgbkqv5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "On the other hand, a Boolean data type is fundamentally just an integer that can only take two values, right?\n\nI guess maybe not from the perspective of traditional arithmetic. But I don't see how much harm it can do in Python anyway due to things like truthiness already being part of the language. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On the other hand, a Boolean data type is fundamentally just an integer that can only take two values, right?&lt;/p&gt;\n\n&lt;p&gt;I guess maybe not from the perspective of traditional arithmetic. But I don&amp;#39;t see how much harm it can do in Python anyway due to things like truthiness already being part of the language. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1pgw", "score_hidden": false, "stickied": false, "created": 1492379646.0, "created_utc": 1492350846.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkqv5", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbkh50", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is often described as \"strongly typed\", meaning that the language refuses to guess about how different types relate to each other, and requires you to explicitly convert between types if you want to. To me, this seems like an exception to that, which is why I think it could stand to be removed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is often described as &amp;quot;strongly typed&amp;quot;, meaning that the language refuses to guess about how different types relate to each other, and requires you to explicitly convert between types if you want to. To me, this seems like an exception to that, which is why I think it could stand to be removed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkqv5", "score_hidden": false, "stickied": false, "created": 1492339809.0, "created_utc": 1492311009.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkh50", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "xfunky", "parent_id": "t1_dgbkeos", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Maybe my thinking set is to biased since I mostly work with C. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe my thinking set is to biased since I mostly work with C. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkh50", "score_hidden": false, "stickied": false, "created": 1492339420.0, "created_utc": 1492310620.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkeos", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbkbb9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Only if you're using C. Python isn't C.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Only if you&amp;#39;re using C. Python isn&amp;#39;t C.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkeos", "score_hidden": false, "stickied": false, "created": 1492339318.0, "created_utc": 1492310518.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkbb9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "xfunky", "parent_id": "t1_dgbif5q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "TIL. Though it *does* make sense in a way to have it as an integral", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TIL. Though it &lt;em&gt;does&lt;/em&gt; make sense in a way to have it as an integral&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkbb9", "score_hidden": false, "stickied": false, "created": 1492339178.0, "created_utc": 1492310378.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcefbp", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Vaphell", "parent_id": "t1_dgbif5q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "that wart allows for a useful, compact idiom of counting items that match the criteria in an iterable\n\n`sum(x==5 for x in seq)`\n\nI like it better than `sum(1 for x in seq if x==5)` or `sum(1 if x==5 else 0 for x in seq)` or shit like `len([1 for x in seq if x==5])`", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;that wart allows for a useful, compact idiom of counting items that match the criteria in an iterable&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sum(x==5 for x in seq)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I like it better than &lt;code&gt;sum(1 for x in seq if x==5)&lt;/code&gt; or &lt;code&gt;sum(1 if x==5 else 0 for x in seq)&lt;/code&gt; or shit like &lt;code&gt;len([1 for x in seq if x==5])&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcefbp", "score_hidden": false, "stickied": false, "created": 1492397324.0, "created_utc": 1492368524.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbsrka", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbs7ws", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; This is a result of adopting ...\n\n...no, it definitely is not.", "edited": 1492327743.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;This is a result of adopting ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;...no, it definitely is not.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbsrka", "score_hidden": false, "stickied": false, "created": 1492354634.0, "created_utc": 1492325834.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbs7ws", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "beagle3", "parent_id": "t1_dgbif5q", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This is a result of adopting https://en.wikipedia.org/wiki/Iverson_bracket and it is good for you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is a result of adopting &lt;a href=\"https://en.wikipedia.org/wiki/Iverson_bracket\"&gt;https://en.wikipedia.org/wiki/Iverson_bracket&lt;/a&gt; and it is good for you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbs7ws", "score_hidden": false, "stickied": false, "created": 1492353252.0, "created_utc": 1492324452.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgbif5q", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "atrigent", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "`True` and `False` are the numbers 1 and 0, respectively. No, I don't mean that the can be converted to numbers - they literally are those numbers. See [here](https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy) and how booleans are a type of number. I think that's a pretty strange wart that should be removed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are the numbers 1 and 0, respectively. No, I don&amp;#39;t mean that the can be converted to numbers - they literally are those numbers. See &lt;a href=\"https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy\"&gt;here&lt;/a&gt; and how booleans are a type of number. I think that&amp;#39;s a pretty strange wart that should be removed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbif5q", "score_hidden": false, "stickied": false, "created": 1492336378.0, "created_utc": 1492307578.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbrzr5", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "EsperCharmMyself", "parent_id": "t1_dgbrcrs", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I've always preferred a class which implements `__call__` for this case.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve always preferred a class which implements &lt;code&gt;__call__&lt;/code&gt; for this case.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrzr5", "score_hidden": false, "stickied": false, "created": 1492352707.0, "created_utc": 1492323907.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbuyug", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "rainlife", "parent_id": "t1_dgbrcrs", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I agree that parametrized decorators are kind of awful, but if you haven't you should try the default first argument trick - [slide 49](http://www.dabeaz.com/py3meta/index.html)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree that parametrized decorators are kind of awful, but if you haven&amp;#39;t you should try the default first argument trick - &lt;a href=\"http://www.dabeaz.com/py3meta/index.html\"&gt;slide 49&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbuyug", "score_hidden": false, "stickied": false, "created": 1492361137.0, "created_utc": 1492332337.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcifip", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgbrcrs", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "    def deco(f=None, *, **kwargs):\n        if f is None:\n            return partial(deco, **kwargs) \n        if not callable(f):\n            raise TypeError\n        # wrapper\n\nI use this pattern all the time and never run into issues. \n\nNow, if you want a challenge, write a decorator that is meant to sit ontop of arbitrary descriptors. ", "edited": 1492381413.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;def deco(f=None, *, **kwargs):\n    if f is None:\n        return partial(deco, **kwargs) \n    if not callable(f):\n        raise TypeError\n    # wrapper\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I use this pattern all the time and never run into issues. &lt;/p&gt;\n\n&lt;p&gt;Now, if you want a challenge, write a decorator that is meant to sit ontop of arbitrary descriptors. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcifip", "score_hidden": false, "stickied": false, "created": 1492402568.0, "created_utc": 1492373768.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbwmyu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbrcrs", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You don't want to remove to something here, you want to add something: a better API. That's no the question.\n\nBesides, there are already libs to make creating a decorator easier.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You don&amp;#39;t want to remove to something here, you want to add something: a better API. That&amp;#39;s no the question.&lt;/p&gt;\n\n&lt;p&gt;Besides, there are already libs to make creating a decorator easier.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwmyu", "score_hidden": false, "stickied": false, "created": 1492366889.0, "created_utc": 1492338089.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbrcrs", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Zomunieo", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The syntax for creating a decorator that accepts arguments is nasty. I understand why it is that way, but I'd prefer syntactic sugar to prevent the triple nested function and messy use of functools.wraps which ought to be automatic.\n\nFrom memory, try to write a decorator that accepts optional arguments, works correctly with all default arguments, and doesn't trigger UnboundLocalError. I dare you. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The syntax for creating a decorator that accepts arguments is nasty. I understand why it is that way, but I&amp;#39;d prefer syntactic sugar to prevent the triple nested function and messy use of functools.wraps which ought to be automatic.&lt;/p&gt;\n\n&lt;p&gt;From memory, try to write a decorator that accepts optional arguments, works correctly with all default arguments, and doesn&amp;#39;t trigger UnboundLocalError. I dare you. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrcrs", "score_hidden": false, "stickied": false, "created": 1492351200.0, "created_utc": 1492322400.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcfhv6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bastibe", "parent_id": "t1_dgcdt1n", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "List insertion is O(n), but every item after the insertion index has to be shifted. Deque insertion is an O(n) search from start or end (whichever is shorter), then a O(1) insertion. So on reality, random deque insertions should be significantly faster than list insertion, although both are O(n). ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;List insertion is O(n), but every item after the insertion index has to be shifted. Deque insertion is an O(n) search from start or end (whichever is shorter), then a O(1) insertion. So on reality, random deque insertions should be significantly faster than list insertion, although both are O(n). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcfhv6", "score_hidden": false, "stickied": false, "created": 1492398752.0, "created_utc": 1492369952.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcdt1n", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rotuami", "parent_id": "t1_dgbw92c", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "No, it shouldn't have any benefit for random insertion. The advantage is in adding and removing from the beginning.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, it shouldn&amp;#39;t have any benefit for random insertion. The advantage is in adding and removing from the beginning.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdt1n", "score_hidden": false, "stickied": false, "created": 1492396490.0, "created_utc": 1492367690.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbw92c", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bastibe", "parent_id": "t1_dgbts6s", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As you noted in the parent, deque random access is indeed O(n). Its advantage over list is random insertion.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As you noted in the parent, deque random access is indeed O(n). Its advantage over list is random insertion.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbw92c", "score_hidden": false, "stickied": false, "created": 1492365549.0, "created_utc": 1492336749.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbts6s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rotuami", "parent_id": "t1_dgbtmy5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Nothing's bad about list - it's just a deque does everything it can do. Deque operations can be O(1), and I suspect they are in cpython.\n\nI suspect you might be confusing deque with a doubly-linked list.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nothing&amp;#39;s bad about list - it&amp;#39;s just a deque does everything it can do. Deque operations can be O(1), and I suspect they are in cpython.&lt;/p&gt;\n\n&lt;p&gt;I suspect you might be confusing deque with a doubly-linked list.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbts6s", "score_hidden": false, "stickied": false, "created": 1492357411.0, "created_utc": 1492328611.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtmy5", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bastibe", "parent_id": "t1_dgbt8tr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What's so bad about list? Wouldn't a deque access be O(n), where list access is O(1)?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What&amp;#39;s so bad about list? Wouldn&amp;#39;t a deque access be O(n), where list access is O(1)?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtmy5", "score_hidden": false, "stickied": false, "created": 1492357002.0, "created_utc": 1492328202.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbwpf9", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbt8tr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You are missing the point. it's what would your remove from python. Not what Python should do.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are missing the point. it&amp;#39;s what would your remove from python. Not what Python should do.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwpf9", "score_hidden": false, "stickied": false, "created": 1492367117.0, "created_utc": 1492338317.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbt8tr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "rotuami", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "1. Generators would throw an exception if you used them after exhausting them. I've been bitten too many times by writing my functions to take an iterable, iterate over them twice, and then realize the second time the loop didn't run.\n\n2. NaN should throw an error when you try to hash it. Having NaN in a dict or set is pretty buggy.\n\n3. ~List. Maybe I'm missing something but it seems deque is what list *should* be.~ Edit: it seems deque random access is O(n). Oh well.", "edited": 1492329443.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Generators would throw an exception if you used them after exhausting them. I&amp;#39;ve been bitten too many times by writing my functions to take an iterable, iterate over them twice, and then realize the second time the loop didn&amp;#39;t run.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;NaN should throw an error when you try to hash it. Having NaN in a dict or set is pretty buggy.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;~List. Maybe I&amp;#39;m missing something but it seems deque is what list &lt;em&gt;should&lt;/em&gt; be.~ Edit: it seems deque random access is O(n). Oh well.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbt8tr", "score_hidden": false, "stickied": false, "created": 1492355932.0, "created_utc": 1492327132.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcnq85", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Fennek1237", "parent_id": "t1_dgbwt68", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Complains that others didn't get the question.   \nLists the same points as the top comments in this thread.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Complains that others didn&amp;#39;t get the question.&lt;br/&gt;\nLists the same points as the top comments in this thread.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcnq85", "score_hidden": false, "stickied": false, "created": 1492409486.0, "created_utc": 1492380686.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcivip", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgbwt68", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; the operator module: promote lambda instead\n\nSomething are much easier written this way: methodcaller for example.\n\n&gt; static methods: useless in Python since they are just truncated class method.\n\nI disagree, they signal to me that \"This method doesn't need to act on anything about the class but is only relevant to operations in this class\" That said, lots of people abuse them.\n\n&gt; string.Template. With %, format and f-string we have enough tools to format strings. Plus it's inferior for everything.\n\nTemplate lets you define custom formatting options rather than being restricted to just f-Strings (powerful, but only usable where they are made) and formatting options (substitutions with some formatting) without having to go full hog and write a template language. \n\n&gt; map/filter and callable from builtins. Move them to functools. They are useful, but not enough to be built-in.\n\nMaybe I'm weird but I use these all the time even if their iterator form\n\n&gt; iterability in strings. It's a useless behavior. How many time did you really need to iterate on letters in a real project ? But it causes many surprises.\n\nI do this occasionally, but I can see your point. It's possibly a remnant from C.\n\n&gt; of course the GIL, but that would depend of the price of the gilectomy.\n\nThis is only a CPython thing (well, I think PyPy implements it as well but that's a different beast). It's also what enables Python to have its memory model, so removing the GIL requires completely changing the memory model of Python. Here's the thing though, there are C Extensions that interact with that model that will be broken. How do you even begin approaching this? I'm glad Larry believes he is up to the task because I have no fucking idea.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;the operator module: promote lambda instead&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Something are much easier written this way: methodcaller for example.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;static methods: useless in Python since they are just truncated class method.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I disagree, they signal to me that &amp;quot;This method doesn&amp;#39;t need to act on anything about the class but is only relevant to operations in this class&amp;quot; That said, lots of people abuse them.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;string.Template. With %, format and f-string we have enough tools to format strings. Plus it&amp;#39;s inferior for everything.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Template lets you define custom formatting options rather than being restricted to just f-Strings (powerful, but only usable where they are made) and formatting options (substitutions with some formatting) without having to go full hog and write a template language. &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;map/filter and callable from builtins. Move them to functools. They are useful, but not enough to be built-in.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Maybe I&amp;#39;m weird but I use these all the time even if their iterator form&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;iterability in strings. It&amp;#39;s a useless behavior. How many time did you really need to iterate on letters in a real project ? But it causes many surprises.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I do this occasionally, but I can see your point. It&amp;#39;s possibly a remnant from C.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;of course the GIL, but that would depend of the price of the gilectomy.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is only a CPython thing (well, I think PyPy implements it as well but that&amp;#39;s a different beast). It&amp;#39;s also what enables Python to have its memory model, so removing the GIL requires completely changing the memory model of Python. Here&amp;#39;s the thing though, there are C Extensions that interact with that model that will be broken. How do you even begin approaching this? I&amp;#39;m glad Larry believes he is up to the task because I have no fucking idea.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcivip", "score_hidden": false, "stickied": false, "created": 1492403137.0, "created_utc": 1492374337.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwt68", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Wow, plenty of people didn't even understand the title of this post.\n\nIt's what would you REMOVE from Python, not add, change or replace guys.\n\nhttp://i.imgur.com/tyTc1Nl.jpg\n\nI would remove:\n\n- the operator module: promote lambda instead.\n- modules with better alternatives such as geteopt, optparse, asyncore, imp, etc\n- modules with super niche use cases such as xdrlib, audioop, aifc, sunau, chunk, wave, etc\n- turtle: none of my students liked it in 5 years.\n- static methods: useless in Python since they are just truncated class method.\n- string.Template. With %, format and f-string we have enough tools to format strings. Plus it's inferior for everything.\n- iterability for dict. Either remove it and raise \"TypeError: dict are not iterable. Try dict.items(), dict.keys() or dict.values()\" or replace it so that it does the same as dict.items(). The verbosity annoys me when I have a dev mission, but it's worst to see my students fail every single time on this.\n- map/filter and callable from builtins. Move them to functools. They are useful, but not enough to be built-in.\n- True that is equal to 1\n- iterability in strings. It's a useless behavior. How many time did you really need to iterate on letters in a real project ? But it causes many surprises.\n- of course the GIL, but that would depend of the price of the gilectomy.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow, plenty of people didn&amp;#39;t even understand the title of this post.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s what would you REMOVE from Python, not add, change or replace guys.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://i.imgur.com/tyTc1Nl.jpg\"&gt;http://i.imgur.com/tyTc1Nl.jpg&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I would remove:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;the operator module: promote lambda instead.&lt;/li&gt;\n&lt;li&gt;modules with better alternatives such as geteopt, optparse, asyncore, imp, etc&lt;/li&gt;\n&lt;li&gt;modules with super niche use cases such as xdrlib, audioop, aifc, sunau, chunk, wave, etc&lt;/li&gt;\n&lt;li&gt;turtle: none of my students liked it in 5 years.&lt;/li&gt;\n&lt;li&gt;static methods: useless in Python since they are just truncated class method.&lt;/li&gt;\n&lt;li&gt;string.Template. With %, format and f-string we have enough tools to format strings. Plus it&amp;#39;s inferior for everything.&lt;/li&gt;\n&lt;li&gt;iterability for dict. Either remove it and raise &amp;quot;TypeError: dict are not iterable. Try dict.items(), dict.keys() or dict.values()&amp;quot; or replace it so that it does the same as dict.items(). The verbosity annoys me when I have a dev mission, but it&amp;#39;s worst to see my students fail every single time on this.&lt;/li&gt;\n&lt;li&gt;map/filter and callable from builtins. Move them to functools. They are useful, but not enough to be built-in.&lt;/li&gt;\n&lt;li&gt;True that is equal to 1&lt;/li&gt;\n&lt;li&gt;iterability in strings. It&amp;#39;s a useless behavior. How many time did you really need to iterate on letters in a real project ? But it causes many surprises.&lt;/li&gt;\n&lt;li&gt;of course the GIL, but that would depend of the price of the gilectomy.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwt68", "score_hidden": false, "stickied": false, "created": 1492367479.0, "created_utc": 1492338679.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc6ug7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheInitializer", "parent_id": "t1_dgbjomq", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah. I would rename the `else` clause in `for`, `while` and `try` to something else. Maybe something like `then` or `done`? ^(those both sound really bad, anyone have any other ideas?)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah. I would rename the &lt;code&gt;else&lt;/code&gt; clause in &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; to something else. Maybe something like &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;done&lt;/code&gt;? &lt;sup&gt;those both sound really bad, anyone have any other ideas?&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc6ug7", "score_hidden": false, "stickied": false, "created": 1492387286.0, "created_utc": 1492358486.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbjomq", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "visgean", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It just does not adhere to python principles of being close to english expression. Else just does not make sense in this context. They used because they did not want to reserve another keyword. But it does not do what people expect it to do. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It just does not adhere to python principles of being close to english expression. Else just does not make sense in this context. They used because they did not want to reserve another keyword. But it does not do what people expect it to do. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbjomq", "score_hidden": false, "stickied": false, "created": 1492338242.0, "created_utc": 1492309442.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbktog", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "deadmilk", "parent_id": "t1_dgbkeeh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Oh yeah. Will amend.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh yeah. Will amend.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbktog", "score_hidden": false, "stickied": false, "created": 1492339920.0, "created_utc": 1492311120.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkeeh", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "xfunky", "parent_id": "t1_dgbk2w0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think you have it backwards though, the condition is met if *not* broken if I recall correctly", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think you have it backwards though, the condition is met if &lt;em&gt;not&lt;/em&gt; broken if I recall correctly&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkeeh", "score_hidden": false, "stickied": false, "created": 1492339306.0, "created_utc": 1492310506.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk2w0", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "deadmilk", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Maybe... I mean really it's just a replacement for this pattern:\n\n    found = False\n    for searchitem in list_of_items:\n        if condition:\n            found = True\n            break\n    if not found:\n        do a thing", "edited": 1492311137.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe... I mean really it&amp;#39;s just a replacement for this pattern:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;found = False\nfor searchitem in list_of_items:\n    if condition:\n        found = True\n        break\nif not found:\n    do a thing\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk2w0", "score_hidden": false, "stickied": false, "created": 1492338838.0, "created_utc": 1492310038.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbpi9n", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbk8g5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's technically not necessary, but it does make the code much easier to read than inserting a flag variable and an if statement. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s technically not necessary, but it does make the code much easier to read than inserting a flag variable and an if statement. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpi9n", "score_hidden": false, "stickied": false, "created": 1492347536.0, "created_utc": 1492318736.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk8g5", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Aceofsquares_orig", "parent_id": "t1_dgbj4a9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I guess that's the part I missed.  Breaking out of the loop skips the else statement.  Okay, I can see where that's useful.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess that&amp;#39;s the part I missed.  Breaking out of the loop skips the else statement.  Okay, I can see where that&amp;#39;s useful.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk8g5", "score_hidden": false, "stickied": false, "created": 1492339062.0, "created_utc": 1492310262.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgblvej", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Lord_Greywether", "parent_id": "t1_dgbj4a9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "TIL. I've had several scripts recently where that would have been perfect.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TIL. I&amp;#39;ve had several scripts recently where that would have been perfect.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgblvej", "score_hidden": false, "stickied": false, "created": 1492341483.0, "created_utc": 1492312683.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgborj4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "floundahhh", "parent_id": "t1_dgbj4a9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think that's a bit nicer. Never knew about it, but I'd use it in the future. \n\nI primarily work in another language, LabVIEW, and this would be very nice there. The language is a graphical data flow language, and if you wire things into a for loop and pass values out, if the for loop doesn't execute it passes out default values. It makes for some ugly code because if you're passing in a reference to run a method on every element of an array you need to check for an empty array otherwise you'll pass out a bad reference. /offtopic ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think that&amp;#39;s a bit nicer. Never knew about it, but I&amp;#39;d use it in the future. &lt;/p&gt;\n\n&lt;p&gt;I primarily work in another language, LabVIEW, and this would be very nice there. The language is a graphical data flow language, and if you wire things into a for loop and pass values out, if the for loop doesn&amp;#39;t execute it passes out default values. It makes for some ugly code because if you&amp;#39;re passing in a reference to run a method on every element of an array you need to check for an empty array otherwise you&amp;#39;ll pass out a bad reference. /offtopic &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgborj4", "score_hidden": false, "stickied": false, "created": 1492346184.0, "created_utc": 1492317384.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgd7roh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "donnieod", "parent_id": "t1_dgc7wak", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Just think of the `else` as being paired with the `break`, so it's more like a break/else construct. You either break out of the loop or you perform the else suite. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just think of the &lt;code&gt;else&lt;/code&gt; as being paired with the &lt;code&gt;break&lt;/code&gt;, so it&amp;#39;s more like a break/else construct. You either break out of the loop or you perform the else suite. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd7roh", "score_hidden": false, "stickied": false, "created": 1492439977.0, "created_utc": 1492411177.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc7wak", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "twotime", "parent_id": "t1_dgbj4a9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This use of \"else\" does not read well and seems fairly at odds with the if/else construct. Poor readability coupled with relative rarity/obscurity likely outweighs the advantages. \n\nAt the very least, it should have been named differently, (e.g. \"nobreak\")", "edited": 1492397449.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This use of &amp;quot;else&amp;quot; does not read well and seems fairly at odds with the if/else construct. Poor readability coupled with relative rarity/obscurity likely outweighs the advantages. &lt;/p&gt;\n\n&lt;p&gt;At the very least, it should have been named differently, (e.g. &amp;quot;nobreak&amp;quot;)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc7wak", "score_hidden": false, "stickied": false, "created": 1492388709.0, "created_utc": 1492359909.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbj4a9", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "p10_user", "parent_id": "t1_dgbiuro", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I've used an example like this before:\n\n    lst = [1, 2, 4]\n    for i in lst:\n        # do something\n        if i == 3:\n            # do something special\n            break\n    else:\n         print('Never broke out')\n         # do something else\n\nIt's useful every once in a while for flow control. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve used an example like this before:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lst = [1, 2, 4]\nfor i in lst:\n    # do something\n    if i == 3:\n        # do something special\n        break\nelse:\n     print(&amp;#39;Never broke out&amp;#39;)\n     # do something else\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&amp;#39;s useful every once in a while for flow control. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbj4a9", "score_hidden": false, "stickied": false, "created": 1492337407.0, "created_utc": 1492308607.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc069c", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "earthboundkid", "parent_id": "t1_dgbu1ul", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This is why it should be removed. :-)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is why it should be removed. :-)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc069c", "score_hidden": false, "stickied": false, "created": 1492376732.0, "created_utc": 1492347932.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbu1ul", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "snaftyroot", "parent_id": "t1_dgbiuro", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "well, off the top of my head, if a database query returns an empty set, it's useful to return a different type of response.  sure, you could check the length every time, but that gets old\n\nedit: nevermind.  it doesn't do what i expected. I assumed it was called if the iterable was empty. that's retarded. i retract my comment", "edited": 1492329622.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;well, off the top of my head, if a database query returns an empty set, it&amp;#39;s useful to return a different type of response.  sure, you could check the length every time, but that gets old&lt;/p&gt;\n\n&lt;p&gt;edit: nevermind.  it doesn&amp;#39;t do what i expected. I assumed it was called if the iterable was empty. that&amp;#39;s retarded. i retract my comment&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbu1ul", "score_hidden": false, "stickied": false, "created": 1492358205.0, "created_utc": 1492329405.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbiuro", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Aceofsquares_orig", "parent_id": "t1_dgbigq9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I would like to see a situation in which they are useful that can't be done without them.  I genuinely curious as I've never said to myself \"a for else would work great here\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would like to see a situation in which they are useful that can&amp;#39;t be done without them.  I genuinely curious as I&amp;#39;ve never said to myself &amp;quot;a for else would work great here&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbiuro", "score_hidden": false, "stickied": false, "created": 1492337021.0, "created_utc": 1492308221.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbigq9", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "wheatwarrior", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I personally love `for` `else` and `while` `else` I find them super useful often and can pretty much ignore them otherwise.  Since you are suggesting removing them, how would you go about replacing them?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally love &lt;code&gt;for&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; I find them super useful often and can pretty much ignore them otherwise.  Since you are suggesting removing them, how would you go about replacing them?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbigq9", "score_hidden": false, "stickied": false, "created": 1492336443.0, "created_utc": 1492307643.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbxyup", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbsasv", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That's why I said it would be inconsistent. But it would be more intuitive.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s why I said it would be inconsistent. But it would be more intuitive.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxyup", "score_hidden": false, "stickied": false, "created": 1492371215.0, "created_utc": 1492342415.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbsasv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "beagle3", "parent_id": "t1_dgbpljx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "except 'finally' on exceptions always happens (even if you raise inside the try: part) but 'else' on for doesn't if you break (or raise)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;except &amp;#39;finally&amp;#39; on exceptions always happens (even if you raise inside the try: part) but &amp;#39;else&amp;#39; on for doesn&amp;#39;t if you break (or raise)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbsasv", "score_hidden": false, "stickied": false, "created": 1492353446.0, "created_utc": 1492324646.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpljx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "lengau", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Whilei would never advocate for getting rid of it (way too useful), I do actually think the `finally` keyword may have been more  appropriate - although that comes with its own issues given the inconsistency it would present between `try ... finally` and `for ... finally`", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whilei would never advocate for getting rid of it (way too useful), I do actually think the &lt;code&gt;finally&lt;/code&gt; keyword may have been more  appropriate - although that comes with its own issues given the inconsistency it would present between &lt;code&gt;try ... finally&lt;/code&gt; and &lt;code&gt;for ... finally&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpljx", "score_hidden": false, "stickied": false, "created": 1492347702.0, "created_utc": 1492318902.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbsc4h", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "beagle3", "parent_id": "t1_dgbkyzh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Nope. \n\nAlso on full. as long as the loop body did not 'break'", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope. &lt;/p&gt;\n\n&lt;p&gt;Also on full. as long as the loop body did not &amp;#39;break&amp;#39;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbsc4h", "score_hidden": false, "stickied": false, "created": 1492353540.0, "created_utc": 1492324740.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbl5a8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "TheInitializer", "parent_id": "t1_dgbkyzh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Holy shit, that's weird. And completely useless.\n\nIt would make more sense to have it get called if the iterable is empty though \ud83d\ude1b", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Holy shit, that&amp;#39;s weird. And completely useless.&lt;/p&gt;\n\n&lt;p&gt;It would make more sense to have it get called if the iterable is empty though \ud83d\ude1b&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbl5a8", "score_hidden": false, "stickied": false, "created": 1492340390.0, "created_utc": 1492311590.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgblt7c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "DrMaxwellEdison", "parent_id": "t1_dgbkyzh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Coming out of Django templates and using `{% for %} ... {% empty %}`, that would seem logical. But not quite the truth. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Coming out of Django templates and using &lt;code&gt;{% for %} ... {% empty %}&lt;/code&gt;, that would seem logical. But not quite the truth. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgblt7c", "score_hidden": false, "stickied": false, "created": 1492341387.0, "created_utc": 1492312587.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkyzh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheInitializer", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Umm, gets called if the iterable is empty?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Umm, gets called if the iterable is empty?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkyzh", "score_hidden": false, "stickied": false, "created": 1492340130.0, "created_utc": 1492311330.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbs32v", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "xiongchiamiov", "parent_id": "t1_dgbhmbi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "For-else is wonderful; it should just be called `then`.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For-else is wonderful; it should just be called &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbs32v", "score_hidden": false, "stickied": false, "created": 1492352925.0, "created_utc": 1492324125.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbhmbi", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "earthboundkid", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "For-loop else clause. If you don't absolutely know what it does, reply first with what you think it does then reply to yourself when you find out what it really does and let us know if you think it should still be in Python. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For-loop else clause. If you don&amp;#39;t absolutely know what it does, reply first with what you think it does then reply to yourself when you find out what it really does and let us know if you think it should still be in Python. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbhmbi", "score_hidden": false, "stickied": false, "created": 1492335215.0, "created_utc": 1492306415.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbhr0c", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "njharman", "parent_id": "t1_dgbettb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Isn't  named tuple implemented with slots?\n\nAlso tuples are immutable. Things with slots aren't. I see lots of things slots do that named tuples can't.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Isn&amp;#39;t  named tuple implemented with slots?&lt;/p&gt;\n\n&lt;p&gt;Also tuples are immutable. Things with slots aren&amp;#39;t. I see lots of things slots do that named tuples can&amp;#39;t.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbhr0c", "score_hidden": false, "stickied": false, "created": 1492335398.0, "created_utc": 1492306598.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbk6aq", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgbettb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's an important memory optimization for some large projects.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s an important memory optimization for some large projects.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk6aq", "score_hidden": false, "stickied": false, "created": 1492338977.0, "created_utc": 1492310177.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcm3c3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zardeh", "parent_id": "t1_dgbettb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "High performance. Namedtuples are very much not high performance, but slots based classes are more memory efficient and have faster attribute access, which is not often super important, but can be in some cases.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;High performance. Namedtuples are very much not high performance, but slots based classes are more memory efficient and have faster attribute access, which is not often super important, but can be in some cases.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcm3c3", "score_hidden": false, "stickied": false, "created": 1492407335.0, "created_utc": 1492378535.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dge4ris", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgdvdu5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Like I said, slots and nametuples are not the same at all and can't be compared.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like I said, slots and nametuples are not the same at all and can&amp;#39;t be compared.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dge4ris", "score_hidden": false, "stickied": false, "created": 1492492349.0, "created_utc": 1492463549.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdvdu5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "njharman", "parent_id": "t1_dgbwoh6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Classes with __slots__ ARE NOT read only.  It only prevents new attributes being created, existing ones are mutable. __slots__ replaces __dict__. Named Tuples are **immutable**, like all tuples.\n\n    class Slotted(object):\n        __slots__ = ['bar', ]\n\n    f = Slotted()\n    f.bar = 1\n    print(f.bar)\n    f.bar = 2\n    print(f.bar)\n    f.foo = 1\n\nAlso, NamedTuples absolute use (and require) __slots__, pass verbose=True to see implementation.\n\n    from collections import namedtuple\n    Point = namedtuple('Point', \"x y\", verbose=True)\n\n    class Point(tuple):\n        'Point(x, y)'\n        __slots__ = ()\n    ...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Classes with &lt;strong&gt;slots&lt;/strong&gt; ARE NOT read only.  It only prevents new attributes being created, existing ones are mutable. &lt;strong&gt;slots&lt;/strong&gt; replaces &lt;strong&gt;dict&lt;/strong&gt;. Named Tuples are &lt;strong&gt;immutable&lt;/strong&gt;, like all tuples.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Slotted(object):\n    __slots__ = [&amp;#39;bar&amp;#39;, ]\n\nf = Slotted()\nf.bar = 1\nprint(f.bar)\nf.bar = 2\nprint(f.bar)\nf.foo = 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, NamedTuples absolute use (and require) &lt;strong&gt;slots&lt;/strong&gt;, pass verbose=True to see implementation.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from collections import namedtuple\nPoint = namedtuple(&amp;#39;Point&amp;#39;, &amp;quot;x y&amp;quot;, verbose=True)\n\nclass Point(tuple):\n    &amp;#39;Point(x, y)&amp;#39;\n    __slots__ = ()\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdvdu5", "score_hidden": false, "stickied": false, "created": 1492481757.0, "created_utc": 1492452957.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwoh6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbettb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "There are no link between namedtuple and slots except they make both things read only, which is only a side effet.\n\nSlots are a way to save memory. namedtuples a declarative collections.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are no link between namedtuple and slots except they make both things read only, which is only a side effet.&lt;/p&gt;\n\n&lt;p&gt;Slots are a way to save memory. namedtuples a declarative collections.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwoh6", "score_hidden": false, "stickied": false, "created": 1492367028.0, "created_utc": 1492338228.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbettb", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "ubernostrum", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "`__slots__`. There are, I think, very few cases where a class with `__slots__` can't just be replaced by a `namedtuple`.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt;. There are, I think, very few cases where a class with &lt;code&gt;__slots__&lt;/code&gt; can&amp;#39;t just be replaced by a &lt;code&gt;namedtuple&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbettb", "score_hidden": false, "stickied": false, "created": 1492331213.0, "created_utc": 1492302413.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgboftr", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "dranzerfu", "parent_id": "t1_dgbgwuh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "\\#DocoptMasterRace", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;#DocoptMasterRace&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgboftr", "score_hidden": false, "stickied": false, "created": 1492345626.0, "created_utc": 1492316826.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbs1nw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbrnq3", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Certainly is frustrating when the frameworks you're using can't quite do the thing you want to do. And it's unfortunate to hear that the code is hard to work with. From my perspective though, ~~the Jedi are evil~~ argparse has always done what I need, and it has made it very easy to quickly create command-line tools that do proper command-line argument parsing.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Certainly is frustrating when the frameworks you&amp;#39;re using can&amp;#39;t quite do the thing you want to do. And it&amp;#39;s unfortunate to hear that the code is hard to work with. From my perspective though, &lt;del&gt;the Jedi are evil&lt;/del&gt; argparse has always done what I need, and it has made it very easy to quickly create command-line tools that do proper command-line argument parsing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbs1nw", "score_hidden": false, "stickied": false, "created": 1492352835.0, "created_utc": 1492324035.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbwgqm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "tilkau", "parent_id": "t1_dgbrnq3", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it's a little complicated to do simple things.\n\nYMMV. I never need to read argparse's docs, and it's not because I have good memory -- I just find a CLI tool of moderate complexity that I know uses argparse, look for the type of usage I want, and liberally copy-paste.\n\nI find argparse's API self-documenting enough that, with this strategy, I don't really have to look up or memorize anything much. Just the difference between '*' and '+' for nargs -- which matches regexp conventions anyway.\n\n(IMO 'crossreference existing code that does X with Y' is generally a solid strategy anyway, it's just that, as benefits of writing self-documenting code go, \"saves you time reading up on the APIs you use\" isn't very obvious)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it&amp;#39;s a little complicated to do simple things.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;YMMV. I never need to read argparse&amp;#39;s docs, and it&amp;#39;s not because I have good memory -- I just find a CLI tool of moderate complexity that I know uses argparse, look for the type of usage I want, and liberally copy-paste.&lt;/p&gt;\n\n&lt;p&gt;I find argparse&amp;#39;s API self-documenting enough that, with this strategy, I don&amp;#39;t really have to look up or memorize anything much. Just the difference between &amp;#39;*&amp;#39; and &amp;#39;+&amp;#39; for nargs -- which matches regexp conventions anyway.&lt;/p&gt;\n\n&lt;p&gt;(IMO &amp;#39;crossreference existing code that does X with Y&amp;#39; is generally a solid strategy anyway, it&amp;#39;s just that, as benefits of writing self-documenting code go, &amp;quot;saves you time reading up on the APIs you use&amp;quot; isn&amp;#39;t very obvious)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwgqm", "score_hidden": false, "stickied": false, "created": 1492366302.0, "created_utc": 1492337502.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbrnq3", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "azrathud", "parent_id": "t1_dgbi3rm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it's a little complicated to do simple things. However once you start trying to extend it, the underlying code is very difficult to work with, and required me to extend it in a way where I was using 'protected' attributes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it&amp;#39;s a little complicated to do simple things. However once you start trying to extend it, the underlying code is very difficult to work with, and required me to extend it in a way where I was using &amp;#39;protected&amp;#39; attributes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrnq3", "score_hidden": false, "stickied": false, "created": 1492351908.0, "created_utc": 1492323108.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbk0ex", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "deadmilk", "parent_id": "t1_dgbi3rm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I agree... Confused here. It's awesome.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree... Confused here. It&amp;#39;s awesome.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk0ex", "score_hidden": false, "stickied": false, "created": 1492338737.0, "created_utc": 1492309937.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbjqzk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quasarj", "parent_id": "t1_dgbi3rm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I know, who thought it was a good idea as-is? Crazy I say!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know, who thought it was a good idea as-is? Crazy I say!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbjqzk", "score_hidden": false, "stickied": false, "created": 1492338341.0, "created_utc": 1492309541.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbi3rm", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbgwuh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What the fuck?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What the fuck?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbi3rm", "score_hidden": false, "stickied": false, "created": 1492335915.0, "created_utc": 1492307115.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcdga5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cdimino", "parent_id": "t1_dgbrvue", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I prefer click, but anything is better than argparse imo.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I prefer click, but anything is better than argparse imo.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdga5", "score_hidden": false, "stickied": false, "created": 1492396009.0, "created_utc": 1492367209.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbrvue", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "billsil", "parent_id": "t1_dgbgwuh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Try docopt.  You'll read the docs once.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Try docopt.  You&amp;#39;ll read the docs once.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrvue", "score_hidden": false, "stickied": false, "created": 1492352443.0, "created_utc": 1492323643.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgcdfx6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cdimino", "parent_id": "t1_dgbwnnl", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's kind of a silly question, so I totally get the impracticality of my response, but maybe, yeah.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s kind of a silly question, so I totally get the impracticality of my response, but maybe, yeah.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdfx6", "score_hidden": false, "stickied": false, "created": 1492395996.0, "created_utc": 1492367196.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwnnl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbgwuh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Without replacement ?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Without replacement ?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwnnl", "score_hidden": false, "stickied": false, "created": 1492366952.0, "created_utc": 1492338152.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbgwuh", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cdimino", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "Argparse, it's so unpythonic...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Argparse, it&amp;#39;s so unpythonic...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbgwuh", "score_hidden": false, "stickied": false, "created": 1492334173.0, "created_utc": 1492305373.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgdqa32", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jimminy", "parent_id": "t1_dgcj1ky", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Maybe it's me, but it just seems like a complete mess more fitting in PHP. There are some options like Arrow that feel so much more sensible. Too bad the builtin isn't like that.\n\nI always end up copy-pasting my old code or some datetime tutorials, I just can't understand it. Maybe it's just me.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe it&amp;#39;s me, but it just seems like a complete mess more fitting in PHP. There are some options like Arrow that feel so much more sensible. Too bad the builtin isn&amp;#39;t like that.&lt;/p&gt;\n\n&lt;p&gt;I always end up copy-pasting my old code or some datetime tutorials, I just can&amp;#39;t understand it. Maybe it&amp;#39;s just me.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdqa32", "score_hidden": false, "stickied": false, "created": 1492476105.0, "created_utc": 1492447305.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcj1ky", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgbu82h", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I see this opinion constantly, but I don't get it at all. Maybe I have Stockholm syndrome but could you explain what's so terrible about it?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I see this opinion constantly, but I don&amp;#39;t get it at all. Maybe I have Stockholm syndrome but could you explain what&amp;#39;s so terrible about it?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcj1ky", "score_hidden": false, "stickied": false, "created": 1492403357.0, "created_utc": 1492374557.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgbx4oj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "catcint0s", "parent_id": "t1_dgbwnc4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Arrow would be a decent replacement.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Arrow would be a decent replacement.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbx4oj", "score_hidden": false, "stickied": false, "created": 1492368550.0, "created_utc": 1492339750.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwnc4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbu82h", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Without replacement ?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Without replacement ?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwnc4", "score_hidden": false, "stickied": false, "created": 1492366923.0, "created_utc": 1492338123.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbu82h", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "jimminy", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The datetime module. Just... make it go away. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The datetime module. Just... make it go away. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbu82h", "score_hidden": false, "stickied": false, "created": 1492358736.0, "created_utc": 1492329936.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbp8u1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "hhh333", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "GIL", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;GIL&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbp8u1", "score_hidden": false, "stickied": false, "created": 1492347052.0, "created_utc": 1492318252.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgd282w", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "k10_ftw", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "dict.keys() returning iterable views.\n\nI know, I know - I should get with the times! But you asked :P", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;dict.keys() returning iterable views.&lt;/p&gt;\n\n&lt;p&gt;I know, I know - I should get with the times! But you asked :P&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd282w", "score_hidden": false, "stickied": false, "created": 1492429370.0, "created_utc": 1492400570.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgdaqwb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "asdfkjasdhkasd", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "builtin functions returning their own special iterable objects instead of lists. \n\n    &gt;&gt;&gt; reversed(\"hello\")\n    &lt;reversed object at 0x003C9EB0&gt;\n    &gt;&gt;&gt; map(lambda x: x+1, [1,2,3,4])\n    &lt;map object at 0x003C97B0&gt;\n    &gt;&gt;&gt; filter(lambda x: x&gt;1, [1,2,3,4])\n    &lt;filter object at 0x003C9EB0&gt;\n\nThese should just give me a list unless I explicitly ask for a lazy iterable, I hate constantly having to call list() every time I use one of these functions. \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;builtin functions returning their own special iterable objects instead of lists. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; reversed(&amp;quot;hello&amp;quot;)\n&amp;lt;reversed object at 0x003C9EB0&amp;gt;\n&amp;gt;&amp;gt;&amp;gt; map(lambda x: x+1, [1,2,3,4])\n&amp;lt;map object at 0x003C97B0&amp;gt;\n&amp;gt;&amp;gt;&amp;gt; filter(lambda x: x&amp;gt;1, [1,2,3,4])\n&amp;lt;filter object at 0x003C9EB0&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These should just give me a list unless I explicitly ask for a lazy iterable, I hate constantly having to call list() every time I use one of these functions. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdaqwb", "score_hidden": false, "stickied": false, "created": 1492448696.0, "created_utc": 1492419896.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgdhvkr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rochacbruno", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "the `()` on python 3 `print`. I know the advantages of having it as a function but I like it more as a statement.\n\nI would get `print \"string\"` back to Python 3 :) ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;the &lt;code&gt;()&lt;/code&gt; on python 3 &lt;code&gt;print&lt;/code&gt;. I know the advantages of having it as a function but I like it more as a statement.&lt;/p&gt;\n\n&lt;p&gt;I would get &lt;code&gt;print &amp;quot;string&amp;quot;&lt;/code&gt; back to Python 3 :) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdhvkr", "score_hidden": false, "stickied": false, "created": 1492465759.0, "created_utc": 1492436959.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgdaazr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mardiros", "parent_id": "t1_dgcizzx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I know what requirements.txt is and distutils and setuptools. I have few packages on pypi, and issue open at pypa too. I just says everthing is messy.\n\n- .pth files are awefull\n- namespace packages is almost unusable.\n- 99% of setup.py you found uses setuptools (i use it a lot).\n\nWe are in 2017, and things did not evolve since, just remember that:\n\nhttp://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/\n\nThis is still true and it annoys me. This is a fundamental problem, not like syntactic sugar, semantic inconcistancy noticed in that thread...\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know what requirements.txt is and distutils and setuptools. I have few packages on pypi, and issue open at pypa too. I just says everthing is messy.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;.pth files are awefull&lt;/li&gt;\n&lt;li&gt;namespace packages is almost unusable.&lt;/li&gt;\n&lt;li&gt;99% of setup.py you found uses setuptools (i use it a lot).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;We are in 2017, and things did not evolve since, just remember that:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/\"&gt;http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is still true and it annoys me. This is a fundamental problem, not like syntactic sugar, semantic inconcistancy noticed in that thread...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdaazr", "score_hidden": false, "stickied": false, "created": 1492447144.0, "created_utc": 1492418344.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcizzx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgc3lsu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "requirements.txt isn't a replacement of setup.py, it's a replacement for the `install_requires` portion of setup.py. Nothing in requirements.txt will ever dictate how to install the package itself -- what to name it, where its source is, compiling extensions, any entrypoints it has, etc.\n\nIt's a useful tool for *applications* but libraries can't really use it. And even then, if you push your application to PyPI you still need to draw in everything from that file into setup.py anyways (which can be tricky)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;requirements.txt isn&amp;#39;t a replacement of setup.py, it&amp;#39;s a replacement for the &lt;code&gt;install_requires&lt;/code&gt; portion of setup.py. Nothing in requirements.txt will ever dictate how to install the package itself -- what to name it, where its source is, compiling extensions, any entrypoints it has, etc.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a useful tool for &lt;em&gt;applications&lt;/em&gt; but libraries can&amp;#39;t really use it. And even then, if you push your application to PyPI you still need to draw in everything from that file into setup.py anyways (which can be tricky)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcizzx", "score_hidden": false, "stickied": false, "created": 1492403298.0, "created_utc": 1492374498.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc3lsu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mardiros", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "distutils. Packaging in python aged badly.\n\nPeoples now use requirements.txt with pip has a replacement of setup.py. we were the precursor with virtual env but time passed and tooling in other language are better. I play a lot with rust and cargo is really a great tool to use.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;distutils. Packaging in python aged badly.&lt;/p&gt;\n\n&lt;p&gt;Peoples now use requirements.txt with pip has a replacement of setup.py. we were the precursor with virtual env but time passed and tooling in other language are better. I play a lot with rust and cargo is really a great tool to use.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc3lsu", "score_hidden": false, "stickied": false, "created": 1492382701.0, "created_utc": 1492353901.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc1cv0", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "getridofwires", "parent_id": "t1_dgbzvi7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You're right again.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re right again.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1cv0", "score_hidden": false, "stickied": false, "created": 1492379017.0, "created_utc": 1492350217.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbzvi7", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbyrsz", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "\"Remove the lack of\". Yeah, everyone know that being a smart ass is what makes good language designers.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;Remove the lack of&amp;quot;. Yeah, everyone know that being a smart ass is what makes good language designers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbzvi7", "score_hidden": false, "stickied": false, "created": 1492376082.0, "created_utc": 1492347282.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbyrsz", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "getridofwires", "parent_id": "t1_dgbwr6l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You're right. I would remove the lack of a Select Case system. Also remove difficulties in hardware communication; I'm working on a GPS project and it's difficult to tell if the GPS daemon has lost GPS reception/fixation.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re right. I would remove the lack of a Select Case system. Also remove difficulties in hardware communication; I&amp;#39;m working on a GPS project and it&amp;#39;s difficult to tell if the GPS daemon has lost GPS reception/fixation.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbyrsz", "score_hidden": false, "stickied": false, "created": 1492373441.0, "created_utc": 1492344641.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwr6l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbnedh", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's not \"what would you add to python\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not &amp;quot;what would you add to python&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwr6l", "score_hidden": false, "stickied": false, "created": 1492367286.0, "created_utc": 1492338486.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbnedh", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "getridofwires", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "I would add a Select Case system. Also a little better hardware communication; I'm working on a GPS project and it's difficult to tell if the GPS daemon has lost GPS reception/fixation.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would add a Select Case system. Also a little better hardware communication; I&amp;#39;m working on a GPS project and it&amp;#39;s difficult to tell if the GPS daemon has lost GPS reception/fixation.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbnedh", "score_hidden": false, "stickied": false, "created": 1492343861.0, "created_utc": 1492315061.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgby0va", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "beertown", "parent_id": "t1_dgbrqck", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "These are some pretty good, and also amusing, comparisons!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;These are some pretty good, and also amusing, comparisons!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgby0va", "score_hidden": false, "stickied": false, "created": 1492371377.0, "created_utc": 1492342577.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbrqck", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Zomunieo", "parent_id": "t1_dgbkhnu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Raise and except are a little bit better at reminding people that exceptions are for exceptional events rather than goto-like control flow. Throw and catch is a normal thing to do in sports while raise (as in a flag) means you're asking the referee to blow the whistle. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Raise and except are a little bit better at reminding people that exceptions are for exceptional events rather than goto-like control flow. Throw and catch is a normal thing to do in sports while raise (as in a flag) means you&amp;#39;re asking the referee to blow the whistle. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrqck", "score_hidden": false, "stickied": false, "created": 1492352079.0, "created_utc": 1492323279.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbpfmv", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "floundahhh", "parent_id": "t1_dgbpcnx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Actually doing it gave me the google coding challenge, which was amusing because I was asking for pretty much the dumbest programming search I made all day. \n\nDidn't mind it. Was in a brain fart. I acknowledge this fact. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Actually doing it gave me the google coding challenge, which was amusing because I was asking for pretty much the dumbest programming search I made all day. &lt;/p&gt;\n\n&lt;p&gt;Didn&amp;#39;t mind it. Was in a brain fart. I acknowledge this fact. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpfmv", "score_hidden": false, "stickied": false, "created": 1492347400.0, "created_utc": 1492318600.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbpcnx", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbp84o", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm sure that positively ruined your day, having to read some documentation.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m sure that positively ruined your day, having to read some documentation.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbpcnx", "score_hidden": false, "stickied": false, "created": 1492347249.0, "created_utc": 1492318449.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbp84o", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "floundahhh", "parent_id": "t1_dgbo7mi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I have literally googled \"python catch exception\" because I couldn't remember what the keyword is. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have literally googled &amp;quot;python catch exception&amp;quot; because I couldn&amp;#39;t remember what the keyword is. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbp84o", "score_hidden": false, "stickied": false, "created": 1492347013.0, "created_utc": 1492318213.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbo7mi", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "atrigent", "parent_id": "t1_dgbkhnu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "So... You just want it to be more like Java?\n\nAnyways, I think a couple of the things you mention here are due to influence from Haskell (even though Python doesn't actually take much more than the names in these cases...).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So... You just want it to be more like Java?&lt;/p&gt;\n\n&lt;p&gt;Anyways, I think a couple of the things you mention here are due to influence from Haskell (even though Python doesn&amp;#39;t actually take much more than the names in these cases...).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbo7mi", "score_hidden": false, "stickied": false, "created": 1492345227.0, "created_utc": 1492316427.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc8c1y", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "twotime", "parent_id": "t1_dgbkhnu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; I never understood why Python needs to rename keywords that are pretty much identical in every other language.\n\npython is older than  Java. And AFAICT it's older than exceptions in the mainline C++ implementations.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I never understood why Python needs to rename keywords that are pretty much identical in every other language.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;python is older than  Java. And AFAICT it&amp;#39;s older than exceptions in the mainline C++ implementations.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc8c1y", "score_hidden": false, "stickied": false, "created": 1492389288.0, "created_utc": 1492360488.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbws5h", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbkhnu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "\"what would you remove\", not what would you change", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;what would you remove&amp;quot;, not what would you change&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbws5h", "score_hidden": false, "stickied": false, "created": 1492367381.0, "created_utc": 1492338581.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbkhnu", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "abrazilianinreddit", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "I would make keywords more uniform across programming languages, i.e.,\n\n*None* -&gt; null\n\n*True, False* -&gt; true, false\n\n*raise* -&gt; throw\n\n*except* -&gt; catch\n\nI never understood why Python needs to rename keywords that are pretty much identical in every other language.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would make keywords more uniform across programming languages, i.e.,&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;None&lt;/em&gt; -&amp;gt; null&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;True, False&lt;/em&gt; -&amp;gt; true, false&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;raise&lt;/em&gt; -&amp;gt; throw&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;except&lt;/em&gt; -&amp;gt; catch&lt;/p&gt;\n\n&lt;p&gt;I never understood why Python needs to rename keywords that are pretty much identical in every other language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbkhnu", "score_hidden": false, "stickied": false, "created": 1492339440.0, "created_utc": 1492310640.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbwh6u", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Topper_123", "parent_id": "t1_dgbunul", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; F-str\n\nOh I think most people ike them and find them much more readable than ``.format``. But for libraries etc. I think it's too early to require python 3.6 from library users.\n\nAlso python 3.6 and f-string are baraly 4 months old not 2 years old...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;F-str&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Oh I think most people ike them and find them much more readable than &lt;code&gt;.format&lt;/code&gt;. But for libraries etc. I think it&amp;#39;s too early to require python 3.6 from library users.&lt;/p&gt;\n\n&lt;p&gt;Also python 3.6 and f-string are baraly 4 months old not 2 years old...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwh6u", "score_hidden": false, "stickied": false, "created": 1492366344.0, "created_utc": 1492337544.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbz9k8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cym13", "parent_id": "t1_dgbyjvy", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Indeed.\n\nI'm using grep mainly because I switch *a lot* between languages so it is hard to keep up-to-date tools that are specific to each language. Besides there are already good tools like bandit (https://github.com/openstack/bandit) for security reviews, I was merely stating an example.\n\nThere is indeed no specific security vulnerability that has been found yet.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Indeed.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m using grep mainly because I switch &lt;em&gt;a lot&lt;/em&gt; between languages so it is hard to keep up-to-date tools that are specific to each language. Besides there are already good tools like bandit (&lt;a href=\"https://github.com/openstack/bandit\"&gt;https://github.com/openstack/bandit&lt;/a&gt;) for security reviews, I was merely stating an example.&lt;/p&gt;\n\n&lt;p&gt;There is indeed no specific security vulnerability that has been found yet.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbz9k8", "score_hidden": false, "stickied": false, "created": 1492374681.0, "created_utc": 1492345881.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbyjvy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbybtq", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Fair enough.\n\nAlthough I would probably write a grep-like tooks using the ast or baron (https://pypi.python.org/pypi/baron/0.6.2) so that you don't have to deal with edge cases.\n\nThe good news is that f-string don't allow  more code injections than format so it should not add new kind of security vulnerabilities.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fair enough.&lt;/p&gt;\n\n&lt;p&gt;Although I would probably write a grep-like tooks using the ast or baron (&lt;a href=\"https://pypi.python.org/pypi/baron/0.6.2\"&gt;https://pypi.python.org/pypi/baron/0.6.2&lt;/a&gt;) so that you don&amp;#39;t have to deal with edge cases.&lt;/p&gt;\n\n&lt;p&gt;The good news is that f-string don&amp;#39;t allow  more code injections than format so it should not add new kind of security vulnerabilities.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbyjvy", "score_hidden": false, "stickied": false, "created": 1492372851.0, "created_utc": 1492344051.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbybtq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cym13", "parent_id": "t1_dgbxplt", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm not saying it's not niche (although I'm pretty sure it shouldn't be, security is completely underrated). This also complicates the task of automated scanners. Just saying but the grep you propose is actually much harder to do than what you suggest (problem of ambiguity, quote pairing with escaping etc). It's not unfeasible of course but it has a cost, and as I tried to show the complexity is exponential as it interracts with the complexity of other parts of the language.\n\nAnyway, I'm fully aware that my not liking it isn't enough for it not to be there. If it were it would never had been put in python in the first place. But I see no reason not to express my discontent about that matter.\n\nIt could have been done with a library and the concrete benefit is dubious while real drawbacks exist.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not saying it&amp;#39;s not niche (although I&amp;#39;m pretty sure it shouldn&amp;#39;t be, security is completely underrated). This also complicates the task of automated scanners. Just saying but the grep you propose is actually much harder to do than what you suggest (problem of ambiguity, quote pairing with escaping etc). It&amp;#39;s not unfeasible of course but it has a cost, and as I tried to show the complexity is exponential as it interracts with the complexity of other parts of the language.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I&amp;#39;m fully aware that my not liking it isn&amp;#39;t enough for it not to be there. If it were it would never had been put in python in the first place. But I see no reason not to express my discontent about that matter.&lt;/p&gt;\n\n&lt;p&gt;It could have been done with a library and the concrete benefit is dubious while real drawbacks exist.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbybtq", "score_hidden": false, "stickied": false, "created": 1492372250.0, "created_utc": 1492343450.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxplt", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbxfhg", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Having to grep \"f'\", for you niche activity (let's be real, security audit are not even 0.001% if the python activity) is not a good reason to kill a feature that is useful to most of the community.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Having to grep &amp;quot;f&amp;#39;&amp;quot;, for you niche activity (let&amp;#39;s be real, security audit are not even 0.001% if the python activity) is not a good reason to kill a feature that is useful to most of the community.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxplt", "score_hidden": false, "stickied": false, "created": 1492370435.0, "created_utc": 1492341635.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxfhg", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cym13", "parent_id": "t1_dgbwq2i", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I guess I should explain my context a bit more.\n\nFirst of all I see no added value. Sure it's a bit shorter to write but the Zen is clear that \"There should be one-- and preferably only one --obvious way to do it.\" and I trust it is a good thing so I am very sceptical about any change that do not allow us to do more than what we already have.\n\nBut I guess my biggest concern with them is that finding bugs becomes way harder. Just a real-life example:\n\nI do security code reviews. That's my thing. I get to work with lots of different programming languages in that context. When you have a few days to find as many bugs as you can and assess their criticity you cannot read the full code or run unittests hoping for a vulnerability to come by. You need to jump right to the bug.\n\nAny injection (sql injection, shell injection, XSS, etc) is a bug at the interface of two languages (for example bash and python). This means that to find injections the easiest is to find unsafe string manipulations at the boundary of another language.\n\nIn perl or in ruby there are just so many ways to build strings and execute shell code that finding them all is very difficult. Contextual symbols may or may not mean shell execution or string interpolation . It is hard to parse, hard to find, hard to analyse and it means that at the end of the day less bugs were found.\n\nIn python there is a very limited subset of ways to build strings. A very limited subset of ways to execute shell code. Most of them are plain functions, easy to grep, in the subprocess module, easy to find. At the end of the day I can say with confidence that no injection is possible because I know I checked them all.\n\nSo I may be a bit grumpy about it but I really think that there are hidden costs to this feature and very little actual benefit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess I should explain my context a bit more.&lt;/p&gt;\n\n&lt;p&gt;First of all I see no added value. Sure it&amp;#39;s a bit shorter to write but the Zen is clear that &amp;quot;There should be one-- and preferably only one --obvious way to do it.&amp;quot; and I trust it is a good thing so I am very sceptical about any change that do not allow us to do more than what we already have.&lt;/p&gt;\n\n&lt;p&gt;But I guess my biggest concern with them is that finding bugs becomes way harder. Just a real-life example:&lt;/p&gt;\n\n&lt;p&gt;I do security code reviews. That&amp;#39;s my thing. I get to work with lots of different programming languages in that context. When you have a few days to find as many bugs as you can and assess their criticity you cannot read the full code or run unittests hoping for a vulnerability to come by. You need to jump right to the bug.&lt;/p&gt;\n\n&lt;p&gt;Any injection (sql injection, shell injection, XSS, etc) is a bug at the interface of two languages (for example bash and python). This means that to find injections the easiest is to find unsafe string manipulations at the boundary of another language.&lt;/p&gt;\n\n&lt;p&gt;In perl or in ruby there are just so many ways to build strings and execute shell code that finding them all is very difficult. Contextual symbols may or may not mean shell execution or string interpolation . It is hard to parse, hard to find, hard to analyse and it means that at the end of the day less bugs were found.&lt;/p&gt;\n\n&lt;p&gt;In python there is a very limited subset of ways to build strings. A very limited subset of ways to execute shell code. Most of them are plain functions, easy to grep, in the subprocess module, easy to find. At the end of the day I can say with confidence that no injection is possible because I know I checked them all.&lt;/p&gt;\n\n&lt;p&gt;So I may be a bit grumpy about it but I really think that there are hidden costs to this feature and very little actual benefit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxfhg", "score_hidden": false, "stickied": false, "created": 1492369542.0, "created_utc": 1492340742.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwq2i", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbunul", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I use them all the time and love them. My students use them all the time and love them. My twitter followers loves them.\n\nI actually meet very few people like you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I use them all the time and love them. My students use them all the time and love them. My twitter followers loves them.&lt;/p&gt;\n\n&lt;p&gt;I actually meet very few people like you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwq2i", "score_hidden": false, "stickied": false, "created": 1492367179.0, "created_utc": 1492338379.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgc4znu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "nerdwaller", "parent_id": "t1_dgc4x5s", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "No worries :) im guessing what you thought you witnessed may be true in a few years, as we still often see `%` formatting for similar reasons of backwards compatibility!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No worries :) im guessing what you thought you witnessed may be true in a few years, as we still often see &lt;code&gt;%&lt;/code&gt; formatting for similar reasons of backwards compatibility!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc4znu", "score_hidden": false, "stickied": false, "created": 1492384748.0, "created_utc": 1492355948.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc4x5s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cym13", "parent_id": "t1_dgc3gi8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yep, I got it wrong. Somehow I thought it was introduced earlier.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep, I got it wrong. Somehow I thought it was introduced earlier.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc4x5s", "score_hidden": false, "stickied": false, "created": 1492384652.0, "created_utc": 1492355852.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc3gi8", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "nerdwaller", "parent_id": "t1_dgbunul", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Two years? Python 3.6 was released in December 2016 - it's still brand new. Needless to say, I wouldn't expect you to see many in use in libraries (due to maintaining compatibility) and probably only in applications\u200b that can define that they only support 3.6+.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Two years? Python 3.6 was released in December 2016 - it&amp;#39;s still brand new. Needless to say, I wouldn&amp;#39;t expect you to see many in use in libraries (due to maintaining compatibility) and probably only in applications\u200b that can define that they only support 3.6+.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc3gi8", "score_hidden": false, "stickied": false, "created": 1492382474.0, "created_utc": 1492353674.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbunul", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "cym13", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "F-strings.\n\nTwo years later I haven't seen anyone using them in real life, which indicates that they were not as needed as they were presented in PEP498.\n\nAdding yet another way to format strings in python only adds to the confusion, it's becoming harder to find possible bugs in code. The many other methods worked fine as they were, this should never have been introduced so lightly into the language.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;F-strings.&lt;/p&gt;\n\n&lt;p&gt;Two years later I haven&amp;#39;t seen anyone using them in real life, which indicates that they were not as needed as they were presented in PEP498.&lt;/p&gt;\n\n&lt;p&gt;Adding yet another way to format strings in python only adds to the confusion, it&amp;#39;s becoming harder to find possible bugs in code. The many other methods worked fine as they were, this should never have been introduced so lightly into the language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbunul", "score_hidden": false, "stickied": false, "created": 1492360126.0, "created_utc": 1492331326.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbk7a6", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "ExoticMandibles", "parent_id": "t1_dgbhw2z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That'll never happen.  Assignment is explicitly *not* an expression, to avoid mistakes (e.g. the C classic \"if (a = 3)\").", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;ll never happen.  Assignment is explicitly &lt;em&gt;not&lt;/em&gt; an expression, to avoid mistakes (e.g. the C classic &amp;quot;if (a = 3)&amp;quot;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk7a6", "score_hidden": false, "stickied": false, "created": 1492339015.0, "created_utc": 1492310215.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbifu4", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "angryaardvark", "parent_id": "t1_dgbhw2z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "locals().set('foo', 5) ?\n\ni'm curious what your code looks like.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;locals().set(&amp;#39;foo&amp;#39;, 5) ?&lt;/p&gt;\n\n&lt;p&gt;i&amp;#39;m curious what your code looks like.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbifu4", "score_hidden": false, "stickied": false, "created": 1492336406.0, "created_utc": 1492307606.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbrh01", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Zomunieo", "parent_id": "t1_dgbk9r5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "(Enjoy (Lisp (Common)) ((I) (too you)))\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(Enjoy (Lisp (Common)) ((I) (too you)))&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbrh01", "score_hidden": false, "stickied": false, "created": 1492351467.0, "created_utc": 1492322667.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk9r5", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "abrazilianinreddit", "parent_id": "t1_dgbhw2z", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I, too, enjoy Common Lisp.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I, too, enjoy Common Lisp.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbk9r5", "score_hidden": false, "stickied": false, "created": 1492339113.0, "created_utc": 1492310313.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbhw2z", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "njharman", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "Statements. \n\nThey got rid of print, let's do the rest next. Everything should be an expression. Esp assignment.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Statements. &lt;/p&gt;\n\n&lt;p&gt;They got rid of print, let&amp;#39;s do the rest next. Everything should be an expression. Esp assignment.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbhw2z", "score_hidden": false, "stickied": false, "created": 1492335603.0, "created_utc": 1492306803.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbwsse", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbssf8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As much as I like that, the title is about removing stuff. You are missing the point.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As much as I like that, the title is about removing stuff. You are missing the point.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwsse", "score_hidden": false, "stickied": false, "created": 1492367442.0, "created_utc": 1492338642.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbu5gj", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "snaftyroot", "parent_id": "t1_dgbssf8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "and reduce execution time.  Rust is consistently faster than C++ but slower than C.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;and reduce execution time.  Rust is consistently faster than C++ but slower than C.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbu5gj", "score_hidden": false, "stickied": false, "created": 1492358507.0, "created_utc": 1492329707.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbssf8", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "fiedzia", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 1, "body": "I'd replace C with Rust as underlying language of default implementation. This would drastically improve quality and accessibility of low-level code in Python ecosystem.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d replace C with Rust as underlying language of default implementation. This would drastically improve quality and accessibility of low-level code in Python ecosystem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbssf8", "score_hidden": false, "stickied": false, "created": 1492354694.0, "created_utc": 1492325894.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgc0d9l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "richiverse", "parent_id": "t1_dgbwsit", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Removing type annotations is", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Removing type annotations is&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0d9l", "score_hidden": false, "stickied": false, "created": 1492377126.0, "created_utc": 1492348326.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbwsit", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t1_dgbgikj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Merging is not removing anything.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Merging is not removing anything.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbwsit", "score_hidden": false, "stickied": false, "created": 1492367417.0, "created_utc": 1492338617.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbgikj", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "richiverse", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I would remove the typing module and just merge pypys jit. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would remove the typing module and just merge pypys jit. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbgikj", "score_hidden": false, "stickied": false, "created": 1492333608.0, "created_utc": 1492304808.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbf7se", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "lucienpro", "parent_id": "t1_dgbdvd2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Woah, mate... you okay?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Woah, mate... you okay?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbf7se", "score_hidden": false, "stickied": false, "created": 1492331789.0, "created_utc": 1492302989.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65m6c2", "likes": null, "replies": "", "user_reports": [], "id": "dgbripr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "BaltoRouberol", "parent_id": "t1_dgbg4aa", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The feels? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The feels? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbripr", "score_hidden": false, "stickied": false, "created": 1492351583.0, "created_utc": 1492322783.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbg4aa", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jungle_junior", "parent_id": "t1_dgbfznx", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "i feel them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;i feel them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbg4aa", "score_hidden": false, "stickied": false, "created": 1492333062.0, "created_utc": 1492304262.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbfznx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "redldr1", "parent_id": "t1_dgbfrva", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Quite a long rant on why 2 is still around. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quite a long rant on why 2 is still around. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbfznx", "score_hidden": false, "stickied": false, "created": 1492332870.0, "created_utc": 1492304070.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbfrva", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jungle_junior", "parent_id": "t1_dgbe4gu", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "What did it say?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What did it say?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbfrva", "score_hidden": false, "stickied": false, "created": 1492332573.0, "created_utc": 1492303773.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbe4gu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "redldr1", "parent_id": "t1_dgbdvd2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "So..... Passionate", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So..... Passionate&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbe4gu", "score_hidden": false, "stickied": false, "created": 1492330186.0, "created_utc": 1492301386.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbdvd2", "gilded": 0, "archived": false, "score": -8, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_65m6c2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "[deleted]", "edited": 1492301198.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbdvd2", "score_hidden": false, "stickied": false, "created": 1492329825.0, "created_utc": 1492301025.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -8}}, {"kind": "more"}], "after": null, "before": null}}]