[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65mxbw", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 389, "report_reasons": null, "author": "kwk236", "saved": false, "mod_reports": [], "name": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65mxbw/minimal_and_clean_examples_of_data_structures_and/", "num_reports": null, "locked": false, "stickied": false, "created": 1492338250.0, "url": "https://github.com/keon/algorithms", "author_flair_text": null, "quarantine": false, "title": "Minimal and clean examples of data structures and algorithms in Python", "created_utc": 1492309450.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 44, "visited": false, "subreddit_type": "public", "ups": 389}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc8w1v", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Prooffread3r", "parent_id": "t1_dgc885p", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Nope.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc8w1v", "score_hidden": false, "stickied": false, "created": 1492390018.0, "created_utc": 1492361218.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc885p", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "bentonite", "parent_id": "t1_dgc0wbq", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Is there a way to do that without reposting it?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is there a way to do that without reposting it?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc885p", "score_hidden": false, "stickied": false, "created": 1492389142.0, "created_utc": 1492360342.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc0wbq", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Prooffread3r", "parent_id": "t1_dgc0944", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You should make this a top level comment IMO.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You should make this a top level comment IMO.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0wbq", "score_hidden": false, "stickied": false, "created": 1492378153.0, "created_utc": 1492349353.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc8rq2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Redzapdos", "parent_id": "t1_dgc0944", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I was going to look at it to see what sort of ways I haven't thought of to do things yet. Thanks for saving an hour of my time though. I'd rather get someone not just translating languages.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was going to look at it to see what sort of ways I haven&amp;#39;t thought of to do things yet. Thanks for saving an hour of my time though. I&amp;#39;d rather get someone not just translating languages.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc8rq2", "score_hidden": false, "stickied": false, "created": 1492389856.0, "created_utc": 1492361056.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc0944", "gilded": 0, "archived": false, "score": 64, "report_reasons": null, "author": "bentonite", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Some of them don't have any python at all. The sqrt_precision_factor under the math subcategory only has a comment that outlines the intent, and then some java.\n", "edited": 1492348385.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some of them don&amp;#39;t have any python at all. The sqrt_precision_factor under the math subcategory only has a comment that outlines the intent, and then some java.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0944", "score_hidden": false, "stickied": false, "created": 1492376894.0, "created_utc": 1492348094.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 64}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgbxd6b", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "Mr-cfsh", "parent_id": "t1_dgbvrih", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It kind of depends on the intention of the author, is he trying to show pythonic implementations of data-structures/algorithms or is he using python to show how these can be implemented.  \nRight now you can see how the entire data structure/algorithm is implemented instead of obfuscating the implementation of sum and max queue length.  \nThis example is in python and yes, these examples aren't very pythonic. But if the the goal here is learning how these could be implemented taking a non-pythonic approach might carry over better to other languages.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It kind of depends on the intention of the author, is he trying to show pythonic implementations of data-structures/algorithms or is he using python to show how these can be implemented.&lt;br/&gt;\nRight now you can see how the entire data structure/algorithm is implemented instead of obfuscating the implementation of sum and max queue length.&lt;br/&gt;\nThis example is in python and yes, these examples aren&amp;#39;t very pythonic. But if the the goal here is learning how these could be implemented taking a non-pythonic approach might carry over better to other languages.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxd6b", "score_hidden": false, "stickied": false, "created": 1492369332.0, "created_utc": 1492340532.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvrih", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "striata", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I agree.\n\nThe [moving average example](https://github.com/keon/algorithms/blob/master/queue/moving_average.py) could be cut to half the size if he actually used the language features (e.g. `sum`on iterable instead of for loop) and the standard library properly (`maxlen` argument to `collections.deque`).\n\nFor a project whose purpose is to show off minimal algorithms in Python, this seems important.\n\n    import collections\n\n    class MovingAverage:\n\t    def __init__(self, size):\n\t    \tself.queue = collections.deque(maxlen=size)\n\n\t    def next(self, val):\n\t    \tself.queue.append(val)\n\t\t    return sum(self.queue) / len(self.queue)\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=\"https://github.com/keon/algorithms/blob/master/queue/moving_average.py\"&gt;moving average example&lt;/a&gt; could be cut to half the size if he actually used the language features (e.g. &lt;code&gt;sum&lt;/code&gt;on iterable instead of for loop) and the standard library properly (&lt;code&gt;maxlen&lt;/code&gt; argument to &lt;code&gt;collections.deque&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;For a project whose purpose is to show off minimal algorithms in Python, this seems important.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import collections\n\nclass MovingAverage:\n    def __init__(self, size):\n        self.queue = collections.deque(maxlen=size)\n\n    def next(self, val):\n        self.queue.append(val)\n        return sum(self.queue) / len(self.queue)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvrih", "score_hidden": false, "stickied": false, "created": 1492363822.0, "created_utc": 1492335022.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc6xha", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "NoahTheDuke", "parent_id": "t1_dgc4rj7", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It's called yapf. It's not perfect, but with some tweaks does so much good work.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s called yapf. It&amp;#39;s not perfect, but with some tweaks does so much good work.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc6xha", "score_hidden": false, "stickied": false, "created": 1492387405.0, "created_utc": 1492358605.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc4rj7", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "namesandfaces", "parent_id": "t1_dgc0qii", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It'd be a lot easier if the Python community &lt;officially&gt; also used something like Go's `fmt` tool. Then you wouldn't be using cultural resource time to police people's style, and people can write in whatever style they want, but have the appearance of a culturally unified style.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;d be a lot easier if the Python community &amp;lt;officially&amp;gt; also used something like Go&amp;#39;s &lt;code&gt;fmt&lt;/code&gt; tool. Then you wouldn&amp;#39;t be using cultural resource time to police people&amp;#39;s style, and people can write in whatever style they want, but have the appearance of a culturally unified style.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc4rj7", "score_hidden": false, "stickied": false, "created": 1492384434.0, "created_utc": 1492355634.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc0qii", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "Prooffread3r", "parent_id": "t1_dgbvnfg", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Or if the programmer has read PEP8 and just doesn't care.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or if the programmer has read PEP8 and just doesn&amp;#39;t care.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0qii", "score_hidden": false, "stickied": false, "created": 1492377836.0, "created_utc": 1492349036.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgca63s", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "pooogles", "parent_id": "t1_dgc8g7g", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; lower_case \n\nSnake case is the term you're looking for.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;lower_case &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Snake case is the term you&amp;#39;re looking for.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgca63s", "score_hidden": false, "stickied": false, "created": 1492391666.0, "created_utc": 1492362866.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgd0qqr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Hollowplanet", "parent_id": "t1_dgc9rk0", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think you should follow whatever the default libraries use in whatever language you're working in. Otherwise you're going to have a mash up that doesn't look very nice. Although I do write my Javascript in snake_case. I should probably change that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think you should follow whatever the default libraries use in whatever language you&amp;#39;re working in. Otherwise you&amp;#39;re going to have a mash up that doesn&amp;#39;t look very nice. Although I do write my Javascript in snake_case. I should probably change that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd0qqr", "score_hidden": false, "stickied": false, "created": 1492427203.0, "created_utc": 1492398403.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc9rk0", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "tunisia3507", "parent_id": "t1_dgc8g7g", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm saying that if you're writing a python library for other people to see and use, the objectively correct decision for style which doesn't impact performance or readability is to comply with standards. If I'm using a library and think \"I need to VERB this object\", and 99% of python uses lower_snake, then why should a package maintainer make me remember \"Oh yes, but in this one library, they use a1T3rN4t1Ng_1337 instead for literally no fucking reason\"?\n\nIf you're stuck in a non-compliant project which is designed to be seen and used by outsiders, I would treat that as technical debt and alias everything for the next major version.\n\nIt's not a question of taste. One of the reasons python is so readable is the strong standard compliance within the community and PEP20. Standards compliance is the correct default.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m saying that if you&amp;#39;re writing a python library for other people to see and use, the objectively correct decision for style which doesn&amp;#39;t impact performance or readability is to comply with standards. If I&amp;#39;m using a library and think &amp;quot;I need to VERB this object&amp;quot;, and 99% of python uses lower_snake, then why should a package maintainer make me remember &amp;quot;Oh yes, but in this one library, they use a1T3rN4t1Ng_1337 instead for literally no fucking reason&amp;quot;?&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re stuck in a non-compliant project which is designed to be seen and used by outsiders, I would treat that as technical debt and alias everything for the next major version.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s not a question of taste. One of the reasons python is so readable is the strong standard compliance within the community and PEP20. Standards compliance is the correct default.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc9rk0", "score_hidden": false, "stickied": false, "created": 1492391127.0, "created_utc": 1492362327.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc8g7g", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Pand9", "parent_id": "t1_dgc897w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; I'll tolerate it as long as I never have to use it.\n\nSo you say that if it comes to coding style, you don't compromise? Even if it's existing code base, or other people have different tastes?\n\nWhat about teamwork values, pragmatic approach to programming, etc? You would get used to different style very quickly. You can even configure convention in PyCharm. I work at my job with two projects in Python, one lower_case and other camelCase, and it's fine.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;ll tolerate it as long as I never have to use it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So you say that if it comes to coding style, you don&amp;#39;t compromise? Even if it&amp;#39;s existing code base, or other people have different tastes?&lt;/p&gt;\n\n&lt;p&gt;What about teamwork values, pragmatic approach to programming, etc? You would get used to different style very quickly. You can even configure convention in PyCharm. I work at my job with two projects in Python, one lower_case and other camelCase, and it&amp;#39;s fine.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc8g7g", "score_hidden": false, "stickied": false, "created": 1492389439.0, "created_utc": 1492360639.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgcvx32", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgcvigm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That's a far different argument than the one I thought you were making (e.g. the project uses camel case all over). \n\nThank you for clarifying. I have to agree with your point that projects like that are pretty terrible. I've encountered and dealt with a few. Just a fucking headache I stuff in some corner of the codebase and try to wall paper over with something a little nicer, hoping that the underlying package doesn't change and someone has to deal with it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a far different argument than the one I thought you were making (e.g. the project uses camel case all over). &lt;/p&gt;\n\n&lt;p&gt;Thank you for clarifying. I have to agree with your point that projects like that are pretty terrible. I&amp;#39;ve encountered and dealt with a few. Just a fucking headache I stuff in some corner of the codebase and try to wall paper over with something a little nicer, hoping that the underlying package doesn&amp;#39;t change and someone has to deal with it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcvx32", "score_hidden": false, "stickied": false, "created": 1492420583.0, "created_utc": 1492391783.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcvigm", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "tunisia3507", "parent_id": "t1_dgcok8a", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Right, a *foolish* consistency is. Like if 100% compliance in one particular edge case will result in less readable or significantly less performant code - I completely accept that.\n\nI'm not talking about those cases. I'm talking about cases where there is zero semantic difference, and someone has said \"Now, I have several options here. One is the standards-compliant way, which my users will expect, which won't cause them to have extra things to remember, which will reduce ambiguity, and which will look consistent with the rest of their code. OR, and this is my personal preference, let's use camel case for methods, 1337speak for classes, and fucking wingdings for constants, because who gives a shit about users and maintainers, amiright?\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Right, a &lt;em&gt;foolish&lt;/em&gt; consistency is. Like if 100% compliance in one particular edge case will result in less readable or significantly less performant code - I completely accept that.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not talking about those cases. I&amp;#39;m talking about cases where there is zero semantic difference, and someone has said &amp;quot;Now, I have several options here. One is the standards-compliant way, which my users will expect, which won&amp;#39;t cause them to have extra things to remember, which will reduce ambiguity, and which will look consistent with the rest of their code. OR, and this is my personal preference, let&amp;#39;s use camel case for methods, 1337speak for classes, and fucking wingdings for constants, because who gives a shit about users and maintainers, amiright?&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcvigm", "score_hidden": false, "stickied": false, "created": 1492420058.0, "created_utc": 1492391258.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcok8a", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgc897w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This is the first point of PEP8:\n\n&gt; A foolish consistency is the hobgoblin of little minds. \n\nAnd explains that the style guide is just that: a guide. Projects are free to use their own style guides. Hell, even the standard library doesn't always follow its own advice:\n\n&gt;  Standard library code should avoid complex package layouts and always use absolute imports. \n\nhttps://github.com/python/cpython/blob/master/Lib/asyncio/base_events.py", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is the first point of PEP8:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;A foolish consistency is the hobgoblin of little minds. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And explains that the style guide is just that: a guide. Projects are free to use their own style guides. Hell, even the standard library doesn&amp;#39;t always follow its own advice:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Standard library code should avoid complex package layouts and always use absolute imports. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/python/cpython/blob/master/Lib/asyncio/base_events.py\"&gt;https://github.com/python/cpython/blob/master/Lib/asyncio/base_events.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcok8a", "score_hidden": false, "stickied": false, "created": 1492410620.0, "created_utc": 1492381820.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc897w", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "tunisia3507", "parent_id": "t1_dgc6hpw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'll tolerate it as long as I never have to use it. For any open source project, or any code designed to be shared or used by others, abiding by standards massively reduces the cognitive overhead of using it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ll tolerate it as long as I never have to use it. For any open source project, or any code designed to be shared or used by others, abiding by standards massively reduces the cognitive overhead of using it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc897w", "score_hidden": false, "stickied": false, "created": 1492389181.0, "created_utc": 1492360381.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc6hpw", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "Pand9", "parent_id": "t1_dgc1of6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Like it or not, there are other standards than Pep8. It's good to be tolerant to project-local conventions.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like it or not, there are other standards than Pep8. It&amp;#39;s good to be tolerant to project-local conventions.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc6hpw", "score_hidden": false, "stickied": false, "created": 1492386809.0, "created_utc": 1492358009.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgcizv0", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "jyper", "parent_id": "t1_dgc1of6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "See standard library", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;See standard library&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcizv0", "score_hidden": false, "stickied": false, "created": 1492403292.0, "created_utc": 1492374492.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc1of6", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "tunisia3507", "parent_id": "t1_dgbvnfg", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yeah, it's just a red flag for someone who doesn't know or doesn't care about readability standards. One of the best things about python, both its design principles and community, is the strong, universal (but not enforced) standards.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, it&amp;#39;s just a red flag for someone who doesn&amp;#39;t know or doesn&amp;#39;t care about readability standards. One of the best things about python, both its design principles and community, is the strong, universal (but not enforced) standards.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1of6", "score_hidden": false, "stickied": false, "created": 1492379594.0, "created_utc": 1492350794.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgdq7uc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kkweon", "parent_id": "t1_dgdiprb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Yes if you read the guide, you will know why some packages use mixedCases like setUp, tearDown but the point is not about one style is over other styles. It is about consistency. \n\nAnd using a mixedCase in a personal project like this can be a sign of inconsistency. if you have looked into that repo, you will find both camelCase and snake_cases are used inconsistently.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes if you read the guide, you will know why some packages use mixedCases like setUp, tearDown but the point is not about one style is over other styles. It is about consistency. &lt;/p&gt;\n\n&lt;p&gt;And using a mixedCase in a personal project like this can be a sign of inconsistency. if you have looked into that repo, you will find both camelCase and snake_cases are used inconsistently.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdq7uc", "score_hidden": false, "stickied": false, "created": 1492476036.0, "created_utc": 1492447236.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdiprb", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "djmattyg007", "parent_id": "t1_dgbvnfg", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Have you ever used the unittest module in the standard library?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Have you ever used the unittest module in the standard library?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdiprb", "score_hidden": false, "stickied": false, "created": 1492466991.0, "created_utc": 1492438191.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvnfg", "gilded": 0, "archived": false, "score": 34, "report_reasons": null, "author": "kkweon", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "camelCase really bothers me too\n\nIf i find a camelCase in Python, I start to wonder if the person has ever read the pep8.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;camelCase really bothers me too&lt;/p&gt;\n\n&lt;p&gt;If i find a camelCase in Python, I start to wonder if the person has ever read the pep8.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvnfg", "score_hidden": false, "stickied": false, "created": 1492363434.0, "created_utc": 1492334634.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 34}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc0zoe", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "ruiwui", "parent_id": "t1_dgbzsi5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Counting characters is generally considered better. It runs in linear time; sorting both is loglinear (in addition to a linear comparison).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Counting characters is generally considered better. It runs in linear time; sorting both is loglinear (in addition to a linear comparison).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0zoe", "score_hidden": false, "stickied": false, "created": 1492378328.0, "created_utc": 1492349528.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc0zff", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "poundcakejumpsuit", "parent_id": "t1_dgbzsi5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "is that better time complexity though? dict method takes O(n), does timsort use a linear sort on strings?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;is that better time complexity though? dict method takes O(n), does timsort use a linear sort on strings?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc0zff", "score_hidden": false, "stickied": false, "created": 1492378315.0, "created_utc": 1492349515.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbzsi5", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "jabbalaci", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Or, simply sort the strings and compare them:\n\n    def anagram(s1, s2):\n        return sorted(s1) == sorted(s2)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or, simply sort the strings and compare them:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbzsi5", "score_hidden": false, "stickied": false, "created": 1492375898.0, "created_utc": 1492347098.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgc6b8r", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Pand9", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "List and dict don't have the same pessimistic complexity. It's intentional.\n\nDict and set are pessimistic O(n), not average O(n). It matters if you want to present \"perfect\" algorithm. E.g. if you're on interview, it's good to know the difference.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;List and dict don&amp;#39;t have the same pessimistic complexity. It&amp;#39;s intentional.&lt;/p&gt;\n\n&lt;p&gt;Dict and set are pessimistic O(n), not average O(n). It matters if you want to present &amp;quot;perfect&amp;quot; algorithm. E.g. if you&amp;#39;re on interview, it&amp;#39;s good to know the difference.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc6b8r", "score_hidden": false, "stickied": false, "created": 1492386568.0, "created_utc": 1492357768.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgbxp3t", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "badge", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Or even `anagram = lambda s1, s2: Counter(s1) == Counter(s2)` using `collections`' `Counter`.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or even &lt;code&gt;anagram = lambda s1, s2: Counter(s1) == Counter(s2)&lt;/code&gt; using &lt;code&gt;collections&lt;/code&gt;&amp;#39; &lt;code&gt;Counter&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxp3t", "score_hidden": false, "stickied": false, "created": 1492370392.0, "created_utc": 1492341592.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgccb1g", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "baudvine", "parent_id": "t1_dgbvfhe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "And reimplementing a linked list seems fairly dubious. I write Python to get away from C, dangit. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And reimplementing a linked list seems fairly dubious. I write Python to get away from C, dangit. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgccb1g", "score_hidden": false, "stickied": false, "created": 1492394477.0, "created_utc": 1492365677.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvfhe", "gilded": 0, "archived": false, "score": 60, "report_reasons": null, "author": "IlikeSalmiakki", "parent_id": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Some of these are rather unpythonic. I.e\n Anagram should have used a dict to count letters. Would have lead to much more clear and readable code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some of these are rather unpythonic. I.e\n Anagram should have used a dict to count letters. Would have lead to much more clear and readable code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvfhe", "score_hidden": false, "stickied": false, "created": 1492362682.0, "created_utc": 1492333882.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 60}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgckf4y", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ggagagg", "parent_id": "t1_dgcdu9w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Not op, but take a look at the mock documentation on python 3.\n\nOther external libraries such as pytest and factory boy if you are into django. \n\nFor book see python tdd by siddharta\n\nEven if that book lack material for pytest, you can learn it faster thank to the material in the book. \n\nDon't forget to check external package to help your testing such as pytest-cov, tox, etc", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not op, but take a look at the mock documentation on python 3.&lt;/p&gt;\n\n&lt;p&gt;Other external libraries such as pytest and factory boy if you are into django. &lt;/p&gt;\n\n&lt;p&gt;For book see python tdd by siddharta&lt;/p&gt;\n\n&lt;p&gt;Even if that book lack material for pytest, you can learn it faster thank to the material in the book. &lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t forget to check external package to help your testing such as pytest-cov, tox, etc&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgckf4y", "score_hidden": false, "stickied": false, "created": 1492405145.0, "created_utc": 1492376345.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgcnrou", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "NelsonMinar", "parent_id": "t1_dgcdu9w", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks for asking while I just take cheap shots :-)\n\nI use the [stock unittest module](https://docs.python.org/3/library/unittest.html) for unit testing my code. There's too much boilerplate involved but it works pretty well. A lot of folks like [Nose](https://nose.readthedocs.io/en/latest/) instead. [doctest](https://docs.python.org/3/library/doctest.html) is an interesting alternative.\n\nIt doesn't matter a lot which library you use. The key thing is the tests become a program you can run that tell you if it passed or not. Don't just print stuff out as \"tests\", check the output from your functions programmatically. Even very simple `assert` statements can get the job done, although a proper framework makes it a lot easier. To learn more there's a lot of articles if you search for \"python unit testing\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for asking while I just take cheap shots :-)&lt;/p&gt;\n\n&lt;p&gt;I use the &lt;a href=\"https://docs.python.org/3/library/unittest.html\"&gt;stock unittest module&lt;/a&gt; for unit testing my code. There&amp;#39;s too much boilerplate involved but it works pretty well. A lot of folks like &lt;a href=\"https://nose.readthedocs.io/en/latest/\"&gt;Nose&lt;/a&gt; instead. &lt;a href=\"https://docs.python.org/3/library/doctest.html\"&gt;doctest&lt;/a&gt; is an interesting alternative.&lt;/p&gt;\n\n&lt;p&gt;It doesn&amp;#39;t matter a lot which library you use. The key thing is the tests become a program you can run that tell you if it passed or not. Don&amp;#39;t just print stuff out as &amp;quot;tests&amp;quot;, check the output from your functions programmatically. Even very simple &lt;code&gt;assert&lt;/code&gt; statements can get the job done, although a proper framework makes it a lot easier. To learn more there&amp;#39;s a lot of articles if you search for &amp;quot;python unit testing&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcnrou", "score_hidden": false, "stickied": false, "created": 1492409539.0, "created_utc": 1492380739.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcdu9w", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dgreenmachine", "parent_id": "t1_dgc7aus", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Do you have a good resource for learning automated testing in Python? I know of writing manual tests that could print out which tests fail and why. What part exactly gets automated?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do you have a good resource for learning automated testing in Python? I know of writing manual tests that could print out which tests fail and why. What part exactly gets automated?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcdu9w", "score_hidden": false, "stickied": false, "created": 1492396536.0, "created_utc": 1492367736.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc7aus", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "NelsonMinar", "parent_id": "t1_dgc5nu4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Ha, that's not a test, that's a program that prints some stuff out. I imagine it was implemented as an attempt to test the code by someone who doesn't know how great automated testing is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ha, that&amp;#39;s not a test, that&amp;#39;s a program that prints some stuff out. I imagine it was implemented as an attempt to test the code by someone who doesn&amp;#39;t know how great automated testing is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc7aus", "score_hidden": false, "stickied": false, "created": 1492387906.0, "created_utc": 1492359106.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc5nu4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "frumious", "parent_id": "t1_dgc49ns", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think I got lucky when I randomly hit this first time\n\nhttps://github.com/keon/algorithms/blob/master/queue/max_sliding_window.py#L32\n\nI see others that lack tests and others that have tests protected in `if \"__main__\" == __name` guards.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think I got lucky when I randomly hit this first time&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/keon/algorithms/blob/master/queue/max_sliding_window.py#L32\"&gt;https://github.com/keon/algorithms/blob/master/queue/max_sliding_window.py#L32&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I see others that lack tests and others that have tests protected in &lt;code&gt;if &amp;quot;__main__&amp;quot; == __name&lt;/code&gt; guards.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc5nu4", "score_hidden": false, "stickied": false, "created": 1492385676.0, "created_utc": 1492356876.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc49ns", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "NelsonMinar", "parent_id": "t1_dgc3a83", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You found more test code than I was able to. 3200 lines of Python algorithms, the easiest thing in the world to test, and no automated test suite. That makes the code dangerous for real world applications. It's a pretty bad tutorial / example to set, too.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You found more test code than I was able to. 3200 lines of Python algorithms, the easiest thing in the world to test, and no automated test suite. That makes the code dangerous for real world applications. It&amp;#39;s a pretty bad tutorial / example to set, too.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc49ns", "score_hidden": false, "stickied": false, "created": 1492383705.0, "created_utc": 1492354905.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc3a83", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "frumious", "parent_id": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I know it's just a set of examples but there is some test code at top-level which is not so great as it runs on import.  Better would be to put it into a `test()` method of each module move it to its own file.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know it&amp;#39;s just a set of examples but there is some test code at top-level which is not so great as it runs on import.  Better would be to put it into a &lt;code&gt;test()&lt;/code&gt; method of each module move it to its own file.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc3a83", "score_hidden": false, "stickied": false, "created": 1492382204.0, "created_utc": 1492353404.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgbnnwb", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "DaveX64", "parent_id": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks for the reference material :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the reference material :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbnnwb", "score_hidden": false, "stickied": false, "created": 1492344289.0, "created_utc": 1492315489.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgct69j", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Midasx", "parent_id": "t1_dgcquvb", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Interesting, I wasn't sure how efficient this version would be! I think it does nicely convey the algorithm of a quick sort though. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting, I wasn&amp;#39;t sure how efficient this version would be! I think it does nicely convey the algorithm of a quick sort though. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgct69j", "score_hidden": false, "stickied": false, "created": 1492416941.0, "created_utc": 1492388141.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcquvb", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "zbonk", "parent_id": "t1_dgco6er", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You can argue that it looks nicer or is more readable, but it increases the space requirements quite significantly: every recursive call 'level' creates an entire copy of the original array, albeit in different order. If I remember my big-oh lessons correctly, it increases from O(1) to O(n log n). O(1) because the implementation of OP doesn't require any allocation at all.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can argue that it looks nicer or is more readable, but it increases the space requirements quite significantly: every recursive call &amp;#39;level&amp;#39; creates an entire copy of the original array, albeit in different order. If I remember my big-oh lessons correctly, it increases from O(1) to O(n log n). O(1) because the implementation of OP doesn&amp;#39;t require any allocation at all.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcquvb", "score_hidden": false, "stickied": false, "created": 1492413793.0, "created_utc": 1492384993.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgco6er", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Midasx", "parent_id": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I think my version of quicksort is nicer: \n\n    def quicksort(arr):\n        if not arr:\n            return []\n    \n        pivot = arr[-1]\n        less = [x for x in arr[:-1] if x &lt;= pivot]\n        more = [x for x in arr[:-1] if x &gt; pivot]\n    \n        lesser = quicksort(less)\n        greater = quicksort(more)\n    \n        return lesser + [pivot] + greater\n\n[gist](https://gist.github.com/bag-man/5b7bae0832e6d8fffa4a)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think my version of quicksort is nicer: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def quicksort(arr):\n    if not arr:\n        return []\n\n    pivot = arr[-1]\n    less = [x for x in arr[:-1] if x &amp;lt;= pivot]\n    more = [x for x in arr[:-1] if x &amp;gt; pivot]\n\n    lesser = quicksort(less)\n    greater = quicksort(more)\n\n    return lesser + [pivot] + greater\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/bag-man/5b7bae0832e6d8fffa4a\"&gt;gist&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgco6er", "score_hidden": false, "stickied": false, "created": 1492410089.0, "created_utc": 1492381289.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65mxbw", "likes": null, "replies": "", "user_reports": [], "id": "dgecvac", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ahmeni", "parent_id": "t1_dgcisw3", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "In r/python? Yes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;? Yes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgecvac", "score_hidden": false, "stickied": false, "created": 1492502666.0, "created_utc": 1492473866.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcisw3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "descoladan", "parent_id": "t3_65mxbw", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Am I the only one who dislikes using Python to explain data structures?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Am I the only one who dislikes using Python to explain data structures?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcisw3", "score_hidden": false, "stickied": false, "created": 1492403045.0, "created_utc": 1492374245.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]