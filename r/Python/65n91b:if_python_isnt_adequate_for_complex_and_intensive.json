[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A while ago I was researching to know how much Python has been used for game development and I&amp;#39;ve concluded not so much. We have some successful indie games here and there but almost all AAA games use only C/C++ for performance. &lt;/p&gt;\n\n&lt;p&gt;What I don&amp;#39;t get is why Python, which seems to be considered slow for games, is used for Big Data, machine learning, and other huge weight-lifting tasks while C isn&amp;#39;t used for any of these things. Wouldn&amp;#39;t C be much faster for neural networks, for instance?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "A while ago I was researching to know how much Python has been used for game development and I've concluded not so much. We have some successful indie games here and there but almost all AAA games use only C/C++ for performance. \n\nWhat I don't get is why Python, which seems to be considered slow for games, is used for Big Data, machine learning, and other huge weight-lifting tasks while C isn't used for any of these things. Wouldn't C be much faster for neural networks, for instance?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65n91b", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 45, "report_reasons": null, "author": "TheSirion", "saved": false, "mod_reports": [], "name": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65n91b/if_python_isnt_adequate_for_complex_and_intensive/", "num_reports": null, "locked": false, "stickied": false, "created": 1492342903.0, "url": "https://www.reddit.com/r/Python/comments/65n91b/if_python_isnt_adequate_for_complex_and_intensive/", "author_flair_text": null, "quarantine": false, "title": "If Python isn't adequate for complex and intensive games, what makes it adequate for such big tasks like Big Data?", "created_utc": 1492314103.0, "distinguished": null, "media": null, "upvote_ratio": 0.81, "num_comments": 38, "visited": false, "subreddit_type": "public", "ups": 45}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbz041", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "masklinn", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Also specifically for the \"big data\" scenario, exploratory programming is way easier in Python, you can open a Jupyter notebook and fiddle around interactively, not so much with C/C++.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also specifically for the &amp;quot;big data&amp;quot; scenario, exploratory programming is way easier in Python, you can open a Jupyter notebook and fiddle around interactively, not so much with C/C++.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbz041", "score_hidden": false, "stickied": false, "created": 1492374039.0, "created_utc": 1492345239.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgcjo6v", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Raijinili", "parent_id": "t1_dgc955i", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; Deadlines in science are not usually so hard.\n\nI think this is a good opportunity for the word \"granular\". A 10% decrease in CPU use is good for both uses, but one case cares more about every part of the runtime being fast than the whole thing being faster.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Deadlines in science are not usually so hard.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I think this is a good opportunity for the word &amp;quot;granular&amp;quot;. A 10% decrease in CPU use is good for both uses, but one case cares more about every part of the runtime being fast than the whole thing being faster.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcjo6v", "score_hidden": false, "stickied": false, "created": 1492404177.0, "created_utc": 1492375377.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgdd6xw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "n1ywb", "parent_id": "t1_dgckqj6", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "They're not really well defined terms and you would never use them in technical documentation without explicitly defining them. Deadlines and the consequences of a miss should be quantified. eg you might have 30 seconds to insert the control rods but if you miss the deadline the reactor melts down. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They&amp;#39;re not really well defined terms and you would never use them in technical documentation without explicitly defining them. Deadlines and the consequences of a miss should be quantified. eg you might have 30 seconds to insert the control rods but if you miss the deadline the reactor melts down. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdd6xw", "score_hidden": false, "stickied": false, "created": 1492456596.0, "created_utc": 1492427796.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgckqj6", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "obfuscate", "parent_id": "t1_dgc955i", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm pretty sure games are considered soft real time. Things like pacemakers are considered hard real time.\n\nEdit: just looked it up on Wikipedia:\n\nHard \u2013 missing a deadline is a total system failure.\n\nFirm \u2013 infrequent deadline misses are tolerable, but may degrade the system's quality of service. The usefulness of a result is zero after its deadline.\n\nSoft \u2013 the usefulness of a result degrades after its deadline, thereby degrading the system's quality of service.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m pretty sure games are considered soft real time. Things like pacemakers are considered hard real time.&lt;/p&gt;\n\n&lt;p&gt;Edit: just looked it up on Wikipedia:&lt;/p&gt;\n\n&lt;p&gt;Hard \u2013 missing a deadline is a total system failure.&lt;/p&gt;\n\n&lt;p&gt;Firm \u2013 infrequent deadline misses are tolerable, but may degrade the system&amp;#39;s quality of service. The usefulness of a result is zero after its deadline.&lt;/p&gt;\n\n&lt;p&gt;Soft \u2013 the usefulness of a result degrades after its deadline, thereby degrading the system&amp;#39;s quality of service.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgckqj6", "score_hidden": false, "stickied": false, "created": 1492405578.0, "created_utc": 1492376778.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc955i", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "n1ywb", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The other factor is that games are HARD REAL TIME. If the program can't keep up the game stutters and skips frames. It has 1/30th of a second to calculate everything and draw the next frame. Deadlines in science are not usually so hard.   ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The other factor is that games are HARD REAL TIME. If the program can&amp;#39;t keep up the game stutters and skips frames. It has 1/30th of a second to calculate everything and draw the next frame. Deadlines in science are not usually so hard.   &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc955i", "score_hidden": false, "stickied": false, "created": 1492390345.0, "created_utc": 1492361545.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgc7gf9", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "kenfar", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; This low cost of programmer time is incredibly valuable for most businesses. If it takes my engineer a day to deliver a POC using Python and 1-2 weeks to put something in production that's awesome;\n\nMore on this: on the data science / data analysis side of \"big data\" we tend to have to run through a lot of iterations for two reasons:  First we just have hunch, a hypothesis, or a really muddy requirement that needs to be investigated or solved.  We may write 10-20 quick little one-offs in this process before we're done.   Secondly, once we deliver our conclusions or result we will probably be asked to change the solution in various ways or answer more questions that now occur to our user based on our findings.   So, maybe another 10-20 quick one-offs.\n\nWriting 20-40 small programs to analyze data in python is **so** much faster than writing them in Java, Scala, C++, etc.   And - it's more likely to be readable by others or ourselves a year later.   And if we wrote that using something like Jupyter - then we probably had a fun time writing the code and have some pretty pictures to show as well.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;This low cost of programmer time is incredibly valuable for most businesses. If it takes my engineer a day to deliver a POC using Python and 1-2 weeks to put something in production that&amp;#39;s awesome;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More on this: on the data science / data analysis side of &amp;quot;big data&amp;quot; we tend to have to run through a lot of iterations for two reasons:  First we just have hunch, a hypothesis, or a really muddy requirement that needs to be investigated or solved.  We may write 10-20 quick little one-offs in this process before we&amp;#39;re done.   Secondly, once we deliver our conclusions or result we will probably be asked to change the solution in various ways or answer more questions that now occur to our user based on our findings.   So, maybe another 10-20 quick one-offs.&lt;/p&gt;\n\n&lt;p&gt;Writing 20-40 small programs to analyze data in python is &lt;strong&gt;so&lt;/strong&gt; much faster than writing them in Java, Scala, C++, etc.   And - it&amp;#39;s more likely to be readable by others or ourselves a year later.   And if we wrote that using something like Jupyter - then we probably had a fun time writing the code and have some pretty pictures to show as well.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc7gf9", "score_hidden": false, "stickied": false, "created": 1492388113.0, "created_utc": 1492359313.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgc7b0w", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "yaarra", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Also, scaling big data problems is easy by throwing more hardware at it, something you cannot do with games. You have to code for the lowest common denominator and have it work efficiently there.\n\nIn today's python world I think you could get away with AAA game development though in tems of performance. The routines that need to perform well could be done in C, which you then wrap in python. It might not pay off to invest a lot of time into this though, as I *think* the bulk of the budget for game development is not in coding, but in the 3D design, storywriting, etc.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also, scaling big data problems is easy by throwing more hardware at it, something you cannot do with games. You have to code for the lowest common denominator and have it work efficiently there.&lt;/p&gt;\n\n&lt;p&gt;In today&amp;#39;s python world I think you could get away with AAA game development though in tems of performance. The routines that need to perform well could be done in C, which you then wrap in python. It might not pay off to invest a lot of time into this though, as I &lt;em&gt;think&lt;/em&gt; the bulk of the budget for game development is not in coding, but in the 3D design, storywriting, etc.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc7b0w", "score_hidden": false, "stickied": false, "created": 1492387913.0, "created_utc": 1492359113.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbon62", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "patattacka", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Just the fact that you know all that is astounding to me ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just the fact that you know all that is astounding to me &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbon62", "score_hidden": false, "stickied": false, "created": 1492345976.0, "created_utc": 1492317176.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgcizr7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ivereaddit", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Really interesting thanks", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Really interesting thanks&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcizr7", "score_hidden": false, "stickied": false, "created": 1492403289.0, "created_utc": 1492374489.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgdlfla", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jwink3101", "parent_id": "t1_dgbnr1j", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I am not an expert (or a gamer), but I also assume run time is more important for games. You want a game to run in real time so you must sacrifice either something (fidelity, frame-rate, quality) to make that so.\n\nIf I were working on BigData and the time to run an analysis were 1 minute in Python or 30 seconds in C/C++, then it pays to do it in Python.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I am not an expert (or a gamer), but I also assume run time is more important for games. You want a game to run in real time so you must sacrifice either something (fidelity, frame-rate, quality) to make that so.&lt;/p&gt;\n\n&lt;p&gt;If I were working on BigData and the time to run an analysis were 1 minute in Python or 30 seconds in C/C++, then it pays to do it in Python.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdlfla", "score_hidden": false, "stickied": false, "created": 1492470549.0, "created_utc": 1492441749.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbnr1j", "gilded": 0, "archived": false, "score": 79, "report_reasons": null, "author": "clermbclermb", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You need to consider multiple parameters for choosing a language. C/C++ gives you something that is compiled directly to machine code, so they perform better than Python programs executed by  cPython, typically.  However, the cost of that performance is a generally higher barrier to entry for actually doing the coding.  Python typically has a lower barrier to entry for coding, so you can easily install a few libraries and very quickly be doing big data work; without the added headache of memory management issues that can come with writing C code directly.  The really kicker is that many high performance Python packages may actually be written in C/C++ or simply be wrappers around C libraries; so your Python program is still calling machine code (which runs very fast) compared a pure Python implementation of the same thing.\n\nThis low cost of programmer time is incredibly valuable for most businesses.  If it takes my engineer a day to deliver a POC using Python and 1-2 weeks to put something in production that's awesome; if a similar C example takes 4-6 weeks of work, despite awesome performance, was the 2-3X increase in development time worhnit?  Computing time is cheaper than programmer time, so by and large the variable for a business to optimize is programmer time; which is why python is so appealing for many uses.  \n\nWriting games, while a large industry, is a relatively narrow application of computers, and Python as a language just doesn't currently have the best support for that particular application.  There are some libraries designed to help make it accessible;  and there have been folks that have built MUDS using Python; but it's generally not a huge focus.\n\nSorry for formatting, on mobile. Hope this helps.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You need to consider multiple parameters for choosing a language. C/C++ gives you something that is compiled directly to machine code, so they perform better than Python programs executed by  cPython, typically.  However, the cost of that performance is a generally higher barrier to entry for actually doing the coding.  Python typically has a lower barrier to entry for coding, so you can easily install a few libraries and very quickly be doing big data work; without the added headache of memory management issues that can come with writing C code directly.  The really kicker is that many high performance Python packages may actually be written in C/C++ or simply be wrappers around C libraries; so your Python program is still calling machine code (which runs very fast) compared a pure Python implementation of the same thing.&lt;/p&gt;\n\n&lt;p&gt;This low cost of programmer time is incredibly valuable for most businesses.  If it takes my engineer a day to deliver a POC using Python and 1-2 weeks to put something in production that&amp;#39;s awesome; if a similar C example takes 4-6 weeks of work, despite awesome performance, was the 2-3X increase in development time worhnit?  Computing time is cheaper than programmer time, so by and large the variable for a business to optimize is programmer time; which is why python is so appealing for many uses.  &lt;/p&gt;\n\n&lt;p&gt;Writing games, while a large industry, is a relatively narrow application of computers, and Python as a language just doesn&amp;#39;t currently have the best support for that particular application.  There are some libraries designed to help make it accessible;  and there have been folks that have built MUDS using Python; but it&amp;#39;s generally not a huge focus.&lt;/p&gt;\n\n&lt;p&gt;Sorry for formatting, on mobile. Hope this helps.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbnr1j", "score_hidden": false, "stickied": false, "created": 1492344438.0, "created_utc": 1492315638.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 79}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbyw7m", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Olleus", "parent_id": "t1_dgbtg6a", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Not quite. The UI in Civ IV was written in python, and it had lots of handles so mods could also be written in it. Modding was the primary reason for using python in Civ IV (something which moved to Lua now). It also made it relatively easy to combine mods together at the user end.\n\nThe AI and game logic was done in C++. They eventually released the source code for that, which vastly expanded whats mods could do, and made existing one a lot less hackish, at the cost of substantially portability issues.\n\nNot sure what the graphics engine was done it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not quite. The UI in Civ IV was written in python, and it had lots of handles so mods could also be written in it. Modding was the primary reason for using python in Civ IV (something which moved to Lua now). It also made it relatively easy to combine mods together at the user end.&lt;/p&gt;\n\n&lt;p&gt;The AI and game logic was done in C++. They eventually released the source code for that, which vastly expanded whats mods could do, and made existing one a lot less hackish, at the cost of substantially portability issues.&lt;/p&gt;\n\n&lt;p&gt;Not sure what the graphics engine was done it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbyw7m", "score_hidden": false, "stickied": false, "created": 1492373762.0, "created_utc": 1492344962.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbtg6a", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bastibe", "parent_id": "t1_dgbnqqc", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Wasn't Civilization IV written in mostly Python? The rendering engine was probably still C, but the UI, AI, and game logic was all Python, IIRC. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wasn&amp;#39;t Civilization IV written in mostly Python? The rendering engine was probably still C, but the UI, AI, and game logic was all Python, IIRC. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbtg6a", "score_hidden": false, "stickied": false, "created": 1492356483.0, "created_utc": 1492327683.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbnqqc", "gilded": 0, "archived": false, "score": 26, "report_reasons": null, "author": "edric_garran", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "most of the bulk of the processing is implemented in C, C++, fortran, etc in the scientific computing libraries.\n\nPython can very much be used for games, since the heavy part is done in the GPU nowadays, but the code handling the graphics wouldn't benefit much from python, so it's preferable to write the rendering in c++ and use python for the less performance intensive parts.\n\nThat said, there isn't much point in comparing scicomp with game rendering, since the performance of scientific projects is more in the order of \"it's fast enough to be viable\", while the performance in games is in the order of \"the frame is taking longer than 1/60 of a second to render, squeeze the code for those extra ms\" ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;most of the bulk of the processing is implemented in C, C++, fortran, etc in the scientific computing libraries.&lt;/p&gt;\n\n&lt;p&gt;Python can very much be used for games, since the heavy part is done in the GPU nowadays, but the code handling the graphics wouldn&amp;#39;t benefit much from python, so it&amp;#39;s preferable to write the rendering in c++ and use python for the less performance intensive parts.&lt;/p&gt;\n\n&lt;p&gt;That said, there isn&amp;#39;t much point in comparing scicomp with game rendering, since the performance of scientific projects is more in the order of &amp;quot;it&amp;#39;s fast enough to be viable&amp;quot;, while the performance in games is in the order of &amp;quot;the frame is taking longer than 1/60 of a second to render, squeeze the code for those extra ms&amp;quot; &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbnqqc", "score_hidden": false, "stickied": false, "created": 1492344424.0, "created_utc": 1492315624.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 26}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbzmhv", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "tunisia3507", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is a great glue language. It's easy to read and write, easy to explore and iterate, and most importantly, easy to work with libraries in other languages, as well as all manner of things like web APIs, files and so on.\n\nAs you say, if you were to write a neural network in python it'd be slow - so nobody does that. What they do is write their setup, teardown and analysis code in python, and somewhere in the middle tell numpy (which is mainly a C/C++ library) to do the actual array manipulation.\n\nOr even that requires bouncing back and forth between python and compiled libraries a bit too much, so the major deep learning libraries allow you to do your setup on python, define a model in python, and then hand that entirely over to a compiled library like TensorFlow which constructs, trains and runs the model.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is a great glue language. It&amp;#39;s easy to read and write, easy to explore and iterate, and most importantly, easy to work with libraries in other languages, as well as all manner of things like web APIs, files and so on.&lt;/p&gt;\n\n&lt;p&gt;As you say, if you were to write a neural network in python it&amp;#39;d be slow - so nobody does that. What they do is write their setup, teardown and analysis code in python, and somewhere in the middle tell numpy (which is mainly a C/C++ library) to do the actual array manipulation.&lt;/p&gt;\n\n&lt;p&gt;Or even that requires bouncing back and forth between python and compiled libraries a bit too much, so the major deep learning libraries allow you to do your setup on python, define a model in python, and then hand that entirely over to a compiled library like TensorFlow which constructs, trains and runs the model.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbzmhv", "score_hidden": false, "stickied": false, "created": 1492375534.0, "created_utc": 1492346734.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 11}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbudu0", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "MrL33h", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python itself is quite slow. But there exist some great libraries for data mangling like numpy, scipy that are actually written in C/C++. Meaning they provide a very powerful and fast processing combined with a convenient Python interface. This way you get basically the best of two worlds: speed and a great high level language. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python itself is quite slow. But there exist some great libraries for data mangling like numpy, scipy that are actually written in C/C++. Meaning they provide a very powerful and fast processing combined with a convenient Python interface. This way you get basically the best of two worlds: speed and a great high level language. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbudu0", "score_hidden": false, "stickied": false, "created": 1492359246.0, "created_utc": 1492330446.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgc6oth", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "tapo", "parent_id": "t1_dgbvg0o", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It doesn't use CPython though, it's Stackless Python.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It doesn&amp;#39;t use CPython though, it&amp;#39;s Stackless Python.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc6oth", "score_hidden": false, "stickied": false, "created": 1492387074.0, "created_utc": 1492358274.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgdk2q4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TaishokuMayaki", "parent_id": "t1_dgdjian", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thanks will check it out. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks will check it out. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdk2q4", "score_hidden": false, "stickied": false, "created": 1492468833.0, "created_utc": 1492440033.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdjian", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mikeckennedy", "parent_id": "t1_dgbvg0o", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I interviewed the guys about Python @ EVE Online if you're interested: https://talkpython.fm/episodes/show/52/eve-online-mmo-game-powered-by-python", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I interviewed the guys about Python @ EVE Online if you&amp;#39;re interested: &lt;a href=\"https://talkpython.fm/episodes/show/52/eve-online-mmo-game-powered-by-python\"&gt;https://talkpython.fm/episodes/show/52/eve-online-mmo-game-powered-by-python&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdjian", "score_hidden": false, "stickied": false, "created": 1492468078.0, "created_utc": 1492439278.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvg0o", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "TaishokuMayaki", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "EvE online was produced using Python, causes some problems these days. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;EvE online was produced using Python, causes some problems these days. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbvg0o", "score_hidden": false, "stickied": false, "created": 1492362730.0, "created_utc": 1492333930.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbv3fo", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "gandalfx", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "To put the things that others have mentioned in a more abstract way: The logic that needs to be *efficient* in video games is a lot more complex than that in \"big data\". Big data is just a buzzword but it mostly refers to \"a lot of the same\". So usually you just need a handful of things that need to be efficient (typically old problems like search etc.) while video games require complex logic to simulate big worlds with complex interactions, 3D graphics etc. in real time. And since you need to optimize so many things in games you usually end up writing the whole thing in C/C++.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;To put the things that others have mentioned in a more abstract way: The logic that needs to be &lt;em&gt;efficient&lt;/em&gt; in video games is a lot more complex than that in &amp;quot;big data&amp;quot;. Big data is just a buzzword but it mostly refers to &amp;quot;a lot of the same&amp;quot;. So usually you just need a handful of things that need to be efficient (typically old problems like search etc.) while video games require complex logic to simulate big worlds with complex interactions, 3D graphics etc. in real time. And since you need to optimize so many things in games you usually end up writing the whole thing in C/C++.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbv3fo", "score_hidden": false, "stickied": false, "created": 1492361551.0, "created_utc": 1492332751.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgccf5x", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "BARDLER", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is used a ton in the game industry, just not at all in the shipped code. Almost all art pipelines are held together by python tools. Asset data bases, build scripts, engine scripts/tools, etc are usually driven by python.\n\nThe reason why it's not used in game code is because every millisecond counts and python can't compete with the speed C++ gives you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is used a ton in the game industry, just not at all in the shipped code. Almost all art pipelines are held together by python tools. Asset data bases, build scripts, engine scripts/tools, etc are usually driven by python.&lt;/p&gt;\n\n&lt;p&gt;The reason why it&amp;#39;s not used in game code is because every millisecond counts and python can&amp;#39;t compete with the speed C++ gives you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgccf5x", "score_hidden": false, "stickied": false, "created": 1492394628.0, "created_utc": 1492365828.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgc2nz1", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "gandalfx", "parent_id": "t1_dgbv1fk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As always the world isn't black and white but a grey-ish muddy place.\n\nYou're correct that choosing better logic is the first and most powerful kind of optimization. I don't doubt that there are many instances where this principle is being neglected (reminds me of a horribly inefficient zoom blur algorithm in GIMP, implement in C).\n\nHowever there can be no doubt that there are parts in any application that need to be optimized down to the bare metal. The important thing is to realize that these parts can be solved by a few very distinct, low-level algorithms which have already been implemented as part of a built-in function or language construct.\n\nCase in point: Sorting. You mentioned optimizing a bad sorting algorithm in Python. The correct way of optimizing a search algorithm in Python isn't using QuickSort/RadixSort/Whatever, but rather not to implement it at all and use Python's native sorting facilities instead. Those are of course implemented in C and use good algorithm(s). Same goes for search in all kinds of container types. If you implement any of that yourself you're doing it wrong (unless of course it's done as a learning experience and not used in production). Meanwhile if Python's dict was implemented in Python rather than C it would be unacceptably slow, and not because of a bad algorithm but because of actual language overhead.\n\nSo basically Python and its standard library has already solved *many* problems that need to be relentlessly optimized. But of course not all of them. You still have to figure out what to use and how to stick it together in an efficient and maintainable way. That's where the complexity of your application comes into play. A backend for a web app usually has a fairly straight forward structure with uniform data. That's easy to handle. \"Big data\" also often falls into that category \u2013 having a lot of the same isn't all that difficult to reason about.\n\nVideo games on the other hand tend to come with a lot of complex logic that hasn't yet been built into native logic. For instance Python doesn't have a simple library that allows you to do fast 3D rendering (on the GPU or CPU). There's numpy and other scientific libraries but I don't think there's anything that offers native performance. And you do need that for the parts that do rendering.", "edited": 1492416288.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As always the world isn&amp;#39;t black and white but a grey-ish muddy place.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re correct that choosing better logic is the first and most powerful kind of optimization. I don&amp;#39;t doubt that there are many instances where this principle is being neglected (reminds me of a horribly inefficient zoom blur algorithm in GIMP, implement in C).&lt;/p&gt;\n\n&lt;p&gt;However there can be no doubt that there are parts in any application that need to be optimized down to the bare metal. The important thing is to realize that these parts can be solved by a few very distinct, low-level algorithms which have already been implemented as part of a built-in function or language construct.&lt;/p&gt;\n\n&lt;p&gt;Case in point: Sorting. You mentioned optimizing a bad sorting algorithm in Python. The correct way of optimizing a search algorithm in Python isn&amp;#39;t using QuickSort/RadixSort/Whatever, but rather not to implement it at all and use Python&amp;#39;s native sorting facilities instead. Those are of course implemented in C and use good algorithm(s). Same goes for search in all kinds of container types. If you implement any of that yourself you&amp;#39;re doing it wrong (unless of course it&amp;#39;s done as a learning experience and not used in production). Meanwhile if Python&amp;#39;s dict was implemented in Python rather than C it would be unacceptably slow, and not because of a bad algorithm but because of actual language overhead.&lt;/p&gt;\n\n&lt;p&gt;So basically Python and its standard library has already solved &lt;em&gt;many&lt;/em&gt; problems that need to be relentlessly optimized. But of course not all of them. You still have to figure out what to use and how to stick it together in an efficient and maintainable way. That&amp;#39;s where the complexity of your application comes into play. A backend for a web app usually has a fairly straight forward structure with uniform data. That&amp;#39;s easy to handle. &amp;quot;Big data&amp;quot; also often falls into that category \u2013 having a lot of the same isn&amp;#39;t all that difficult to reason about.&lt;/p&gt;\n\n&lt;p&gt;Video games on the other hand tend to come with a lot of complex logic that hasn&amp;#39;t yet been built into native logic. For instance Python doesn&amp;#39;t have a simple library that allows you to do fast 3D rendering (on the GPU or CPU). There&amp;#39;s numpy and other scientific libraries but I don&amp;#39;t think there&amp;#39;s anything that offers native performance. And you do need that for the parts that do rendering.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc2nz1", "score_hidden": false, "stickied": false, "created": 1492381247.0, "created_utc": 1492352447.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgc1chs", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "murtaza64", "parent_id": "t1_dgbv1fk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Wouldn't the GPU still be executing programs that need to be optimized as much as possible? I suppose most game devs don't have to write their own engine, but studios that are making an engine for a game would write in C(++) or something \"closer to the metal\" at least for the engine parts right?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wouldn&amp;#39;t the GPU still be executing programs that need to be optimized as much as possible? I suppose most game devs don&amp;#39;t have to write their own engine, but studios that are making an engine for a game would write in C(++) or something &amp;quot;closer to the metal&amp;quot; at least for the engine parts right?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc1chs", "score_hidden": false, "stickied": false, "created": 1492378998.0, "created_utc": 1492350198.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgcpgfj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "IskaneOnReddit", "parent_id": "t1_dgbv1fk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The CPU still has a lot of work to do in modern games. In some games, you can get a 4 core CPU to run at 100% load and have it use over 4GB of RAM. Imagine the game being implemented in Python, where it would use 5x more memory and be 100x slower.\n\nYou can forget about things like custom allocators, struct of arrays, vectorization, custom efficient data structures... unless you implement them em... in C and call them from Python.", "edited": 1492383408.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The CPU still has a lot of work to do in modern games. In some games, you can get a 4 core CPU to run at 100% load and have it use over 4GB of RAM. Imagine the game being implemented in Python, where it would use 5x more memory and be 100x slower.&lt;/p&gt;\n\n&lt;p&gt;You can forget about things like custom allocators, struct of arrays, vectorization, custom efficient data structures... unless you implement them em... in C and call them from Python.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcpgfj", "score_hidden": false, "stickied": false, "created": 1492411857.0, "created_utc": 1492383057.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbv1fk", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "arcticfox", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm going to give you an answer that many people will disagree with.  What I say is based on heaps of experience writing in machine and assembly code on small CPUs in the 80s, and running high performance clusters over the last 15 years. \n\nMost people think that in order to write code that executes quickly (as is required in order to render graphics in video games), programmers have to get \"closer to the metal\", which just means writing code that is as close as possible to the machine code that will run on the processor.  Indeed, there are still some areas where one has to write code like this to get the kinds of performance that are required for the problem.  But generally speaking, this really isn't true anymore for a variety of reasons.\n\nOne of my favourite ways that I demonstrate this to students is to give them some code and tell them to optimise it.  I show them how slowly it performs and then I tell them what performance goal they have to achieve.  I run a program that I've written that demonstrates that the goal is achievable.  \n\nThey apply as much optimisation that they can to the code (they'll rewrite it in assembly, for example) only to discover that they cannot come anywhere close to my performance requirements.  After they have struggled with it for a while, I inform them that the algorithm that I've given them (usually bubble sort, a very poor algorithm) is so bad that it simply cannot be optimised.  The only way that they can achieve the desired goal is to throw the whole algorithm away and use a better one.  \n\nAnd it is here where programming language choice comes to play.  Programming closer to the metal makes it much more difficult to use better algorithms.  The improvements that one gets from using assembly or C/C++ is generally not anywhere near as good as implementing algorithms with better time complexity.  Typically, it's a lot easier to write better algorithms in higher level languages.  And, as someone who has done a lot of high performance computing on clusters, a big part of optimisation becomes figuring out how to break your problem down in to pieces so that dependency between the pieces is minimised (i.e. fewer dependencies between modules means that they are more likely to run in parallel, which means that I can throw more computing hardware at the problem as opposed to having to run faster and faster machines).  \n\nIn terms of your question, why is python not used in game programming.  Most of the real work in games is no longer done on the host CPU, but rather on the GPU hardware.  There is really no reason why higher level languages couldn't be used.  The real reason that most people still use C/C++ is mostly because the people in the industry simply don't want to change.  They have convinced themselves that they need C/C++ because of speed, but that's really not the case in most instances.  Yes, there are some places where C/C++ or even assembly might be required, but those situations are a lot fewer than most people think/want to admit to themselves.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m going to give you an answer that many people will disagree with.  What I say is based on heaps of experience writing in machine and assembly code on small CPUs in the 80s, and running high performance clusters over the last 15 years. &lt;/p&gt;\n\n&lt;p&gt;Most people think that in order to write code that executes quickly (as is required in order to render graphics in video games), programmers have to get &amp;quot;closer to the metal&amp;quot;, which just means writing code that is as close as possible to the machine code that will run on the processor.  Indeed, there are still some areas where one has to write code like this to get the kinds of performance that are required for the problem.  But generally speaking, this really isn&amp;#39;t true anymore for a variety of reasons.&lt;/p&gt;\n\n&lt;p&gt;One of my favourite ways that I demonstrate this to students is to give them some code and tell them to optimise it.  I show them how slowly it performs and then I tell them what performance goal they have to achieve.  I run a program that I&amp;#39;ve written that demonstrates that the goal is achievable.  &lt;/p&gt;\n\n&lt;p&gt;They apply as much optimisation that they can to the code (they&amp;#39;ll rewrite it in assembly, for example) only to discover that they cannot come anywhere close to my performance requirements.  After they have struggled with it for a while, I inform them that the algorithm that I&amp;#39;ve given them (usually bubble sort, a very poor algorithm) is so bad that it simply cannot be optimised.  The only way that they can achieve the desired goal is to throw the whole algorithm away and use a better one.  &lt;/p&gt;\n\n&lt;p&gt;And it is here where programming language choice comes to play.  Programming closer to the metal makes it much more difficult to use better algorithms.  The improvements that one gets from using assembly or C/C++ is generally not anywhere near as good as implementing algorithms with better time complexity.  Typically, it&amp;#39;s a lot easier to write better algorithms in higher level languages.  And, as someone who has done a lot of high performance computing on clusters, a big part of optimisation becomes figuring out how to break your problem down in to pieces so that dependency between the pieces is minimised (i.e. fewer dependencies between modules means that they are more likely to run in parallel, which means that I can throw more computing hardware at the problem as opposed to having to run faster and faster machines).  &lt;/p&gt;\n\n&lt;p&gt;In terms of your question, why is python not used in game programming.  Most of the real work in games is no longer done on the host CPU, but rather on the GPU hardware.  There is really no reason why higher level languages couldn&amp;#39;t be used.  The real reason that most people still use C/C++ is mostly because the people in the industry simply don&amp;#39;t want to change.  They have convinced themselves that they need C/C++ because of speed, but that&amp;#39;s really not the case in most instances.  Yes, there are some places where C/C++ or even assembly might be required, but those situations are a lot fewer than most people think/want to admit to themselves.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbv1fk", "score_hidden": false, "stickied": false, "created": 1492361373.0, "created_utc": 1492332573.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgcnehy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "graingert", "parent_id": "t1_dgcl5e2", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I thought it was also a component in the client, or is that lua? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I thought it was also a component in the client, or is that lua? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcnehy", "score_hidden": false, "stickied": false, "created": 1492409063.0, "created_utc": 1492380263.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcl5e2", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "ZedOud", "parent_id": "t1_dgbw0m4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "However, that's for the backend, where python's safety as a higher-level language is important. It's not in the player's game client, where oddly enough bugs and inconsistencies are not as mission critical issues as performance.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;However, that&amp;#39;s for the backend, where python&amp;#39;s safety as a higher-level language is important. It&amp;#39;s not in the player&amp;#39;s game client, where oddly enough bugs and inconsistencies are not as mission critical issues as performance.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcl5e2", "score_hidden": false, "stickied": false, "created": 1492406110.0, "created_utc": 1492377310.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbw0m4", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "graingert", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is great component in games, see EVE online", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is great component in games, see EVE online&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbw0m4", "score_hidden": false, "stickied": false, "created": 1492364710.0, "created_utc": 1492335910.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbxw1y", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "desmoulinmichel", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is just a fantastic language to manipulate data and a wrapper of choice for C/C++ code.\n\nBig data needs a few expressive calls from python to manipulate complexe C/C++ code.\n\nVideo games need:\n\n- repeated call in Python (way more often so more expensive)\n- embededing python in the engine (other languages are easier to embed such as lua)\n\nAll in all Python is not a bad languages for video games, but it's a way better languages for big data.\n\nThe reason Python did not succeed in video games is more cultural.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is just a fantastic language to manipulate data and a wrapper of choice for C/C++ code.&lt;/p&gt;\n\n&lt;p&gt;Big data needs a few expressive calls from python to manipulate complexe C/C++ code.&lt;/p&gt;\n\n&lt;p&gt;Video games need:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;repeated call in Python (way more often so more expensive)&lt;/li&gt;\n&lt;li&gt;embededing python in the engine (other languages are easier to embed such as lua)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All in all Python is not a bad languages for video games, but it&amp;#39;s a way better languages for big data.&lt;/p&gt;\n\n&lt;p&gt;The reason Python did not succeed in video games is more cultural.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbxw1y", "score_hidden": false, "stickied": false, "created": 1492370982.0, "created_utc": 1492342182.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgcjoty", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "dsadaOG", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Mount &amp; Blade uses Python, it handles battles with ~1000 soldiers easily.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mount &amp;amp; Blade uses Python, it handles battles with ~1000 soldiers easily.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgcjoty", "score_hidden": false, "stickied": false, "created": 1492404201.0, "created_utc": 1492375401.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgck1b3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Raijinili", "parent_id": "t1_dgc3ndr", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Numpy and Scipy use a lot of Fortran under the hood, by the way. Fortran optimizers can make some more assumptions than C optimizers, and they use a [Fortran linear algebra library](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Numpy and Scipy use a lot of Fortran under the hood, by the way. Fortran optimizers can make some more assumptions than C optimizers, and they use a &lt;a href=\"https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms\"&gt;Fortran linear algebra library&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgck1b3", "score_hidden": false, "stickied": false, "created": 1492404642.0, "created_utc": 1492375842.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc3ndr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "log_2", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Python is slow, but python's libraries for big data are written in c++. If your data science program takes an extra 200ms to run because of the time spent running python code to call the relevant c++ code, you won't be able see the difference. But in a game 200ms drops it to a crawl since games are meant to be executed 60 times a second. This explains why python isn't used for games. Why is c++ not used for data science? Because c++11 was late to the party.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is slow, but python&amp;#39;s libraries for big data are written in c++. If your data science program takes an extra 200ms to run because of the time spent running python code to call the relevant c++ code, you won&amp;#39;t be able see the difference. But in a game 200ms drops it to a crawl since games are meant to be executed 60 times a second. This explains why python isn&amp;#39;t used for games. Why is c++ not used for data science? Because c++11 was late to the party.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc3ndr", "score_hidden": false, "stickied": false, "created": 1492382769.0, "created_utc": 1492353969.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgdfsw5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "evgen", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "It is also worth noting the types of games that Python is considered inadequate for; FPS games and similar game types that involve a lot of concurrency are where Python falls down.  Python's concurrency story sucks, and while newer additions like asyncio move it from the 'painfully awful' to 'almost mediocre' category it will never be the first choice for systems where there are lots of things happening at the same time that need some coordination.  The counter-example provided of EVE is noteworthy for using Stackless Python and not standard CPython because of the poor concurrency story in the latter, and asyncio opted for the Twisted version of concurrency (i.e. only really good for network concurrency) rather than the greenlet/actor approach so this situation is not going to change in the future.\n\nBig Data and similar tasks fall into the embarrassingly parallel category for the most part and Python is a great glue language for stitching together data pipelines where low-level Fortran or C libraries do the heavy lifting and Python's benefits at churning out quick and effective prototypes that are usually good enough to accomplish the task really shines in terms of language features.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is also worth noting the types of games that Python is considered inadequate for; FPS games and similar game types that involve a lot of concurrency are where Python falls down.  Python&amp;#39;s concurrency story sucks, and while newer additions like asyncio move it from the &amp;#39;painfully awful&amp;#39; to &amp;#39;almost mediocre&amp;#39; category it will never be the first choice for systems where there are lots of things happening at the same time that need some coordination.  The counter-example provided of EVE is noteworthy for using Stackless Python and not standard CPython because of the poor concurrency story in the latter, and asyncio opted for the Twisted version of concurrency (i.e. only really good for network concurrency) rather than the greenlet/actor approach so this situation is not going to change in the future.&lt;/p&gt;\n\n&lt;p&gt;Big Data and similar tasks fall into the embarrassingly parallel category for the most part and Python is a great glue language for stitching together data pipelines where low-level Fortran or C libraries do the heavy lifting and Python&amp;#39;s benefits at churning out quick and effective prototypes that are usually good enough to accomplish the task really shines in terms of language features.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdfsw5", "score_hidden": false, "stickied": false, "created": 1492462349.0, "created_utc": 1492433549.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgd5yu7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TheSirion", "parent_id": "t1_dgbqhhj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How does it work?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How does it work?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgd5yu7", "score_hidden": false, "stickied": false, "created": 1492436062.0, "created_utc": 1492407262.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbqhhj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Boba-Black-Sheep", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Cython is a hell of a drug.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cython is a hell of a drug.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbqhhj", "score_hidden": false, "stickied": false, "created": 1492349348.0, "created_utc": 1492320548.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgbuwli", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "alchemist", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Others have said it, but more concisely: the heavy lifting for the data work is done by C/C++/Fortran and wrapped by Python. For many scientific tasks, there\u200b is very little wrapper/glue and a bunch of simple manipulations on a LOT of data.\n\nIn games, things are more complex, so you can't just wrap one big task and get a 90% speedup like you can with data.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Others have said it, but more concisely: the heavy lifting for the data work is done by C/C++/Fortran and wrapped by Python. For many scientific tasks, there\u200b is very little wrapper/glue and a bunch of simple manipulations on a LOT of data.&lt;/p&gt;\n\n&lt;p&gt;In games, things are more complex, so you can&amp;#39;t just wrap one big task and get a 90% speedup like you can with data.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbuwli", "score_hidden": false, "stickied": false, "created": 1492360933.0, "created_utc": 1492332133.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65n91b", "likes": null, "replies": "", "user_reports": [], "id": "dgdsdep", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PaluMacil", "parent_id": "t3_65n91b", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I might be repeating other answers a little, but in a quick skim, I think I'm saying something a bit different...\n\n1. Most data in Python is done in C. Python is an amazing glue language, so it can easily hand C code a problem in pieces and deal with constructing an easy to use api for you to write Python code against. It's easy to hand a big chunk of data to a C component and wait for the answer in Python code (and maybe repeat a few times for various types of matrix math or other calculations).\n\n2. Games can't deal with getting a problem, making a lot of calculations, and handing back a lot of frames because you need to be continually sending frames to be viewed by the user. Other answers his on this well, and a term you might know already that I often use to describe this is \"latency\".\n\n3. You could, in theory plan out some very specialized C code for your game and then make a Python wrapper to make it easy to work with, but you'd already need a lot of your logic in the C code, so it might not actually simplify development.\n\n4. Once someone goes through the work of writing a framework that handles games well in something like C#, Java, or Python, you've spent a ton of money to tune everything nicely to com. You see more non-C frameworks in C# (Unity) and Java because there are enough enterprise companies with investments in these languages for some of this to be possible, but it's the same idea--harder to get the same latency.\n\n5. You do see Python used in some AAA games in spots where it is most powerful. For example, one or more Civilization games used it for scripting of scenarios and other mod stuff. This is because of how easy it is to write a lot of Python functionality in less time than other languages. For the parts of the game that are the core and graphics, it did not use Python. You probably could determine this to be the case in a lot of other AAA games if you had inside knowledge. There would be no way to know for most proprietary software. My company is mostly C# but all our dev tooling is Python. Even if we distributed a product's code, nobody would have a way to know it was nursed by a loving Python robot mother. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I might be repeating other answers a little, but in a quick skim, I think I&amp;#39;m saying something a bit different...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Most data in Python is done in C. Python is an amazing glue language, so it can easily hand C code a problem in pieces and deal with constructing an easy to use api for you to write Python code against. It&amp;#39;s easy to hand a big chunk of data to a C component and wait for the answer in Python code (and maybe repeat a few times for various types of matrix math or other calculations).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Games can&amp;#39;t deal with getting a problem, making a lot of calculations, and handing back a lot of frames because you need to be continually sending frames to be viewed by the user. Other answers his on this well, and a term you might know already that I often use to describe this is &amp;quot;latency&amp;quot;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You could, in theory plan out some very specialized C code for your game and then make a Python wrapper to make it easy to work with, but you&amp;#39;d already need a lot of your logic in the C code, so it might not actually simplify development.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Once someone goes through the work of writing a framework that handles games well in something like C#, Java, or Python, you&amp;#39;ve spent a ton of money to tune everything nicely to com. You see more non-C frameworks in C# (Unity) and Java because there are enough enterprise companies with investments in these languages for some of this to be possible, but it&amp;#39;s the same idea--harder to get the same latency.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You do see Python used in some AAA games in spots where it is most powerful. For example, one or more Civilization games used it for scripting of scenarios and other mod stuff. This is because of how easy it is to write a lot of Python functionality in less time than other languages. For the parts of the game that are the core and graphics, it did not use Python. You probably could determine this to be the case in a lot of other AAA games if you had inside knowledge. There would be no way to know for most proprietary software. My company is mostly C# but all our dev tooling is Python. Even if we distributed a product&amp;#39;s code, nobody would have a way to know it was nursed by a loving Python robot mother. :)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgdsdep", "score_hidden": false, "stickied": false, "created": 1492478428.0, "created_utc": 1492449628.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]