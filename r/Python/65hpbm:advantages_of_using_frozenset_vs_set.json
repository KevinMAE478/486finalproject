[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Can someone please give an example of when I would use a frozenset? Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Can someone please give an example of when I would use a frozenset? Thanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65hpbm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 8, "report_reasons": null, "author": "_alphamaximus_", "saved": false, "mod_reports": [], "name": "t3_65hpbm", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "self.Python", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65hpbm/advantages_of_using_frozenset_vs_set/", "num_reports": null, "locked": false, "stickied": false, "created": 1492265508.0, "url": "https://www.reddit.com/r/Python/comments/65hpbm/advantages_of_using_frozenset_vs_set/", "author_flair_text": null, "quarantine": false, "title": "Advantages of using frozenset vs set?", "created_utc": 1492236708.0, "distinguished": null, "media": null, "upvote_ratio": 0.85, "num_comments": 9, "visited": false, "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": "", "user_reports": [], "id": "dgagsjv", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "qwerty1793", "parent_id": "t1_dgafitp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Or even as an element of another (frozen)set.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or even as an element of another (frozen)set.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgagsjv", "score_hidden": false, "stickied": false, "created": 1492274667.0, "created_utc": 1492245867.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": "", "user_reports": [], "id": "dgajdmk", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "call_me_cookie", "parent_id": "t1_dgafitp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I did not know this. I had always just used sorted tuples when i needed this. \n\n+1", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I did not know this. I had always just used sorted tuples when i needed this. &lt;/p&gt;\n\n&lt;p&gt;+1&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgajdmk", "score_hidden": false, "stickied": false, "created": 1492282909.0, "created_utc": 1492254109.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgafitp", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "DwoaC", "parent_id": "t3_65hpbm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "frozenset is hashable so you can use it as a key in a dictionary.  Its surprising how useful that can be. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;frozenset is hashable so you can use it as a key in a dictionary.  Its surprising how useful that can be. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgafitp", "score_hidden": false, "stickied": false, "created": 1492270959.0, "created_utc": 1492242159.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": "", "user_reports": [], "id": "dgc2fgj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "murtaza64", "parent_id": "t1_dgbbe1d", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How do you lookup an attribute of a named tuple by name programmatically?\nEdit: got it. getattr(nt, 'attr')", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How do you lookup an attribute of a named tuple by name programmatically?\nEdit: got it. getattr(nt, &amp;#39;attr&amp;#39;)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc2fgj", "score_hidden": false, "stickied": false, "created": 1492380869.0, "created_utc": 1492352069.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbbe1d", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "BlckKnght", "parent_id": "t1_dgb8pz9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm pretty sure the devs have said that they'd consider adding one if there was a concrete need for it. Unlike `frozenset`, that need has not yet appeared in real-world code, so they've not added it to the language.\n\nI suspect most places you could use a theoretical `frozendict` you can instead use a `namedtuple` just as well (just with attribute lookup syntax instead of indexing).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m pretty sure the devs have said that they&amp;#39;d consider adding one if there was a concrete need for it. Unlike &lt;code&gt;frozenset&lt;/code&gt;, that need has not yet appeared in real-world code, so they&amp;#39;ve not added it to the language.&lt;/p&gt;\n\n&lt;p&gt;I suspect most places you could use a theoretical &lt;code&gt;frozendict&lt;/code&gt; you can instead use a &lt;code&gt;namedtuple&lt;/code&gt; just as well (just with attribute lookup syntax instead of indexing).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbbe1d", "score_hidden": false, "stickied": false, "created": 1492326344.0, "created_utc": 1492297544.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": "", "user_reports": [], "id": "dgc2stu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "breamoreboy", "parent_id": "t1_dgbcbem", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I do not believe that there is enough call for this structure to justify core developers' time writing the code, docs etc.  You can always raise the issue on python dev or python ideas but I suspect that the answer would be the same. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I do not believe that there is enough call for this structure to justify core developers&amp;#39; time writing the code, docs etc.  You can always raise the issue on python dev or python ideas but I suspect that the answer would be the same. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgc2stu", "score_hidden": false, "stickied": false, "created": 1492381454.0, "created_utc": 1492352654.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbcbem", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "wting", "parent_id": "t1_dgb8pz9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "This was proposed as [PEP 416](https://www.python.org/dev/peps/pep-0416/). A list of rejection reasons are listed, which I heavily disagree with.\n\n&gt;According to Raymond Hettinger, use of frozendict is low. Those that do use it tend to use it as a hint only, such as declaring global or class-level \"constants\": they aren't really immutable, since anyone can still assign to the name.\n\n&gt;There are existing idioms for avoiding mutable default values.\n\n&gt;Multiple threads can agree by convention not to mutate a shared dict, there's no great need for enforcement. Multiple processes can't share dicts.\n\nI feel Raymond doesn't get why immutable data structures are useful to application programmers, even if you can reassign the variable. Also pushing the cognitive burden on the programmer by saying there are existing idioms or conventions misses the point. It's like asking people to stop writing race conditions by writing better code instead of providing guarantees or better tools/data structures.\n\nThis was proposed in 2012, where only Haskell was pushing for immutable data structures (among many other unique principles). Now with the popularity of Clojure, Kafka, Redux, or other tools espousing the benefits of immutability it's becoming harder to ignore. ", "edited": 1492299132.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This was proposed as &lt;a href=\"https://www.python.org/dev/peps/pep-0416/\"&gt;PEP 416&lt;/a&gt;. A list of rejection reasons are listed, which I heavily disagree with.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;According to Raymond Hettinger, use of frozendict is low. Those that do use it tend to use it as a hint only, such as declaring global or class-level &amp;quot;constants&amp;quot;: they aren&amp;#39;t really immutable, since anyone can still assign to the name.&lt;/p&gt;\n\n&lt;p&gt;There are existing idioms for avoiding mutable default values.&lt;/p&gt;\n\n&lt;p&gt;Multiple threads can agree by convention not to mutate a shared dict, there&amp;#39;s no great need for enforcement. Multiple processes can&amp;#39;t share dicts.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I feel Raymond doesn&amp;#39;t get why immutable data structures are useful to application programmers, even if you can reassign the variable. Also pushing the cognitive burden on the programmer by saying there are existing idioms or conventions misses the point. It&amp;#39;s like asking people to stop writing race conditions by writing better code instead of providing guarantees or better tools/data structures.&lt;/p&gt;\n\n&lt;p&gt;This was proposed in 2012, where only Haskell was pushing for immutable data structures (among many other unique principles). Now with the popularity of Clojure, Kafka, Redux, or other tools espousing the benefits of immutability it&amp;#39;s becoming harder to ignore. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbcbem", "score_hidden": false, "stickied": false, "created": 1492327690.0, "created_utc": 1492298890.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65hpbm", "likes": null, "replies": "", "user_reports": [], "id": "dgbzahl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pmart123", "parent_id": "t1_dgb8pz9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You can create an immutable mapping now with MappingProxyType, but I agree with other comments that an actual frozendict class would be more useful.\n    \n    from types import MappingProxyType\n    DATA_MAPPER = MappingProxyType({\n        VENDOR_FIELD1: MY_FIELD1,\n        VENDOR_FIELD2: MY_FIELD2\n    })\n    \n    def convert_record(record, mapper=DATA_MAPPER): pass\n    \n\nGenerally, I find them useful for defining a default mapping like above, but allowing the flexibility to use a different mapping in a function call. ", "edited": 1492346705.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can create an immutable mapping now with MappingProxyType, but I agree with other comments that an actual frozendict class would be more useful.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from types import MappingProxyType\nDATA_MAPPER = MappingProxyType({\n    VENDOR_FIELD1: MY_FIELD1,\n    VENDOR_FIELD2: MY_FIELD2\n})\n\ndef convert_record(record, mapper=DATA_MAPPER): pass\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Generally, I find them useful for defining a default mapping like above, but allowing the flexibility to use a different mapping in a function call. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgbzahl", "score_hidden": false, "stickied": false, "created": 1492374744.0, "created_utc": 1492345944.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb8pz9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "HalcyonAbraham", "parent_id": "t3_65hpbm", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "why is there no frozendict?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;why is there no frozendict?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgb8pz9", "score_hidden": false, "stickied": false, "created": 1492322475.0, "created_utc": 1492293675.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]