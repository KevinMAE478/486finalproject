[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65b20l", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 13, "report_reasons": null, "author": "CODESIGN2", "saved": false, "mod_reports": [], "name": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "approved_by": null, "over_18": false, "domain": "gist.github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/Python/comments/65b20l/python_switch_with_optional_default/", "num_reports": null, "locked": false, "stickied": false, "created": 1492180835.0, "url": "https://gist.github.com/Lewiscowles1986/f5f10d75507567b78a4a85c35c710770", "author_flair_text": null, "quarantine": false, "title": "Python switch with optional default", "created_utc": 1492152035.0, "distinguished": null, "media": null, "upvote_ratio": 0.64, "num_comments": 37, "visited": false, "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg97lnp", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cantremembermypasswd", "parent_id": "t1_dg93uwp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I personally do feel it is a significant loss. A switch statement makes it's clear that everything is for a single argument comparison, whereas `if else` blocks do not have to follow that. \n\nSwitch statements could also allow for flow through multiple cases (see my other example in thread), whereas once a single block in an `if else` matches, it only goes down that path. \n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally do feel it is a significant loss. A switch statement makes it&amp;#39;s clear that everything is for a single argument comparison, whereas &lt;code&gt;if else&lt;/code&gt; blocks do not have to follow that. &lt;/p&gt;\n\n&lt;p&gt;Switch statements could also allow for flow through multiple cases (see my other example in thread), whereas once a single block in an &lt;code&gt;if else&lt;/code&gt; matches, it only goes down that path. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg97lnp", "score_hidden": false, "stickied": false, "created": 1492209689.0, "created_utc": 1492180889.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg974w2", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Garcon_sauvage", "parent_id": "t1_dg93uwp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I've been writing python for months and never even noticed it was missing until now", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been writing python for months and never even noticed it was missing until now&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg974w2", "score_hidden": false, "stickied": false, "created": 1492209078.0, "created_utc": 1492180278.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg9if4h", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9i66e", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "If I'm honest, they can often be mis-applied or mis-used and are nowhere near as useful or robust as `if` `elif` `else`", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If I&amp;#39;m honest, they can often be mis-applied or mis-used and are nowhere near as useful or robust as &lt;code&gt;if&lt;/code&gt; &lt;code&gt;elif&lt;/code&gt; &lt;code&gt;else&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9if4h", "score_hidden": false, "stickied": false, "created": 1492222268.0, "created_utc": 1492193468.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9i66e", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "FearlessFreep", "parent_id": "t1_dg96j3u", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "&gt; As a language feature I've always missed it\n\nAlthough I started with BASIC, then 6502 ASM, then Ada for my first professional work, I really came into my own as a developer with Smalltalk.  Smalltalk doesn't have a switch/case structure either.  I was so used to it that when I switched to Python, I think I had been programming Python professionally for a few years before I even realized Python _didn't_ have a switch.  It just was never part of my problem solving thinking", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;As a language feature I&amp;#39;ve always missed it&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Although I started with BASIC, then 6502 ASM, then Ada for my first professional work, I really came into my own as a developer with Smalltalk.  Smalltalk doesn&amp;#39;t have a switch/case structure either.  I was so used to it that when I switched to Python, I think I had been programming Python professionally for a few years before I even realized Python &lt;em&gt;didn&amp;#39;t&lt;/em&gt; have a switch.  It just was never part of my problem solving thinking&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9i66e", "score_hidden": false, "stickied": false, "created": 1492221972.0, "created_utc": 1492193172.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg96j3u", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg93uwp", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As a language feature I've always missed it; but that said this doesn't hit my (likely unreasonable) mark for how it should work in python. I'd like the case keyword, but with the ability to provide lists or tuples rather than cascading by missing break, and maybe I'd miss modifying vars from the parent block (IDK).\n\nTo quote myself \n\n&gt; TBH I wouldn't have thought of switch in python without his video, ***although I probably won't be using this, it was just a bit of fun.***", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As a language feature I&amp;#39;ve always missed it; but that said this doesn&amp;#39;t hit my (likely unreasonable) mark for how it should work in python. I&amp;#39;d like the case keyword, but with the ability to provide lists or tuples rather than cascading by missing break, and maybe I&amp;#39;d miss modifying vars from the parent block (IDK).&lt;/p&gt;\n\n&lt;p&gt;To quote myself &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;TBH I wouldn&amp;#39;t have thought of switch in python without his video, &lt;strong&gt;&lt;em&gt;although I probably won&amp;#39;t be using this, it was just a bit of fun.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg96j3u", "score_hidden": false, "stickied": false, "created": 1492208274.0, "created_utc": 1492179474.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg93uwp", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "jwink3101", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That looks interesting, but is it really needed?\n\nI feel like I see tons of posts around how to emulate a switch statement. I get that it is a nice construct, but is it *really* a major loss? Other than maybe defining a temp variable, if a series of `if`, `elif`,`else` lines that much worse?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That looks interesting, but is it really needed?&lt;/p&gt;\n\n&lt;p&gt;I feel like I see tons of posts around how to emulate a switch statement. I get that it is a nice construct, but is it &lt;em&gt;really&lt;/em&gt; a major loss? Other than maybe defining a temp variable, if a series of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;,&lt;code&gt;else&lt;/code&gt; lines that much worse?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg93uwp", "score_hidden": false, "stickied": false, "created": 1492204296.0, "created_utc": 1492175496.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgagytz", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kungtotte", "parent_id": "t1_dgafopi", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Everything follows the same object/reference semantics, that's why mutable values trip people up in functions. `None` isn't special in the way it's referenced, it's special because it's a singleton (i.e. `None` is the same `None` anywhere in your program). The reason we use `None` in this way is because of the semantics of it, we could just as well have written the function like\n\n    def foo(bar=0):\n        if bar == 0:\n            bar = {}\n\nAnd it would behave just the same, but by explicitly putting `None` there we clarify the behaviour we're actually after.\n\nTo clarify what I mean by everything being passed the same way, check this code out:\n\n    a = 10\n    b = \"hello\"\n    c = []\n    d = None\n    \n    def foo(e, f, g, h):\n      print(id(e))\n      print(id(f))\n      print(id(g))\n      print(id(h))\n      \n    print(\"Outside foo()\")\n    for v in [a, b, c, d]:\n      print(id(v))\n    \n    print(\"In foo()\")\n    foo(a, b, c, d)\n\nIt will output this:\n\n   \n    Outside foo()\n    139683459013984\n    139683459014048\n    139683400687304\n    139683458696784\n    In foo()\n    139683459013984\n    139683459014048\n    139683400687304\n    139683458696784\n \nSee how the object ids are the same? You're passing references to them when you call your function, so the function-local variables are referencing the outside variables. The tricky part is that a reference to a mutable value like a dict or a list will *modify the dict/list that is referenced* by that variable. It's a question of mutable vs. immutable, rather than pass-by-value vs pass-by-reference.\n\nAnd the reason why this catches people out with mutable default values is that the mutable default value is created once as Python interprets the function, and then that same mutable value gets new references assigned to it each time the function is called without that argument. The same way that `b = some_list` will make `b` and `some_list` references to the same list rather than copying the list.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Everything follows the same object/reference semantics, that&amp;#39;s why mutable values trip people up in functions. &lt;code&gt;None&lt;/code&gt; isn&amp;#39;t special in the way it&amp;#39;s referenced, it&amp;#39;s special because it&amp;#39;s a singleton (i.e. &lt;code&gt;None&lt;/code&gt; is the same &lt;code&gt;None&lt;/code&gt; anywhere in your program). The reason we use &lt;code&gt;None&lt;/code&gt; in this way is because of the semantics of it, we could just as well have written the function like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def foo(bar=0):\n    if bar == 0:\n        bar = {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it would behave just the same, but by explicitly putting &lt;code&gt;None&lt;/code&gt; there we clarify the behaviour we&amp;#39;re actually after.&lt;/p&gt;\n\n&lt;p&gt;To clarify what I mean by everything being passed the same way, check this code out:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a = 10\nb = &amp;quot;hello&amp;quot;\nc = []\nd = None\n\ndef foo(e, f, g, h):\n  print(id(e))\n  print(id(f))\n  print(id(g))\n  print(id(h))\n\nprint(&amp;quot;Outside foo()&amp;quot;)\nfor v in [a, b, c, d]:\n  print(id(v))\n\nprint(&amp;quot;In foo()&amp;quot;)\nfoo(a, b, c, d)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will output this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Outside foo()\n139683459013984\n139683459014048\n139683400687304\n139683458696784\nIn foo()\n139683459013984\n139683459014048\n139683400687304\n139683458696784\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See how the object ids are the same? You&amp;#39;re passing references to them when you call your function, so the function-local variables are referencing the outside variables. The tricky part is that a reference to a mutable value like a dict or a list will &lt;em&gt;modify the dict/list that is referenced&lt;/em&gt; by that variable. It&amp;#39;s a question of mutable vs. immutable, rather than pass-by-value vs pass-by-reference.&lt;/p&gt;\n\n&lt;p&gt;And the reason why this catches people out with mutable default values is that the mutable default value is created once as Python interprets the function, and then that same mutable value gets new references assigned to it each time the function is called without that argument. The same way that &lt;code&gt;b = some_list&lt;/code&gt; will make &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;some_list&lt;/code&gt; references to the same list rather than copying the list.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgagytz", "score_hidden": false, "stickied": false, "created": 1492275225.0, "created_utc": 1492246425.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgafopi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dgabpg5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Well python isn't type safe by default so anything /u/nebbly says on non type safe is correct by virtue of that. \n\nI think what they meant was that it wasn't safe to use an instantiated object like a dictionary literal `{}` and using `None` is a better way, because None is a value-type and won't follow python object / reference semantics, won't change for the next time the method is called.\n\nI never knew that about None type, and I did not understand that about default conditions so it helped me twice!\n\nI think that was it anyway, I'd like to know if I missed anything.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well python isn&amp;#39;t type safe by default so anything &lt;a href=\"/u/nebbly\"&gt;/u/nebbly&lt;/a&gt; says on non type safe is correct by virtue of that. &lt;/p&gt;\n\n&lt;p&gt;I think what they meant was that it wasn&amp;#39;t safe to use an instantiated object like a dictionary literal &lt;code&gt;{}&lt;/code&gt; and using &lt;code&gt;None&lt;/code&gt; is a better way, because None is a value-type and won&amp;#39;t follow python object / reference semantics, won&amp;#39;t change for the next time the method is called.&lt;/p&gt;\n\n&lt;p&gt;I never knew that about None type, and I did not understand that about default conditions so it helped me twice!&lt;/p&gt;\n\n&lt;p&gt;I think that was it anyway, I&amp;#39;d like to know if I missed anything.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgafopi", "score_hidden": false, "stickied": false, "created": 1492271414.0, "created_utc": 1492242614.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dgag700", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "nebbly", "parent_id": "t1_dgabpg5", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "yes, type hints and refactorization potential. the actual type being used in this case would be `Optional[Dict]`, but what we want is `Dict`. meaning it's valid for someone to intentionally pass `None` as a param. it shouldn't be.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;yes, type hints and refactorization potential. the actual type being used in this case would be &lt;code&gt;Optional[Dict]&lt;/code&gt;, but what we want is &lt;code&gt;Dict&lt;/code&gt;. meaning it&amp;#39;s valid for someone to intentionally pass &lt;code&gt;None&lt;/code&gt; as a param. it shouldn&amp;#39;t be.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgag700", "score_hidden": false, "stickied": false, "created": 1492272849.0, "created_utc": 1492244049.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgabpg5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kungtotte", "parent_id": "t1_dg9mznf", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "How is that pattern any less type safe than the alternative? Either way it's not going to blow up until you treat `a` like a dictionary, so regardless of how you input the wrong type it will still blow up.\n\nUnless you're referring to type hints.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How is that pattern any less type safe than the alternative? Either way it&amp;#39;s not going to blow up until you treat &lt;code&gt;a&lt;/code&gt; like a dictionary, so regardless of how you input the wrong type it will still blow up.&lt;/p&gt;\n\n&lt;p&gt;Unless you&amp;#39;re referring to type hints.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgabpg5", "score_hidden": false, "stickied": false, "created": 1492262121.0, "created_utc": 1492233321.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9mznf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "nebbly", "parent_id": "t1_dg9mcgj", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "The first thing I would suggest is just not allowing default arguments. It's usually a better practice. In that case, if you want defaults you can always make helper functions with partials, closures, etc.\n\nIf you really want default arguments the typical way it's done in Python is:\n\n    def some_func(a=None):\n        if a is None:\n            a = {}\n        ...\n\nI don't like this pattern. It's not type safe.\n\n...But there's a lot of stuff you could do. Have fun tinkering!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The first thing I would suggest is just not allowing default arguments. It&amp;#39;s usually a better practice. In that case, if you want defaults you can always make helper functions with partials, closures, etc.&lt;/p&gt;\n\n&lt;p&gt;If you really want default arguments the typical way it&amp;#39;s done in Python is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def some_func(a=None):\n    if a is None:\n        a = {}\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&amp;#39;t like this pattern. It&amp;#39;s not type safe.&lt;/p&gt;\n\n&lt;p&gt;...But there&amp;#39;s a lot of stuff you could do. Have fun tinkering!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9mznf", "score_hidden": false, "stickied": false, "created": 1492227762.0, "created_utc": 1492198962.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9mcgj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9lzu4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I have taken some of your suggestions and applied to the code, but I've done so in a longer-form way and I've defined the default to a const anyone that really has this pattern dotted around their code can use.\n\nBtw is there a way around? I'd imagine `copy` and `deepcopy` is one way?", "edited": 1492198463.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have taken some of your suggestions and applied to the code, but I&amp;#39;ve done so in a longer-form way and I&amp;#39;ve defined the default to a const anyone that really has this pattern dotted around their code can use.&lt;/p&gt;\n\n&lt;p&gt;Btw is there a way around? I&amp;#39;d imagine &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;deepcopy&lt;/code&gt; is one way?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9mcgj", "score_hidden": false, "stickied": false, "created": 1492226990.0, "created_utc": 1492198190.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9lzu4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "nebbly", "parent_id": "t1_dg9l44i", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "On the whole mutable default argument thing, I consider it a flaw of Python. Default function parameters are evaluated only once. This means mutable default params are bad. Check this out:\n\n    def append_b_to_list(some_list =[]):\n        some_list.append('b')\n        return some_list\n\n    &gt;&gt;&gt; append_b_to_list(['a'])  # ['a', 'b'] -- ok\n    &gt;&gt;&gt; append_b_to_list()  # ['b'] -- ok\n    &gt;&gt;&gt; append_b_to_list()  # ['b', 'b']  -- wtf. the default argument has been mutated.\n\nWhich is ridiculous, but it's python.\n\nAlso, as I mentioned, check out pattern matching in other languages, like Haskell. I think it'll give you an idea of possibilities beyond switch.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On the whole mutable default argument thing, I consider it a flaw of Python. Default function parameters are evaluated only once. This means mutable default params are bad. Check this out:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def append_b_to_list(some_list =[]):\n    some_list.append(&amp;#39;b&amp;#39;)\n    return some_list\n\n&amp;gt;&amp;gt;&amp;gt; append_b_to_list([&amp;#39;a&amp;#39;])  # [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] -- ok\n&amp;gt;&amp;gt;&amp;gt; append_b_to_list()  # [&amp;#39;b&amp;#39;] -- ok\n&amp;gt;&amp;gt;&amp;gt; append_b_to_list()  # [&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;]  -- wtf. the default argument has been mutated.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is ridiculous, but it&amp;#39;s python.&lt;/p&gt;\n\n&lt;p&gt;Also, as I mentioned, check out pattern matching in other languages, like Haskell. I think it&amp;#39;ll give you an idea of possibilities beyond switch.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9lzu4", "score_hidden": false, "stickied": false, "created": 1492226573.0, "created_utc": 1492197773.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9l44i", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9js69", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Thank you. I Do really appreciate the time and effort.\n\n&gt; I'm not sure I understand your point here. I just made a variable for convenience's sake (consider it like an informal let clause in haskell). You can write the whole thing in one line if you want to avoid being 'procedural'. Beyond that, what do you mean you can't override the default handler?\n\nWell I'm not sure what you're asking or saying here. I think haskell is confusing the matter further as I know next to nothing about it. It's not about the amount of lines the definition takes, it's about making a pattern for potential later re-use (I'm not going to use it, it was just a bit of fun I wanted to share).\n\n&gt; I guess the bigger point you're missing here is that you've built something that replicates functionality (via a trivial pattern) that already exists in Python, and is already used widely by many developers. That means for someone to use your tool, they'll probably be learning two ways to do the same thing.\n\nOh right. Well this isn't meant to be a solution, it's a musing on something. I would still advocate that this is clearer than the revisions provided for me to read. If someone has this written procedural in-line then I'd view this as an upgrade for them akin to defining constants by meaningful names at the top of classes or in utility classes. Re-factoring that to use this function is for that reason a good idea for those people as it builds a lexicon of verbs people can draw upon, and as you've stated is the same thing, I'd argue mine is clearer as it hides the implementation details.\n\n&gt; You're using a mutable object (dictionary) as a default argument. Don't do that in Python.\n\nThis I don't know why, can you explain? It shouldn't ever be created if not passed right? surely the compiler takes care of that and keeps it to some degree consistent and readable? Maybe I'll remove default conditions as without them it is useless.\n\n&gt; Don't do a try/except without specifying the exceptions you're expecting, like in your switch function. In this case, you'd probably want it to be except KeyError:. Otherwise errors that happen within the called functions may be excepted as well. \n\nI agree and accept. If the function call generates an exception (it shouldn't) I can see this could execute default branch despite valid input. Hopefully nobody would have a function with that level of detail in a switch, or would have the decency to `try` `except` themselves within their function, but you're right I should have guarded specifically against the types of exception I hope to catch or as I should have done had the None lambda as the default and only called it upon exception, merely assigning the function then later calling it (removing effects another way).\n\n&gt; You can tighten up your switch function a bit, while avoiding the try/except problems. However, you'll see that it ends up being the same as the pattern I mentioned above:\n\nI don't agree that the prior code or the revision submitted does the same thing, but I do know try: except: is maybe the wrong tool to reach for; I specifically didn't think of a ternary and now I see it, I'm not sure it's as clean. \n\nIn any case on the revision example\n\n* You have three arguments instead of two. Switches have a single argument and a body. I don't know how to do that in python, so I made a second argument that is the body. It works, but it's not ideal as mentioned elsewhere in this thread.\n* the idea was to keep the cases and default case within the conditions. Essentially we're arguing over an API decision, so the argument is not awesome for either of us AFAIK\n* I'm pretty sure your return is too complicated to be considered pythonic\n* I am happy to be told I'm wrong on this, I'd prefer a PEP reference or code example, prior article to ensure we're not just arguing for the sake.\n\nEveryone: Python isn't my strongest language, which is why I listen to experts so I really appreciate everyone's time and I am willing to learn.\n\nHappy Holidays and enjoy the weekend all!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you. I Do really appreciate the time and effort.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m not sure I understand your point here. I just made a variable for convenience&amp;#39;s sake (consider it like an informal let clause in haskell). You can write the whole thing in one line if you want to avoid being &amp;#39;procedural&amp;#39;. Beyond that, what do you mean you can&amp;#39;t override the default handler?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Well I&amp;#39;m not sure what you&amp;#39;re asking or saying here. I think haskell is confusing the matter further as I know next to nothing about it. It&amp;#39;s not about the amount of lines the definition takes, it&amp;#39;s about making a pattern for potential later re-use (I&amp;#39;m not going to use it, it was just a bit of fun I wanted to share).&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I guess the bigger point you&amp;#39;re missing here is that you&amp;#39;ve built something that replicates functionality (via a trivial pattern) that already exists in Python, and is already used widely by many developers. That means for someone to use your tool, they&amp;#39;ll probably be learning two ways to do the same thing.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Oh right. Well this isn&amp;#39;t meant to be a solution, it&amp;#39;s a musing on something. I would still advocate that this is clearer than the revisions provided for me to read. If someone has this written procedural in-line then I&amp;#39;d view this as an upgrade for them akin to defining constants by meaningful names at the top of classes or in utility classes. Re-factoring that to use this function is for that reason a good idea for those people as it builds a lexicon of verbs people can draw upon, and as you&amp;#39;ve stated is the same thing, I&amp;#39;d argue mine is clearer as it hides the implementation details.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You&amp;#39;re using a mutable object (dictionary) as a default argument. Don&amp;#39;t do that in Python.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This I don&amp;#39;t know why, can you explain? It shouldn&amp;#39;t ever be created if not passed right? surely the compiler takes care of that and keeps it to some degree consistent and readable? Maybe I&amp;#39;ll remove default conditions as without them it is useless.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Don&amp;#39;t do a try/except without specifying the exceptions you&amp;#39;re expecting, like in your switch function. In this case, you&amp;#39;d probably want it to be except KeyError:. Otherwise errors that happen within the called functions may be excepted as well. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I agree and accept. If the function call generates an exception (it shouldn&amp;#39;t) I can see this could execute default branch despite valid input. Hopefully nobody would have a function with that level of detail in a switch, or would have the decency to &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt; themselves within their function, but you&amp;#39;re right I should have guarded specifically against the types of exception I hope to catch or as I should have done had the None lambda as the default and only called it upon exception, merely assigning the function then later calling it (removing effects another way).&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You can tighten up your switch function a bit, while avoiding the try/except problems. However, you&amp;#39;ll see that it ends up being the same as the pattern I mentioned above:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&amp;#39;t agree that the prior code or the revision submitted does the same thing, but I do know try: except: is maybe the wrong tool to reach for; I specifically didn&amp;#39;t think of a ternary and now I see it, I&amp;#39;m not sure it&amp;#39;s as clean. &lt;/p&gt;\n\n&lt;p&gt;In any case on the revision example&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You have three arguments instead of two. Switches have a single argument and a body. I don&amp;#39;t know how to do that in python, so I made a second argument that is the body. It works, but it&amp;#39;s not ideal as mentioned elsewhere in this thread.&lt;/li&gt;\n&lt;li&gt;the idea was to keep the cases and default case within the conditions. Essentially we&amp;#39;re arguing over an API decision, so the argument is not awesome for either of us AFAIK&lt;/li&gt;\n&lt;li&gt;I&amp;#39;m pretty sure your return is too complicated to be considered pythonic&lt;/li&gt;\n&lt;li&gt;I am happy to be told I&amp;#39;m wrong on this, I&amp;#39;d prefer a PEP reference or code example, prior article to ensure we&amp;#39;re not just arguing for the sake.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Everyone: Python isn&amp;#39;t my strongest language, which is why I listen to experts so I really appreciate everyone&amp;#39;s time and I am willing to learn.&lt;/p&gt;\n\n&lt;p&gt;Happy Holidays and enjoy the weekend all!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9l44i", "score_hidden": false, "stickied": false, "created": 1492225499.0, "created_utc": 1492196699.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9js69", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "nebbly", "parent_id": "t1_dg9i4pe", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm not sure I understand your point here. I just made a variable for convenience's sake (consider it like an informal `let` clause in haskell). You can write the whole thing in one line if you want to avoid being 'procedural'. Beyond that, what do you mean you can't override the default handler?\n\nI guess the bigger point you're missing here is that you've built something that replicates functionality (via a trivial pattern) that already exists in Python, and is already used widely by many developers. That means for someone to use your tool, they'll probably be learning two ways to do the same thing.\n\nA few other tips:\n \n * You're using a mutable object (dictionary) as a default argument. Don't do that in Python.\n * Don't do a try/except without specifying the exceptions you're expecting, like in your `switch` function. In this case, you'd probably want it to be `except KeyError:`. Otherwise errors that happen within the called functions may be excepted as well. This is a big no-no. Even with what I've defined ('KeyError'), KeyErrors in the called functions could be silenced.\n * You can tighten up your switch function a bit, while avoiding the try/except problems. However, you'll see that it ends up being the same as the pattern I mentioned above:\n\n----\n    def switch(value, conditions, default=None):\n        return conditions.get(value, (lambda:None) if default is None else default)()\n----\nHowever, it's great that you thought about it, made something, and submitted for criticism. Keep it up!\n\nEdit: formatting...", "edited": 1492195303.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not sure I understand your point here. I just made a variable for convenience&amp;#39;s sake (consider it like an informal &lt;code&gt;let&lt;/code&gt; clause in haskell). You can write the whole thing in one line if you want to avoid being &amp;#39;procedural&amp;#39;. Beyond that, what do you mean you can&amp;#39;t override the default handler?&lt;/p&gt;\n\n&lt;p&gt;I guess the bigger point you&amp;#39;re missing here is that you&amp;#39;ve built something that replicates functionality (via a trivial pattern) that already exists in Python, and is already used widely by many developers. That means for someone to use your tool, they&amp;#39;ll probably be learning two ways to do the same thing.&lt;/p&gt;\n\n&lt;p&gt;A few other tips:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You&amp;#39;re using a mutable object (dictionary) as a default argument. Don&amp;#39;t do that in Python.&lt;/li&gt;\n&lt;li&gt;Don&amp;#39;t do a try/except without specifying the exceptions you&amp;#39;re expecting, like in your &lt;code&gt;switch&lt;/code&gt; function. In this case, you&amp;#39;d probably want it to be &lt;code&gt;except KeyError:&lt;/code&gt;. Otherwise errors that happen within the called functions may be excepted as well. This is a big no-no. Even with what I&amp;#39;ve defined (&amp;#39;KeyError&amp;#39;), KeyErrors in the called functions could be silenced.&lt;/li&gt;\n&lt;li&gt;You can tighten up your switch function a bit, while avoiding the try/except problems. However, you&amp;#39;ll see that it ends up being the same as the pattern I mentioned above:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;pre&gt;&lt;code&gt;def switch(value, conditions, default=None):\n    return conditions.get(value, (lambda:None) if default is None else default)()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;However, it&amp;#39;s great that you thought about it, made something, and submitted for criticism. Keep it up!&lt;/p&gt;\n\n&lt;p&gt;Edit: formatting...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9js69", "score_hidden": false, "stickied": false, "created": 1492223898.0, "created_utc": 1492195098.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9i4pe", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9dfb4", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That's procedural and doesn't allow override of default handler so unfortunately that's why I don't do what you are doing. Thanks though", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s procedural and doesn&amp;#39;t allow override of default handler so unfortunately that&amp;#39;s why I don&amp;#39;t do what you are doing. Thanks though&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9i4pe", "score_hidden": false, "stickied": false, "created": 1492221924.0, "created_utc": 1492193124.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9dfb4", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "nebbly", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Unfortunately, you're doing more harm than good here. All you need is the `.get` method on a dict for the exact same result.\n\n    some_dict = {\n        'A': lambda: print('found A'),\n        'B': lambda: print('found B'),\n    }\n\n    for x in ['A', 'Z']:\n        default_callable = lambda: print('not found')\n        some_dict.get(x, default_callable)()\n\nThe advantage of using the get method is you can re-use the dict and use different defaults if you want.\n\nThat said, in my opinion, switch statements \u00e0 la JS aren't that useful. What I'd like to see in Python is pattern matching. I like the way Elm does it, but haskell, rust and other languages have it, too. It's like switches on steroids, but they're more elegant, too.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Unfortunately, you&amp;#39;re doing more harm than good here. All you need is the &lt;code&gt;.get&lt;/code&gt; method on a dict for the exact same result.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;some_dict = {\n    &amp;#39;A&amp;#39;: lambda: print(&amp;#39;found A&amp;#39;),\n    &amp;#39;B&amp;#39;: lambda: print(&amp;#39;found B&amp;#39;),\n}\n\nfor x in [&amp;#39;A&amp;#39;, &amp;#39;Z&amp;#39;]:\n    default_callable = lambda: print(&amp;#39;not found&amp;#39;)\n    some_dict.get(x, default_callable)()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantage of using the get method is you can re-use the dict and use different defaults if you want.&lt;/p&gt;\n\n&lt;p&gt;That said, in my opinion, switch statements \u00e0 la JS aren&amp;#39;t that useful. What I&amp;#39;d like to see in Python is pattern matching. I like the way Elm does it, but haskell, rust and other languages have it, too. It&amp;#39;s like switches on steroids, but they&amp;#39;re more elegant, too.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9dfb4", "score_hidden": false, "stickied": false, "created": 1492216522.0, "created_utc": 1492187722.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg9rkrt", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cantremembermypasswd", "parent_id": "t1_dg9id5u", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "No dissapoitment,  I just hope for the world because I am waaaay to lazy to do it myself. And I love seeing others solutions to problems, so thank again!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No dissapoitment,  I just hope for the world because I am waaaay to lazy to do it myself. And I love seeing others solutions to problems, so thank again!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9rkrt", "score_hidden": false, "stickied": false, "created": 1492233339.0, "created_utc": 1492204539.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9id5u", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg979yn", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Sorry to disappoint. FWIW this was just a bit of fun.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry to disappoint. FWIW this was just a bit of fun.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9id5u", "score_hidden": false, "stickied": false, "created": 1492222204.0, "created_utc": 1492193404.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg979yn", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "cantremembermypasswd", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "As a regularly downvoted proponent of switches in python, I got giddy when I saw the title. It's fun, thanks for sharing and sparking debate! Though, not the biggest fan, as that seems quite bloated IMO. \n\nTBH I was hoping for a modified CPython or pypy compiler that took something like this:\n\n\n    passcode = 12345\n    \n    switch passcode:\n    \n        case \"Balderdash\": \n            mash(\"horse biscuits\") \n            break \n    \n        case \"Sherbert Lemon\":\n            validate(\"You're a wizard, 'Arry\") \n            break \n    \n        case 12345: \n            validate(\"It's the SpaceBalls!\") \n            # Without a break would drop through to next\n    \n        case \"AAA\":\n           give_free_tow()\n           break\n    \n        default:\n           deny() \n\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As a regularly downvoted proponent of switches in python, I got giddy when I saw the title. It&amp;#39;s fun, thanks for sharing and sparking debate! Though, not the biggest fan, as that seems quite bloated IMO. &lt;/p&gt;\n\n&lt;p&gt;TBH I was hoping for a modified CPython or pypy compiler that took something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;passcode = 12345\n\nswitch passcode:\n\n    case &amp;quot;Balderdash&amp;quot;: \n        mash(&amp;quot;horse biscuits&amp;quot;) \n        break \n\n    case &amp;quot;Sherbert Lemon&amp;quot;:\n        validate(&amp;quot;You&amp;#39;re a wizard, &amp;#39;Arry&amp;quot;) \n        break \n\n    case 12345: \n        validate(&amp;quot;It&amp;#39;s the SpaceBalls!&amp;quot;) \n        # Without a break would drop through to next\n\n    case &amp;quot;AAA&amp;quot;:\n       give_free_tow()\n       break\n\n    default:\n       deny() \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg979yn", "score_hidden": false, "stickied": false, "created": 1492209263.0, "created_utc": 1492180463.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dgae0i9", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "danthedeckie", "parent_id": "t1_dg9nyj8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "You could do it with a custom class though.  Over ride __get__ to look at the types it what ever of the args.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could do it with a custom class though.  Over ride &lt;strong&gt;get&lt;/strong&gt; to look at the types it what ever of the args.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgae0i9", "score_hidden": false, "stickied": false, "created": 1492267088.0, "created_utc": 1492238288.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9nyj8", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Daenyth", "parent_id": "t1_dg9a0jk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "That only works for very basic value matching. Full pattern matching based switching is another level entirely, and it's impossible to ergonomically handle with a dict of callbacks", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That only works for very basic value matching. Full pattern matching based switching is another level entirely, and it&amp;#39;s impossible to ergonomically handle with a dict of callbacks&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9nyj8", "score_hidden": false, "stickied": false, "created": 1492228923.0, "created_utc": 1492200123.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9a0jk", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "itsmoppy", "parent_id": "t1_dg98ml8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "They had a discussion about it some years ago and people couldn't agree on how it should be implemented, or its API. (I'll edit if I find the post)\n\nYou can always use a dictionary of values to functions.\n\n    def cmd_greet(player):\n        print(f'{player.name} says, \"Hello.\"')\n\n    def cmd_wave(player):\n        print(f'{player.name} waves.')\n\n    def interpret(player, command):\n        cmds = {\n            'greet':cmd_greet,\n            'wave':cmd_wave\n            }\n        func = cmds.get(command, None)\n        if func is None:\n            print(\"I don't understand that.\")\n        else:\n            func(player)\n\n    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They had a discussion about it some years ago and people couldn&amp;#39;t agree on how it should be implemented, or its API. (I&amp;#39;ll edit if I find the post)&lt;/p&gt;\n\n&lt;p&gt;You can always use a dictionary of values to functions.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def cmd_greet(player):\n    print(f&amp;#39;{player.name} says, &amp;quot;Hello.&amp;quot;&amp;#39;)\n\ndef cmd_wave(player):\n    print(f&amp;#39;{player.name} waves.&amp;#39;)\n\ndef interpret(player, command):\n    cmds = {\n        &amp;#39;greet&amp;#39;:cmd_greet,\n        &amp;#39;wave&amp;#39;:cmd_wave\n        }\n    func = cmds.get(command, None)\n    if func is None:\n        print(&amp;quot;I don&amp;#39;t understand that.&amp;quot;)\n    else:\n        func(player)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9a0jk", "score_hidden": false, "stickied": false, "created": 1492212662.0, "created_utc": 1492183862.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg98x2t", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bcgroom", "parent_id": "t1_dg98ml8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I mean you can emulate a switch using a dictionary or a series of if/elif/else statements but I've never really missed it", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I mean you can emulate a switch using a dictionary or a series of if/elif/else statements but I&amp;#39;ve never really missed it&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg98x2t", "score_hidden": false, "stickied": false, "created": 1492211346.0, "created_utc": 1492182546.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg9i70m", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg98ml8", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "No clue, sorry, I just know it doesn't have it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No clue, sorry, I just know it doesn&amp;#39;t have it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9i70m", "score_hidden": false, "stickied": false, "created": 1492222000.0, "created_utc": 1492193200.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg98ml8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "flinj", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm just starting out with python; is there some philosophical reason for the lack of switch? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m just starting out with python; is there some philosophical reason for the lack of switch? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg98ml8", "score_hidden": false, "stickied": false, "created": 1492210987.0, "created_utc": 1492182187.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg9i6di", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9azz9", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Care to use a few more words? I'm pretty sure if you look at the code I'm doing that, but I'd be happy to learn if different.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Care to use a few more words? I&amp;#39;m pretty sure if you look at the code I&amp;#39;m doing that, but I&amp;#39;d be happy to learn if different.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9i6di", "score_hidden": false, "stickied": false, "created": 1492221979.0, "created_utc": 1492193179.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9azz9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Mekhami", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Dictionary Dispatch.\n\nWe don't need switch.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dictionary Dispatch.&lt;/p&gt;\n\n&lt;p&gt;We don&amp;#39;t need switch.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9azz9", "score_hidden": false, "stickied": false, "created": 1492213816.0, "created_utc": 1492185016.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dgafh9x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg9zm99", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "I'm not touchy, you generally post halves of sentences or gibberish on programming related threads. This comment is a lot more helpful, although still totally unfounded for something that is &lt; 10 lines and uses a similar method to one shown in your link. \n\nHow to maintain &lt;10 lines of code; well I'd guess a lot simpler than maintaining something you'd type from python docs into code however many times you use... You're using the argument for keeping inline constants in your code. It's a bad practise and even if you only have that magic constant in one-place today, it could be in 3 places by the end of the year and then you have to change in 3 places not one.\n\nThis is not me saying \"use this\"; it's something I put together in very little time after watching someone else demonstrate the dictionary method of emulating a switch in python. Another user was so helpful yesterday I updated the trivial example to not use `try` `except`, removed default value for conditions (due to potential mutability issues and it being unpythonic); and switched up from using \"default\" to a defined string following python patterns I've seen elsewhere.\n\nI'm not sure that this code violates any rules of python; it shouldn't lead to surprise and is a lot clearer and more terse than the long-form typing out. If you're really worried / bothered don't be I'll likely never use this, it's an example, a play-thing and seems to be better than the suggestions on stackoverflow regarding the topic.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not touchy, you generally post halves of sentences or gibberish on programming related threads. This comment is a lot more helpful, although still totally unfounded for something that is &amp;lt; 10 lines and uses a similar method to one shown in your link. &lt;/p&gt;\n\n&lt;p&gt;How to maintain &amp;lt;10 lines of code; well I&amp;#39;d guess a lot simpler than maintaining something you&amp;#39;d type from python docs into code however many times you use... You&amp;#39;re using the argument for keeping inline constants in your code. It&amp;#39;s a bad practise and even if you only have that magic constant in one-place today, it could be in 3 places by the end of the year and then you have to change in 3 places not one.&lt;/p&gt;\n\n&lt;p&gt;This is not me saying &amp;quot;use this&amp;quot;; it&amp;#39;s something I put together in very little time after watching someone else demonstrate the dictionary method of emulating a switch in python. Another user was so helpful yesterday I updated the trivial example to not use &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt;, removed default value for conditions (due to potential mutability issues and it being unpythonic); and switched up from using &amp;quot;default&amp;quot; to a defined string following python patterns I&amp;#39;ve seen elsewhere.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not sure that this code violates any rules of python; it shouldn&amp;#39;t lead to surprise and is a lot clearer and more terse than the long-form typing out. If you&amp;#39;re really worried / bothered don&amp;#39;t be I&amp;#39;ll likely never use this, it&amp;#39;s an example, a play-thing and seems to be better than the suggestions on stackoverflow regarding the topic.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgafh9x", "score_hidden": false, "stickied": false, "created": 1492270841.0, "created_utc": 1492242041.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9zm99", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "coderdan", "parent_id": "t1_dg9jwch", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Everyone is touchy when their code is involved but I have to reapeat the idea: don't use that thing, some poor soul might have to maintain it in the future.\n\n&amp;nbsp;\n\nhttps://docs.python.org/2/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Everyone is touchy when their code is involved but I have to reapeat the idea: don&amp;#39;t use that thing, some poor soul might have to maintain it in the future.&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://docs.python.org/2/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python\"&gt;https://docs.python.org/2/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9zm99", "score_hidden": false, "stickied": false, "created": 1492243947.0, "created_utc": 1492215147.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9jwch", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t1_dg955gk", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "why with 9 years on reddit do you still post things like this and this?\n\nhttps://www.reddit.com/r/mysql/comments/3dmdd9/solution_to_a_mysql_server_gone_away_message/ct6t1pf/\n\nGrow up!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;why with 9 years on reddit do you still post things like this and this?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/mysql/comments/3dmdd9/solution_to_a_mysql_server_gone_away_message/ct6t1pf/\"&gt;https://www.reddit.com/r/mysql/comments/3dmdd9/solution_to_a_mysql_server_gone_away_message/ct6t1pf/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Grow up!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg9jwch", "score_hidden": false, "stickied": false, "created": 1492224036.0, "created_utc": 1492195236.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": -3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg955gk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "coderdan", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "no ... please, no ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;no ... please, no &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg955gk", "score_hidden": false, "stickied": false, "created": 1492206319.0, "created_utc": 1492177519.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dgai6vy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Btw on why Python doesn't have switches\n\nhttps://www.python.org/dev/peps/pep-0275/  \nhttps://www.python.org/dev/peps/pep-3103/  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Btw on why Python doesn&amp;#39;t have switches&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.python.org/dev/peps/pep-0275/\"&gt;https://www.python.org/dev/peps/pep-0275/&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://www.python.org/dev/peps/pep-3103/\"&gt;https://www.python.org/dev/peps/pep-3103/&lt;/a&gt;  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dgai6vy", "score_hidden": false, "stickied": false, "created": 1492279152.0, "created_utc": 1492250352.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "removal_reason": null, "link_id": "t3_65b20l", "likes": null, "replies": "", "user_reports": [], "id": "dg8v8jv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CODESIGN2", "parent_id": "t3_65b20l", "subreddit_name_prefixed": "r/Python", "controversiality": 0, "body": "Just playing around, watched a video and thought \"I could make this into a function\". So I did...\n\nIf you need to have context in a function or change context vars, just curry like in an example provided. Python has reference semantics for most non-trivial objects and as it's implemented as a function you can return values where that won't work.\n\nThanks to [Dan Bader](/u/dbader) for the video on this, TBH I wouldn't have thought of switch in python without his video, although I probably won't be using this, it was just a bit of fun.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just playing around, watched a video and thought &amp;quot;I could make this into a function&amp;quot;. So I did...&lt;/p&gt;\n\n&lt;p&gt;If you need to have context in a function or change context vars, just curry like in an example provided. Python has reference semantics for most non-trivial objects and as it&amp;#39;s implemented as a function you can return values where that won&amp;#39;t work.&lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/dbader\"&gt;Dan Bader&lt;/a&gt; for the video on this, TBH I wouldn&amp;#39;t have thought of switch in python without his video, although I probably won&amp;#39;t be using this, it was just a bit of fun.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "Python", "name": "t1_dg8v8jv", "score_hidden": false, "stickied": false, "created": 1492181054.0, "created_utc": 1492152254.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]