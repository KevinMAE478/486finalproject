[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64wi07", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 97, "report_reasons": null, "author": "zoomT", "saved": false, "mod_reports": [], "name": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/64wi07/libf_enabling_c_as_a_pure_functional_programming/", "num_reports": null, "locked": false, "stickied": false, "created": 1492006958.0, "url": "https://github.com/GJDuck/libf", "author_flair_text": null, "quarantine": false, "title": "LibF++ -- Enabling C++ as a pure functional programming language through immutable strings, vectors, maps, etc.", "created_utc": 1491978158.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 68, "visited": false, "subreddit_type": "public", "ups": 97}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5n2it", "gilded": 0, "archived": false, "score": 31, "report_reasons": null, "author": "stumpychubbins", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This is completely insane, I love it", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is completely insane, I love it&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5n2it", "score_hidden": false, "stickied": false, "created": 1492014630.0, "created_utc": 1491985830.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 31}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5kyph", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "woztzy", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Worth looking at as well: http://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/index.html", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Worth looking at as well: &lt;a href=\"http://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/index.html\"&gt;http://www.boost.org/doc/libs/1_63_0/libs/phoenix/doc/html/index.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5kyph", "score_hidden": false, "stickied": false, "created": 1492008618.0, "created_utc": 1491979818.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5pk7n", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "rbitdan", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Looks like a really solid implementation with a nice api. Well done.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Looks like a really solid implementation with a nice api. Well done.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5pk7n", "score_hidden": false, "stickied": false, "created": 1492022380.0, "created_utc": 1491993580.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5n07t", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t1_dg5my47", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes indeed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes indeed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5n07t", "score_hidden": false, "stickied": false, "created": 1492014438.0, "created_utc": 1491985638.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6i712", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Liorithiel", "parent_id": "t1_dg6ajyy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; FWIW, C/C++ compilers usually implement TCO\n\nSome compilers can sometimes turn recursive code into a loop even if it's not strictly TCO. [This presentation (PDF, see page 40)](http://www.linux-kongress.org/2009/slides/compiler_survey_felix_von_leitner.pdf) suggests that GCC was able to do so 8 years ago already. The example in the PDF file is not a tail call, there's still multiplication after the recursive call; yet GCC smoothly turns it into a loop.\n\n    long fact(long x) {\n        if (x&lt;=0) return 1;\n        return x*fact(x-1);\n    }", "edited": 1492029160.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;FWIW, C/C++ compilers usually implement TCO&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Some compilers can sometimes turn recursive code into a loop even if it&amp;#39;s not strictly TCO. &lt;a href=\"http://www.linux-kongress.org/2009/slides/compiler_survey_felix_von_leitner.pdf\"&gt;This presentation (PDF, see page 40)&lt;/a&gt; suggests that GCC was able to do so 8 years ago already. The example in the PDF file is not a tail call, there&amp;#39;s still multiplication after the recursive call; yet GCC smoothly turns it into a loop.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;long fact(long x) {\n    if (x&amp;lt;=0) return 1;\n    return x*fact(x-1);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6i712", "score_hidden": false, "stickied": false, "created": 1492057758.0, "created_utc": 1492028958.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6kazm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dg6k3an", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I was thinking about things like `std::vector`, but yes. I'm not sure about \"very easy\", it's usually pretty straightforward to add move operations. Certainly you should always check before returning something by value. And there's nothing you can do about large structs, typically with lots of domain specific information; a large struct costs the same to move as copy and the cost can be significant.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was thinking about things like &lt;code&gt;std::vector&lt;/code&gt;, but yes. I&amp;#39;m not sure about &amp;quot;very easy&amp;quot;, it&amp;#39;s usually pretty straightforward to add move operations. Certainly you should always check before returning something by value. And there&amp;#39;s nothing you can do about large structs, typically with lots of domain specific information; a large struct costs the same to move as copy and the cost can be significant.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6kazm", "score_hidden": false, "stickied": false, "created": 1492060032.0, "created_utc": 1492031232.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6k3an", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg6j9mr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "*If* you have types that are movable; especially if you're working with a legacy code base, it's very easy to wind up with types that aren't.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;If&lt;/em&gt; you have types that are movable; especially if you&amp;#39;re working with a legacy code base, it&amp;#39;s very easy to wind up with types that aren&amp;#39;t.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6k3an", "score_hidden": false, "stickied": false, "created": 1492059790.0, "created_utc": 1492030990.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6j9mr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dg6ajyy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes, the absence of such a warning for failure to rvo caused a generation of programmers to rely heavily on out parameters, even in many situations where technically it probably wasn't necessary. Now you are guaranteed a move if rvo doesn't happen, and in most cases that is fine. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, the absence of such a warning for failure to rvo caused a generation of programmers to rely heavily on out parameters, even in many situations where technically it probably wasn&amp;#39;t necessary. Now you are guaranteed a move if rvo doesn&amp;#39;t happen, and in most cases that is fine. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6j9mr", "score_hidden": false, "stickied": false, "created": 1492058886.0, "created_utc": 1492030086.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6cru1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pfp-disciple", "parent_id": "t1_dg6ajyy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Those warnings would be pretty cool. I like that idea. TIL about RVO, very interesting. I can certainly understand why a warning about the behavior of RVO is important -- that allowable optimization can impact the behavior of the program!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Those warnings would be pretty cool. I like that idea. TIL about RVO, very interesting. I can certainly understand why a warning about the behavior of RVO is important -- that allowable optimization can impact the behavior of the program!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6cru1", "score_hidden": false, "stickied": false, "created": 1492052188.0, "created_utc": 1492023388.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ajyy", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg68jk4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "FWIW, C/C++ compilers usually implement TCO; you just can't be guaranteed of it being applied in a specific case. I'd expect both of those functions to be converted to use tail calls with optimization enabled.\n\n(Actually this is a specific instance of something I wish that you could do in general, which is have some automated way of ensuring that an expected optimization is implemented, so you can figure out what's going on if it's not. For example, consider C++'s RVO. It'd be nice if you could stick an attribute on a function that says \"RVO should be applied to this function, and give me a compiler warning if it can't be for some reason.\" Same with TCO.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;FWIW, C/C++ compilers usually implement TCO; you just can&amp;#39;t be guaranteed of it being applied in a specific case. I&amp;#39;d expect both of those functions to be converted to use tail calls with optimization enabled.&lt;/p&gt;\n\n&lt;p&gt;(Actually this is a specific instance of something I wish that you could do in general, which is have some automated way of ensuring that an expected optimization is implemented, so you can figure out what&amp;#39;s going on if it&amp;#39;s not. For example, consider C++&amp;#39;s RVO. It&amp;#39;d be nice if you could stick an attribute on a function that says &amp;quot;RVO should be applied to this function, and give me a compiler warning if it can&amp;#39;t be for some reason.&amp;quot; Same with TCO.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6ajyy", "score_hidden": false, "stickied": false, "created": 1492049919.0, "created_utc": 1492021119.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6dgmd", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "pfp-disciple", "parent_id": "t1_dg6cd9j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree with you, however TCO is not only for recursive calls. It's also useful for long call trees (I forget areas in which this might be expected to occur -- maybe state machines?). It can also be useful with mutial recursion -- A calls B, B calls C, C calls A. In both cases, an iterative approach could become messy. I think mutual recursion is frequently found in recursive descent parsers. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree with you, however TCO is not only for recursive calls. It&amp;#39;s also useful for long call trees (I forget areas in which this might be expected to occur -- maybe state machines?). It can also be useful with mutial recursion -- A calls B, B calls C, C calls A. In both cases, an iterative approach could become messy. I think mutual recursion is frequently found in recursive descent parsers. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6dgmd", "score_hidden": false, "stickied": false, "created": 1492052908.0, "created_utc": 1492024108.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6k718", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg6cd9j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;  it is necessary in functional languages because you cannot write the iterative form of the algorithm\n\nIn addition to what pfp-disciple says, the quoted statement is technically falso for many functional languages. (Unless you use a *very* strict definition.) For example, even Scheme has `(do ...)`, and that's maybe the classic example of a FP language that guarantees TCO.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;it is necessary in functional languages because you cannot write the iterative form of the algorithm&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In addition to what pfp-disciple says, the quoted statement is technically falso for many functional languages. (Unless you use a &lt;em&gt;very&lt;/em&gt; strict definition.) For example, even Scheme has &lt;code&gt;(do ...)&lt;/code&gt;, and that&amp;#39;s maybe the classic example of a FP language that guarantees TCO.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6k718", "score_hidden": false, "stickied": false, "created": 1492059909.0, "created_utc": 1492031109.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6cd9j", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "doom_Oo7", "parent_id": "t1_dg68jk4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;  if C and C++ had TCO\n\nthey have TCO, it's just not guaranteed by the standard. For instance GCC has the `-foptimize-sibling-calls` flag to control this. Example: https://godbolt.org/g/uXgWfB ; but it would be weird to \"enforce\" tail recursion: it is necessary in functional languages because you cannot write the iterative form of the algorithm. In C/C++ it is imho better style to write the iterative form.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;if C and C++ had TCO&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;they have TCO, it&amp;#39;s just not guaranteed by the standard. For instance GCC has the &lt;code&gt;-foptimize-sibling-calls&lt;/code&gt; flag to control this. Example: &lt;a href=\"https://godbolt.org/g/uXgWfB\"&gt;https://godbolt.org/g/uXgWfB&lt;/a&gt; ; but it would be weird to &amp;quot;enforce&amp;quot; tail recursion: it is necessary in functional languages because you cannot write the iterative form of the algorithm. In C/C++ it is imho better style to write the iterative form.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6cd9j", "score_hidden": false, "stickied": false, "created": 1492051764.0, "created_utc": 1492022964.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg68jk4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pfp-disciple", "parent_id": "t1_dg5my47", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It would be cool if C and C++ had TCO. I recall it being discussed on reddit sometime back, and there being reasonable technical reasons so I'm not complaining. But, it would be cool. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It would be cool if C and C++ had TCO. I recall it being discussed on reddit sometime back, and there being reasonable technical reasons so I&amp;#39;m not complaining. But, it would be cool. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg68jk4", "score_hidden": false, "stickied": false, "created": 1492047860.0, "created_utc": 1492019060.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg7wx2e", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "beached", "parent_id": "t1_dg5my47", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; int string_length(char* s)\n&gt; {\n&gt;         return string_end(s) - s;\n&gt; }\n&gt; \n&gt; char* string_end(char* s)\n&gt; {\n&gt;         if (*s == '\\0') return s;\n&gt;         return (string_end(s + 1));\n&gt; }\n\nIn this case, it looks like with at least -O1, didn't look at the unoptimized code, it will turn it into a loop https://godbolt.org/g/Bmw6fK", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;int string_length(char* s)\n{\n        return string_end(s) - s;\n}&lt;/p&gt;\n\n&lt;p&gt;char* string_end(char* s)\n{\n        if (*s == &amp;#39;\\0&amp;#39;) return s;\n        return (string_end(s + 1));\n}&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In this case, it looks like with at least -O1, didn&amp;#39;t look at the unoptimized code, it will turn it into a loop &lt;a href=\"https://godbolt.org/g/Bmw6fK\"&gt;https://godbolt.org/g/Bmw6fK&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7wx2e", "score_hidden": false, "stickied": false, "created": 1492134096.0, "created_utc": 1492105296.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5my47", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "Supadoplex", "parent_id": "t1_dg5mm9d", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Purely functional, but also potential overflow of stack with long argument string if the recursion isn't tail optimized. To allow strict functional programming, the language must in practice guarantee tail call optimization. Neither C nor C++ guarantees.", "edited": 1491985858.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Purely functional, but also potential overflow of stack with long argument string if the recursion isn&amp;#39;t tail optimized. To allow strict functional programming, the language must in practice guarantee tail call optimization. Neither C nor C++ guarantees.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5my47", "score_hidden": false, "stickied": false, "created": 1492014257.0, "created_utc": 1491985457.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg7xjg8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ompomp", "parent_id": "t1_dg7urip", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "All non-function statement blocks have the brace at the end of the line.  See this: https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst#3-placing-braces-and-spaces", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;All non-function statement blocks have the brace at the end of the line.  See this: &lt;a href=\"https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst#3-placing-braces-and-spaces\"&gt;https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst#3-placing-braces-and-spaces&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7xjg8", "score_hidden": false, "stickied": false, "created": 1492134756.0, "created_utc": 1492105956.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7urip", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pdp10", "parent_id": "t1_dg7rfn6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Is kernel style to use Allman braces on all function declarations or just typedefs? I can't remember and I don't normally work on kernel code.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is kernel style to use Allman braces on all function declarations or just typedefs? I can&amp;#39;t remember and I don&amp;#39;t normally work on kernel code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7urip", "score_hidden": false, "stickied": false, "created": 1492131802.0, "created_utc": 1492103002.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7rfn6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ompomp", "parent_id": "t1_dg6jmfn", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This could be the K&amp;R style that the Linux kernel uses, but can't really tell without braces used on control flow structures (if-statement, loops).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This could be the K&amp;amp;R style that the Linux kernel uses, but can&amp;#39;t really tell without braces used on control flow structures (if-statement, loops).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7rfn6", "score_hidden": false, "stickied": false, "created": 1492128261.0, "created_utc": 1492099461.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jmfn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pdp10", "parent_id": "t1_dg5mm9d", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's a good example, but Allman-style braces are very often a sign of Windows coders, and Windows has a default stack size 1/8th that of Linux, so tread even more carefully...\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a good example, but Allman-style braces are very often a sign of Windows coders, and Windows has a default stack size 1/8th that of Linux, so tread even more carefully...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6jmfn", "score_hidden": false, "stickied": false, "created": 1492059269.0, "created_utc": 1492030469.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5qfi3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg5mm9d", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The C++/LibF++ equivalent would be something like this:\n\n    PURE int string_length(F::String s)\n    {\n        return F::foldl(s, 0, [] (int len, char32_t c) { return len+1; });\n    }\n\nAlso, if you don't mind temporary local state (`len`), you can just use range loops instead:\n\n    PURE int string_length(F::String s)\n    {\n        int len = 0;\n        for (auto c: s) len++;\n        return len;\n    }\n\nOf course you could just call the built-in `F::size(s)` to get the string length directly :).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The C++/LibF++ equivalent would be something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PURE int string_length(F::String s)\n{\n    return F::foldl(s, 0, [] (int len, char32_t c) { return len+1; });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, if you don&amp;#39;t mind temporary local state (&lt;code&gt;len&lt;/code&gt;), you can just use range loops instead:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PURE int string_length(F::String s)\n{\n    int len = 0;\n    for (auto c: s) len++;\n    return len;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you could just call the built-in &lt;code&gt;F::size(s)&lt;/code&gt; to get the string length directly :).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5qfi3", "score_hidden": false, "stickied": false, "created": 1492024682.0, "created_utc": 1491995882.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5mm9d", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well, not just C++, even C will let you do purely functional programming. The huge advantage of C++ comes from having templates. I know this is a silly example but I hope it bring the point across:\n\n    int string_length(char* s)\n    {\n            char* p = s;\n            while (*p != '\\0') ++p;\n            return (p - s);\n    }\n\nbut you could also do:\n\n    int string_length(char* s)\n    {\n            return string_end(s) - s;\n    }\n    \n    char* string_end(char* s)\n    {\n            if (*s == '\\0') return s;\n            return (string_end(s + 1));\n    }\n\nThere: purely functional!            ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, not just C++, even C will let you do purely functional programming. The huge advantage of C++ comes from having templates. I know this is a silly example but I hope it bring the point across:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int string_length(char* s)\n{\n        char* p = s;\n        while (*p != &amp;#39;\\0&amp;#39;) ++p;\n        return (p - s);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but you could also do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int string_length(char* s)\n{\n        return string_end(s) - s;\n}\n\nchar* string_end(char* s)\n{\n        if (*s == &amp;#39;\\0&amp;#39;) return s;\n        return (string_end(s + 1));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There: purely functional!            &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mm9d", "score_hidden": false, "stickied": false, "created": 1492013237.0, "created_utc": 1491984437.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg69oat", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LPTK", "parent_id": "t1_dg682t0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Very good point. \n\nBut I'd still prefer this (reference counting where you have to be careful with cycles) than GC.\nThey are not mutually exclusive though. If the GC is only triggered if there are cycle-induced leaks, it seems totally acceptable for many use cases (it's better than an OOM crash).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very good point. &lt;/p&gt;\n\n&lt;p&gt;But I&amp;#39;d still prefer this (reference counting where you have to be careful with cycles) than GC.\nThey are not mutually exclusive though. If the GC is only triggered if there are cycle-induced leaks, it seems totally acceptable for many use cases (it&amp;#39;s better than an OOM crash).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg69oat", "score_hidden": false, "stickied": false, "created": 1492049007.0, "created_utc": 1492020207.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg682t0", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "matthieum", "parent_id": "t1_dg662u2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well, the problem is that LibF data structures are immutable, but they can contain *anything*, and since most C++ types are mutable...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, the problem is that LibF data structures are immutable, but they can contain &lt;em&gt;anything&lt;/em&gt;, and since most C++ types are mutable...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg682t0", "score_hidden": false, "stickied": false, "created": 1492047393.0, "created_utc": 1492018593.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg662u2", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg656mq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; I am not sure switching to reference counting would work that well, given the ease of introducing circles.\n\nCircles actually aren't a problem with purely functional data structures, because you can't create a circle without mutation. I didn't actually follow the link so I'm not sure if that applies to LibF, though.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I am not sure switching to reference counting would work that well, given the ease of introducing circles.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Circles actually aren&amp;#39;t a problem with purely functional data structures, because you can&amp;#39;t create a circle without mutation. I didn&amp;#39;t actually follow the link so I&amp;#39;m not sure if that applies to LibF, though.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg662u2", "score_hidden": false, "stickied": false, "created": 1492045382.0, "created_utc": 1492016582.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg67jfs", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dg656mq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ah thanks for that, I feel dumb. Though it does underline the point; usually if you can handle gc you aren't using c++ to start with, which puts a question mark on the real world utility. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah thanks for that, I feel dumb. Though it does underline the point; usually if you can handle gc you aren&amp;#39;t using c++ to start with, which puts a question mark on the real world utility. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg67jfs", "score_hidden": false, "stickied": false, "created": 1492046856.0, "created_utc": 1492018056.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg656mq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "matthieum", "parent_id": "t1_dg5x2ho", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; *Automatic memory management:* Currently LibF uses the Boehm GC. In future a version using reference counting may be possible.\n\nSo apparently Boehm GC.\n\nI am not sure switching to reference counting would work that well, given the ease of introducing circles.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;Automatic memory management:&lt;/em&gt; Currently LibF uses the Boehm GC. In future a version using reference counting may be possible.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So apparently Boehm GC.&lt;/p&gt;\n\n&lt;p&gt;I am not sure switching to reference counting would work that well, given the ease of introducing circles.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg656mq", "score_hidden": false, "stickied": false, "created": 1492044458.0, "created_utc": 1492015658.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg7nzz6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg6mb5p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; which I would have thought the author of a purely functional library would prefer ;-).\n\nYes, you have a point.  The lambda-style idiom did not occur to me at the time of writing.  The code could always be cleaned up in the future.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;which I would have thought the author of a purely functional library would prefer ;-).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, you have a point.  The lambda-style idiom did not occur to me at the time of writing.  The code could always be cleaned up in the future.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7nzz6", "score_hidden": false, "stickied": false, "created": 1492124567.0, "created_utc": 1492095767.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6mb5p", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dg6l5x6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Fair enough. As I noted elsewhere, this is somewhat problematic as most people who can tolerate a GC simply aren't using C++ to begin with (though I'm sure there are exceptions). Though maybe Boehm gives you more manual control as to when things occur, not really sure.\n\n&gt;  but I don't mind other paradigms, or mixing paradigms, where appropriate.\n\nSure, I agree, but I would emphasize \"where appropriate\". If the goto was the clearest or fastest way to do something, but here it's neither: there are multiple ways to rewrite it that are equally fast and clearer. I just thought it was a bit ironic as the main ways that stood out involved lambdas (lambdas can actually replace gotos in many situations), which I would have thought the author of a purely functional library would prefer ;-).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fair enough. As I noted elsewhere, this is somewhat problematic as most people who can tolerate a GC simply aren&amp;#39;t using C++ to begin with (though I&amp;#39;m sure there are exceptions). Though maybe Boehm gives you more manual control as to when things occur, not really sure.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;but I don&amp;#39;t mind other paradigms, or mixing paradigms, where appropriate.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Sure, I agree, but I would emphasize &amp;quot;where appropriate&amp;quot;. If the goto was the clearest or fastest way to do something, but here it&amp;#39;s neither: there are multiple ways to rewrite it that are equally fast and clearer. I just thought it was a bit ironic as the main ways that stood out involved lambdas (lambdas can actually replace gotos in many situations), which I would have thought the author of a purely functional library would prefer ;-).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6mb5p", "score_hidden": false, "stickied": false, "created": 1492062386.0, "created_utc": 1492033586.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6l5x6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg5x2ho", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Are you using reference counting?\n\nThe current implementation is using the Boehm GC.  In future I'd like to also support a reference counted version as an option.\n\n&gt; I'm kind of surprised that someone into making C++ purely functional is using gotos so needlessly\n\nSome parts of the library (e.g. `fvector.cpp`, `fstring.cpp`) are low-level, so not the best example of pure functional programming in C++.  Other parts like `fseq.cpp` and `ftree.cpp` are more high-level.  Ultimately I like the idea of pure functional programming being an *option* in C++, but I don't mind other paradigms, or mixing paradigms, where appropriate.  Another example: https://github.com/GJDuck/libf/blob/master/examples/libf2html.cpp\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Are you using reference counting?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The current implementation is using the Boehm GC.  In future I&amp;#39;d like to also support a reference counted version as an option.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m kind of surprised that someone into making C++ purely functional is using gotos so needlessly&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Some parts of the library (e.g. &lt;code&gt;fvector.cpp&lt;/code&gt;, &lt;code&gt;fstring.cpp&lt;/code&gt;) are low-level, so not the best example of pure functional programming in C++.  Other parts like &lt;code&gt;fseq.cpp&lt;/code&gt; and &lt;code&gt;ftree.cpp&lt;/code&gt; are more high-level.  Ultimately I like the idea of pure functional programming being an &lt;em&gt;option&lt;/em&gt; in C++, but I don&amp;#39;t mind other paradigms, or mixing paradigms, where appropriate.  Another example: &lt;a href=\"https://github.com/GJDuck/libf/blob/master/examples/libf2html.cpp\"&gt;https://github.com/GJDuck/libf/blob/master/examples/libf2html.cpp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6l5x6", "score_hidden": false, "stickied": false, "created": 1492061025.0, "created_utc": 1492032225.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5x2ho", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "quicknir", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Cool stuff. What's your approach to dealing with keeping data structures fragments alive the appropriate amount of time? The issue I find with immutable data structures is that general purpose ones tend to be very heavily tied to GC. Otherwise it's hard to know when parts of the data structure can be reclaimed. Are you using reference counting? I skimmed very quickly but didn't see it.\n\nAlso, I'm kind of surprised that someone into making C++ purely functional is using gotos so needlessly:\n\n        if (_seq_is_empty(s))\n        {\n        vector_push_back_vec:\n            VecData *vec = vec_malloc(size, 1);\n            vec-&gt;header._len = 1;\n            vec_set_value(vec, size, 0, elem);\n            s = _seq_push_back(s, vec_frag_from_data(vec));\n            return s;\n        }\n        _Frag frag = _seq_peek_back(s);\n        VecData *vec = vec_data_from_frag(frag);\n        if (vec_get_frag_size(size, vec-&gt;header._len + 1) &gt; VECTOR_FRAG_MAX_SIZE)\n            goto vector_push_back_vec;\n\nI'm guessing you want to strictly optimize the empty container path as it's commonly taken. There's many ways to eliminate the goto and not pay any performance cost.\n\n    auto too_big = [](const auto&amp; s, auto size) {\n            _Frag frag = _seq_peek_back(s);\n            VecData *vec = vec_data_from_frag(frag);\n            return vec_get_frag_size(size, vec-&gt;header._len + 1) &gt; VECTOR_FRAG_MAX_SIZE;\n    }\n\n    if (_seq_is_empty(s) || too_big(s, size))\n        ...\n    }\n\nThis will have the same behavior, and because of short circuiting the same performance, as the original.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool stuff. What&amp;#39;s your approach to dealing with keeping data structures fragments alive the appropriate amount of time? The issue I find with immutable data structures is that general purpose ones tend to be very heavily tied to GC. Otherwise it&amp;#39;s hard to know when parts of the data structure can be reclaimed. Are you using reference counting? I skimmed very quickly but didn&amp;#39;t see it.&lt;/p&gt;\n\n&lt;p&gt;Also, I&amp;#39;m kind of surprised that someone into making C++ purely functional is using gotos so needlessly:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    if (_seq_is_empty(s))\n    {\n    vector_push_back_vec:\n        VecData *vec = vec_malloc(size, 1);\n        vec-&amp;gt;header._len = 1;\n        vec_set_value(vec, size, 0, elem);\n        s = _seq_push_back(s, vec_frag_from_data(vec));\n        return s;\n    }\n    _Frag frag = _seq_peek_back(s);\n    VecData *vec = vec_data_from_frag(frag);\n    if (vec_get_frag_size(size, vec-&amp;gt;header._len + 1) &amp;gt; VECTOR_FRAG_MAX_SIZE)\n        goto vector_push_back_vec;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m guessing you want to strictly optimize the empty container path as it&amp;#39;s commonly taken. There&amp;#39;s many ways to eliminate the goto and not pay any performance cost.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;auto too_big = [](const auto&amp;amp; s, auto size) {\n        _Frag frag = _seq_peek_back(s);\n        VecData *vec = vec_data_from_frag(frag);\n        return vec_get_frag_size(size, vec-&amp;gt;header._len + 1) &amp;gt; VECTOR_FRAG_MAX_SIZE;\n}\n\nif (_seq_is_empty(s) || too_big(s, size))\n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will have the same behavior, and because of short circuiting the same performance, as the original.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5x2ho", "score_hidden": false, "stickied": false, "created": 1492035525.0, "created_utc": 1492006725.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg6k9ts", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg68927", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; F::Vector is really a 2-3 tree\n\nActually it is a 23-**finger**-tree.  Finger trees are a less-well-known data structure with some useful properties, such as O(1) concatenation of elements to the front and back (useful for O(1) `push_back`/`push_front`).  Some more info: http://www.staff.city.ac.uk/~ross/papers/FingerTree.html and http://www.staff.city.ac.uk/~ross/papers/FingerTree/more-trees.html", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;F::Vector is really a 2-3 tree&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Actually it is a 23-&lt;strong&gt;finger&lt;/strong&gt;-tree.  Finger trees are a less-well-known data structure with some useful properties, such as O(1) concatenation of elements to the front and back (useful for O(1) &lt;code&gt;push_back&lt;/code&gt;/&lt;code&gt;push_front&lt;/code&gt;).  Some more info: &lt;a href=\"http://www.staff.city.ac.uk/%7Eross/papers/FingerTree.html\"&gt;http://www.staff.city.ac.uk/~ross/papers/FingerTree.html&lt;/a&gt; and &lt;a href=\"http://www.staff.city.ac.uk/%7Eross/papers/FingerTree/more-trees.html\"&gt;http://www.staff.city.ac.uk/~ross/papers/FingerTree/more-trees.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6k9ts", "score_hidden": false, "stickied": false, "created": 1492059995.0, "created_utc": 1492031195.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg68927", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mabrowning", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "    README.md:\n   &gt; Such results are expected (immutability has ~~inherit~~ inherent costs).\n\nLooks cool! What is the difference between a F::List and F::Vector?\n\nEdit: seems that F::List is still a doubly-linked list and F::Vector is really a 2-3 tree... I guess the main *functional* difference is that you can refer to elements of the F::Vector by index. I see.", "edited": 1492019211.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;README.md:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Such results are expected (immutability has &lt;del&gt;inherit&lt;/del&gt; inherent costs).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Looks cool! What is the difference between a F::List and F::Vector?&lt;/p&gt;\n\n&lt;p&gt;Edit: seems that F::List is still a doubly-linked list and F::Vector is really a 2-3 tree... I guess the main &lt;em&gt;functional&lt;/em&gt; difference is that you can refer to elements of the F::Vector by index. I see.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg68927", "score_hidden": false, "stickied": false, "created": 1492047569.0, "created_utc": 1492018769.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg69t50", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LPTK", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I don't think this library does it (yet?), but I'd like to see the implementation backed with copy-on-write semantics, for performance. Adding an element to a vector could grow a buffer, and only if a old version of the structure is used can we perform a copy.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t think this library does it (yet?), but I&amp;#39;d like to see the implementation backed with copy-on-write semantics, for performance. Adding an element to a vector could grow a buffer, and only if a old version of the structure is used can we perform a copy.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg69t50", "score_hidden": false, "stickied": false, "created": 1492049146.0, "created_utc": 1492020346.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg9jvwf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "redweasel", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Looks like one of these years I may have to take the time to make sense of Github...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Looks like one of these years I may have to take the time to make sense of Github...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9jvwf", "score_hidden": false, "stickied": false, "created": 1492224021.0, "created_utc": 1492195221.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5qkt6", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "lookatmetype", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "I would be more excited about this if looking at C++ syntax didn't make me vomit", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would be more excited about this if looking at C++ syntax didn&amp;#39;t make me vomit&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5qkt6", "score_hidden": false, "stickied": false, "created": 1492025032.0, "created_utc": 1491996232.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg7kszu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "6ruce", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Why would I even want to use _C++_ as a pure functional programming language?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why would I even want to use &lt;em&gt;C++&lt;/em&gt; as a pure functional programming language?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7kszu", "score_hidden": false, "stickied": false, "created": 1492120818.0, "created_utc": 1492092018.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5rvmu", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "tending", "parent_id": "t1_dg5rjpf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "None of those enable the quick snapshot functionality I described.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;None of those enable the quick snapshot functionality I described.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5rvmu", "score_hidden": false, "stickied": false, "created": 1492027802.0, "created_utc": 1491999002.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 17}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5rjpf", "gilded": 0, "archived": false, "score": -7, "report_reasons": null, "author": "q0-", "parent_id": "t1_dg5rg4u", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;You're very confused.\n\nAm I, though? Because last time I checked, C++ still had `const`. And references. And `const` references. And move constructors...  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You&amp;#39;re very confused.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Am I, though? Because last time I checked, C++ still had &lt;code&gt;const&lt;/code&gt;. And references. And &lt;code&gt;const&lt;/code&gt; references. And move constructors...  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5rjpf", "score_hidden": false, "stickied": false, "created": 1492027136.0, "created_utc": 1491998336.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5rg4u", "gilded": 0, "archived": false, "score": 20, "report_reasons": null, "author": "tending", "parent_id": "t1_dg5la84", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You're very confused.\n\nEfficient immutable data structures allow you to implement very different kinds of algorithms efficiently than you normally could.\n\nWith an immutable vector (which is implemented underneath with a sort of tree) copying vectors is cheap, and if you insert an element into a copy the original is unchanged, BUT they share as many elements as possible underneath still so you don't use  2 full copies worth of memory like you would with an std vector. It's like having a data structure where you can take a cheap backup snapshot anytime you want. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re very confused.&lt;/p&gt;\n\n&lt;p&gt;Efficient immutable data structures allow you to implement very different kinds of algorithms efficiently than you normally could.&lt;/p&gt;\n\n&lt;p&gt;With an immutable vector (which is implemented underneath with a sort of tree) copying vectors is cheap, and if you insert an element into a copy the original is unchanged, BUT they share as many elements as possible underneath still so you don&amp;#39;t use  2 full copies worth of memory like you would with an std vector. It&amp;#39;s like having a data structure where you can take a cheap backup snapshot anytime you want. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5rg4u", "score_hidden": false, "stickied": false, "created": 1492026939.0, "created_utc": 1491998139.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 20}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg65acv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "matthieum", "parent_id": "t1_dg5lprq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Is there any reason for `push_back` not being a method?\n\n`F::push_back(xs, i)` is slightly less readable than `xs.push_back(i)`, especially when chaining.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is there any reason for &lt;code&gt;push_back&lt;/code&gt; not being a method?&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;F::push_back(xs, i)&lt;/code&gt; is slightly less readable than &lt;code&gt;xs.push_back(i)&lt;/code&gt;, especially when chaining.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg65acv", "score_hidden": false, "stickied": false, "created": 1492044566.0, "created_utc": 1492015766.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5m3p4", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg5lu2l", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This was not the intention.  It was merely meant to point out that the current standard library classes are mutable and thus unsuitable for pure (side-effect free) functional programming.  Of course, this assumes that the reader has decided they *want* pure functional programming in the first place.  If not, then there is no need to use this library.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This was not the intention.  It was merely meant to point out that the current standard library classes are mutable and thus unsuitable for pure (side-effect free) functional programming.  Of course, this assumes that the reader has decided they &lt;em&gt;want&lt;/em&gt; pure functional programming in the first place.  If not, then there is no need to use this library.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5m3p4", "score_hidden": false, "stickied": false, "created": 1492011727.0, "created_utc": 1491982927.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 11}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5nax1", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg5ly3p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; As a nitpick, the usage of _ before every variable is a worry, though. C++ reserves any name starting with _ and followed by a capital letter.\n\nThanks, added as an issue: https://github.com/GJDuck/libf/issues/2", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;As a nitpick, the usage of _ before every variable is a worry, though. C++ reserves any name starting with _ and followed by a capital letter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks, added as an issue: &lt;a href=\"https://github.com/GJDuck/libf/issues/2\"&gt;https://github.com/GJDuck/libf/issues/2&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5nax1", "score_hidden": false, "stickied": false, "created": 1492015361.0, "created_utc": 1491986561.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5mtvl", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Supadoplex", "parent_id": "t1_dg5ly3p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The code does define a ton of identifiers that start with _ and an upper case, so the behaviour is undefined. While usage of _ before every variable is a decent nit to pick, the use of reserved identifiers is more than that. It is a bug.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The code does define a ton of identifiers that start with _ and an upper case, so the behaviour is undefined. While usage of _ before every variable is a decent nit to pick, the use of reserved identifiers is more than that. It is a bug.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mtvl", "score_hidden": false, "stickied": false, "created": 1492013898.0, "created_utc": 1491985098.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5ly3p", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "Yuushi", "parent_id": "t1_dg5lu2l", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Metaprogramming is compile-time computation, immutable data structures are run-time data structures. Immutable data structures are (almost) never as fast as mutable variants, but can be useful, especially when multiple threads come into play, as there is no sharing of mutable data, hence locks aren't required.\n\nAs a nitpick, the usage of _ before every variable is a worry, though. C++ reserves any name starting with _ and followed by a capital letter.", "edited": 1491986655.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Metaprogramming is compile-time computation, immutable data structures are run-time data structures. Immutable data structures are (almost) never as fast as mutable variants, but can be useful, especially when multiple threads come into play, as there is no sharing of mutable data, hence locks aren&amp;#39;t required.&lt;/p&gt;\n\n&lt;p&gt;As a nitpick, the usage of _ before every variable is a worry, though. C++ reserves any name starting with _ and followed by a capital letter.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5ly3p", "score_hidden": false, "stickied": false, "created": 1492011286.0, "created_utc": 1491982486.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5lu2l", "gilded": 0, "archived": false, "score": -7, "report_reasons": null, "author": "q0-", "parent_id": "t1_dg5lprq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; but obviously not as fast as mutable `std::vector`\n\nSo you're saying it's nothing but a proof-of-concept, that doesn't actually improve anything?  \nI'm sorry if I'm being a killjoy right now, but the readme also really tries to make it seem that not being functional is essentially a bad thing, but the logic simply doesn't apply like that in C++, because C++ has a metaprogramming abilities.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;but obviously not as fast as mutable &lt;code&gt;std::vector&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So you&amp;#39;re saying it&amp;#39;s nothing but a proof-of-concept, that doesn&amp;#39;t actually improve anything?&lt;br/&gt;\nI&amp;#39;m sorry if I&amp;#39;m being a killjoy right now, but the readme also really tries to make it seem that not being functional is essentially a bad thing, but the logic simply doesn&amp;#39;t apply like that in C++, because C++ has a metaprogramming abilities.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5lu2l", "score_hidden": false, "stickied": false, "created": 1492010969.0, "created_utc": 1491982169.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5wad9", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Tubbers", "parent_id": "t1_dg5ox63", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well, what about when you want to add a value to that vector? Are you going to copy it? That is very inefficient and could bottleneck your performance. Immutable datastructures are optimized for these cases, and if you need them and take advantage of them, they can allow you to solve a class of problems in a much less error prone way.\n\nThey are certainly not always better, but when you have the right kind of problem to solve they can be a lifesaver.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, what about when you want to add a value to that vector? Are you going to copy it? That is very inefficient and could bottleneck your performance. Immutable datastructures are optimized for these cases, and if you need them and take advantage of them, they can allow you to solve a class of problems in a much less error prone way.&lt;/p&gt;\n\n&lt;p&gt;They are certainly not always better, but when you have the right kind of problem to solve they can be a lifesaver.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5wad9", "score_hidden": false, "stickied": false, "created": 1492034553.0, "created_utc": 1492005753.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5ox63", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "doom_Oo7", "parent_id": "t1_dg5lprq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; The premise here is immutable replacements to std objects.\n\nSo... why not just do `namespace F { template&lt;typename... Args&gt; using vector = const std::vector&lt;Args...&gt;; }`", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The premise here is immutable replacements to std objects.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So... why not just do &lt;code&gt;namespace F { template&amp;lt;typename... Args&amp;gt; using vector = const std::vector&amp;lt;Args...&amp;gt;; }&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5ox63", "score_hidden": false, "stickied": false, "created": 1492020466.0, "created_utc": 1491991666.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5lprq", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "zoomT", "parent_id": "t1_dg5la84", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; How exactly is this an improvement over `std::vector&lt;&gt;::push_back`?\n\nThe premise here is immutable replacements to `std` objects.  Naively making `std::vector` immutable would require an O(n) array copy every `push_back` operation since the old copy must not be destroyed.  `F::Vector` is immutable and supports O(1) `push_back`, but obviously not as fast as mutable `std::vector`.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;How exactly is this an improvement over &lt;code&gt;std::vector&amp;lt;&amp;gt;::push_back&lt;/code&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The premise here is immutable replacements to &lt;code&gt;std&lt;/code&gt; objects.  Naively making &lt;code&gt;std::vector&lt;/code&gt; immutable would require an O(n) array copy every &lt;code&gt;push_back&lt;/code&gt; operation since the old copy must not be destroyed.  &lt;code&gt;F::Vector&lt;/code&gt; is immutable and supports O(1) &lt;code&gt;push_back&lt;/code&gt;, but obviously not as fast as mutable &lt;code&gt;std::vector&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5lprq", "score_hidden": false, "stickied": false, "created": 1492010633.0, "created_utc": 1491981833.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 11}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5la84", "gilded": 0, "archived": false, "score": -4, "report_reasons": null, "author": "q0-", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "How exactly is [this](https://github.com/GJDuck/libf/blob/1049aa7ad65d11e6eaebd724a56cf0f487aa81f5/fvector.cpp#L156) an improvement over `std::vector&lt;&gt;::push_back`?\n\nAs far as I can tell, you just reimplemented the *exact* same algorithm used by `vector::push_back`, except (probably very) poorly. It's also completely chucking metaprogramming straight out of the window.  \n\nUnlike most functional languages, C++ allows mutability at a much, much lower level, thus completely leveling the argument here.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How exactly is &lt;a href=\"https://github.com/GJDuck/libf/blob/1049aa7ad65d11e6eaebd724a56cf0f487aa81f5/fvector.cpp#L156\"&gt;this&lt;/a&gt; an improvement over &lt;code&gt;std::vector&amp;lt;&amp;gt;::push_back&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;As far as I can tell, you just reimplemented the &lt;em&gt;exact&lt;/em&gt; same algorithm used by &lt;code&gt;vector::push_back&lt;/code&gt;, except (probably very) poorly. It&amp;#39;s also completely chucking metaprogramming straight out of the window.  &lt;/p&gt;\n\n&lt;p&gt;Unlike most functional languages, C++ allows mutability at a much, much lower level, thus completely leveling the argument here.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5la84", "score_hidden": false, "stickied": false, "created": 1492009459.0, "created_utc": 1491980659.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5mxjc", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "Yuushi", "parent_id": "t1_dg5mo5s", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You can apply `const` to values where the underlying value can change, for one:\n\n    int i = 1;\n    const int&amp; j = i;\n    // Cannot modify j, but its value can change since i is mutable.\n\n`const` is also not deep:\n\n    #include &lt;memory&gt;\n    #include &lt;vector&gt;\n    #include &lt;iostream&gt;\n\n    void some_func(const std::vector&lt;std::shared_ptr&lt;int&gt;&gt;&amp; x)\n    {\n        auto* value = x[0].get();\n        ++(*value);\n    }\n\n    int main()\n    {\n        std::vector&lt;std::shared_ptr&lt;int&gt;&gt; x;\n        x.push_back(std::make_shared&lt;int&gt;(0));\n        some_func(x);\n        std::cout &lt;&lt; *(x[0]) &lt;&lt; '\\n';\n    }\n\nHowever, you can think of immutability as basically marking everything `const`:\n\n    void some_func(const std::vector&lt;std::shared_ptr&lt;const int&gt;&gt;&amp; x)\n    {\n        auto* value = x[0].get();\n        // This will fail since the int itself is const\n        ++(*value);\n    }\n\nSo imagine you have a `const std::vector&lt;const int&gt;`. That'd be an immutable data structure - it'd just be very awkward to work with, and very slow.", "edited": 1491985667.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can apply &lt;code&gt;const&lt;/code&gt; to values where the underlying value can change, for one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int i = 1;\nconst int&amp;amp; j = i;\n// Cannot modify j, but its value can change since i is mutable.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is also not deep:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;memory&amp;gt;\n#include &amp;lt;vector&amp;gt;\n#include &amp;lt;iostream&amp;gt;\n\nvoid some_func(const std::vector&amp;lt;std::shared_ptr&amp;lt;int&amp;gt;&amp;gt;&amp;amp; x)\n{\n    auto* value = x[0].get();\n    ++(*value);\n}\n\nint main()\n{\n    std::vector&amp;lt;std::shared_ptr&amp;lt;int&amp;gt;&amp;gt; x;\n    x.push_back(std::make_shared&amp;lt;int&amp;gt;(0));\n    some_func(x);\n    std::cout &amp;lt;&amp;lt; *(x[0]) &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, you can think of immutability as basically marking everything &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void some_func(const std::vector&amp;lt;std::shared_ptr&amp;lt;const int&amp;gt;&amp;gt;&amp;amp; x)\n{\n    auto* value = x[0].get();\n    // This will fail since the int itself is const\n    ++(*value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So imagine you have a &lt;code&gt;const std::vector&amp;lt;const int&amp;gt;&lt;/code&gt;. That&amp;#39;d be an immutable data structure - it&amp;#39;d just be very awkward to work with, and very slow.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mxjc", "score_hidden": false, "stickied": false, "created": 1492014209.0, "created_utc": 1491985409.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5pprr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t1_dg5n9h5", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The main reason of course being that there are other languages that can benifit from immutable data structures. First, the compiler can make assumptions that a C++ compiler cannot. Then, with immutable variables only, one cannot write a \"loop\": we need recursive definitions. Without tail recursion optimization, this can get difficult.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The main reason of course being that there are other languages that can benifit from immutable data structures. First, the compiler can make assumptions that a C++ compiler cannot. Then, with immutable variables only, one cannot write a &amp;quot;loop&amp;quot;: we need recursive definitions. Without tail recursion optimization, this can get difficult.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5pprr", "score_hidden": false, "stickied": false, "created": 1492022814.0, "created_utc": 1491994014.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dg65oto", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg64syn", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's definitely a structure I think would be promising. (It's also just plain neat! I originally learned about it via Clojure, though I'll admit to having to look it up by that name.) Problem is that I don't think I can just drop it in as a replacement, because there are places the code depends on sorted order, so actually *using* it I think would be an immense effort.\n\nOne idea I had that *would* be nearly a drop-in replacement is inspired by video compression. You probably have an idea of how this works, but in case the exact terms are unfamiliar, the video has occasional \"I-frames\" that contain the full frame contents, and most frames are \"P-frames\" that encode a delta from the prior I-frame.^1 So... have I-trees and P-trees. I-trees store the full map in a time-efficient manner, e.g. a sorted vector. P-trees store a pointer to an I-tree, and a delta off of that I-tree (i.e. list of added &amp; changed key+values, and removed keys). When you make a modification to an existing tree, you get a P-tree, unless the delta is too big in which case it will copy the full vector, meld in the deltas, and give you a new I-tree.\n\nThere are a couple uses of our maps though that would be hard to adapt to this interface; a couple places in the code actually depend on the treeness of the implementation sadly. It'd probably take me a few days to write this, integrate it, and test it out; and unfortunately I don't really have that flexibility.\n\n^(^1 Some video compression algorithms also have B-frames that are sort of reverse-time P-frames, but I don't think it'd be possible to have an analogue here.)", "edited": 1492016447.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s definitely a structure I think would be promising. (It&amp;#39;s also just plain neat! I originally learned about it via Clojure, though I&amp;#39;ll admit to having to look it up by that name.) Problem is that I don&amp;#39;t think I can just drop it in as a replacement, because there are places the code depends on sorted order, so actually &lt;em&gt;using&lt;/em&gt; it I think would be an immense effort.&lt;/p&gt;\n\n&lt;p&gt;One idea I had that &lt;em&gt;would&lt;/em&gt; be nearly a drop-in replacement is inspired by video compression. You probably have an idea of how this works, but in case the exact terms are unfamiliar, the video has occasional &amp;quot;I-frames&amp;quot; that contain the full frame contents, and most frames are &amp;quot;P-frames&amp;quot; that encode a delta from the prior I-frame.&lt;sup&gt;1&lt;/sup&gt; So... have I-trees and P-trees. I-trees store the full map in a time-efficient manner, e.g. a sorted vector. P-trees store a pointer to an I-tree, and a delta off of that I-tree (i.e. list of added &amp;amp; changed key+values, and removed keys). When you make a modification to an existing tree, you get a P-tree, unless the delta is too big in which case it will copy the full vector, meld in the deltas, and give you a new I-tree.&lt;/p&gt;\n\n&lt;p&gt;There are a couple uses of our maps though that would be hard to adapt to this interface; a couple places in the code actually depend on the treeness of the implementation sadly. It&amp;#39;d probably take me a few days to write this, integrate it, and test it out; and unfortunately I don&amp;#39;t really have that flexibility.&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;sup&gt;1&lt;/sup&gt; Some video compression algorithms also have B-frames that are sort of reverse-time P-frames, but I don&amp;#39;t think it&amp;#39;d be possible to have an analogue here.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg65oto", "score_hidden": false, "stickied": false, "created": 1492044986.0, "created_utc": 1492016186.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg64syn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sirin3", "parent_id": "t1_dg62cqm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I love the idea of HAMTs for that.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I love the idea of HAMTs for that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg64syn", "score_hidden": false, "stickied": false, "created": 1492044064.0, "created_utc": 1492015264.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg62cqm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg5n9h5", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; it is likely of extremely limited practical use.\n\nI'm not going to say that my case is common, but we need and use applicative maps, or something similar, all over the code base I work on. The reason is that we need to be able to have a map, make some modification to the map, and keep *both* the old and new versions.\n\nIt really kind of sucks because part of me thinks that we could probably have a better data structure (e.g., Chandler Carruth's [comments on std::map](https://youtu.be/fHNmRkzxHWs?t=2719), which is a bit more specific than trees in general) because we probably have terrible cache performance and a distressingly large proportion of our runtime is performing manipulations of our applicative map, but I don't know what a better structure would be. I have some ideas that *could* be better, but it's hard to know without trying and I don't have time to try.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;it is likely of extremely limited practical use.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;m not going to say that my case is common, but we need and use applicative maps, or something similar, all over the code base I work on. The reason is that we need to be able to have a map, make some modification to the map, and keep &lt;em&gt;both&lt;/em&gt; the old and new versions.&lt;/p&gt;\n\n&lt;p&gt;It really kind of sucks because part of me thinks that we could probably have a better data structure (e.g., Chandler Carruth&amp;#39;s &lt;a href=\"https://youtu.be/fHNmRkzxHWs?t=2719\"&gt;comments on std::map&lt;/a&gt;, which is a bit more specific than trees in general) because we probably have terrible cache performance and a distressingly large proportion of our runtime is performing manipulations of our applicative map, but I don&amp;#39;t know what a better structure would be. I have some ideas that &lt;em&gt;could&lt;/em&gt; be better, but it&amp;#39;s hard to know without trying and I don&amp;#39;t have time to try.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg62cqm", "score_hidden": false, "stickied": false, "created": 1492041472.0, "created_utc": 1492012672.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5n9h5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Yuushi", "parent_id": "t1_dg5n6d4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Sure. I think it's an interesting idea to try and implement such structures in C++, but it is likely of extremely limited practical use.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sure. I think it&amp;#39;s an interesting idea to try and implement such structures in C++, but it is likely of extremely limited practical use.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5n9h5", "score_hidden": false, "stickied": false, "created": 1492015237.0, "created_utc": 1491986437.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5n6d4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t1_dg5n3uw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "But one of the great things about C++ are the promises that the standard library data structures and algorithms make about their complexity. If you want \"purely functional\", just take Haskell; I bet you are going to have a better time programming in Haskell than in C++ anyway.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But one of the great things about C++ are the promises that the standard library data structures and algorithms make about their complexity. If you want &amp;quot;purely functional&amp;quot;, just take Haskell; I bet you are going to have a better time programming in Haskell than in C++ anyway.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5n6d4", "score_hidden": false, "stickied": false, "created": 1492014970.0, "created_utc": 1491986170.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5n3uw", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Yuushi", "parent_id": "t1_dg5mwcf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Indeed, which is why the immutable vector type here is actually a tree. The documentation here should probably mention that more prominently, since it means it is absolutely NOT a drop in replacement for `std::vector`, which is guaranteed to have contiguous storage (and likewise for `std::string`).\n\nOf course, C++ complicates matters with your stack example since it isn't garbage collected, so there's nothing to stop the \"original\" stack from being destroyed at some point. This makes writing immutable data structures in C++ much, much harder than in most other languages. This library uses a garbage collector to get around this very problem.", "edited": 1491986226.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Indeed, which is why the immutable vector type here is actually a tree. The documentation here should probably mention that more prominently, since it means it is absolutely NOT a drop in replacement for &lt;code&gt;std::vector&lt;/code&gt;, which is guaranteed to have contiguous storage (and likewise for &lt;code&gt;std::string&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Of course, C++ complicates matters with your stack example since it isn&amp;#39;t garbage collected, so there&amp;#39;s nothing to stop the &amp;quot;original&amp;quot; stack from being destroyed at some point. This makes writing immutable data structures in C++ much, much harder than in most other languages. This library uses a garbage collector to get around this very problem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5n3uw", "score_hidden": false, "stickied": false, "created": 1492014748.0, "created_utc": 1491985948.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5mwcf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t1_dg5mo5s", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I guess the point is that if you have an \"immutable\" stack, for example, and you push something to it, then you just need one extra memory allocation and a pointer to the new top; since everything is immutable, whoever is still holding on the the now second element in the stack still has a valid stack, one element shorter.\n\nThis works well with lists and trees and other data structures that do not insist on a particular memory layout.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess the point is that if you have an &amp;quot;immutable&amp;quot; stack, for example, and you push something to it, then you just need one extra memory allocation and a pointer to the new top; since everything is immutable, whoever is still holding on the the now second element in the stack still has a valid stack, one element shorter.&lt;/p&gt;\n\n&lt;p&gt;This works well with lists and trees and other data structures that do not insist on a particular memory layout.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mwcf", "score_hidden": false, "stickied": false, "created": 1492014108.0, "created_utc": 1491985308.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg67z0o", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "bstamour", "parent_id": "t1_dg62flt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ah yes, sorry I thought I implied that in my comment. Thanks for adding clarification.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah yes, sorry I thought I implied that in my comment. Thanks for adding clarification.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg67z0o", "score_hidden": false, "stickied": false, "created": 1492047286.0, "created_utc": 1492018486.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg62flt", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "evaned", "parent_id": "t1_dg5u56e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; But then mutating the thing is undefined behaviour.\n\nThat's not really true. Casting away const and mutating the object is only UB if the object itself is physically const (i.e. declared const from the get go). For example,\n\n    Thingy const * cp = new Thingy();\n    Thingy * p = const_cast&lt;Thingy*&gt;(cp);\n    p-&gt;change_me();\n\nis legal, if ill-advised.\n\nThe real answer, as others have described, is that `const` doesn't really have much to do with immutable/applicative data structures as discussed here.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;But then mutating the thing is undefined behaviour.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s not really true. Casting away const and mutating the object is only UB if the object itself is physically const (i.e. declared const from the get go). For example,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Thingy const * cp = new Thingy();\nThingy * p = const_cast&amp;lt;Thingy*&amp;gt;(cp);\np-&amp;gt;change_me();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is legal, if ill-advised.&lt;/p&gt;\n\n&lt;p&gt;The real answer, as others have described, is that &lt;code&gt;const&lt;/code&gt; doesn&amp;#39;t really have much to do with immutable/applicative data structures as discussed here.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg62flt", "score_hidden": false, "stickied": false, "created": 1492041556.0, "created_utc": 1492012756.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5u56e", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bstamour", "parent_id": "t1_dg5ne6n", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "But then mutating the thing is undefined behaviour. const cast really only exists for interfacing with old code libraries where you want to call a function that a) doesn't modify its arguments, and b) doesn't label its arguments as const.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But then mutating the thing is undefined behaviour. const cast really only exists for interfacing with old code libraries where you want to call a function that a) doesn&amp;#39;t modify its arguments, and b) doesn&amp;#39;t label its arguments as const.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5u56e", "score_hidden": false, "stickied": false, "created": 1492031614.0, "created_utc": 1492002814.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5ne6n", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Metaluim", "parent_id": "t1_dg5mo5s", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I guess you can cast const away with const_cast", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess you can cast const away with const_cast&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5ne6n", "score_hidden": false, "stickied": false, "created": 1492015641.0, "created_utc": 1491986841.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5mo5s", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "MagicMurderBagYT", "parent_id": "t1_dg5menp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What exactly is the difference between true immutability and const?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What exactly is the difference between true immutability and const?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mo5s", "score_hidden": false, "stickied": false, "created": 1492013399.0, "created_utc": 1491984599.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64wi07", "likes": null, "replies": "", "user_reports": [], "id": "dg5mtcu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t1_dg5menp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree, the standard library containers were not really made with immutability as a primary concern.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree, the standard library containers were not really made with immutability as a primary concern.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5mtcu", "score_hidden": false, "stickied": false, "created": 1492013851.0, "created_utc": 1491985051.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5menp", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Yuushi", "parent_id": "t1_dg5m7c0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "There's no real support for **pure** functional programming, of which immutable data structures are a part (although this also provides a discriminated union, which has been in boost for a long time, and `std::variant` will be in C++17).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s no real support for &lt;strong&gt;pure&lt;/strong&gt; functional programming, of which immutable data structures are a part (although this also provides a discriminated union, which has been in boost for a long time, and &lt;code&gt;std::variant&lt;/code&gt; will be in C++17).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5menp", "score_hidden": false, "stickied": false, "created": 1492012614.0, "created_utc": 1491983814.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5m7c0", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "boris_the_boris", "parent_id": "t3_64wi07", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Compared to most other languages, C++ really does let you program in almost any style without punishing you for it. So if you want OOP, you do OOP. If you want functional, you do functional. I don't see the added value of what is going on there. You want \"functional programming\", you need to do basically two things:\n\n- implement functions, not class methods;\n- just smack a `const` everywhere.\n\nI know I am oversimplifyiing, but not by too much.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Compared to most other languages, C++ really does let you program in almost any style without punishing you for it. So if you want OOP, you do OOP. If you want functional, you do functional. I don&amp;#39;t see the added value of what is going on there. You want &amp;quot;functional programming&amp;quot;, you need to do basically two things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;implement functions, not class methods;&lt;/li&gt;\n&lt;li&gt;just smack a &lt;code&gt;const&lt;/code&gt; everywhere.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I know I am oversimplifyiing, but not by too much.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5m7c0", "score_hidden": false, "stickied": false, "created": 1492012018.0, "created_utc": 1491983218.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}]