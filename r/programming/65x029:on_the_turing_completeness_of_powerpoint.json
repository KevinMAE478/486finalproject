[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/uNjxe8ShM-8?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "On The Turing Completeness of PowerPoint (SIGBOVIK)", "author_name": "Tom Wildenhain", "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/uNjxe8ShM-8?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "thumbnail_height": 360, "thumbnail_url": "https://i.ytimg.com/vi/uNjxe8ShM-8/hqdefault.jpg", "type": "video", "provider_name": "YouTube", "author_url": "https://www.youtube.com/channel/UCgO8vdeWcywARd99Od-H_8A"}, "type": "youtube.com"}, "link_flair_text": null, "id": "65x029", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/uNjxe8ShM-8?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "clicked": false, "score": 28, "report_reasons": null, "author": "soegaard", "saved": false, "mod_reports": [], "name": "t3_65x029", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "youtube.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65x029/on_the_turing_completeness_of_powerpoint/", "num_reports": null, "locked": false, "stickied": false, "created": 1492479079.0, "url": "https://www.youtube.com/watch?v=uNjxe8ShM-8", "author_flair_text": null, "quarantine": false, "title": "On The Turing Completeness of PowerPoint", "created_utc": 1492450279.0, "distinguished": null, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "On The Turing Completeness of PowerPoint (SIGBOVIK)", "author_name": "Tom Wildenhain", "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/uNjxe8ShM-8?feature=oembed\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "thumbnail_height": 360, "thumbnail_url": "https://i.ytimg.com/vi/uNjxe8ShM-8/hqdefault.jpg", "type": "video", "provider_name": "YouTube", "author_url": "https://www.youtube.com/channel/UCgO8vdeWcywARd99Od-H_8A"}, "type": "youtube.com"}, "upvote_ratio": 0.85, "num_comments": 12, "visited": false, "subreddit_type": "public", "ups": 28}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": "", "user_reports": [], "id": "dge2p9l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bdtddt", "parent_id": "t1_dge0mzu", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Hypothetical ones, thats why when evaluating if a language is Turing complete it is done in a hypothetical scenario where the machine running it has infinite resources. If I run a Python program that needs an infinite amount of memory on such a machine, the Python standard allows it to consume this memory forever. The Powerpoint example is not so, the number of cells is defined initially and remains that way, you can never get more cells without modifying the machine. As it doesn't start infinitely and cannot dynamically access infinite amounts of memory, it is not Turing complete.\n\nI do not understand why something so axiomatic is such a bone of contention, if I went on /r/math and tried claiming my program which implements the first-order theory of naturals modulo n had disproved G\u00f6del, I would be laughed out of the place. This is the exact parallel.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hypothetical ones, thats why when evaluating if a language is Turing complete it is done in a hypothetical scenario where the machine running it has infinite resources. If I run a Python program that needs an infinite amount of memory on such a machine, the Python standard allows it to consume this memory forever. The Powerpoint example is not so, the number of cells is defined initially and remains that way, you can never get more cells without modifying the machine. As it doesn&amp;#39;t start infinitely and cannot dynamically access infinite amounts of memory, it is not Turing complete.&lt;/p&gt;\n\n&lt;p&gt;I do not understand why something so axiomatic is such a bone of contention, if I went on &lt;a href=\"/r/math\"&gt;/r/math&lt;/a&gt; and tried claiming my program which implements the first-order theory of naturals modulo n had disproved G\u00f6del, I would be laughed out of the place. This is the exact parallel.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge2p9l", "score_hidden": false, "stickied": false, "created": 1492490003.0, "created_utc": 1492461203.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge0mzu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "inu-no-policemen", "parent_id": "t1_dgdx0lm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What systems do have infinite memory?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What systems do have infinite memory?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0mzu", "score_hidden": false, "stickied": false, "created": 1492487697.0, "created_utc": 1492458897.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdx0lm", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "bdtddt", "parent_id": "t1_dgdwimy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That is true, however finite memory does imply a system is not Turing complete.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That is true, however finite memory does imply a system is not Turing complete.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdx0lm", "score_hidden": false, "stickied": false, "created": 1492483594.0, "created_utc": 1492454794.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwimy", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "jsjolen", "parent_id": "t1_dgdtb80", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "No.\n\nThe set of push down automatons is strictly larger than the set of FSMs and neither are turing complete.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No.&lt;/p&gt;\n\n&lt;p&gt;The set of push down automatons is strictly larger than the set of FSMs and neither are turing complete.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdwimy", "score_hidden": false, "stickied": false, "created": 1492483032.0, "created_utc": 1492454232.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": "", "user_reports": [], "id": "dge2jz9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bdtddt", "parent_id": "t1_dge0rmr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The computation starts with X amount of memory and can never go beyond this. The computation is finitely bounded before the program is run. In Python this is not the case.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The computation starts with X amount of memory and can never go beyond this. The computation is finitely bounded before the program is run. In Python this is not the case.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge2jz9", "score_hidden": false, "stickied": false, "created": 1492489838.0, "created_utc": 1492461038.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge0rmr", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "TUSF", "parent_id": "t1_dgdwrrd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;Powerpoint does not allow for such, even on a computer with infinite resources\n\nWhy not? What stops a hypothetical programmer from using more memory in PowerPoint, other than the physical bounds of their computer?", "edited": 1492459547.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Powerpoint does not allow for such, even on a computer with infinite resources&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Why not? What stops a hypothetical programmer from using more memory in PowerPoint, other than the physical bounds of their computer?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0rmr", "score_hidden": false, "stickied": false, "created": 1492487843.0, "created_utc": 1492459043.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": "", "user_reports": [], "id": "dge2yfe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bdtddt", "parent_id": "t1_dge1zqo", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Sorry you're not thinking about this correctly. I can make a powerpoint presentation that has enough room for any arbitrary size you can choose.\n\nYes but you must do this by constructing the machine before it is ran and then leaving it. The entire class of computations which infinitely consume memory cannot be run.\n\n&gt; This is exactly the same as any real computer which has a fixed maximum amount of memory.\n\nThis is exactly the same as any real computer which has a fixed maximum amount of memory.\n\nNone of which are Turing complete. Languages and computational systems get Turing completeness, every theorist knows that computers are real-word approximations and doesn't pretend they give us Turing completeness.\n\n&gt; Dynamic memory allocation from an OS is not a requirement for turing completeness. \n\nThe ability for the computational system to be unbounded by memory to any degree is. Without infinite memory, plenty of computations are impossible.\n\n&gt; The first versions of FORTRAN only allowed static allocation.\n\nErgo they were not Turing complete. Not being Turing complete doesn't mean they are useless, for example any algorithm with an upper-bound on running time can reasonably be run, but it still applies. Turing completeness is defined mathematically and rigorously, this mathematical definition is predicated on infinite memory, the end.\n\n&gt; MacOS before X didn't support dynamic memory allocation and you had to preallocate.\n\nNot Turing complete.\n\n&gt; You're just using the wrong definition of turing complete\n\nI'm using the one Turing wrote about in his papers, what invented misnomer are you using?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Sorry you&amp;#39;re not thinking about this correctly. I can make a powerpoint presentation that has enough room for any arbitrary size you can choose.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes but you must do this by constructing the machine before it is ran and then leaving it. The entire class of computations which infinitely consume memory cannot be run.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;This is exactly the same as any real computer which has a fixed maximum amount of memory.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is exactly the same as any real computer which has a fixed maximum amount of memory.&lt;/p&gt;\n\n&lt;p&gt;None of which are Turing complete. Languages and computational systems get Turing completeness, every theorist knows that computers are real-word approximations and doesn&amp;#39;t pretend they give us Turing completeness.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Dynamic memory allocation from an OS is not a requirement for turing completeness. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The ability for the computational system to be unbounded by memory to any degree is. Without infinite memory, plenty of computations are impossible.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;The first versions of FORTRAN only allowed static allocation.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Ergo they were not Turing complete. Not being Turing complete doesn&amp;#39;t mean they are useless, for example any algorithm with an upper-bound on running time can reasonably be run, but it still applies. Turing completeness is defined mathematically and rigorously, this mathematical definition is predicated on infinite memory, the end.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;MacOS before X didn&amp;#39;t support dynamic memory allocation and you had to preallocate.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not Turing complete.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You&amp;#39;re just using the wrong definition of turing complete&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;m using the one Turing wrote about in his papers, what invented misnomer are you using?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge2yfe", "score_hidden": false, "stickied": false, "created": 1492490290.0, "created_utc": 1492461490.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dge1zqo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "readams", "parent_id": "t1_dgdwrrd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Sorry you're not thinking about this correctly.  I can make a powerpoint presentation that has enough room for any arbitrary size you can choose.  This is exactly the same as any real computer which has a fixed maximum amount of memory.  Dynamic memory allocation from an OS is not a requirement for turing completeness.  The first versions of FORTRAN only allowed static allocation.  MacOS before X didn't support dynamic memory allocation and you had to preallocate.\n\nYou're just using the wrong definition of turing complete", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry you&amp;#39;re not thinking about this correctly.  I can make a powerpoint presentation that has enough room for any arbitrary size you can choose.  This is exactly the same as any real computer which has a fixed maximum amount of memory.  Dynamic memory allocation from an OS is not a requirement for turing completeness.  The first versions of FORTRAN only allowed static allocation.  MacOS before X didn&amp;#39;t support dynamic memory allocation and you had to preallocate.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re just using the wrong definition of turing complete&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge1zqo", "score_hidden": false, "stickied": false, "created": 1492489217.0, "created_utc": 1492460417.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwrrd", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "bdtddt", "parent_id": "t1_dgdw0vl", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "Nope. In, for example, Python the amount of memory available is dynamic. I can request more and more, eventually *the machine* will give out and stop giving it to me, this is no fault of the language.\n\nRun on a hypothetical machine with infinite resources, the Python standard corresponds to a Turing complete language, this doesn't.\n\nThe big thing is this has a fixed amount of memory, this greatly reduces the amount you can compute, it can never be infinite, Powerpoint does not allow for such, even on a computer with infinite resources.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope. In, for example, Python the amount of memory available is dynamic. I can request more and more, eventually &lt;em&gt;the machine&lt;/em&gt; will give out and stop giving it to me, this is no fault of the language.&lt;/p&gt;\n\n&lt;p&gt;Run on a hypothetical machine with infinite resources, the Python standard corresponds to a Turing complete language, this doesn&amp;#39;t.&lt;/p&gt;\n\n&lt;p&gt;The big thing is this has a fixed amount of memory, this greatly reduces the amount you can compute, it can never be infinite, Powerpoint does not allow for such, even on a computer with infinite resources.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdwrrd", "score_hidden": false, "stickied": false, "created": 1492483317.0, "created_utc": 1492454517.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdw0vl", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "readams", "parent_id": "t1_dgdtb80", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Turing completeness applies to the case of no resource bounds.  By your definition no programming language is Turing complete.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Turing completeness applies to the case of no resource bounds.  By your definition no programming language is Turing complete.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdw0vl", "score_hidden": false, "stickied": false, "created": 1492482474.0, "created_utc": 1492453674.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65x029", "likes": null, "replies": "", "user_reports": [], "id": "dgdvibg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mfg3", "parent_id": "t1_dgdtb80", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Small moves, Ellie. Small moves.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Small moves, Ellie. Small moves.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdvibg", "score_hidden": false, "stickied": false, "created": 1492481897.0, "created_utc": 1492453097.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdtb80", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "bdtddt", "parent_id": "t3_65x029", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "No infinite tape -&gt; not Turing complete.\n\nIf memory is bounded then it is a finite state machine.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No infinite tape -&amp;gt; not Turing complete.&lt;/p&gt;\n\n&lt;p&gt;If memory is bounded then it is a finite state machine.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdtb80", "score_hidden": false, "stickied": false, "created": 1492479471.0, "created_utc": 1492450671.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}]