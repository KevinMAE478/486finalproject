[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64zhk1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 74, "report_reasons": null, "author": "grauenwolf", "saved": false, "mod_reports": [], "name": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "infoq.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/64zhk1/net_futures_type_classes_and_extensions/", "num_reports": null, "locked": false, "stickied": false, "created": 1492045706.0, "url": "https://www.infoq.com/news/2017/04/DotNet-Type-Classes", "author_flair_text": null, "quarantine": false, "title": ".NET Futures: Type Classes and Extensions", "created_utc": 1492016906.0, "distinguished": null, "media": null, "upvote_ratio": 0.78, "num_comments": 86, "visited": false, "subreddit_type": "public", "ups": 74}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6geo5", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6g646", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'm not seeing any pushback from the community. By and large the non-technical feedback has been \"yes please, thank you\". \n\nContrast it with the Default Interface Methods proposal, which has pissed off almost everybody. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not seeing any pushback from the community. By and large the non-technical feedback has been &amp;quot;yes please, thank you&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;Contrast it with the Default Interface Methods proposal, which has pissed off almost everybody. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6geo5", "score_hidden": false, "stickied": false, "created": 1492055925.0, "created_utc": 1492027125.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7j11v", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Eirenarch", "parent_id": "t1_dg6gq5s", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This is how co and contravariance in C# work and the community is fine with it. They are somewhat complicated but this complexity rarely hits normal devs because the co and contravariance are on the declaration rather than on the usage (like Java). You benefit from them without even knowing they are there because the library author knows.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is how co and contravariance in C# work and the community is fine with it. They are somewhat complicated but this complexity rarely hits normal devs because the co and contravariance are on the declaration rather than on the usage (like Java). You benefit from them without even knowing they are there because the library author knows.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7j11v", "score_hidden": false, "stickied": false, "created": 1492118472.0, "created_utc": 1492089672.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6gq5s", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6g646", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "My personal opinion is this is going to be seen as extension methods on steroids.\n\nType classes may be used here or there, but only for pretty complicated framework stuff that most developers won't have to directly deal with. (My ORM could certainly benefit from them.) \n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My personal opinion is this is going to be seen as extension methods on steroids.&lt;/p&gt;\n\n&lt;p&gt;Type classes may be used here or there, but only for pretty complicated framework stuff that most developers won&amp;#39;t have to directly deal with. (My ORM could certainly benefit from them.) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6gq5s", "score_hidden": false, "stickied": false, "created": 1492056256.0, "created_utc": 1492027456.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6r14u", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6mubz", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "As I understand it you just write,\n\n    public static AddAll&lt;T&gt;(T[] ts) where T : SNumber&lt;T&gt;\n\nThe compiler writes the rest of the Impl boilerplate for you.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As I understand it you just write,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static AddAll&amp;lt;T&amp;gt;(T[] ts) where T : SNumber&amp;lt;T&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The compiler writes the rest of the Impl boilerplate for you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6r14u", "score_hidden": false, "stickied": false, "created": 1492068230.0, "created_utc": 1492039430.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6my5o", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "inmatarian", "parent_id": "t1_dg6mubz", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "So, Fold, Reduce, Sum, Enumerable.Aggregate, AddAll... What else can we do to complicate matters?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So, Fold, Reduce, Sum, Enumerable.Aggregate, AddAll... What else can we do to complicate matters?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6my5o", "score_hidden": false, "stickied": false, "created": 1492063155.0, "created_utc": 1492034355.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6spmx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6sf0n", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well said.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well said.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6spmx", "score_hidden": false, "stickied": false, "created": 1492070297.0, "created_utc": 1492041497.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6sf0n", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "balefrost", "parent_id": "t1_dg6rvjp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; This is basically syntax support for the adapter pattern.\n\nWithout wrecking object identity.\n\nAnother way to look at it is that it provides a mechanism to \"implement interfaces\" extrinsically. Or, similar to IS_A and HAS_A, this can be seen as a CAN_BE_USED_AS_A relationship. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;This is basically syntax support for the adapter pattern.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Without wrecking object identity.&lt;/p&gt;\n\n&lt;p&gt;Another way to look at it is that it provides a mechanism to &amp;quot;implement interfaces&amp;quot; extrinsically. Or, similar to IS_A and HAS_A, this can be seen as a CAN_BE_USED_AS_A relationship. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6sf0n", "score_hidden": false, "stickied": false, "created": 1492069927.0, "created_utc": 1492041127.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rvjp", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6ricw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; You're good to go, no need to implement interfaces.\n\nNot quite, as someone still has to implement the Shape to the desired Class. (Though it doesn't have to be the person who defined the Class.)\n\nEDIT: I just had a thought. This is basically syntax support for the adapter pattern.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You&amp;#39;re good to go, no need to implement interfaces.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not quite, as someone still has to implement the Shape to the desired Class. (Though it doesn&amp;#39;t have to be the person who defined the Class.)&lt;/p&gt;\n\n&lt;p&gt;EDIT: I just had a thought. This is basically syntax support for the adapter pattern.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6rvjp", "score_hidden": false, "stickied": false, "created": 1492069260.0, "created_utc": 1492040460.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ricw", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg6mubz", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "If shapes wind up being something more for library developers, then syntax be damned. What I imagine this being useful for is making it easier for your object to qualify for a method. Has the right shape? You're good to go, no need to implement interfaces.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If shapes wind up being something more for library developers, then syntax be damned. What I imagine this being useful for is making it easier for your object to qualify for a method. Has the right shape? You&amp;#39;re good to go, no need to implement interfaces.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6ricw", "score_hidden": false, "stickied": false, "created": 1492068810.0, "created_utc": 1492040010.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6mubz", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dg6g646", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6mubz", "score_hidden": false, "stickied": false, "created": 1492063029.0, "created_utc": 1492034229.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6g646", "gilded": 0, "archived": false, "score": 16, "report_reasons": null, "author": "balefrost", "parent_id": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "As somebody who uses Scala at home and C# at work, this is exciting. But I also wonder how well this will be received by the larger body of C# developers. Typeclasses increase expressive power, at the cost of complexity. Is that the right move for C#? I say yes, but is that the majority opinion?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As somebody who uses Scala at home and C# at work, this is exciting. But I also wonder how well this will be received by the larger body of C# developers. Typeclasses increase expressive power, at the cost of complexity. Is that the right move for C#? I say yes, but is that the majority opinion?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6g646", "score_hidden": false, "stickied": false, "created": 1492055680.0, "created_utc": 1492026880.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 16}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg79oc3", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "orthoxerox", "parent_id": "t1_dg6ltpi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "No, Gafter wrote that higher kinded types are not a part of this proposal.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, Gafter wrote that higher kinded types are not a part of this proposal.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg79oc3", "score_hidden": false, "stickied": false, "created": 1492095959.0, "created_utc": 1492067159.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6wc6u", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "mebob85", "parent_id": "t1_dg6uca0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I feel like a better way to put it is that a Monadic type has a meaningful way to compose smaller computations into larger ones. Suppose you have two functions `f1 :: a -&gt; Maybe b` and `f2 :: b -&gt; Maybe c`. If you need to call `f1` and use the result as input to `f2`, you could just call `f1`, then do an `if isJust a ... then ... else Nothing` , but if you have an even larger sequence of functions with similar signatures this grows out of control. You can meaningfully compose them into `bind f1 f2 :: a -&gt; Maybe c` where bind is defined like so:\n\n    bind :: Maybe a -&gt; (b -&gt; Maybe c)\n    bind (Just a) b = b a\n    bind Nothing _ = Nothing\n\nThen, you'd just need to do `bind (f1 x) f2`. The Monad typeclass declares `a &gt;&gt;= b` instead of `bind a b` but the idea is the same. By uniting all types with meaningful composition under one typeclass, you get the benefit of re-using helpful functions in a variety of contexts.\n\n&gt; Do you remember C++ where they overloaded the &lt;&lt; bit-shift operator to work with streams? Then they started using it for other random stuff.\n\nThis isn't at all similar. `&gt;&gt;=` is not overloaded at all. It has a very specific meaning: bind two monadic computations together. It is more similar to an interface in C# than to operator overloading.", "edited": 1492046274.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like a better way to put it is that a Monadic type has a meaningful way to compose smaller computations into larger ones. Suppose you have two functions &lt;code&gt;f1 :: a -&amp;gt; Maybe b&lt;/code&gt; and &lt;code&gt;f2 :: b -&amp;gt; Maybe c&lt;/code&gt;. If you need to call &lt;code&gt;f1&lt;/code&gt; and use the result as input to &lt;code&gt;f2&lt;/code&gt;, you could just call &lt;code&gt;f1&lt;/code&gt;, then do an &lt;code&gt;if isJust a ... then ... else Nothing&lt;/code&gt; , but if you have an even larger sequence of functions with similar signatures this grows out of control. You can meaningfully compose them into &lt;code&gt;bind f1 f2 :: a -&amp;gt; Maybe c&lt;/code&gt; where bind is defined like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;bind :: Maybe a -&amp;gt; (b -&amp;gt; Maybe c)\nbind (Just a) b = b a\nbind Nothing _ = Nothing\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, you&amp;#39;d just need to do &lt;code&gt;bind (f1 x) f2&lt;/code&gt;. The Monad typeclass declares &lt;code&gt;a &amp;gt;&amp;gt;= b&lt;/code&gt; instead of &lt;code&gt;bind a b&lt;/code&gt; but the idea is the same. By uniting all types with meaningful composition under one typeclass, you get the benefit of re-using helpful functions in a variety of contexts.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Do you remember C++ where they overloaded the &amp;lt;&amp;lt; bit-shift operator to work with streams? Then they started using it for other random stuff.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This isn&amp;#39;t at all similar. &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; is not overloaded at all. It has a very specific meaning: bind two monadic computations together. It is more similar to an interface in C# than to operator overloading.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6wc6u", "score_hidden": false, "stickied": false, "created": 1492074700.0, "created_utc": 1492045900.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dgaezk2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "woztzy", "parent_id": "t1_dg6v1ff", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's worth noting that you can still have logging with `Maybe` [if you're cool with benign effects](http://blog.higher-order.com/blog/2012/09/13/what-purity-is-and-isnt/). The Kestrel combinator (which Ruby calls `tap`) lets you do this. Example in Scala:\n\n    val greeting = Option(name).map { x =&gt; log.info(s\"Formatting greeting for $x\"); x }.map(x =&gt; s\"Hello $x\")\n\nAltarnatively, you could [use a `Free` monad](https://stackoverflow.com/questions/40105759/logging-using-the-free-monad).\n\nEdit: maybe I misinterpreted that comment. It sounds like `Either` is more applicable for that situation, you're right.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s worth noting that you can still have logging with &lt;code&gt;Maybe&lt;/code&gt; &lt;a href=\"http://blog.higher-order.com/blog/2012/09/13/what-purity-is-and-isnt/\"&gt;if you&amp;#39;re cool with benign effects&lt;/a&gt;. The Kestrel combinator (which Ruby calls &lt;code&gt;tap&lt;/code&gt;) lets you do this. Example in Scala:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val greeting = Option(name).map { x =&amp;gt; log.info(s&amp;quot;Formatting greeting for $x&amp;quot;); x }.map(x =&amp;gt; s&amp;quot;Hello $x&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Altarnatively, you could &lt;a href=\"https://stackoverflow.com/questions/40105759/logging-using-the-free-monad\"&gt;use a &lt;code&gt;Free&lt;/code&gt; monad&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Edit: maybe I misinterpreted that comment. It sounds like &lt;code&gt;Either&lt;/code&gt; is more applicable for that situation, you&amp;#39;re right.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaezk2", "score_hidden": false, "stickied": false, "created": 1492269539.0, "created_utc": 1492240739.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6v1ff", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "dalastboss", "parent_id": "t1_dg6uw0e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "As in any language, if you want logging you use logging. Depending on the use case, you may not need it; then Maybe works fine.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As in any language, if you want logging you use logging. Depending on the use case, you may not need it; then Maybe works fine.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6v1ff", "score_hidden": false, "stickied": false, "created": 1492073119.0, "created_utc": 1492044319.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg73qwc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg70bmq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "nothing should be risky. io, db interactions, everything should fail predictably. i've been in java land lately, dealing with checked exceptions. and it's so shitty. because there are both checked and unchecked exceptions.\n\nso no, it is not the same. maybe in a perfect world it is, but generally it's not.\n\nbut generally, i agree. all exceptions should be a part of the signature one way or other. if you throw, the return type should be a maybe. if you don't throw, then just the type.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;nothing should be risky. io, db interactions, everything should fail predictably. i&amp;#39;ve been in java land lately, dealing with checked exceptions. and it&amp;#39;s so shitty. because there are both checked and unchecked exceptions.&lt;/p&gt;\n\n&lt;p&gt;so no, it is not the same. maybe in a perfect world it is, but generally it&amp;#39;s not.&lt;/p&gt;\n\n&lt;p&gt;but generally, i agree. all exceptions should be a part of the signature one way or other. if you throw, the return type should be a maybe. if you don&amp;#39;t throw, then just the type.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg73qwc", "score_hidden": false, "stickied": false, "created": 1492084365.0, "created_utc": 1492055565.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg70bmq", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "jpfed", "parent_id": "t1_dg6uw0e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It ends up working essentially the same as exceptions. If you're trying some risky shit and you want to log any exceptions that result, you won't know exactly which statement blew it up and you've got to catch it somewhere to perform the logging. Likewise, somewhere in your monadic chain of functions you've got to do a pattern match and handle the null case so you can log \"it blew up* somewhere before here\".\n\n\\*But *how* did it blow up? Maybe doesn't tell you; Result does.  Use Result, folks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It ends up working essentially the same as exceptions. If you&amp;#39;re trying some risky shit and you want to log any exceptions that result, you won&amp;#39;t know exactly which statement blew it up and you&amp;#39;ve got to catch it somewhere to perform the logging. Likewise, somewhere in your monadic chain of functions you&amp;#39;ve got to do a pattern match and handle the null case so you can log &amp;quot;it blew up* somewhere before here&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;*But &lt;em&gt;how&lt;/em&gt; did it blow up? Maybe doesn&amp;#39;t tell you; Result does.  Use Result, folks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg70bmq", "score_hidden": false, "stickied": false, "created": 1492079647.0, "created_utc": 1492050847.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7e5la", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Daenyth", "parent_id": "t1_dg6uw0e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Using maybe for failable computations is not recommend. Use an Either or Result type where you can explicitly signal the kind of failure", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using maybe for failable computations is not recommend. Use an Either or Result type where you can explicitly signal the kind of failure&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7e5la", "score_hidden": false, "stickied": false, "created": 1492109171.0, "created_utc": 1492080371.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dg6w8au", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "dalastboss", "parent_id": "t1_dg6vkn8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What is ham-fisted about this explanation?\n\n    (m &gt;&gt;= f) =\n      case m of\n        Nothing -&gt; Nothing\n        Just v -&gt; f v\n\"If `m` is `Nothing` then produce `Nothing`; if `m` is `Just v` produce `f v`.\"", "edited": 1492045987.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What is ham-fisted about this explanation?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(m &amp;gt;&amp;gt;= f) =\n  case m of\n    Nothing -&amp;gt; Nothing\n    Just v -&amp;gt; f v\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;quot;If &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;Nothing&lt;/code&gt; then produce &lt;code&gt;Nothing&lt;/code&gt;; if &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;Just v&lt;/code&gt; produce &lt;code&gt;f v&lt;/code&gt;.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6w8au", "score_hidden": false, "stickied": false, "created": 1492074566.0, "created_utc": 1492045766.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6vkn8", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6uw0e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Fails is the wrong word. Its more like the ?. operator explained in the most ham-fisted way possible.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fails is the wrong word. Its more like the ?. operator explained in the most ham-fisted way possible.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6vkn8", "score_hidden": false, "stickied": false, "created": 1492073748.0, "created_utc": 1492044948.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uw0e", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg6uha7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I actually think this is a bad idea in practice. This leaves it up to the libraries to do the logging for you. which is bad, because i need to control the logging.  Which operation failed? Unless you introduce another level of abstraction, you just wind up with \"it failed\". \n\nEdit. unless your maybe is result or error. but I've not seen that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I actually think this is a bad idea in practice. This leaves it up to the libraries to do the logging for you. which is bad, because i need to control the logging.  Which operation failed? Unless you introduce another level of abstraction, you just wind up with &amp;quot;it failed&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;Edit. unless your maybe is result or error. but I&amp;#39;ve not seen that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6uw0e", "score_hidden": false, "stickied": false, "created": 1492072951.0, "created_utc": 1492044151.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dg710tj", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6vk5g", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That looks more like a bizarre side-effect than desirable behavior. \n\nThe function is named \"sequence\" but it may return a null if one of its parameters is null? The name and behavior don't match.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That looks more like a bizarre side-effect than desirable behavior. &lt;/p&gt;\n\n&lt;p&gt;The function is named &amp;quot;sequence&amp;quot; but it may return a null if one of its parameters is null? The name and behavior don&amp;#39;t match.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg710tj", "score_hidden": false, "stickied": false, "created": 1492080551.0, "created_utc": 1492051751.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6vk5g", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dalastboss", "parent_id": "t1_dg6vedm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Nope, it's a sequence of results.\n\n    &gt; sequence [Just 1, Just 2, Just 3]\n    Just [1,2,3]\n    &gt; sequence [Just 1, Nothing, Just 3]\n    Nothing", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope, it&amp;#39;s a sequence of results.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt; sequence [Just 1, Just 2, Just 3]\nJust [1,2,3]\n&amp;gt; sequence [Just 1, Nothing, Just 3]\nNothing\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6vk5g", "score_hidden": false, "stickied": false, "created": 1492073733.0, "created_utc": 1492044933.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6vedm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6uha7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's not really a \"sequence of results\" though. You get one result at the end of the line, all of the intermediate values are discarded.\n\nIn any other language we'd call it a conditional invocation or null propagation depending on what's actually happening.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not really a &amp;quot;sequence of results&amp;quot; though. You get one result at the end of the line, all of the intermediate values are discarded.&lt;/p&gt;\n\n&lt;p&gt;In any other language we&amp;#39;d call it a conditional invocation or null propagation depending on what&amp;#39;s actually happening.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6vedm", "score_hidden": false, "stickied": false, "created": 1492073539.0, "created_utc": 1492044739.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uha7", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "dalastboss", "parent_id": "t1_dg6uca0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "A \"Maybe a\" is a computation that can result in an \"a\" or fail along the way. So a sequence of maybes fails if any of the constituent computations fails; otherwise it produces a sequence of results.", "edited": 1492044139.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A &amp;quot;Maybe a&amp;quot; is a computation that can result in an &amp;quot;a&amp;quot; or fail along the way. So a sequence of maybes fails if any of the constituent computations fails; otherwise it produces a sequence of results.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6uha7", "score_hidden": false, "stickied": false, "created": 1492072469.0, "created_utc": 1492043669.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6uxt5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg6uca0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The idea is that doing more on an already failed maybe results in another failed maybe.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The idea is that doing more on an already failed maybe results in another failed maybe.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6uxt5", "score_hidden": false, "stickied": false, "created": 1492073006.0, "created_utc": 1492044206.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dg76vtc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg76od8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "But you are, you just don't realize it.\n\nWhile you are bragging about being about to turn a Maybe (IO a) to a IO (Maybe a), the rest of us are thinking, \"Why in god's name was that something you needed to do in the first place?\".\n\nIt's like programming with one of those joke languages that only has two operations. Sure you can do anything with it, but why would you want to?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But you are, you just don&amp;#39;t realize it.&lt;/p&gt;\n\n&lt;p&gt;While you are bragging about being about to turn a Maybe (IO a) to a IO (Maybe a), the rest of us are thinking, &amp;quot;Why in god&amp;#39;s name was that something you needed to do in the first place?&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s like programming with one of those joke languages that only has two operations. Sure you can do anything with it, but why would you want to?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg76vtc", "score_hidden": false, "stickied": false, "created": 1492089477.0, "created_utc": 1492060677.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg76od8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pipocaQuemada", "parent_id": "t1_dg761sv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's a fairly powerful and standard mathematical technique to work with seemingly unrelated things based off of their structure.  It's impressive, and I honestly don't see what's inappropriate about it.\n\nDRY is a good idea; I honestly don't want to write the same damn thing over and over and over and over and over and over and over and over and over just because you're allergic to a bit of simple abstraction that enables large amounts of code reuse.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a fairly powerful and standard mathematical technique to work with seemingly unrelated things based off of their structure.  It&amp;#39;s impressive, and I honestly don&amp;#39;t see what&amp;#39;s inappropriate about it.&lt;/p&gt;\n\n&lt;p&gt;DRY is a good idea; I honestly don&amp;#39;t want to write the same damn thing over and over and over and over and over and over and over and over and over just because you&amp;#39;re allergic to a bit of simple abstraction that enables large amounts of code reuse.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg76od8", "score_hidden": false, "stickied": false, "created": 1492089084.0, "created_utc": 1492060284.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg761sv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg75bqa", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The amount of totally unrelated concepts you can shove into one place is impressive. But impressive and appropriate aren't necessarily the same thing.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The amount of totally unrelated concepts you can shove into one place is impressive. But impressive and appropriate aren&amp;#39;t necessarily the same thing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg761sv", "score_hidden": false, "stickied": false, "created": 1492088011.0, "created_utc": 1492059211.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg75bqa", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pipocaQuemada", "parent_id": "t1_dg6uca0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; What does is actually mean to perform a \"sequence\" on a maybe/option type?\n\n`sequence :: Traversable t, Applicative f =&gt; t (f a) =&gt; f (t a)`.  Basically, it allow you to swap the order of type constructors, as long as the outer one is `Traversable` and the inner one forms an `Applicative` functor.  Maybe is both `Traversable` and `Applicative`, so it can be either the inner or the outer type constructor.\n\nFor example, you could sequence an `Maybe (IO a)` into a `IO (Maybe a)` or a `[Maybe a]` into a `Maybe [a]`.\n\nThe nice thing about this that after defining something fairly simple like\n\n    instance Traversable Maybe where\n        traverse _ Nothing = pure Nothing\n        traverse f (Just x) = Just &lt;$&gt; f x\n\nyou suddenly gain the ability to turn an `Maybe [a]` to a `[Maybe a]`, a `Maybe (r -&gt; a)` to a `r -&gt; Maybe a`, a `Maybe (IO a)` to a `IO (Maybe a)`, a `Maybe (b,a)` to a `(b, Maybe a)`, etc. etc. etc. etc.\n\nFor a three line typeclass implementation, that's an impressively reusable and general function.  The name's not great, but naming that general of an operation with something intuitive is always going to be difficult.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;What does is actually mean to perform a &amp;quot;sequence&amp;quot; on a maybe/option type?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;sequence :: Traversable t, Applicative f =&amp;gt; t (f a) =&amp;gt; f (t a)&lt;/code&gt;.  Basically, it allow you to swap the order of type constructors, as long as the outer one is &lt;code&gt;Traversable&lt;/code&gt; and the inner one forms an &lt;code&gt;Applicative&lt;/code&gt; functor.  Maybe is both &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;Applicative&lt;/code&gt;, so it can be either the inner or the outer type constructor.&lt;/p&gt;\n\n&lt;p&gt;For example, you could sequence an &lt;code&gt;Maybe (IO a)&lt;/code&gt; into a &lt;code&gt;IO (Maybe a)&lt;/code&gt; or a &lt;code&gt;[Maybe a]&lt;/code&gt; into a &lt;code&gt;Maybe [a]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The nice thing about this that after defining something fairly simple like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;instance Traversable Maybe where\n    traverse _ Nothing = pure Nothing\n    traverse f (Just x) = Just &amp;lt;$&amp;gt; f x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you suddenly gain the ability to turn an &lt;code&gt;Maybe [a]&lt;/code&gt; to a &lt;code&gt;[Maybe a]&lt;/code&gt;, a &lt;code&gt;Maybe (r -&amp;gt; a)&lt;/code&gt; to a &lt;code&gt;r -&amp;gt; Maybe a&lt;/code&gt;, a &lt;code&gt;Maybe (IO a)&lt;/code&gt; to a &lt;code&gt;IO (Maybe a)&lt;/code&gt;, a &lt;code&gt;Maybe (b,a)&lt;/code&gt; to a &lt;code&gt;(b, Maybe a)&lt;/code&gt;, etc. etc. etc. etc.&lt;/p&gt;\n\n&lt;p&gt;For a three line typeclass implementation, that&amp;#39;s an impressively reusable and general function.  The name&amp;#39;s not great, but naming that general of an operation with something intuitive is always going to be difficult.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg75bqa", "score_hidden": false, "stickied": false, "created": 1492086795.0, "created_utc": 1492057995.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uca0", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6ttkk", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What does is actually mean to perform a \"sequence\" on a maybe/option type?\n\nDo you remember C++ where they overloaded the `&lt;&lt;` bit-shift operator to work with streams? Then they started using it for other random stuff. \n\nMonads feel the same way.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What does is actually mean to perform a &amp;quot;sequence&amp;quot; on a maybe/option type?&lt;/p&gt;\n\n&lt;p&gt;Do you remember C++ where they overloaded the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; bit-shift operator to work with streams? Then they started using it for other random stuff. &lt;/p&gt;\n\n&lt;p&gt;Monads feel the same way.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6uca0", "score_hidden": false, "stickied": false, "created": 1492072306.0, "created_utc": 1492043506.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ttkk", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "dalastboss", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Monads are just a reusable abstraction. Nothing is lost when you define a monad instance for a given type. It just enables you to use certain library functions defined on monads. What do Maybe and IO have in common? They both admit a meaningful sequence function. Someone already wrote a function sequence defined for any monad, which saves me the trouble.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Monads are just a reusable abstraction. Nothing is lost when you define a monad instance for a given type. It just enables you to use certain library functions defined on monads. What do Maybe and IO have in common? They both admit a meaningful sequence function. Someone already wrote a function sequence defined for any monad, which saves me the trouble.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6ttkk", "score_hidden": false, "stickied": false, "created": 1492071678.0, "created_utc": 1492042878.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7sc04", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "runT1ME", "parent_id": "t1_dg7r60j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Sequence? Traverse? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sequence? Traverse? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7sc04", "score_hidden": false, "stickied": false, "created": 1492129215.0, "created_utc": 1492100415.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7r60j", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg7n7c0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "While you can certainly think that way, it isn't healthy. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;While you can certainly think that way, it isn&amp;#39;t healthy. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7r60j", "score_hidden": false, "stickied": false, "created": 1492127972.0, "created_utc": 1492099172.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7n7c0", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "tjorri", "parent_id": "t1_dg7ab7k", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "An int? can be considered to be a container containing either zero or one integers, as opposed to List&lt;int&gt; which can contain zero or any number of integers.\nThat means that functions such as IsEmpty, Any, and Select would make perfect sense on nullable types as well as on lists.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;An int? can be considered to be a container containing either zero or one integers, as opposed to List&amp;lt;int&amp;gt; which can contain zero or any number of integers.\nThat means that functions such as IsEmpty, Any, and Select would make perfect sense on nullable types as well as on lists.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7n7c0", "score_hidden": false, "stickied": false, "created": 1492123676.0, "created_utc": 1492094876.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg8v0hy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "runT1ME", "parent_id": "t1_dg7ab7k", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "We do this all the time at work. If you love duplicate code then sure knock yourself out but I prefer not to have it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We do this all the time at work. If you love duplicate code then sure knock yourself out but I prefer not to have it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg8v0hy", "score_hidden": false, "stickied": false, "created": 1492180495.0, "created_utc": 1492151695.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ab7k", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg79xor", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I can't think of any time that I would have wanted a function that operates on both List&lt;int&gt; and int? in the same way.\n\nIt's like a buying a fancy tool, then trying to use it to do everything because it isn't really good at anything but you spent so much acquiring it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can&amp;#39;t think of any time that I would have wanted a function that operates on both List&amp;lt;int&amp;gt; and int? in the same way.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s like a buying a fancy tool, then trying to use it to do everything because it isn&amp;#39;t really good at anything but you spent so much acquiring it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7ab7k", "score_hidden": false, "stickied": false, "created": 1492097707.0, "created_utc": 1492068907.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg79xor", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Ravek", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What do two monads have in common? Well let's take List and Maybe (or in C#, nullable types) as examples.\n\nIf you have any function on `int` you can turn it into a function on `List&lt;int&gt;`, and a function on `int?`. Most people probably use `Select` regularly and I think we can agree it's nice that `5 + (int?)3` is `(int?)8` while `5 + (int?)null` is `null`. \n\nWe also have a way to turn a `List&lt;List&lt;int&gt;&gt;` into a `List&lt;int&gt;`, by flattening it. Given `int??` we could also flatten that to `int?` pretty easily \u2013 in fact C# doesn't even allow us to write `int??` because you're expected to immediately flatten such a construct since it's so trivial.\n\nIn general if you have some `X&lt;int&gt;` where you can flatten `X&lt;X&lt;int&gt;&gt;` into `X&lt;int&gt;` in a reasonable way, and turn operations on ints into operations on `X&lt;int&gt;` in a reasonable way, then X is called a monad. It's just a name for a kind of pattern that already naturally appears in tons of scenarios.\n\nWhy is it useful to make generalizations like these? The same reason that it's useful that `Select` has a signature like `IEnumerable&lt;U&gt; Select&lt;T, U&gt;(this IEnumerable&lt;T&gt; list, Func&lt;T, U&gt; f)`. Instead of having to implement `Select` a thousand times for every possible combination of `T` and `U`, you can implement it once and reuse all the expressive power of it. Monads are the same. You can ask what List and Maybe have in common, well what do a list of strings and a list of ints have in common? They have similar mathematical structure and this allows you more code reuse and more expressive power than you would have if you ignored this similarity.", "edited": 1492072319.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What do two monads have in common? Well let&amp;#39;s take List and Maybe (or in C#, nullable types) as examples.&lt;/p&gt;\n\n&lt;p&gt;If you have any function on &lt;code&gt;int&lt;/code&gt; you can turn it into a function on &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;, and a function on &lt;code&gt;int?&lt;/code&gt;. Most people probably use &lt;code&gt;Select&lt;/code&gt; regularly and I think we can agree it&amp;#39;s nice that &lt;code&gt;5 + (int?)3&lt;/code&gt; is &lt;code&gt;(int?)8&lt;/code&gt; while &lt;code&gt;5 + (int?)null&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;We also have a way to turn a &lt;code&gt;List&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt; into a &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;, by flattening it. Given &lt;code&gt;int??&lt;/code&gt; we could also flatten that to &lt;code&gt;int?&lt;/code&gt; pretty easily \u2013 in fact C# doesn&amp;#39;t even allow us to write &lt;code&gt;int??&lt;/code&gt; because you&amp;#39;re expected to immediately flatten such a construct since it&amp;#39;s so trivial.&lt;/p&gt;\n\n&lt;p&gt;In general if you have some &lt;code&gt;X&amp;lt;int&amp;gt;&lt;/code&gt; where you can flatten &lt;code&gt;X&amp;lt;X&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;X&amp;lt;int&amp;gt;&lt;/code&gt; in a reasonable way, and turn operations on ints into operations on &lt;code&gt;X&amp;lt;int&amp;gt;&lt;/code&gt; in a reasonable way, then X is called a monad. It&amp;#39;s just a name for a kind of pattern that already naturally appears in tons of scenarios.&lt;/p&gt;\n\n&lt;p&gt;Why is it useful to make generalizations like these? The same reason that it&amp;#39;s useful that &lt;code&gt;Select&lt;/code&gt; has a signature like &lt;code&gt;IEnumerable&amp;lt;U&amp;gt; Select&amp;lt;T, U&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; list, Func&amp;lt;T, U&amp;gt; f)&lt;/code&gt;. Instead of having to implement &lt;code&gt;Select&lt;/code&gt; a thousand times for every possible combination of &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;, you can implement it once and reuse all the expressive power of it. Monads are the same. You can ask what List and Maybe have in common, well what do a list of strings and a list of ints have in common? They have similar mathematical structure and this allows you more code reuse and more expressive power than you would have if you ignored this similarity.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg79xor", "score_hidden": false, "stickied": false, "created": 1492096657.0, "created_utc": 1492067857.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7h17i", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "m50d", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; What does the IO monad and the Maybe monad have in common?\n \nThey both represent a value with a sort-of-secondary \"effect\", where most of the time you just want to work with the \"plain\" value and compose functions on the happy path without worrying about the effects, but occasionally you want to step outside and deal directly with the effect.\n\nMore concretely, `do` notation, aided by a standard library of well-known functions like `traverse`, is a nice, natural, *maintainable* way to express the kind of operations you commonly want to do with both of them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;What does the IO monad and the Maybe monad have in common?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;They both represent a value with a sort-of-secondary &amp;quot;effect&amp;quot;, where most of the time you just want to work with the &amp;quot;plain&amp;quot; value and compose functions on the happy path without worrying about the effects, but occasionally you want to step outside and deal directly with the effect.&lt;/p&gt;\n\n&lt;p&gt;More concretely, &lt;code&gt;do&lt;/code&gt; notation, aided by a standard library of well-known functions like &lt;code&gt;traverse&lt;/code&gt;, is a nice, natural, &lt;em&gt;maintainable&lt;/em&gt; way to express the kind of operations you commonly want to do with both of them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7h17i", "score_hidden": false, "stickied": false, "created": 1492115403.0, "created_utc": 1492086603.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7iv0g", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "RabbidKitten", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; What does the IO monad and the Maybe monad have in common?\n\nThat\n\n    IO :: * -&gt; *\n    fmap :: (a -&gt; b) -&gt; (IO a -&gt; IO b)\n    return :: a -&gt; IO a\n    join :: IO (IO a)\n\nand\n\n    Maybe :: * -&gt; *\n    fmap :: (a -&gt; b) -&gt; (Maybe a -&gt; Maybe b)\n    return :: a -&gt; Maybe a\n    join :: Maybe (Maybe a)\n\nare monads... and that's about it.\n\n&gt; In fact, I've never seen something made simpler by explaining it in terms of monads.\n\nExplaining - maybe not. Code - a lot. Because I no longer have to write multiple copies of what is essentially the same code.\n\nLook, you don't have to use them if you don't like them. But don't go around saying absolute bullshit like \"You show a Haskell fanboy virtually any abstraction and he'll make a case for it being a monad.\"\n\n&gt; It would be like saying that every function is a factory method. In fact, every monad is also a set of factory methods. While technically true, it means nothing.\n\nNow you're onto something. Factory methods - it means nothing.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;What does the IO monad and the Maybe monad have in common?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;IO :: * -&amp;gt; *\nfmap :: (a -&amp;gt; b) -&amp;gt; (IO a -&amp;gt; IO b)\nreturn :: a -&amp;gt; IO a\njoin :: IO (IO a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Maybe :: * -&amp;gt; *\nfmap :: (a -&amp;gt; b) -&amp;gt; (Maybe a -&amp;gt; Maybe b)\nreturn :: a -&amp;gt; Maybe a\njoin :: Maybe (Maybe a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;are monads... and that&amp;#39;s about it.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;In fact, I&amp;#39;ve never seen something made simpler by explaining it in terms of monads.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Explaining - maybe not. Code - a lot. Because I no longer have to write multiple copies of what is essentially the same code.&lt;/p&gt;\n\n&lt;p&gt;Look, you don&amp;#39;t have to use them if you don&amp;#39;t like them. But don&amp;#39;t go around saying absolute bullshit like &amp;quot;You show a Haskell fanboy virtually any abstraction and he&amp;#39;ll make a case for it being a monad.&amp;quot;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;It would be like saying that every function is a factory method. In fact, every monad is also a set of factory methods. While technically true, it means nothing.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Now you&amp;#39;re onto something. Factory methods - it means nothing.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7iv0g", "score_hidden": false, "stickied": false, "created": 1492118235.0, "created_utc": 1492089435.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6u8le", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6u5zd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "LOL", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;LOL&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6u8le", "score_hidden": false, "stickied": false, "created": 1492072183.0, "created_utc": 1492043383.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6u5zd", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "pm_plz_im_lonely", "parent_id": "t1_dg6tdpr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Actually to me both Agile and monads have in common that I don't fully understand them, but a lot of people are selling them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Actually to me both Agile and monads have in common that I don&amp;#39;t fully understand them, but a lot of people are selling them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6u5zd", "score_hidden": false, "stickied": false, "created": 1492072098.0, "created_utc": 1492043298.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6tdpr", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6t6ct", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You sound like a hipster trying to justify his latest obsession.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You sound like a hipster trying to justify his latest obsession.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6tdpr", "score_hidden": false, "stickied": false, "created": 1492071143.0, "created_utc": 1492042343.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6t6ct", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pm_plz_im_lonely", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "Just like Agile, you just don't get it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just like Agile, you just don&amp;#39;t get it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6t6ct", "score_hidden": false, "stickied": false, "created": 1492070883.0, "created_utc": 1492042083.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg76xux", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg749jf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I've seen abstract art. Some may find it pretty to look at, but it is useless when you need a picture to identify someone.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen abstract art. Some may find it pretty to look at, but it is useless when you need a picture to identify someone.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg76xux", "score_hidden": false, "stickied": false, "created": 1492089583.0, "created_utc": 1492060783.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg749jf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dg745hv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "it's really not that complicated, just kind of abstract", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;it&amp;#39;s really not that complicated, just kind of abstract&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg749jf", "score_hidden": false, "stickied": false, "created": 1492085138.0, "created_utc": 1492056338.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg745hv", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg73eda", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Does anyone? \n\nThere's a reason for the running joke about monad explanations.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Does anyone? &lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s a reason for the running joke about monad explanations.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg745hv", "score_hidden": false, "stickied": false, "created": 1492084970.0, "created_utc": 1492056170.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg73eda", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Comments  like these make it seem like you really don't understand monad.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Comments  like these make it seem like you really don&amp;#39;t understand monad.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg73eda", "score_hidden": false, "stickied": false, "created": 1492083844.0, "created_utc": 1492055044.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7856x", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "runT1ME", "parent_id": "t1_dg6rskd", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "&gt;From a high level, conceptual standpoint there is nothing shared between the two. \n\nLol.  Wat.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;From a high level, conceptual standpoint there is nothing shared between the two. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Lol.  Wat.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7856x", "score_hidden": false, "stickied": false, "created": 1492092146.0, "created_utc": 1492063346.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rskd", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6rdmg", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Mostly because the way it is presented. You show a Haskell fanboy virtually any abstraction and he'll make a case for it being a monad or he'll reimplement it as one.\n\nWhat does the IO monad and the Maybe monad have in common? \n\nFrom a high level, conceptual standpoint there is nothing shared between the two. One is arguably either a type-safe null or a union type. The other deals with runtime context, similar to how T-SQL has deterministic and non-deterministic functions. \n\nTo say they are both monads doesn't really mean anything to the average programmer. In fact, I've never seen something made simpler by explaining it in terms of monads. Not once. \n\nIt would be like saying that every function is a factory method. In fact, every monad is also a set of factory methods. While technically true, it means nothing. ", "edited": 1492041884.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mostly because the way it is presented. You show a Haskell fanboy virtually any abstraction and he&amp;#39;ll make a case for it being a monad or he&amp;#39;ll reimplement it as one.&lt;/p&gt;\n\n&lt;p&gt;What does the IO monad and the Maybe monad have in common? &lt;/p&gt;\n\n&lt;p&gt;From a high level, conceptual standpoint there is nothing shared between the two. One is arguably either a type-safe null or a union type. The other deals with runtime context, similar to how T-SQL has deterministic and non-deterministic functions. &lt;/p&gt;\n\n&lt;p&gt;To say they are both monads doesn&amp;#39;t really mean anything to the average programmer. In fact, I&amp;#39;ve never seen something made simpler by explaining it in terms of monads. Not once. &lt;/p&gt;\n\n&lt;p&gt;It would be like saying that every function is a factory method. In fact, every monad is also a set of factory methods. While technically true, it means nothing. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6rskd", "score_hidden": false, "stickied": false, "created": 1492069160.0, "created_utc": 1492040360.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rdmg", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg6m8ei", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; (Can you tell that I don't like monads as a design pattern?)\n\nWhy not?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;(Can you tell that I don&amp;#39;t like monads as a design pattern?)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Why not?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6rdmg", "score_hidden": false, "stickied": false, "created": 1492068650.0, "created_utc": 1492039850.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7fcwl", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "TarMil", "parent_id": "t1_dg779uy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Higher kinds are nowhere in this proposal.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Higher kinds are nowhere in this proposal.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7fcwl", "score_hidden": false, "stickied": false, "created": 1492112156.0, "created_utc": 1492083356.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg779uy", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg770xy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "No yet. Part of this proposal is adding support for that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No yet. Part of this proposal is adding support for that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg779uy", "score_hidden": false, "stickied": false, "created": 1492090249.0, "created_utc": 1492061449.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg770xy", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "fromscalatohaskell", "parent_id": "t1_dg6m8ei", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Wait, do you have higher kinds in c#?\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wait, do you have higher kinds in c#?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg770xy", "score_hidden": false, "stickied": false, "created": 1492089753.0, "created_utc": 1492060953.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6n4y4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dg6m8ei", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "just looking forward to the day when C# programming requires advanced Category Theory :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;just looking forward to the day when C# programming requires advanced Category Theory :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6n4y4", "score_hidden": false, "stickied": false, "created": 1492063383.0, "created_utc": 1492034583.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6m8ei", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6ltpi", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "Yes.\n\nI'm not sure why you'd want to, as it is always the wrong way to think about a given abstraction, but yes you could.\n\nEDIT: In fact you could probably create a Shape named Monad so that you are 100% sure you have a monad rather than something that is inherently useful. (Can you tell that I don't like monads as a design pattern?)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not sure why you&amp;#39;d want to, as it is always the wrong way to think about a given abstraction, but yes you could.&lt;/p&gt;\n\n&lt;p&gt;EDIT: In fact you could probably create a Shape named Monad so that you are 100% sure you have a monad rather than something that is inherently useful. (Can you tell that I don&amp;#39;t like monads as a design pattern?)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6m8ei", "score_hidden": false, "stickied": false, "created": 1492062294.0, "created_utc": 1492033494.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ltpi", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "so with this I can implement monad?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;so with this I can implement monad?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6ltpi", "score_hidden": false, "stickied": false, "created": 1492061804.0, "created_utc": 1492033004.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7abd9", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "mongreldog", "parent_id": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Recent work at MSR (can't find the link) showed that adding type classes to both C# and F# could be done quite efficiently and wasn't all that complicated. In F# they would probably be called \"traits\". F#'s type system makes it a bit easier to implement than C# due in part to its type constraint mechanism and would be syntactically cleaner.\n\nAt the moment Don Syme wants to wait for a C# implementation before adding it F# so that the interop will seamless. While this makes a lot of sense it also means that F# is unlikely to get the feature for quite a long time, which is unfortunate as type classes would probably be of greater benefit for F# than C#. Many F# enthusiasts have wanted type classes for quite a long time, as can be see from this 2009 article: [Type Classes Are The Secret Sauce](http://codebetter.com/matthewpodwysocki/2009/05/08/type-classes-are-the-secret-sauce/).\n\nEDIT: F# can currently do fully generic math and other operations using \"Statically Resolved Type Parameters\" without needing type classes. To create a fully generic \"add\" function just declare it as \"inline\". For example the following add function will add any two types that implement a \"+\" operator:\n\n    let inline add a b = a + b\n\nIt will add two integers, decimals, doubles, vectors, matrices etc... It will also concatenate two strings.", "edited": 1492073162.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Recent work at MSR (can&amp;#39;t find the link) showed that adding type classes to both C# and F# could be done quite efficiently and wasn&amp;#39;t all that complicated. In F# they would probably be called &amp;quot;traits&amp;quot;. F#&amp;#39;s type system makes it a bit easier to implement than C# due in part to its type constraint mechanism and would be syntactically cleaner.&lt;/p&gt;\n\n&lt;p&gt;At the moment Don Syme wants to wait for a C# implementation before adding it F# so that the interop will seamless. While this makes a lot of sense it also means that F# is unlikely to get the feature for quite a long time, which is unfortunate as type classes would probably be of greater benefit for F# than C#. Many F# enthusiasts have wanted type classes for quite a long time, as can be see from this 2009 article: &lt;a href=\"http://codebetter.com/matthewpodwysocki/2009/05/08/type-classes-are-the-secret-sauce/\"&gt;Type Classes Are The Secret Sauce&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;EDIT: F# can currently do fully generic math and other operations using &amp;quot;Statically Resolved Type Parameters&amp;quot; without needing type classes. To create a fully generic &amp;quot;add&amp;quot; function just declare it as &amp;quot;inline&amp;quot;. For example the following add function will add any two types that implement a &amp;quot;+&amp;quot; operator:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let inline add a b = a + b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will add two integers, decimals, doubles, vectors, matrices etc... It will also concatenate two strings.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7abd9", "score_hidden": false, "stickied": false, "created": 1492097720.0, "created_utc": 1492068920.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6gnjy", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; There are worse things than repeating ourselves\n\nTrue, which is why it has taken so long to get to this proposal.\n\nWhile I love the idea, I think non-nullable reference types should definitely take priority. (I'll have a report on that proposal next week.)\n\n&gt; I would add to this seamless inter-operation with other languages like F# as a priority. \n\nA standardized way of handling type classes would make interoperability with functional programming languages much easier.\n\nI think this is just as important as the DLR was for dynamic programming languages. (Though as we all know, the DLR languages have been mostly abandoned.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;There are worse things than repeating ourselves&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;True, which is why it has taken so long to get to this proposal.&lt;/p&gt;\n\n&lt;p&gt;While I love the idea, I think non-nullable reference types should definitely take priority. (I&amp;#39;ll have a report on that proposal next week.)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I would add to this seamless inter-operation with other languages like F# as a priority. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A standardized way of handling type classes would make interoperability with functional programming languages much easier.&lt;/p&gt;\n\n&lt;p&gt;I think this is just as important as the DLR was for dynamic programming languages. (Though as we all know, the DLR languages have been mostly abandoned.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6gnjy", "score_hidden": false, "stickied": false, "created": 1492056180.0, "created_utc": 1492027380.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg8iw9d", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "robillard130", "parent_id": "t1_dg712tf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Agreed lol", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Agreed lol&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg8iw9d", "score_hidden": false, "stickied": false, "created": 1492160465.0, "created_utc": 1492131665.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg712tf", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg704tv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I still don't like the explanation, but at least it is solid. Thank you.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I still don&amp;#39;t like the explanation, but at least it is solid. Thank you.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg712tf", "score_hidden": false, "stickied": false, "created": 1492080624.0, "created_utc": 1492051824.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg704tv", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "robillard130", "parent_id": "t1_dg6rdlb", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's to keep method resolution rules 100% consistent. If they built in special rules when generics where added that were just for generic method resolution then it would be harder to reason about your design. \n\nIt would be akin to:\n// does not throw on null\nVoid virtual DoSomething(IAnimal animal)\n\n// throws on null\nVoid overrides DoSomething(IReptile reptile)\n\nIReptile reptile = null;\nDoSomething(reptile);\n\nObviously this should resolve to DoSomething(IReptile) and throw an exception (this is the compiler error in the generic example). \nIf instead there was a special rule only for overridden methods that allowed this to fallback to DoSomething(IAnimal) because even though it's a weaker type match it accepts null as an argument and will succeed it wouldn't make much sense. \n\nIn .NET this throws a runtime exception but in languages where exceptions are declared as part of the method signature they can instead show a compile time error and tell you to reconsider your design/implementation just like the generics are doing here. (Code Contracts in .NET can do compile time parameter enforcement but they modify the IL code, aren't officially supported, and unfortunately should never be used in production code)\n\n\nReally though the why is probably just because generics where added to the framework later and they couldn't accommodate for it in the JIT/CLR without breaking shit or they just didn't consider it until after release. Now it's probably too late to change without breaking apps in production. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s to keep method resolution rules 100% consistent. If they built in special rules when generics where added that were just for generic method resolution then it would be harder to reason about your design. &lt;/p&gt;\n\n&lt;p&gt;It would be akin to:\n// does not throw on null\nVoid virtual DoSomething(IAnimal animal)&lt;/p&gt;\n\n&lt;p&gt;// throws on null\nVoid overrides DoSomething(IReptile reptile)&lt;/p&gt;\n\n&lt;p&gt;IReptile reptile = null;\nDoSomething(reptile);&lt;/p&gt;\n\n&lt;p&gt;Obviously this should resolve to DoSomething(IReptile) and throw an exception (this is the compiler error in the generic example). \nIf instead there was a special rule only for overridden methods that allowed this to fallback to DoSomething(IAnimal) because even though it&amp;#39;s a weaker type match it accepts null as an argument and will succeed it wouldn&amp;#39;t make much sense. &lt;/p&gt;\n\n&lt;p&gt;In .NET this throws a runtime exception but in languages where exceptions are declared as part of the method signature they can instead show a compile time error and tell you to reconsider your design/implementation just like the generics are doing here. (Code Contracts in .NET can do compile time parameter enforcement but they modify the IL code, aren&amp;#39;t officially supported, and unfortunately should never be used in production code)&lt;/p&gt;\n\n&lt;p&gt;Really though the why is probably just because generics where added to the framework later and they couldn&amp;#39;t accommodate for it in the JIT/CLR without breaking shit or they just didn&amp;#39;t consider it until after release. Now it&amp;#39;s probably too late to change without breaking apps in production. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg704tv", "score_hidden": false, "stickied": false, "created": 1492079408.0, "created_utc": 1492050608.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rdlb", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6r7ic", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You may understand it, but I don't. That's a good explanation as to what is happening, but not why.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You may understand it, but I don&amp;#39;t. That&amp;#39;s a good explanation as to what is happening, but not why.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6rdlb", "score_hidden": false, "stickied": false, "created": 1492068648.0, "created_utc": 1492039848.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg8iunw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "robillard130", "parent_id": "t1_dg87kt5", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I really need 'where T: new()' for some legacy code that uses activator.CreateInstance()", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I really need &amp;#39;where T: new()&amp;#39; for some legacy code that uses activator.CreateInstance()&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg8iunw", "score_hidden": false, "stickied": false, "created": 1492160405.0, "created_utc": 1492131605.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg87kt5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "orthoxerox", "parent_id": "t1_dg6r7ic", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I would settle for `where T : struct` and `where T : class` being part of the signature.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would settle for &lt;code&gt;where T : struct&lt;/code&gt; and &lt;code&gt;where T : class&lt;/code&gt; being part of the signature.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg87kt5", "score_hidden": false, "stickied": false, "created": 1492145689.0, "created_utc": 1492116889.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6r7ic", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "robillard130", "parent_id": "t1_dg6jx1p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "My biggest qualm with generics is that constraints aren't part of the method signature. https://blogs.msdn.microsoft.com/ericlippert/2009/12/10/constraints-are-not-part-of-the-signature/\n\nI understand the reasoning but doesn't make it any less annoying or any less of a trap for devs new to generics.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My biggest qualm with generics is that constraints aren&amp;#39;t part of the method signature. &lt;a href=\"https://blogs.msdn.microsoft.com/ericlippert/2009/12/10/constraints-are-not-part-of-the-signature/\"&gt;https://blogs.msdn.microsoft.com/ericlippert/2009/12/10/constraints-are-not-part-of-the-signature/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I understand the reasoning but doesn&amp;#39;t make it any less annoying or any less of a trap for devs new to generics.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6r7ic", "score_hidden": false, "stickied": false, "created": 1492068448.0, "created_utc": 1492039648.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6k0sv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "EntroperZero", "parent_id": "t1_dg6jx1p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yeah, generics are pretty good in C#, but not perfect.  I've run into roadblocks before, pretty recently actually, that the proposal would likely solve.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, generics are pretty good in C#, but not perfect.  I&amp;#39;ve run into roadblocks before, pretty recently actually, that the proposal would likely solve.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6k0sv", "score_hidden": false, "stickied": false, "created": 1492059711.0, "created_utc": 1492030911.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jx1p", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6jlu7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "On the other hand, there is a lot of things that we simply can't do with generics that this would make possible. \n\nThey definitely need to be really careful about this one.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On the other hand, there is a lot of things that we simply can&amp;#39;t do with generics that this would make possible. &lt;/p&gt;\n\n&lt;p&gt;They definitely need to be really careful about this one.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6jx1p", "score_hidden": false, "stickied": false, "created": 1492059593.0, "created_utc": 1492030793.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jlu7", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "EntroperZero", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I highly agree that other things like non-nullable references should take priority.\n\nAlso, in contrast with most other language updates, this feels like a fundamental change to the way the language operates.  Even async/await is basically syntactic sugar over Tasks.  My concern with shapes is that we now have this new abstraction that's like an interface, but not really.  So now we'll have a standard library and open-source libraries full of interfaces, but some new ones using shapes, and others sticking to interfaces, and now I'm consuming two things that mean the same thing, and getting them to work together, and which one do I use in my own code?  Now I don't understand what I'm doing.\n\nI know I'm supposed to learn how this stuff works, but with other features, it was very clear what I was getting out of it after some study.  That hasn't been the case so far with shapes, at least not for me.  The benefit-to-confusion ratio seems a lot lower.\n\n**EDIT:** I think type classes are probably a really useful and powerful thing.  They're probably a better abstraction than interfaces.  But I'm not sure they're right for C#.  I love the way that C# has evolved over the years, but this may be too fundamental.  At what point do we stop piling up features and decide to take all of the lessons learned and start a new language?", "edited": 1492041086.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I highly agree that other things like non-nullable references should take priority.&lt;/p&gt;\n\n&lt;p&gt;Also, in contrast with most other language updates, this feels like a fundamental change to the way the language operates.  Even async/await is basically syntactic sugar over Tasks.  My concern with shapes is that we now have this new abstraction that&amp;#39;s like an interface, but not really.  So now we&amp;#39;ll have a standard library and open-source libraries full of interfaces, but some new ones using shapes, and others sticking to interfaces, and now I&amp;#39;m consuming two things that mean the same thing, and getting them to work together, and which one do I use in my own code?  Now I don&amp;#39;t understand what I&amp;#39;m doing.&lt;/p&gt;\n\n&lt;p&gt;I know I&amp;#39;m supposed to learn how this stuff works, but with other features, it was very clear what I was getting out of it after some study.  That hasn&amp;#39;t been the case so far with shapes, at least not for me.  The benefit-to-confusion ratio seems a lot lower.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I think type classes are probably a really useful and powerful thing.  They&amp;#39;re probably a better abstraction than interfaces.  But I&amp;#39;m not sure they&amp;#39;re right for C#.  I love the way that C# has evolved over the years, but this may be too fundamental.  At what point do we stop piling up features and decide to take all of the lessons learned and start a new language?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6jlu7", "score_hidden": false, "stickied": false, "created": 1492059251.0, "created_utc": 1492030451.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6if3k", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "pipocaQuemada", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Generally, abstraction is difficult not because the language doesn't provide the right paradigm but because we lack the proper insight to do it right. \n\nIf you compare Haskell with Java, it seems that sometimes abstraction is difficult because your paradigm makes certain patterns of abstraction awkward or impossible, and people tend not to do awkward things.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Generally, abstraction is difficult not because the language doesn&amp;#39;t provide the right paradigm but because we lack the proper insight to do it right. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If you compare Haskell with Java, it seems that sometimes abstraction is difficult because your paradigm makes certain patterns of abstraction awkward or impossible, and people tend not to do awkward things.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6if3k", "score_hidden": false, "stickied": false, "created": 1492057997.0, "created_utc": 1492029197.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6t4cj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg6s9eg", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Like extension methods, shapes would be opt-in via `using namespace`. And they would probably be at the bottom of the overload resolution list.\n\nSo I'm not too worried about that aspect. I'm more concerned that people will go crazy with them when normal interfaces are more appropriate.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like extension methods, shapes would be opt-in via &lt;code&gt;using namespace&lt;/code&gt;. And they would probably be at the bottom of the overload resolution list.&lt;/p&gt;\n\n&lt;p&gt;So I&amp;#39;m not too worried about that aspect. I&amp;#39;m more concerned that people will go crazy with them when normal interfaces are more appropriate.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6t4cj", "score_hidden": false, "stickied": false, "created": 1492070812.0, "created_utc": 1492042012.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6s9eg", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree. This does add more expressiveness, but I'm not sure it solves a real problem, and has the disadvantage of making the language more convoluted.\n\nNon nullable references wouldn't be confusing, they would be a pure addition. But i wonder if some code would break because of shapes, like if the standard library adopted them, and now an object that would have gotten one overload now gets a different one... Not sure how that would work. Non nullable references wouldn't have that problem.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree. This does add more expressiveness, but I&amp;#39;m not sure it solves a real problem, and has the disadvantage of making the language more convoluted.&lt;/p&gt;\n\n&lt;p&gt;Non nullable references wouldn&amp;#39;t be confusing, they would be a pure addition. But i wonder if some code would break because of shapes, like if the standard library adopted them, and now an object that would have gotten one overload now gets a different one... Not sure how that would work. Non nullable references wouldn&amp;#39;t have that problem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6s9eg", "score_hidden": false, "stickied": false, "created": 1492069732.0, "created_utc": 1492040932.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg70usp", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "PenMount", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; I would add to this seamless inter-operation with other languages like F# as a priority.\n\nThis is one of the reasons type classes gets added to C# (or .net in general) F# wants it, but it need to work with all .net to make sens.\n\nBut i am also going to use it in C# so i am happy :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I would add to this seamless inter-operation with other languages like F# as a priority.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is one of the reasons type classes gets added to C# (or .net in general) F# wants it, but it need to work with all .net to make sens.&lt;/p&gt;\n\n&lt;p&gt;But i am also going to use it in C# so i am happy :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg70usp", "score_hidden": false, "stickied": false, "created": 1492080331.0, "created_utc": 1492051531.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg6qezl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "crusoe", "parent_id": "t1_dg6g985", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Or you could use traits...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or you could use traits...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6qezl", "score_hidden": false, "stickied": false, "created": 1492067468.0, "created_utc": 1492038668.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6g985", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "heisgone", "parent_id": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I don't think C# really needs more ways to abstract things. Generally, abstraction is difficult not because the language doesn't provide the right paradigm but because we lack the proper insight to do it right. The article says:\n\n&gt;Type classes solve a long-running problem with interfaces: they can\u2019t deal with static functions or operator overloads. This has led to problems like needing to declare the same function over and over again in math libraries to account for all of the different numeric data types.\n\nThere are worse things than repeating ourselves and we need language that deal with those bigger challenges, namely: thread safety, efficient concurrency, avoidance of runtime exceptions. \n\nI would add to this seamless inter-operation with other languages like F# as a priority.  \n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t think C# really needs more ways to abstract things. Generally, abstraction is difficult not because the language doesn&amp;#39;t provide the right paradigm but because we lack the proper insight to do it right. The article says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Type classes solve a long-running problem with interfaces: they can\u2019t deal with static functions or operator overloads. This has led to problems like needing to declare the same function over and over again in math libraries to account for all of the different numeric data types.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There are worse things than repeating ourselves and we need language that deal with those bigger challenges, namely: thread safety, efficient concurrency, avoidance of runtime exceptions. &lt;/p&gt;\n\n&lt;p&gt;I would add to this seamless inter-operation with other languages like F# as a priority.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6g985", "score_hidden": false, "stickied": false, "created": 1492055770.0, "created_utc": 1492026970.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64zhk1", "likes": null, "replies": "", "user_reports": [], "id": "dg7r1jx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dg7hs09", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "There is no shape type. A given shape is actually two types, an interface and a struct that acts as an adapter for a given type.\n\nThere is a lot of compiler magic to hide this fact from you when using generics. But it probably isn't possible to extend said magic far enough to work in other places.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is no shape type. A given shape is actually two types, an interface and a struct that acts as an adapter for a given type.&lt;/p&gt;\n\n&lt;p&gt;There is a lot of compiler magic to hide this fact from you when using generics. But it probably isn&amp;#39;t possible to extend said magic far enough to work in other places.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7r1jx", "score_hidden": false, "stickied": false, "created": 1492127842.0, "created_utc": 1492099042.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7hs09", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Mouse47", "parent_id": "t3_64zhk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "So what's the functional difference between these 'Shapes' and interfaces enhanced with static members?  Why can't a shape be used as a type?  Does it have something to do with static vs dynamic dispatch?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So what&amp;#39;s the functional difference between these &amp;#39;Shapes&amp;#39; and interfaces enhanced with static members?  Why can&amp;#39;t a shape be used as a type?  Does it have something to do with static vs dynamic dispatch?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7hs09", "score_hidden": false, "stickied": false, "created": 1492116614.0, "created_utc": 1492087814.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]