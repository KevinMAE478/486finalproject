[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65k27m", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 95, "report_reasons": null, "author": "gavinaking", "saved": false, "mod_reports": [], "name": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "developer.jboss.org", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65k27m/critical_deficiencies_in_jigsaw/", "num_reports": null, "locked": false, "stickied": false, "created": 1492303786.0, "url": "https://developer.jboss.org/blogs/scott.stark/2017/04/14/critical-deficiencies-in-jigsawjsr-376-java-platform-module-system-ec-member-concerns", "author_flair_text": null, "quarantine": false, "title": "Critical Deficiencies in Jigsaw", "created_utc": 1492274986.0, "distinguished": null, "media": null, "upvote_ratio": 0.86, "num_comments": 41, "visited": false, "subreddit_type": "public", "ups": 95}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgbeu7t", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgbau56", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; CyclicDependences \u2014 The current draft disallows cycles when the module graph is initially resolved at compile time, link time, and run time. Cycles can arise later on at run time if readability edges are added for automatic modules, or via reflection. \n\nhttp://openjdk.java.net/projects/jigsaw/spec/issues/#CyclicDependences\n\nThere, cycles can occure. But I still wonder what they meant with \"run time\" earlier. Swapping modules at runtime?", "edited": 1492346969.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;CyclicDependences \u2014 The current draft disallows cycles when the module graph is initially resolved at compile time, link time, and run time. Cycles can arise later on at run time if readability edges are added for automatic modules, or via reflection. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=\"http://openjdk.java.net/projects/jigsaw/spec/issues/#CyclicDependences\"&gt;http://openjdk.java.net/projects/jigsaw/spec/issues/#CyclicDependences&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There, cycles can occure. But I still wonder what they meant with &amp;quot;run time&amp;quot; earlier. Swapping modules at runtime?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbeu7t", "score_hidden": false, "stickied": false, "created": 1492331230.0, "created_utc": 1492302430.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbau56", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgb9bte", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; The implementation forbids dependency cycles among modules during compilation, link, and run time. Disallowing cycles during compilation is an accepted and historical behavior, however disallowing cycles at run time is not\n\n- Nothing in the Java SE 9 specification says that **individual object references** are checked at runtime to stop cross-module object cycles. Doing this would actually imply a significant runtime penalty, it'd be awkward to purposefuly implement this.\n- I can't reproduce this in current Java SE 9 builds. I can have module `A` require `B` and `C`, and the latter two require nothing. Then from `A`, I can inject `B` with object from `C` and vice versa, and I see no error.\n\nSo when this quote refers to \"run time dependency among modules\", I don't believe they mean object references travelling across modules, more likely runtime resolution APIs in `java.lang.module`. If they do refer to *objects*, then someone has to present relevant links to reproducible examples or specifications or something else clarifying and substantiating the claim subject of the argument.\n\n&gt; You can't define object dependencies without having them or their super classes or interface in your module requirements.\n\nThe module containing the interface/super-class doesn't have to be the same module containing the *implementations* being injected. This is a practice that far predates Jigsaw (separating contracts into their own package).\n\nThis means you can `require` module \"Foo's Interfaces\" and then receive an object from module \"Specific Flavor of Foo Implementation\" that you *didn't* `require`.", "edited": 1492297567.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The implementation forbids dependency cycles among modules during compilation, link, and run time. Disallowing cycles during compilation is an accepted and historical behavior, however disallowing cycles at run time is not&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Nothing in the Java SE 9 specification says that &lt;strong&gt;individual object references&lt;/strong&gt; are checked at runtime to stop cross-module object cycles. Doing this would actually imply a significant runtime penalty, it&amp;#39;d be awkward to purposefuly implement this.&lt;/li&gt;\n&lt;li&gt;I can&amp;#39;t reproduce this in current Java SE 9 builds. I can have module &lt;code&gt;A&lt;/code&gt; require &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;, and the latter two require nothing. Then from &lt;code&gt;A&lt;/code&gt;, I can inject &lt;code&gt;B&lt;/code&gt; with object from &lt;code&gt;C&lt;/code&gt; and vice versa, and I see no error.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So when this quote refers to &amp;quot;run time dependency among modules&amp;quot;, I don&amp;#39;t believe they mean object references travelling across modules, more likely runtime resolution APIs in &lt;code&gt;java.lang.module&lt;/code&gt;. If they do refer to &lt;em&gt;objects&lt;/em&gt;, then someone has to present relevant links to reproducible examples or specifications or something else clarifying and substantiating the claim subject of the argument.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You can&amp;#39;t define object dependencies without having them or their super classes or interface in your module requirements.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The module containing the interface/super-class doesn&amp;#39;t have to be the same module containing the &lt;em&gt;implementations&lt;/em&gt; being injected. This is a practice that far predates Jigsaw (separating contracts into their own package).&lt;/p&gt;\n\n&lt;p&gt;This means you can &lt;code&gt;require&lt;/code&gt; module &amp;quot;Foo&amp;#39;s Interfaces&amp;quot; and then receive an object from module &amp;quot;Specific Flavor of Foo Implementation&amp;quot; that you &lt;em&gt;didn&amp;#39;t&lt;/em&gt; &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbau56", "score_hidden": false, "stickied": false, "created": 1492325530.0, "created_utc": 1492296730.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb9bte", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgb6ad9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; The implementation forbids dependency cycles among modules during compilation, link, and run time. Disallowing cycles during compilation is an accepted and historical behavior, however disallowing cycles at **run time** is not, and will cause surprising problems for the user at deployment time and serves no obvious purpose relating to improved software or practices. Such cycles might even reflect engineering choices that are required to fullfill certain use cases.\n\nYou can't define object dependencies without having them or their super classes or interface in your module requirements.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The implementation forbids dependency cycles among modules during compilation, link, and run time. Disallowing cycles during compilation is an accepted and historical behavior, however disallowing cycles at &lt;strong&gt;run time&lt;/strong&gt; is not, and will cause surprising problems for the user at deployment time and serves no obvious purpose relating to improved software or practices. Such cycles might even reflect engineering choices that are required to fullfill certain use cases.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can&amp;#39;t define object dependencies without having them or their super classes or interface in your module requirements.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb9bte", "score_hidden": false, "stickied": false, "created": 1492323325.0, "created_utc": 1492294525.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb6ad9", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgb5zna", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Really, even if they life in different modules? \n\nYes, even if they live in different modules. One module can use another via runtime wiring (dependency injection). This doesn't make modules dependent in terms of Jigsaw. Jigsaw only cares about static module dependency declarations. Those are *hard dependencies*.\n\n&gt; How to understand \"circular runtime dependency\" then?\n\nTell me where you pulled that phrase/quote from and I'll let you know.\n\nThis thread is full of people confusing **object dependencies** (as in \"dependency injection\" etc.) with **module dependencies** (one module declaring it needs another).\n\nThose are absolutely distinct topics. Both talk about things depending on things, but the *type of things* is not irrelevant.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Really, even if they life in different modules? &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, even if they live in different modules. One module can use another via runtime wiring (dependency injection). This doesn&amp;#39;t make modules dependent in terms of Jigsaw. Jigsaw only cares about static module dependency declarations. Those are &lt;em&gt;hard dependencies&lt;/em&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;How to understand &amp;quot;circular runtime dependency&amp;quot; then?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Tell me where you pulled that phrase/quote from and I&amp;#39;ll let you know.&lt;/p&gt;\n\n&lt;p&gt;This thread is full of people confusing &lt;strong&gt;object dependencies&lt;/strong&gt; (as in &amp;quot;dependency injection&amp;quot; etc.) with &lt;strong&gt;module dependencies&lt;/strong&gt; (one module declaring it needs another).&lt;/p&gt;\n\n&lt;p&gt;Those are absolutely distinct topics. Both talk about things depending on things, but the &lt;em&gt;type of things&lt;/em&gt; is not irrelevant.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb6ad9", "score_hidden": false, "stickied": false, "created": 1492319108.0, "created_utc": 1492290308.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb5zna", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgb34yn", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Really, even if they life in different modules? How to understand \"circular runtime dependency\" then? Swapping modules at runtime / plugins?\n", "edited": 1492346981.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Really, even if they life in different modules? How to understand &amp;quot;circular runtime dependency&amp;quot; then? Swapping modules at runtime / plugins?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb5zna", "score_hidden": false, "stickied": false, "created": 1492318687.0, "created_utc": 1492289887.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb34yn", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgaw2cv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "If you mean Jigsaw recommends against circular object references, as you'd see in Observer, then you're wrong.\n\nCircular module dependencies **\u2260** circular object references. ", "edited": 1492286953.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you mean Jigsaw recommends against circular object references, as you&amp;#39;d see in Observer, then you&amp;#39;re wrong.&lt;/p&gt;\n\n&lt;p&gt;Circular module dependencies &lt;strong&gt;\u2260&lt;/strong&gt; circular object references. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb34yn", "score_hidden": false, "stickied": false, "created": 1492314782.0, "created_utc": 1492285982.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaw2cv", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgavpyv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It also means cyclic dependencies at runtime.", "edited": 1492302485.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It also means cyclic dependencies at runtime.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaw2cv", "score_hidden": false, "stickied": false, "created": 1492305233.0, "created_utc": 1492276433.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgcj5ad", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "duhace", "parent_id": "t1_dgbbnav", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "i guess he means that some functionality of C may not be needed to run in some cases where you would use A and B, but that's still really nasty and kinda defeats the purpose of having modules.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;i guess he means that some functionality of C may not be needed to run in some cases where you would use A and B, but that&amp;#39;s still really nasty and kinda defeats the purpose of having modules.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcj5ad", "score_hidden": false, "stickied": false, "created": 1492403496.0, "created_utc": 1492374696.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbbnav", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgb3iht", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; That's not correct. It means you can't compile them independently.\n\n&gt; It doesn't say much about runtime.\n\nI don't understand the last sentence, please be more specific what \"it\" is and about what thing at runtime you're talking about.\n\nCircular modules are circular modules. Their requirements are defined declaratively, statically, whether at compilation time, or runtime, it's absolutely irrelevant: circularly dependent modules make no sense. If they do, once again, I beg for examples.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;That&amp;#39;s not correct. It means you can&amp;#39;t compile them independently.&lt;/p&gt;\n\n&lt;p&gt;It doesn&amp;#39;t say much about runtime.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&amp;#39;t understand the last sentence, please be more specific what &amp;quot;it&amp;quot; is and about what thing at runtime you&amp;#39;re talking about.&lt;/p&gt;\n\n&lt;p&gt;Circular modules are circular modules. Their requirements are defined declaratively, statically, whether at compilation time, or runtime, it&amp;#39;s absolutely irrelevant: circularly dependent modules make no sense. If they do, once again, I beg for examples.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbbnav", "score_hidden": false, "stickied": false, "created": 1492326716.0, "created_utc": 1492297916.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgb3rnq", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "[deleted]", "parent_id": "t1_dgb3iht", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb3rnq", "score_hidden": false, "stickied": false, "created": 1492315662.0, "created_utc": 1492286862.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb3iht", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "gavinaking", "parent_id": "t1_dgb3c4n", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Then you can, by definition, never ever use these three modules independently.\n\nThat's not correct. It means you can't _compile_ them independently.\n\nIt doesn't say much about runtime.\n\n(Anyway, this is a religious war that I don't really want to get drawn into, because I don't much care.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Then you can, by definition, never ever use these three modules independently.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s not correct. It means you can&amp;#39;t &lt;em&gt;compile&lt;/em&gt; them independently.&lt;/p&gt;\n\n&lt;p&gt;It doesn&amp;#39;t say much about runtime.&lt;/p&gt;\n\n&lt;p&gt;(Anyway, this is a religious war that I don&amp;#39;t really want to get drawn into, because I don&amp;#39;t much care.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb3iht", "score_hidden": false, "stickied": false, "created": 1492315303.0, "created_utc": 1492286503.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgcl8in", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mike_hearn", "parent_id": "t1_dgceg6n", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree that they are to be avoided. I'm not actually sure how the scenario the document posits is meant to work, where there are no cycles up until the point that a certain combination of modules is assembled and then suddenly there is. I'd be interested to see a real world example of where that happened. I assume it's to do with optional dependencies or version skew.\n\nBut you could make similar arguments about packages. The word \"package\" and \"module\" both evoke the same imagery in everyday English. They're just ways to organise collections of code after all. Why not forbid cycles between packages too? Well, we've sort of collectively decided that some sorts of cycles are OK and others aren't. Packages are often used to group code thematically and not by what depends on what, so trying to eliminate package cycles wouldn't work. In some codebases I imagine the concept of a module is used the same way.\n\nNow arguably Jigsaw isn't one of those places because it's a new module system. And other common Java module systems like Gradle modules don't allow cycles either. So perhaps I'm coming down more on your side of the fence here. Like I said ... it'd be good to see some specific examples of where cycles were introduced in the module graph due to them simply being very large and un-coordinated.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree that they are to be avoided. I&amp;#39;m not actually sure how the scenario the document posits is meant to work, where there are no cycles up until the point that a certain combination of modules is assembled and then suddenly there is. I&amp;#39;d be interested to see a real world example of where that happened. I assume it&amp;#39;s to do with optional dependencies or version skew.&lt;/p&gt;\n\n&lt;p&gt;But you could make similar arguments about packages. The word &amp;quot;package&amp;quot; and &amp;quot;module&amp;quot; both evoke the same imagery in everyday English. They&amp;#39;re just ways to organise collections of code after all. Why not forbid cycles between packages too? Well, we&amp;#39;ve sort of collectively decided that some sorts of cycles are OK and others aren&amp;#39;t. Packages are often used to group code thematically and not by what depends on what, so trying to eliminate package cycles wouldn&amp;#39;t work. In some codebases I imagine the concept of a module is used the same way.&lt;/p&gt;\n\n&lt;p&gt;Now arguably Jigsaw isn&amp;#39;t one of those places because it&amp;#39;s a new module system. And other common Java module systems like Gradle modules don&amp;#39;t allow cycles either. So perhaps I&amp;#39;m coming down more on your side of the fence here. Like I said ... it&amp;#39;d be good to see some specific examples of where cycles were introduced in the module graph due to them simply being very large and un-coordinated.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcl8in", "score_hidden": false, "stickied": false, "created": 1492406222.0, "created_utc": 1492377422.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgceg6n", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgc5k1p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; But people also use modules for lots of other things like to simply organise functionality, or represent team boundaries, or to allow for independent releases or whatever. It's such a general concept that all sorts of things can be projected onto it. And if you only care about those things, then cycles could happen and not interfere with your goals.\n\nWe have to dig in closer into this, because we really should be specific, and differentiate fuzzy gut feelings from concrete architectural benefits.\n\nMy team writes modular applications in multiple languages, including Java long before Jigsaw, and other platforms which aren't even attempting to have a similar modular system. We go by convention in most cases.\n\nAnd one of those conventions is: if you have modules that depend on each other in a circle, someone f\\*\\*\\*ed up, and we failed at having a modular application. Circular module dependencies are an architectural bug, that shows our code is \"accidentally monolithic\", hence incorrectly factored for modularity, and we need to change something pronto, and break the cycle.\n\nI actually *wish* every language had module systems to enforce this, because every minute longer a circular dependency stays, the harder it becomes to untangle it.\n\nI would really like to see someone have a single concrete example to prove the opposite, rather than us staying firmly in the abstract and saying things like \"all sorts of things can be projected onto it\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;But people also use modules for lots of other things like to simply organise functionality, or represent team boundaries, or to allow for independent releases or whatever. It&amp;#39;s such a general concept that all sorts of things can be projected onto it. And if you only care about those things, then cycles could happen and not interfere with your goals.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;We have to dig in closer into this, because we really should be specific, and differentiate fuzzy gut feelings from concrete architectural benefits.&lt;/p&gt;\n\n&lt;p&gt;My team writes modular applications in multiple languages, including Java long before Jigsaw, and other platforms which aren&amp;#39;t even attempting to have a similar modular system. We go by convention in most cases.&lt;/p&gt;\n\n&lt;p&gt;And one of those conventions is: if you have modules that depend on each other in a circle, someone f***ed up, and we failed at having a modular application. Circular module dependencies are an architectural bug, that shows our code is &amp;quot;accidentally monolithic&amp;quot;, hence incorrectly factored for modularity, and we need to change something pronto, and break the cycle.&lt;/p&gt;\n\n&lt;p&gt;I actually &lt;em&gt;wish&lt;/em&gt; every language had module systems to enforce this, because every minute longer a circular dependency stays, the harder it becomes to untangle it.&lt;/p&gt;\n\n&lt;p&gt;I would really like to see someone have a single concrete example to prove the opposite, rather than us staying firmly in the abstract and saying things like &amp;quot;all sorts of things can be projected onto it&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgceg6n", "score_hidden": false, "stickied": false, "created": 1492397359.0, "created_utc": 1492368559.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc5k1p", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mike_hearn", "parent_id": "t1_dgb63ds", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I suspect the disagreement arises from varying ideas about what a module is meant to actually represent and achieve. It's quite an abstract concept after all so it's not surprising that people can have different ideas about it.\n\nStrictly speaking, the argument against modules depending on each other in a cycle is correct. A big goal of modularising software is so you can ship only the modules you actually need. Cycles make that pointless.\n\nBut people also use modules for lots of other things like to simply organise functionality, or represent team boundaries, or to allow for independent releases or whatever. It's such a general concept that all sorts of things can be projected onto it. And if you only care about those things, then cycles could happen and not interfere with your goals.\n\nI didn't talk about cyclic dependencies in my blog response for this reason - there are good arguments on both sides and it's not a topic I particularly care about. As the document points out, you can in fact do cyclic dependencies at runtime with Jigsaw, but you need to customise the module loading with some sort of app container. This is a common approach taken by Jigsaw: support the more mainstream stuff that will work for most apps out of the box, but let additional software customise it where there are clear differences of opinion on what's acceptable or when they just didn't have time to implement a solution they're happy with.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I suspect the disagreement arises from varying ideas about what a module is meant to actually represent and achieve. It&amp;#39;s quite an abstract concept after all so it&amp;#39;s not surprising that people can have different ideas about it.&lt;/p&gt;\n\n&lt;p&gt;Strictly speaking, the argument against modules depending on each other in a cycle is correct. A big goal of modularising software is so you can ship only the modules you actually need. Cycles make that pointless.&lt;/p&gt;\n\n&lt;p&gt;But people also use modules for lots of other things like to simply organise functionality, or represent team boundaries, or to allow for independent releases or whatever. It&amp;#39;s such a general concept that all sorts of things can be projected onto it. And if you only care about those things, then cycles could happen and not interfere with your goals.&lt;/p&gt;\n\n&lt;p&gt;I didn&amp;#39;t talk about cyclic dependencies in my blog response for this reason - there are good arguments on both sides and it&amp;#39;s not a topic I particularly care about. As the document points out, you can in fact do cyclic dependencies at runtime with Jigsaw, but you need to customise the module loading with some sort of app container. This is a common approach taken by Jigsaw: support the more mainstream stuff that will work for most apps out of the box, but let additional software customise it where there are clear differences of opinion on what&amp;#39;s acceptable or when they just didn&amp;#39;t have time to implement a solution they&amp;#39;re happy with.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc5k1p", "score_hidden": false, "stickied": false, "created": 1492385533.0, "created_utc": 1492356733.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb63ds", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgb60de", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That still makes no sense whatsoever, because if say, A uses B via dependency injection, then A wouldn't have a hard dependency on B. And then it wouldn't be a circular dependency. Jigsaw module dependencies are **static**. They're **not about dependency injection**.\n\nYou can't mock a \"module\". You can mock an object. \n\nI'm not quite sure if you understand what Jigsaw documentation says by \"have no circular dependencies\". We're talking about *modules depending on other modules*. Not about injected dependencies. Totally different things.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That still makes no sense whatsoever, because if say, A uses B via dependency injection, then A wouldn&amp;#39;t have a hard dependency on B. And then it wouldn&amp;#39;t be a circular dependency. Jigsaw module dependencies are &lt;strong&gt;static&lt;/strong&gt;. They&amp;#39;re &lt;strong&gt;not about dependency injection&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can&amp;#39;t mock a &amp;quot;module&amp;quot;. You can mock an object. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not quite sure if you understand what Jigsaw documentation says by &amp;quot;have no circular dependencies&amp;quot;. We&amp;#39;re talking about &lt;em&gt;modules depending on other modules&lt;/em&gt;. Not about injected dependencies. Totally different things.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb63ds", "score_hidden": false, "stickied": false, "created": 1492318834.0, "created_utc": 1492290034.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb60de", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Tom_Cian", "parent_id": "t1_dgb5t42", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "&gt; You can't test in \"isolation\" because obviously in a circular chain A-&gt;B-&gt;C-&gt;A\n\nOf course you can, that's what mocking is for. Or proper use of dependency injection with testing modules.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You can&amp;#39;t test in &amp;quot;isolation&amp;quot; because obviously in a circular chain A-&amp;gt;B-&amp;gt;C-&amp;gt;A&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Of course you can, that&amp;#39;s what mocking is for. Or proper use of dependency injection with testing modules.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb60de", "score_hidden": false, "stickied": false, "created": 1492318716.0, "created_utc": 1492289916.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb5t42", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgb5hsi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; So what? This happens all the time. Whenever you add a dependency in your build file, Maven/Gradle/whatever will download and use on its classpath all the transitive dependencies of that dependency as well.\n\nIf you allow a poor practice, it'll happen. That's not the question. The question is: why allow it? What's the use case for it? \"Shit happens\" is not a good use case.\n\n&gt; &gt; This means the actual module is \"A+B+C\", and you split it into three modules for no reason whatsoever.\n\n&gt; Modularity. It's pretty common to split things in multiple parts in order to evolve them and test them in separation, even if you can't use any of these things by itself.\n\nYou're trying to sell this as a reason to have circular modules? You're not thinking this through... Circularly dependent modules mean you can't test things in isolation and you failed to achieve modularity.\n\nYou can't test in \"isolation\" because obviously in a circular chain A-&gt;B-&gt;C-&gt;A, the smallest unit is \"A+B+C\". You've failed with isolation. \n\nAnd thus you've failed with modularity, unless your goal was to have *one module defined in three interconnected pieces*.\n\n&gt; No. That's what we used to do in the dark ages of software engineering, we know better today.\n\nThe point I'm making is completely flying over your head. Arbitrarily splitting things into pieces and then *tightly connecting them via dependency declarations* is virtually identical to having one module. Except the former only has the **superficial appearance of modularity**. Why would *faking modularity* ever be a goal?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;So what? This happens all the time. Whenever you add a dependency in your build file, Maven/Gradle/whatever will download and use on its classpath all the transitive dependencies of that dependency as well.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If you allow a poor practice, it&amp;#39;ll happen. That&amp;#39;s not the question. The question is: why allow it? What&amp;#39;s the use case for it? &amp;quot;Shit happens&amp;quot; is not a good use case.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This means the actual module is &amp;quot;A+B+C&amp;quot;, and you split it into three modules for no reason whatsoever.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Modularity. It&amp;#39;s pretty common to split things in multiple parts in order to evolve them and test them in separation, even if you can&amp;#39;t use any of these things by itself.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You&amp;#39;re trying to sell this as a reason to have circular modules? You&amp;#39;re not thinking this through... Circularly dependent modules mean you can&amp;#39;t test things in isolation and you failed to achieve modularity.&lt;/p&gt;\n\n&lt;p&gt;You can&amp;#39;t test in &amp;quot;isolation&amp;quot; because obviously in a circular chain A-&amp;gt;B-&amp;gt;C-&amp;gt;A, the smallest unit is &amp;quot;A+B+C&amp;quot;. You&amp;#39;ve failed with isolation. &lt;/p&gt;\n\n&lt;p&gt;And thus you&amp;#39;ve failed with modularity, unless your goal was to have &lt;em&gt;one module defined in three interconnected pieces&lt;/em&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;No. That&amp;#39;s what we used to do in the dark ages of software engineering, we know better today.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The point I&amp;#39;m making is completely flying over your head. Arbitrarily splitting things into pieces and then &lt;em&gt;tightly connecting them via dependency declarations&lt;/em&gt; is virtually identical to having one module. Except the former only has the &lt;strong&gt;superficial appearance of modularity&lt;/strong&gt;. Why would &lt;em&gt;faking modularity&lt;/em&gt; ever be a goal?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb5t42", "score_hidden": false, "stickied": false, "created": 1492318435.0, "created_utc": 1492289635.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb5hsi", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Tom_Cian", "parent_id": "t1_dgb3c4n", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Then you can, by definition, never ever use these three modules independently.\n\nSo what? This happens all the time. Whenever you add a dependency in your build file, Maven/Gradle/whatever will download and use on its classpath all the transitive dependencies of that dependency as well.\n\n&gt; This means the actual module is \"A+B+C\", and you split it into three modules for no reason whatsoever.\n\nModularity. It's pretty common to split things in multiple parts in order to evolve them and test them in separation, even if you can't use any of these things by itself.\n\n&gt; Just put all three pieces in one module.\n\nNo. That's what we used to do in the dark ages of software engineering, we know better today.\n\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Then you can, by definition, never ever use these three modules independently.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So what? This happens all the time. Whenever you add a dependency in your build file, Maven/Gradle/whatever will download and use on its classpath all the transitive dependencies of that dependency as well.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;This means the actual module is &amp;quot;A+B+C&amp;quot;, and you split it into three modules for no reason whatsoever.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Modularity. It&amp;#39;s pretty common to split things in multiple parts in order to evolve them and test them in separation, even if you can&amp;#39;t use any of these things by itself.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Just put all three pieces in one module.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No. That&amp;#39;s what we used to do in the dark ages of software engineering, we know better today.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb5hsi", "score_hidden": false, "stickied": false, "created": 1492318011.0, "created_utc": 1492289211.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb3c4n", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dgawdqd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Oh, I've heard some very knowledgeable people argue very strongly that it should be allowed.\n\n\"Some very knowledgeable people agree about X\" is in itself not a good argument for X, I'm afraid. The substance is missing. **Why** should it be allowed?\n\nCircular dependencies between modules make no sense for a very simple reason:\n\n- If A depends on B.\n- If B depends on C.\n- If C depends on A.\n\nThen you can, by definition, **never ever** use these three modules independently. Need A? You also need B and C. Need B? You also need A and C. Need C? You also need A and B. \n\nThis means the actual module is \"A+B+C\", and you split it into three modules for no reason whatsoever.\n\nWhy split something in three pieces when you always need the other two? Just put all three pieces in one module. If you can find a problem with this logic, let me know what it is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Oh, I&amp;#39;ve heard some very knowledgeable people argue very strongly that it should be allowed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&amp;quot;Some very knowledgeable people agree about X&amp;quot; is in itself not a good argument for X, I&amp;#39;m afraid. The substance is missing. &lt;strong&gt;Why&lt;/strong&gt; should it be allowed?&lt;/p&gt;\n\n&lt;p&gt;Circular dependencies between modules make no sense for a very simple reason:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If A depends on B.&lt;/li&gt;\n&lt;li&gt;If B depends on C.&lt;/li&gt;\n&lt;li&gt;If C depends on A.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Then you can, by definition, &lt;strong&gt;never ever&lt;/strong&gt; use these three modules independently. Need A? You also need B and C. Need B? You also need A and C. Need C? You also need A and B. &lt;/p&gt;\n\n&lt;p&gt;This means the actual module is &amp;quot;A+B+C&amp;quot;, and you split it into three modules for no reason whatsoever.&lt;/p&gt;\n\n&lt;p&gt;Why split something in three pieces when you always need the other two? Just put all three pieces in one module. If you can find a problem with this logic, let me know what it is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb3c4n", "score_hidden": false, "stickied": false, "created": 1492315053.0, "created_utc": 1492286253.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgawgvy", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "gavinaking", "parent_id": "t1_dgawdqd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "And, for contrast, I've seen some people try to argue that there should never be circular references at the *package* level. Which I think is a bit silly and unmotivated by any real software engineering considerations.", "edited": 1492277184.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And, for contrast, I&amp;#39;ve seen some people try to argue that there should never be circular references at the &lt;em&gt;package&lt;/em&gt; level. Which I think is a bit silly and unmotivated by any real software engineering considerations.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgawgvy", "score_hidden": false, "stickied": false, "created": 1492305779.0, "created_utc": 1492276979.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgawdqd", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "gavinaking", "parent_id": "t1_dgavpyv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; I've exclusively seen them being as at best 'not something you should be doing' and definitely an anti-pattern\n\nOh, I've heard some very knowledgeable people argue *very* strongly that it should be allowed. (Personally it's not something I can get very worked up about, but I agree it's not common.)", "edited": 1492277176.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;ve exclusively seen them being as at best &amp;#39;not something you should be doing&amp;#39; and definitely an anti-pattern&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Oh, I&amp;#39;ve heard some very knowledgeable people argue &lt;em&gt;very&lt;/em&gt; strongly that it should be allowed. (Personally it&amp;#39;s not something I can get very worked up about, but I agree it&amp;#39;s not common.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgawdqd", "score_hidden": false, "stickied": false, "created": 1492305657.0, "created_utc": 1492276857.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgavpyv", "gilded": 0, "archived": false, "score": 29, "report_reasons": null, "author": "AlyoshaV", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;Many practices which were considered routine and useful in Java are now redefined as anti-patterns in Jigsaw, as described in the Technical Challenge Points section of this document (e.g. \u201cCyclic Dependencies\u201d,\n\nI've never heard of cyclic dependencies as being something you want before; I've exclusively seen them being as at best 'not something you should be doing' and definitely an anti-pattern", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Many practices which were considered routine and useful in Java are now redefined as anti-patterns in Jigsaw, as described in the Technical Challenge Points section of this document (e.g. \u201cCyclic Dependencies\u201d,&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;ve never heard of cyclic dependencies as being something you want before; I&amp;#39;ve exclusively seen them being as at best &amp;#39;not something you should be doing&amp;#39; and definitely an anti-pattern&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgavpyv", "score_hidden": false, "stickied": false, "created": 1492304767.0, "created_utc": 1492275967.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 29}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgbc7xo", "gilded": 0, "archived": false, "score": -4, "report_reasons": null, "author": "saint_marco", "parent_id": "t1_dgaz4l9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Renaming is commonly done w/ maven's shade plugin. Although it's not particularly great, it is typically easier than resolving the conflict.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Renaming is commonly done w/ maven&amp;#39;s shade plugin. Although it&amp;#39;s not particularly great, it is typically easier than resolving the conflict.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbc7xo", "score_hidden": false, "stickied": false, "created": 1492327549.0, "created_utc": 1492298749.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": -4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaz4l9", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "_INTER_", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Another issue that is not really solvable with Jigsaw and only touched in the blog: Conflicting version of third-party libraries when resolved transitively. Eg.: [dep. graph](https://qph.ec.quoracdn.net/main-qimg-147fe6e0e4a04c61f6909f040b132b25.webp)\n\nWhen asked in mailing list:\n&gt; If the names of two automatic modules conflict then they cannot both be placed on the same module path.\n\nThe answer by Mark Reinhold:\n&gt; A simple workaround for this problem is for the user of such modules to\nrename one of the relevant JAR files.\n\n[source](http://mail.openjdk.java.net/pipermail/jpms-spec-experts/2017-April/000666.html) \n\nRename a JAR file you don't own? This answer is devoid of any real world application.", "edited": 1492282663.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another issue that is not really solvable with Jigsaw and only touched in the blog: Conflicting version of third-party libraries when resolved transitively. Eg.: &lt;a href=\"https://qph.ec.quoracdn.net/main-qimg-147fe6e0e4a04c61f6909f040b132b25.webp\"&gt;dep. graph&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When asked in mailing list:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;If the names of two automatic modules conflict then they cannot both be placed on the same module path.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The answer by Mark Reinhold:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;A simple workaround for this problem is for the user of such modules to\nrename one of the relevant JAR files.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=\"http://mail.openjdk.java.net/pipermail/jpms-spec-experts/2017-April/000666.html\"&gt;source&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Rename a JAR file you don&amp;#39;t own? This answer is devoid of any real world application.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaz4l9", "score_hidden": false, "stickied": false, "created": 1492309388.0, "created_utc": 1492280588.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgbcdep", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "grumpy_purple_midget", "parent_id": "t1_dgb0j96", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ultimately it's not Oracle's decision though is it?  My understanding is that if enough members of the JCP Executive Committee can be persuaded to vote against the specification, then short of some kind of \"nuclear\" option there would be no Java 9 release.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ultimately it&amp;#39;s not Oracle&amp;#39;s decision though is it?  My understanding is that if enough members of the JCP Executive Committee can be persuaded to vote against the specification, then short of some kind of &amp;quot;nuclear&amp;quot; option there would be no Java 9 release.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbcdep", "score_hidden": false, "stickied": false, "created": 1492327769.0, "created_utc": 1492298969.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgc7fxy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "nondetermined", "parent_id": "t1_dgb380i", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "OSGi also does have a lot of little happy places like declarative services.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OSGi also does have a lot of little happy places like declarative services.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc7fxy", "score_hidden": false, "stickied": false, "created": 1492388096.0, "created_utc": 1492359296.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb380i", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "rbitdan", "parent_id": "t1_dgb0qzm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "OSGi has a lot of pain areas though, and certainly not *the solution*.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OSGi has a lot of pain areas though, and certainly not &lt;em&gt;the solution&lt;/em&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb380i", "score_hidden": false, "stickied": false, "created": 1492314897.0, "created_utc": 1492286097.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 11}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb0qzm", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgb0j96", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Better than nothing\n\nOSGi? They thought about these problems for 14 years. The solution was always there.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Better than nothing&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;OSGi? They thought about these problems for 14 years. The solution was always there.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb0qzm", "score_hidden": false, "stickied": false, "created": 1492311611.0, "created_utc": 1492282811.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb0j96", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Tvhwee", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "With Java 9 scheduled for release in July (after long delays already), I don't think Oracle is going to care. I think Jigsaw is a fine start. Better than nothing, and it DID already help split up the JVM. I don't think anything in Jigsaw stops Java 10 from fixing most of the issues raised.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;With Java 9 scheduled for release in July (after long delays already), I don&amp;#39;t think Oracle is going to care. I think Jigsaw is a fine start. Better than nothing, and it DID already help split up the JVM. I don&amp;#39;t think anything in Jigsaw stops Java 10 from fixing most of the issues raised.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb0j96", "score_hidden": false, "stickied": false, "created": 1492311325.0, "created_utc": 1492282525.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgb8529", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "pm_plz_im_lonely", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The fragmentation bit reminds me of .NET core.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The fragmentation bit reminds me of .NET core.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb8529", "score_hidden": false, "stickied": false, "created": 1492321670.0, "created_utc": 1492292870.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgb0unr", "gilded": 0, "archived": false, "score": 27, "report_reasons": null, "author": "_INTER_", "parent_id": "t1_dgazuna", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This post is just a summary. These deficiencies are not new and they raised them atleast two years ago but fell on deaf ears or got useless workaround suggestions. The mailing lists are full of facepalm situations. For example they invested resources in disallowing version numbers at the end or start of module-names, just to retract that restriction because its simply idiotic.", "edited": 1492283197.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This post is just a summary. These deficiencies are not new and they raised them atleast two years ago but fell on deaf ears or got useless workaround suggestions. The mailing lists are full of facepalm situations. For example they invested resources in disallowing version numbers at the end or start of module-names, just to retract that restriction because its simply idiotic.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb0unr", "score_hidden": false, "stickied": false, "created": 1492311747.0, "created_utc": 1492282947.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 27}}], "after": null, "before": null}}, "user_reports": [], "id": "dgazuna", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgazuna", "score_hidden": false, "stickied": false, "created": 1492310394.0, "created_utc": 1492281594.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgb9z8i", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "talios", "parent_id": "t1_dgb46bt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Didn't they \"win\" it by back-tracking on a lot of the null safety (at least as far as the interop between kotlin/java goes) due to many issues.\n\nI far prefer ceylon's more generic union type approach of having String? just be an alias to nil|String and letting you have that more powerful construct underneath.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Didn&amp;#39;t they &amp;quot;win&amp;quot; it by back-tracking on a lot of the null safety (at least as far as the interop between kotlin/java goes) due to many issues.&lt;/p&gt;\n\n&lt;p&gt;I far prefer ceylon&amp;#39;s more generic union type approach of having String? just be an alias to nil|String and letting you have that more powerful construct underneath.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb9z8i", "score_hidden": false, "stickied": false, "created": 1492324261.0, "created_utc": 1492295461.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgdo8pv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bobthecimmerian", "parent_id": "t1_dgb46bt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "But that doesn't mean Kotlin is big enough to register on the radar of most developers, open source projects, or companies that use Java.  \n\nSo even if it's currently colossal compared to Ceylon, it's still a tiny blip on the JVM languages radar.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But that doesn&amp;#39;t mean Kotlin is big enough to register on the radar of most developers, open source projects, or companies that use Java.  &lt;/p&gt;\n\n&lt;p&gt;So even if it&amp;#39;s currently colossal compared to Ceylon, it&amp;#39;s still a tiny blip on the JVM languages radar.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdo8pv", "score_hidden": false, "stickied": false, "created": 1492473820.0, "created_utc": 1492445020.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb46bt", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "sphinxyz1", "parent_id": "t1_dgb3ohx", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; it's beaten Scala, Groovy, and Ceylon?\n\nBy OOPsy I really mean OOPsy. Kotlin and Ceylon both feels like languages that mainly wants to provide a better and more modern Java (null safety, etc). Clearly Kotlin won that cock fight by any metric (do a quick GitHub search, for instance, and you'll be hard pressed to find any Ceylon use outside the project itself)\n\nI have nothing against either language, I don't use any of them. My observation is merely that people don't seem to care about in-language module systems since build systems already solved that problem (as for runtime modularization, there are already great JVM solutions usable from any language)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;it&amp;#39;s beaten Scala, Groovy, and Ceylon?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;By OOPsy I really mean OOPsy. Kotlin and Ceylon both feels like languages that mainly wants to provide a better and more modern Java (null safety, etc). Clearly Kotlin won that cock fight by any metric (do a quick GitHub search, for instance, and you&amp;#39;ll be hard pressed to find any Ceylon use outside the project itself)&lt;/p&gt;\n\n&lt;p&gt;I have nothing against either language, I don&amp;#39;t use any of them. My observation is merely that people don&amp;#39;t seem to care about in-language module systems since build systems already solved that problem (as for runtime modularization, there are already great JVM solutions usable from any language)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb46bt", "score_hidden": false, "stickied": false, "created": 1492316221.0, "created_utc": 1492287421.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgduhm0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "McCoovy", "parent_id": "t1_dgb3ohx", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I would say ceylon and groovy have faded to irrelevance but scala still holds second place in the java world ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would say ceylon and groovy have faded to irrelevance but scala still holds second place in the java world &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgduhm0", "score_hidden": false, "stickied": false, "created": 1492480758.0, "created_utc": 1492451958.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb3ohx", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "bobthecimmerian", "parent_id": "t1_dgazmod", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Did Kotlin win?  I know it's got vocal adherents and *what I've seen of it* seems really cool, but can we definitely declare it's beaten Scala, Groovy, and Ceylon?\n\nI love Clojure, but you wrote OOPy so I won't throw it into the mix.\n\n(Edit: To be clear, I'm not making the argument that any specific language should or should not win the \"alternative OOPy JVM language\" war, I'm just making the argument that it's too early to declare a winner.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Did Kotlin win?  I know it&amp;#39;s got vocal adherents and &lt;em&gt;what I&amp;#39;ve seen of it&lt;/em&gt; seems really cool, but can we definitely declare it&amp;#39;s beaten Scala, Groovy, and Ceylon?&lt;/p&gt;\n\n&lt;p&gt;I love Clojure, but you wrote OOPy so I won&amp;#39;t throw it into the mix.&lt;/p&gt;\n\n&lt;p&gt;(Edit: To be clear, I&amp;#39;m not making the argument that any specific language should or should not win the &amp;quot;alternative OOPy JVM language&amp;quot; war, I&amp;#39;m just making the argument that it&amp;#39;s too early to declare a winner.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb3ohx", "score_hidden": false, "stickied": false, "created": 1492315540.0, "created_utc": 1492286740.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgazmod", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "sphinxyz1", "parent_id": "t1_dgazj5p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I not sure it's that. Kotlin won the \"alternative OOPy JVM language\" war, if there ever was such a thing, and Kotlin doesn't even have a module system. It's more like... people don't care much about module systems, because they look at it as a build system concern.", "edited": 1492281511.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I not sure it&amp;#39;s that. Kotlin won the &amp;quot;alternative OOPy JVM language&amp;quot; war, if there ever was such a thing, and Kotlin doesn&amp;#39;t even have a module system. It&amp;#39;s more like... people don&amp;#39;t care much about module systems, because they look at it as a build system concern.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgazmod", "score_hidden": false, "stickied": false, "created": 1492310090.0, "created_utc": 1492281290.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgbw8hr", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mike_hearn", "parent_id": "t1_dgazj5p", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ceylon uses JBoss Modules which is mentioned in the doc, and in fact many of the authors of the doc work on JBoss Modules.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ceylon uses JBoss Modules which is mentioned in the doc, and in fact many of the authors of the doc work on JBoss Modules.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbw8hr", "score_hidden": false, "stickied": false, "created": 1492365492.0, "created_utc": 1492336692.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgazj5p", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rbitdan", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "So Red Hat writes a critical Jigsaw article without mentioning their own JVM language's excellent module system. I don't think even Red Hat employees care about Ceylon.", "edited": 1492288397.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So Red Hat writes a critical Jigsaw article without mentioning their own JVM language&amp;#39;s excellent module system. I don&amp;#39;t think even Red Hat employees care about Ceylon.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgazj5p", "score_hidden": false, "stickied": false, "created": 1492309955.0, "created_utc": 1492281155.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgbw23b", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mike_hearn", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "When this was first posted to /r/programming I started writing a response but it got too big to fit in a reddit comment, so I turned it into a blog post here:\n\nhttps://blog.plan99.net/is-jigsaw-good-or-is-it-wack-ec634d36dd6f\n\nIn short, whilst the open letter makes some good points, it also makes many points I disagree with. It's best understood as the viewpoints of people who developed module systems already and are upset that Jigsaw didn't always make the same decision decisions as them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When this was first posted to &lt;a href=\"/r/programming\"&gt;/r/programming&lt;/a&gt; I started writing a response but it got too big to fit in a reddit comment, so I turned it into a blog post here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://blog.plan99.net/is-jigsaw-good-or-is-it-wack-ec634d36dd6f\"&gt;https://blog.plan99.net/is-jigsaw-good-or-is-it-wack-ec634d36dd6f&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In short, whilst the open letter makes some good points, it also makes many points I disagree with. It&amp;#39;s best understood as the viewpoints of people who developed module systems already and are upset that Jigsaw didn&amp;#39;t always make the same decision decisions as them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbw23b", "score_hidden": false, "stickied": false, "created": 1492364859.0, "created_utc": 1492336059.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65k27m", "likes": null, "replies": "", "user_reports": [], "id": "dgb5nmw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Tom_Cian", "parent_id": "t3_65k27m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Bit late for this kind of criticism.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Bit late for this kind of criticism.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb5nmw", "score_hidden": false, "stickied": false, "created": 1492318228.0, "created_utc": 1492289428.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]