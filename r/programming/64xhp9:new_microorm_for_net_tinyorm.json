[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64xhp9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 26, "report_reasons": null, "author": "sdrapkin", "saved": false, "mod_reports": [], "name": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/64xhp9/new_microorm_for_net_tinyorm/", "num_reports": null, "locked": false, "stickied": false, "created": 1492024441.0, "url": "https://github.com/sdrapkin/SecurityDriven.TinyORM/wiki", "author_flair_text": null, "quarantine": false, "title": "New micro-ORM for .NET: TinyORM", "created_utc": 1491995641.0, "distinguished": null, "media": null, "upvote_ratio": 0.69, "num_comments": 38, "visited": false, "subreddit_type": "public", "ups": 26}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg5x1ef", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg5tn6o", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'm missing spare time :) The main usecase is full .NET framework in production. You can try porting it to Netstandard-1 and share what issues you run into..", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m missing spare time :) The main usecase is full .NET framework in production. You can try porting it to Netstandard-1 and share what issues you run into..&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5x1ef", "score_hidden": false, "stickied": false, "created": 1492035487.0, "created_utc": 1492006687.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5tn6o", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "AngularBeginner", "parent_id": "t1_dg5t1m3", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "So around Q3.\n\nWhy waiting for .NET Standard 2.0? What's wrong with the earlier versions? What are you missing?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So around Q3.&lt;/p&gt;\n\n&lt;p&gt;Why waiting for .NET Standard 2.0? What&amp;#39;s wrong with the earlier versions? What are you missing?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5tn6o", "score_hidden": false, "stickied": false, "created": 1492030837.0, "created_utc": 1492002037.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg5wab9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "qxmat", "parent_id": "t1_dg5t1m3", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This effectively rules out apps targeting the LTS release, netcoreapp1.0 ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This effectively rules out apps targeting the LTS release, netcoreapp1.0 &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5wab9", "score_hidden": false, "stickied": false, "created": 1492034551.0, "created_utc": 1492005751.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5t1m3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg5r3jq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": ".NET Core support is planned when Microsoft delivers .NET standard 2.0 support.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;.NET Core support is planned when Microsoft delivers .NET standard 2.0 support.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5t1m3", "score_hidden": false, "stickied": false, "created": 1492029881.0, "created_utc": 1492001081.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5r3jq", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "kandamrgam", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Does this support .NET Core? I would expect .NET Core support of anything that claims light/tiny/micro :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Does this support .NET Core? I would expect .NET Core support of anything that claims light/tiny/micro :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5r3jq", "score_hidden": false, "stickied": false, "created": 1492026203.0, "created_utc": 1491997403.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg5r47a", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "OlDer", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It looks interesting, and it seems to support more of SQL Server than Dapper, but I'm not sure I want to trade that for support of other databases which Dapper has.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It looks interesting, and it seems to support more of SQL Server than Dapper, but I&amp;#39;m not sure I want to trade that for support of other databases which Dapper has.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5r47a", "score_hidden": false, "stickied": false, "created": 1492026243.0, "created_utc": 1491997443.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg5wa0n", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg5upy9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Good point - unit tests have not been checked in yet - are coming soon.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good point - unit tests have not been checked in yet - are coming soon.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5wa0n", "score_hidden": false, "stickied": false, "created": 1492034541.0, "created_utc": 1492005741.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5upy9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CrookedFairy", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "No unit tests?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No unit tests?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5upy9", "score_hidden": false, "stickied": false, "created": 1492032451.0, "created_utc": 1492003651.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg7jicx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "macca321", "parent_id": "t1_dg5vo9z", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[SQLinq] (https://github.com/crpietschmann/SQLinq) with Dapper looks nice too.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/crpietschmann/SQLinq\"&gt;SQLinq&lt;/a&gt; with Dapper looks nice too.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7jicx", "score_hidden": false, "stickied": false, "created": 1492119127.0, "created_utc": 1492090327.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5vo9z", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Ebisoka", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[Linq2Db](https://github.com/linq2db/linq2db) is still the one for me &lt;3\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/linq2db/linq2db\"&gt;Linq2Db&lt;/a&gt; is still the one for me &amp;lt;3&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5vo9z", "score_hidden": false, "stickied": false, "created": 1492033756.0, "created_utc": 1492004956.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg67oc8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg65klw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'm aware of the differences :)\n\nAwaited .QueryAsync() returns an IReadOnlyList&lt;dynamic&gt;, where the dynamic object is a concrete instance of RowStore. Feel free to consume it as you like. You can even do pattern matching: \"if (rows[0] is RowStore r) { ..do stuff with r.. }\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m aware of the differences :)&lt;/p&gt;\n\n&lt;p&gt;Awaited .QueryAsync() returns an IReadOnlyList&amp;lt;dynamic&amp;gt;, where the dynamic object is a concrete instance of RowStore. Feel free to consume it as you like. You can even do pattern matching: &amp;quot;if (rows[0] is RowStore r) { ..do stuff with r.. }&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg67oc8", "score_hidden": false, "stickied": false, "created": 1492046991.0, "created_utc": 1492018191.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg65klw", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "AngularBeginner", "parent_id": "t1_dg64tjt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's about code quality, intent and semantics.\n\nWith the `as`-operator you're clearly saying \"this **could** be of the type\". If it's not, you get a nothing-saying `NullReference Exception`. This exception could come from almost any member access, it's not clear on the first look what could cause it.  \nWith an explicit cast you're clearly saying \"I **know** this is of the type\". If this, for whatever reason, is not the case you get a `InvalidCastException`. It's clear that this must come from an explicit cast, so trouble shooting is sped up a lot.\n\n", "edited": 1492016435.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s about code quality, intent and semantics.&lt;/p&gt;\n\n&lt;p&gt;With the &lt;code&gt;as&lt;/code&gt;-operator you&amp;#39;re clearly saying &amp;quot;this &lt;strong&gt;could&lt;/strong&gt; be of the type&amp;quot;. If it&amp;#39;s not, you get a nothing-saying &lt;code&gt;NullReference Exception&lt;/code&gt;. This exception could come from almost any member access, it&amp;#39;s not clear on the first look what could cause it.&lt;br/&gt;\nWith an explicit cast you&amp;#39;re clearly saying &amp;quot;I &lt;strong&gt;know&lt;/strong&gt; this is of the type&amp;quot;. If this, for whatever reason, is not the case you get a &lt;code&gt;InvalidCastException&lt;/code&gt;. It&amp;#39;s clear that this must come from an explicit cast, so trouble shooting is sped up a lot.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg65klw", "score_hidden": false, "stickied": false, "created": 1492044864.0, "created_utc": 1492016064.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg6wqoy", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6rlor", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Indeed it could.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Indeed it could.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6wqoy", "score_hidden": false, "stickied": false, "created": 1492075194.0, "created_utc": 1492046394.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rlor", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "robillard130", "parent_id": "t1_dg64tjt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Could this be rewritten with the new null conditional operator as:\nvar poco = (rows[0] as RowStore)?.ToObject(() =&gt; new POCO()); \n\nI think that would return either null or a new POCO and then you can decide what to do with the null poco but not 100% sure", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Could this be rewritten with the new null conditional operator as:\nvar poco = (rows[0] as RowStore)?.ToObject(() =&amp;gt; new POCO()); &lt;/p&gt;\n\n&lt;p&gt;I think that would return either null or a new POCO and then you can decide what to do with the null poco but not 100% sure&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6rlor", "score_hidden": false, "stickied": false, "created": 1492068923.0, "created_utc": 1492040123.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg64tjt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg601bj", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Your shuddering is completely unwarranted. If the non-null expectation is violated, this will create a run-time exception, as intended. Ie. the same thing would happen as if you were to explicitly check for null and throw.\nHaving said that, the example is merely an example - ie. shows what the expectations are and how to use the API. Feel free to consume in your own style.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your shuddering is completely unwarranted. If the non-null expectation is violated, this will create a run-time exception, as intended. Ie. the same thing would happen as if you were to explicitly check for null and throw.\nHaving said that, the example is merely an example - ie. shows what the expectations are and how to use the API. Feel free to consume in your own style.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg64tjt", "score_hidden": false, "stickied": false, "created": 1492044081.0, "created_utc": 1492015281.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg601bj", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "AngularBeginner", "parent_id": "t1_dg5y8j0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; var poco = (rows[0] as RowStore).ToObject(() =&gt; new POCO()); \n\nI shudder when I see code like this. This is a huge red flag and an absolute no go. The `as`-operator should only ever be used together with a null check. If you're sure it can't ever be null, then use an explicit cast.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;var poco = (rows[0] as RowStore).ToObject(() =&amp;gt; new POCO()); &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I shudder when I see code like this. This is a huge red flag and an absolute no go. The &lt;code&gt;as&lt;/code&gt;-operator should only ever be used together with a null check. If you&amp;#39;re sure it can&amp;#39;t ever be null, then use an explicit cast.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg601bj", "score_hidden": false, "stickied": false, "created": 1492038933.0, "created_utc": 1492010133.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg5ysm3", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg5y8j0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's already present in the library but not in the documentation - will update the documentation. Thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s already present in the library but not in the documentation - will update the documentation. Thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5ysm3", "score_hidden": false, "stickied": false, "created": 1492037532.0, "created_utc": 1492008732.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5y8j0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Khao8", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's nice to see new libraries going the same direction as Dapper and making a crazy fast SQL to Poco micro orm. \n\nOne thing though that I found odd in the Documentation, loading results into Pocos looks really odd to me. \n\n    // single static projection:  \n    var poco = (rows[0] as RowStore).ToObject(() =&gt; new POCO());  \n    // static projection of a list of rows:  \n    var ids = await db.QueryAsync(\"select [Answer] = object_id from sys.objects;\");  \n    var pocoArray = ids.ToObjectArray(() =&gt; new POCO());\n\nIs there no way to do this using generics? I find having to pass a lambda to call the constructor of my Poco really weird. I could see it being useful sometimes, but most of the time I'd rather be able to call `var pocos = await db.QueryAsync&lt;POCO&gt;(\"-- sql query\");`\n\nIs this present in the library but simply not in the documentation? If not, any reason why it's not available?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s nice to see new libraries going the same direction as Dapper and making a crazy fast SQL to Poco micro orm. &lt;/p&gt;\n\n&lt;p&gt;One thing though that I found odd in the Documentation, loading results into Pocos looks really odd to me. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// single static projection:  \nvar poco = (rows[0] as RowStore).ToObject(() =&amp;gt; new POCO());  \n// static projection of a list of rows:  \nvar ids = await db.QueryAsync(&amp;quot;select [Answer] = object_id from sys.objects;&amp;quot;);  \nvar pocoArray = ids.ToObjectArray(() =&amp;gt; new POCO());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there no way to do this using generics? I find having to pass a lambda to call the constructor of my Poco really weird. I could see it being useful sometimes, but most of the time I&amp;#39;d rather be able to call &lt;code&gt;var pocos = await db.QueryAsync&amp;lt;POCO&amp;gt;(&amp;quot;-- sql query&amp;quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is this present in the library but simply not in the documentation? If not, any reason why it&amp;#39;s not available?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg5y8j0", "score_hidden": false, "stickied": false, "created": 1492036901.0, "created_utc": 1492008101.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg68qs3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg68dzy", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes, they are extremely helpful, thanks.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, they are extremely helpful, thanks.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg68qs3", "score_hidden": false, "stickied": false, "created": 1492048059.0, "created_utc": 1492019259.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg68dzy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PirriP", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Very intriguing. I like the debugging helpers you've built in.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very intriguing. I like the debugging helpers you&amp;#39;ve built in.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg68dzy", "score_hidden": false, "stickied": false, "created": 1492047705.0, "created_utc": 1492018905.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg6d2uq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6cwgq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Stored procedures are supported:\n\n(await db.QueryAsync(\"EXEC sp_help\")).Dump();\n\n\"sp_help\" is an sproc.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Stored procedures are supported:&lt;/p&gt;\n\n&lt;p&gt;(await db.QueryAsync(&amp;quot;EXEC sp_help&amp;quot;)).Dump();&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;sp_help&amp;quot; is an sproc.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6d2uq", "score_hidden": false, "stickied": false, "created": 1492052503.0, "created_utc": 1492023703.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6cwgq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "polymathic9999", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I went quickly through the samples. Did I miss anything, or there is no stored procedure support? Correct me if I am wrong", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I went quickly through the samples. Did I miss anything, or there is no stored procedure support? Correct me if I am wrong&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6cwgq", "score_hidden": false, "stickied": false, "created": 1492052320.0, "created_utc": 1492023520.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg6h6s9", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6gk85", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I use SqlParameter which supports both the DbType and SqlDbType settings. I don't see the \"correctness\" argument. The link you provided is not about performance but about another orm converting xml strings into (n)varchar(8000) instead of (n)varchar(max) and dying with an exception. TinyORM does not have this problem.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I use SqlParameter which supports both the DbType and SqlDbType settings. I don&amp;#39;t see the &amp;quot;correctness&amp;quot; argument. The link you provided is not about performance but about another orm converting xml strings into (n)varchar(8000) instead of (n)varchar(max) and dying with an exception. TinyORM does not have this problem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6h6s9", "score_hidden": false, "stickied": false, "created": 1492056729.0, "created_utc": 1492027929.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6gk85", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pnpbios", "parent_id": "t1_dg6fdbx", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; DbType-vs-SqlDbType -- is there a measurable performance difference? If there isn't and the current logic is correct then there is no reason to switch.\n\nIt's a correctness thing, not an performance thing. (And maybe a performance thing) If you are using the specialized command, you should be using the specialized enum.\n\nhttps://forums.servicestack.net/t/problems-with-sqlserver-and-large-8k-xml-strings/1676\n\nThey run into an issue where using the specialized enum fixes a performance problem.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;DbType-vs-SqlDbType -- is there a measurable performance difference? If there isn&amp;#39;t and the current logic is correct then there is no reason to switch.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s a correctness thing, not an performance thing. (And maybe a performance thing) If you are using the specialized command, you should be using the specialized enum.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://forums.servicestack.net/t/problems-with-sqlserver-and-large-8k-xml-strings/1676\"&gt;https://forums.servicestack.net/t/problems-with-sqlserver-and-large-8k-xml-strings/1676&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;They run into an issue where using the specialized enum fixes a performance problem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6gk85", "score_hidden": false, "stickied": false, "created": 1492056082.0, "created_utc": 1492027282.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6fdbx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6eol4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Thanks for the feedback. Suggestions are welcome on Github, btw.\n\"DbContext.CreateDbContext()\" -- I want you to use a factory method, not a ctor. That way, the framework internalizes the implementation of how DbContext is actually created (ex. it might be a ctor today, but an object pool tomorrow).\n\nDbType-vs-SqlDbType -- is there a measurable performance difference? If there isn't and the current logic is correct then there is no reason to switch.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the feedback. Suggestions are welcome on Github, btw.\n&amp;quot;DbContext.CreateDbContext()&amp;quot; -- I want you to use a factory method, not a ctor. That way, the framework internalizes the implementation of how DbContext is actually created (ex. it might be a ctor today, but an object pool tomorrow).&lt;/p&gt;\n\n&lt;p&gt;DbType-vs-SqlDbType -- is there a measurable performance difference? If there isn&amp;#39;t and the current logic is correct then there is no reason to switch.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6fdbx", "score_hidden": false, "stickied": false, "created": 1492054871.0, "created_utc": 1492026071.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6eol4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pnpbios", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ok, this is something I would actually maybe consider using. My beef with tools like this though is that you don't bother interfacing out your key classes, like your DBContext. This doesn't play well with things like Moq and instead mean using fakes and shims, or just letting it connect to a database.\n\nWhen you don't have interfaces it makes it very hard to do good DI/IOC. We would have to write a wrapper around your code, just to make it more testable.\n\n\nLooking through your code, this line especially\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    \t\tpublic static DbContext CreateDbContext(string connectionString) =&gt; new \n    DbContext(connectionString);\n\nRubs me the wrong way.\n\nThank you for not abusing the crap out of extension methods.\n\nAlso, you are using SQLCommand instead of IdbCommand, but are using DbType instead of SqlDbType for your string type enumeration? What's up with that?\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok, this is something I would actually maybe consider using. My beef with tools like this though is that you don&amp;#39;t bother interfacing out your key classes, like your DBContext. This doesn&amp;#39;t play well with things like Moq and instead mean using fakes and shims, or just letting it connect to a database.&lt;/p&gt;\n\n&lt;p&gt;When you don&amp;#39;t have interfaces it makes it very hard to do good DI/IOC. We would have to write a wrapper around your code, just to make it more testable.&lt;/p&gt;\n\n&lt;p&gt;Looking through your code, this line especially&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static DbContext CreateDbContext(string connectionString) =&amp;gt; new \nDbContext(connectionString);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Rubs me the wrong way.&lt;/p&gt;\n\n&lt;p&gt;Thank you for not abusing the crap out of extension methods.&lt;/p&gt;\n\n&lt;p&gt;Also, you are using SQLCommand instead of IdbCommand, but are using DbType instead of SqlDbType for your string type enumeration? What&amp;#39;s up with that?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6eol4", "score_hidden": false, "stickied": false, "created": 1492054171.0, "created_utc": 1492025371.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg6mvgr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6l8wi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Micro-ORMs are in a category of their own. They typically don't deal with relationships.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Micro-ORMs are in a category of their own. They typically don&amp;#39;t deal with relationships.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6mvgr", "score_hidden": false, "stickied": false, "created": 1492063067.0, "created_utc": 1492034267.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6l8wi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "[deleted]", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[deleted]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6l8wi", "score_hidden": false, "stickied": false, "created": 1492061122.0, "created_utc": 1492032322.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg6wuug", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6sevw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I feel that the next major productivity jump will come from SQL/TSQL being integrated as a first-rate DSL right into c#/f# code blocks. Until then, I prefer to improve micro-orm state-of-the-art, which is what I've done.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel that the next major productivity jump will come from SQL/TSQL being integrated as a first-rate DSL right into c#/f# code blocks. Until then, I prefer to improve micro-orm state-of-the-art, which is what I&amp;#39;ve done.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6wuug", "score_hidden": false, "stickied": false, "created": 1492075340.0, "created_utc": 1492046540.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6sevw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "knyghtmare", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Do we really need this?\n\n.NET has plenty of ORMs floating around and they tend to coalesce into being unit of work monstrosities like EF or nhibernate or micro orms like dapper.\n\nI feel like there's a missing middle ground that actually enables devs to be productive but this just looks like another one to throw on the micro-orm pile.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do we really need this?&lt;/p&gt;\n\n&lt;p&gt;.NET has plenty of ORMs floating around and they tend to coalesce into being unit of work monstrosities like EF or nhibernate or micro orms like dapper.&lt;/p&gt;\n\n&lt;p&gt;I feel like there&amp;#39;s a missing middle ground that actually enables devs to be productive but this just looks like another one to throw on the micro-orm pile.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6sevw", "score_hidden": false, "stickied": false, "created": 1492069922.0, "created_utc": 1492041122.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg7f21b", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg7ddgl", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "No, it does not help. The retry logic is application-specific, as wtf_apostrophe mentioned. I assume you're familiar with try-catch, loops, conditions, etc. If you need to retry a query, you can. If you need to potentially-retry _every_ query, you can - just wrap it in whatever logic your application calls for. The data-access library cannot guess what retry expectations &amp; conditions are applicable to your scenario, and even if it did such guess would likely follow the 80/20 rule in terms of suitability.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, it does not help. The retry logic is application-specific, as wtf&lt;em&gt;apostrophe mentioned. I assume you&amp;#39;re familiar with try-catch, loops, conditions, etc. If you need to retry a query, you can. If you need to potentially-retry _every&lt;/em&gt; query, you can - just wrap it in whatever logic your application calls for. The data-access library cannot guess what retry expectations &amp;amp; conditions are applicable to your scenario, and even if it did such guess would likely follow the 80/20 rule in terms of suitability.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7f21b", "score_hidden": false, "stickied": false, "created": 1492111470.0, "created_utc": 1492082670.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ddgl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "skulgnome", "parent_id": "t1_dg6nv8m", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; There's a reason serialisation failures aren't automatically retried by the database.\n\nThat reason is that they must be restarted by the application. Precisely for the reasons you state. In fact, this is the standard way of handling serialization failure, which the database is allowed to generate at any time for any reason. Therefore it's reasonable to expect a SQL interface framework to provide a wrapper of some kind, or an outer bracket, to handle these matters; and documentation instructing the application programmer to that end.\n\nI see neither in the post.\n\nHTH, HAND", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;There&amp;#39;s a reason serialisation failures aren&amp;#39;t automatically retried by the database.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That reason is that they must be restarted by the application. Precisely for the reasons you state. In fact, this is the standard way of handling serialization failure, which the database is allowed to generate at any time for any reason. Therefore it&amp;#39;s reasonable to expect a SQL interface framework to provide a wrapper of some kind, or an outer bracket, to handle these matters; and documentation instructing the application programmer to that end.&lt;/p&gt;\n\n&lt;p&gt;I see neither in the post.&lt;/p&gt;\n\n&lt;p&gt;HTH, HAND&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7ddgl", "score_hidden": false, "stickied": false, "created": 1492106899.0, "created_utc": 1492078099.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6nv8m", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "wtf_apostrophe", "parent_id": "t1_dg6m9of", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What? There's a reason serialisation failures aren't automatically retried by the database. Any application logic that ran during the transaction needs to be re-executed because the results might change. It's not unreasonable to expect the application to be responsible for doing this.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What? There&amp;#39;s a reason serialisation failures aren&amp;#39;t automatically retried by the database. Any application logic that ran during the transaction needs to be re-executed because the results might change. It&amp;#39;s not unreasonable to expect the application to be responsible for doing this.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6nv8m", "score_hidden": false, "stickied": false, "created": 1492064304.0, "created_utc": 1492035504.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_64xhp9", "likes": null, "replies": "", "user_reports": [], "id": "dg7f5mo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg7dca7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Likely a badly-written one that causes deadlocks and randomly terminates other transactions, which might be more important? Perhaps it's a bad idea to blindly retry every failed transaction when that can jeopardize the entire system? Don't oversimplify with \"always-restart\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Likely a badly-written one that causes deadlocks and randomly terminates other transactions, which might be more important? Perhaps it&amp;#39;s a bad idea to blindly retry every failed transaction when that can jeopardize the entire system? Don&amp;#39;t oversimplify with &amp;quot;always-restart&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7f5mo", "score_hidden": false, "stickied": false, "created": 1492111700.0, "created_utc": 1492082900.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7dca7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "skulgnome", "parent_id": "t1_dg6n0ls", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What, then, is the transaction that shouldn't be always restarted on serialization failure? SQL databases are always permitted to kill any ongoing transaction in this way, even ones that're read-only, even ones running on \"read uncommitted\" isolation.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What, then, is the transaction that shouldn&amp;#39;t be always restarted on serialization failure? SQL databases are always permitted to kill any ongoing transaction in this way, even ones that&amp;#39;re read-only, even ones running on &amp;quot;read uncommitted&amp;quot; isolation.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg7dca7", "score_hidden": false, "stickied": false, "created": 1492106804.0, "created_utc": 1492078004.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6n0ls", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6m9of", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This is no more of a \"my first\" kind of project than Dapper project is a \"my first\" project for StackOverflow team. I've done other projects, rest assured.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is no more of a &amp;quot;my first&amp;quot; kind of project than Dapper project is a &amp;quot;my first&amp;quot; project for StackOverflow team. I&amp;#39;ve done other projects, rest assured.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6n0ls", "score_hidden": false, "stickied": false, "created": 1492063235.0, "created_utc": 1492034435.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6m9of", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "skulgnome", "parent_id": "t1_dg6csgc", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Catch an exception and call again if your logic depends on and expects serialization failures.\n\nAh. I suspected this might be a \"my first\" kind of project, and it is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Catch an exception and call again if your logic depends on and expects serialization failures.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Ah. I suspected this might be a &amp;quot;my first&amp;quot; kind of project, and it is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6m9of", "score_hidden": false, "stickied": false, "created": 1492062336.0, "created_utc": 1492033536.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6csgc", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "sdrapkin", "parent_id": "t1_dg6bapc", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's not micro-ORM's job to restart transactions on serialization failures - that's caller's responsibility. Catch an exception and call again if your logic depends on and expects serialization failures.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s not micro-ORM&amp;#39;s job to restart transactions on serialization failures - that&amp;#39;s caller&amp;#39;s responsibility. Catch an exception and call again if your logic depends on and expects serialization failures.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6csgc", "score_hidden": false, "stickied": false, "created": 1492052205.0, "created_utc": 1492023405.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6bapc", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "skulgnome", "parent_id": "t3_64xhp9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Where's the part that restarts transactions on serialization failure?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Where&amp;#39;s the part that restarts transactions on serialization failure?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg6bapc", "score_hidden": false, "stickied": false, "created": 1492050670.0, "created_utc": 1492021870.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}]