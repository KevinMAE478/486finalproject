[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65ke97", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 126, "report_reasons": null, "author": "ilikerustlang", "saved": false, "mod_reports": [], "name": "t3_65ke97", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "bjoern.hoehrmann.de", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65ke97/a_tiny_tabledriven_fully_incremental_utf8_decoder/", "num_reports": null, "locked": false, "stickied": false, "created": 1492307418.0, "url": "http://bjoern.hoehrmann.de/utf-8/decoder/dfa/", "author_flair_text": null, "quarantine": false, "title": "A tiny table-driven, fully incremental UTF-8 decoder", "created_utc": 1492278618.0, "distinguished": null, "media": null, "upvote_ratio": 0.91, "num_comments": 17, "visited": false, "subreddit_type": "public", "ups": 126}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgb6sfz", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "jacobb11", "parent_id": "t3_65ke97", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Have you considered storing the table without the high 4 bits of each byte, which are zero?\n\nThe code would be slightly more readable if you inverted the condition.  A minor point given the amount of encoding going on, but still, never hurts.\n\nNicely documented.  I'd add a comment in the code referencing the web page for hasty copy-pasters.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Have you considered storing the table without the high 4 bits of each byte, which are zero?&lt;/p&gt;\n\n&lt;p&gt;The code would be slightly more readable if you inverted the condition.  A minor point given the amount of encoding going on, but still, never hurts.&lt;/p&gt;\n\n&lt;p&gt;Nicely documented.  I&amp;#39;d add a comment in the code referencing the web page for hasty copy-pasters.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb6sfz", "score_hidden": false, "stickied": false, "created": 1492319817.0, "created_utc": 1492291017.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgddso8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "masklinn", "parent_id": "t1_dgc9nia", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Can you really mess UTF-8 decoding so bad that it becomes a rate limiter in your software?\n\n1. you do realise that's the entire point of the article right?\n\n2. absolutely, especially for \"line\" devices (proxies and security appliances) which don't generally have a huge amount of raw power to perform whatever task they're dedicated to\n\n3. and any cycle you spend on UTF8 validation and decoding is a cycle you don't get to spend on doing actual work", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Can you really mess UTF-8 decoding so bad that it becomes a rate limiter in your software?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;you do realise that&amp;#39;s the entire point of the article right?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;absolutely, especially for &amp;quot;line&amp;quot; devices (proxies and security appliances) which don&amp;#39;t generally have a huge amount of raw power to perform whatever task they&amp;#39;re dedicated to&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;and any cycle you spend on UTF8 validation and decoding is a cycle you don&amp;#39;t get to spend on doing actual work&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgddso8", "score_hidden": false, "stickied": false, "created": 1492458131.0, "created_utc": 1492429331.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc9nia", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "htuhola", "parent_id": "t1_dgbzen2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; things get problematic when you have a raw bytestream throughput of 2GB/s but you get 50MB/s through the UTF-8 decoder.\n\nThat sounds like extraordinary. Can you really mess UTF-8 decoding so bad that it becomes a rate limiter in your software?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;things get problematic when you have a raw bytestream throughput of 2GB/s but you get 50MB/s through the UTF-8 decoder.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That sounds like extraordinary. Can you really mess UTF-8 decoding so bad that it becomes a rate limiter in your software?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc9nia", "score_hidden": false, "stickied": false, "created": 1492390980.0, "created_utc": 1492362180.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbzen2", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "masklinn", "parent_id": "t1_dgb1ln9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; UTF-8 is not really something to freak over about:\n\nDecoding it quickly and correctly remains extremely important, in fact it's even more important as UTF-8 gets more popular and proper UTF-8 handling gets added to more intermediate systems (rather than working on the ASCII part and ignoring the rest), things get problematic when you have a raw bytestream throughput of 2GB/s but you get 50MB/s through the UTF-8 decoder.\n\nAlso\n\n&gt;     110 000:    cannot encode\n\nThese USVs don't exist in order to match UTF-16 restrictions, the original UTF-8 formulation (before RFC 3629) had no issue encoding them and went up to U+80000000 (excluded)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;UTF-8 is not really something to freak over about:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Decoding it quickly and correctly remains extremely important, in fact it&amp;#39;s even more important as UTF-8 gets more popular and proper UTF-8 handling gets added to more intermediate systems (rather than working on the ASCII part and ignoring the rest), things get problematic when you have a raw bytestream throughput of 2GB/s but you get 50MB/s through the UTF-8 decoder.&lt;/p&gt;\n\n&lt;p&gt;Also&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre&gt;&lt;code&gt;110 000:    cannot encode\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;These USVs don&amp;#39;t exist in order to match UTF-16 restrictions, the original UTF-8 formulation (before RFC 3629) had no issue encoding them and went up to U+80000000 (excluded)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbzen2", "score_hidden": false, "stickied": false, "created": 1492375023.0, "created_utc": 1492346223.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgbzazs", "gilded": 0, "archived": false, "score": 23, "report_reasons": null, "author": "masklinn", "parent_id": "t1_dgbxupa", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Overlong encoding, which can be problematic if you have intermediate systems working on the raw bytestream (and possibly ignoring everything non-ascii).\n\nFor instance `/` is 0x2F which would be UTF8-encoded as 0x2F aka `00101111` but you can also encode it as `11000000 10101111`.\n\nThis means if you have an intermediate layer looking for `/` (ASCII) in the raw bytestream (to disallow directory traversal in filenames) but the final layer works on decoded UTF-8 without validating against overlong encoding, an attacker can smuggle `/` characters by overlong-encoding them, and bam directory traversal exploit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Overlong encoding, which can be problematic if you have intermediate systems working on the raw bytestream (and possibly ignoring everything non-ascii).&lt;/p&gt;\n\n&lt;p&gt;For instance &lt;code&gt;/&lt;/code&gt; is 0x2F which would be UTF8-encoded as 0x2F aka &lt;code&gt;00101111&lt;/code&gt; but you can also encode it as &lt;code&gt;11000000 10101111&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This means if you have an intermediate layer looking for &lt;code&gt;/&lt;/code&gt; (ASCII) in the raw bytestream (to disallow directory traversal in filenames) but the final layer works on decoded UTF-8 without validating against overlong encoding, an attacker can smuggle &lt;code&gt;/&lt;/code&gt; characters by overlong-encoding them, and bam directory traversal exploit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbzazs", "score_hidden": false, "stickied": false, "created": 1492374779.0, "created_utc": 1492345979.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 23}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbxupa", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "CaptainAdjective", "parent_id": "t1_dgb4mqd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What error are you describing?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What error are you describing?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbxupa", "score_hidden": false, "stickied": false, "created": 1492370872.0, "created_utc": 1492342072.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb4mqd", "gilded": 0, "archived": false, "score": 41, "report_reasons": null, "author": "floodyberry", "parent_id": "t1_dgb1ln9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You forgot error handling. Congratulations, you just allowed a directory traversal exploit!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You forgot error handling. Congratulations, you just allowed a directory traversal exploit!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb4mqd", "score_hidden": false, "stickied": false, "created": 1492316845.0, "created_utc": 1492288045.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 41}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb1ln9", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "htuhola", "parent_id": "t3_65ke97", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "UTF-8 is not really something to freak over about:\n\n    charhex:    outputbin\n    000 000:    0xxx xxxx\n    000 080:    110x xxxx  10xx xxxx\n    000 800:    1110 xxxx  10xx xxxx  10xx xxxx\n    010 000:    1111 0xxx  10xx xxxx  10xx xxxx  10xx xxxx\n    110 000:    cannot encode\n\nDecoding and encoding is easy, and it's almost as simple to handle as what LEB128 is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;UTF-8 is not really something to freak over about:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;charhex:    outputbin\n000 000:    0xxx xxxx\n000 080:    110x xxxx  10xx xxxx\n000 800:    1110 xxxx  10xx xxxx  10xx xxxx\n010 000:    1111 0xxx  10xx xxxx  10xx xxxx  10xx xxxx\n110 000:    cannot encode\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Decoding and encoding is easy, and it&amp;#39;s almost as simple to handle as what LEB128 is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb1ln9", "score_hidden": false, "stickied": false, "created": 1492312732.0, "created_utc": 1492283932.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgblkyh", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "slashuslashuserid", "parent_id": "t1_dgbk4kh", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "UTF-8 is a way of encoding Unicode text such that each character uses a multiple of 8 bits. UTF-8 decoding is taking the bytes and figuring out what characters they mean.\n\nIf you don't know what ASCII is, read about that first and then come back here.\n\nASCII needs 7 bits for any character, so if you store it in one byte you'll have a 0 at the beginning. Unicode builds on this by taking a leading 0 to mean that the byte represents one character exactly. A leading 1 means the character is split over multiple bytes. The first of these bytes will have as many 1s at the beginning as there are bytes in the character, and the rest will start with 10.\n\nThus, to encode a character, figure out how many bits you need, and select from the following an option with enough empty slots for it:\n\n    0???????\n    110????? 10??????\n    1110???? 10?????? 10??????\n    ...\n    1111110? 10?????? ... 10??????\n\nDecoding is left as an exercise for the reader.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;UTF-8 is a way of encoding Unicode text such that each character uses a multiple of 8 bits. UTF-8 decoding is taking the bytes and figuring out what characters they mean.&lt;/p&gt;\n\n&lt;p&gt;If you don&amp;#39;t know what ASCII is, read about that first and then come back here.&lt;/p&gt;\n\n&lt;p&gt;ASCII needs 7 bits for any character, so if you store it in one byte you&amp;#39;ll have a 0 at the beginning. Unicode builds on this by taking a leading 0 to mean that the byte represents one character exactly. A leading 1 means the character is split over multiple bytes. The first of these bytes will have as many 1s at the beginning as there are bytes in the character, and the rest will start with 10.&lt;/p&gt;\n\n&lt;p&gt;Thus, to encode a character, figure out how many bits you need, and select from the following an option with enough empty slots for it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0???????\n110????? 10??????\n1110???? 10?????? 10??????\n...\n1111110? 10?????? ... 10??????\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Decoding is left as an exercise for the reader.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgblkyh", "score_hidden": false, "stickied": false, "created": 1492341039.0, "created_utc": 1492312239.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgbphx0", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Terr_", "parent_id": "t1_dgbk4kh", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The simplest answer is that \"UTF-8\" is a scheme for taking a sequence of possibly-big numbers, and sending them as bytes, taking advantage of how the smaller numbers are more common.\n\nUnicode *in general* is about taking those possibly-big-numbers (however you sent them) and determining what squiggles and glyphs and letters they represent. \n\n[It's important to think if these as two separate steps. In ASCII, the difference between them isn't explicit.](https://www.reddit.com/r/programming/comments/1322te/what_every_programmer_absolutely_positively_needs/c707t91)\n\n    ", "edited": 1492319018.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The simplest answer is that &amp;quot;UTF-8&amp;quot; is a scheme for taking a sequence of possibly-big numbers, and sending them as bytes, taking advantage of how the smaller numbers are more common.&lt;/p&gt;\n\n&lt;p&gt;Unicode &lt;em&gt;in general&lt;/em&gt; is about taking those possibly-big-numbers (however you sent them) and determining what squiggles and glyphs and letters they represent. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/programming/comments/1322te/what_every_programmer_absolutely_positively_needs/c707t91\"&gt;It&amp;#39;s important to think if these as two separate steps. In ASCII, the difference between them isn&amp;#39;t explicit.&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbphx0", "score_hidden": false, "stickied": false, "created": 1492347518.0, "created_utc": 1492318718.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgcjw4b", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "theamk2", "parent_id": "t1_dgbu6ai", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well, nautilus is clearly in the second category, so it needs full  Unicode and locale knowledge: at least, it needs to limit the string length, sort in locale order, and do case-insensitive search. \n\nAlso, ` (invalid encoding)` or \"cryptic error messages\" are gtk's artifacts: qt's fromUtf8 will translate invalid utf8 to surrogate characters by default.\n\nOn the other hand, both \"xargs\" and \"touch\" were able to handle utf-8 filenames transparently, without having to decode it, because touch does not modify filename at all, and xargs only looks for ASCII SPACE, QUOTE, HT and VT (see https://github.com/fishilico/findutils-xattr/blob/master/xargs/xargs.c#L807 )\n\nSo I say my point is still valid -- if you are writing Nautilus, you need a full unicode library which will have utf-8 decoder; and if you are writing xargs, you have no need to decode utf-8. Either way, utf-8 decoder alone is not needed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, nautilus is clearly in the second category, so it needs full  Unicode and locale knowledge: at least, it needs to limit the string length, sort in locale order, and do case-insensitive search. &lt;/p&gt;\n\n&lt;p&gt;Also, &lt;code&gt;(invalid encoding)&lt;/code&gt; or &amp;quot;cryptic error messages&amp;quot; are gtk&amp;#39;s artifacts: qt&amp;#39;s fromUtf8 will translate invalid utf8 to surrogate characters by default.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, both &amp;quot;xargs&amp;quot; and &amp;quot;touch&amp;quot; were able to handle utf-8 filenames transparently, without having to decode it, because touch does not modify filename at all, and xargs only looks for ASCII SPACE, QUOTE, HT and VT (see &lt;a href=\"https://github.com/fishilico/findutils-xattr/blob/master/xargs/xargs.c#L807\"&gt;https://github.com/fishilico/findutils-xattr/blob/master/xargs/xargs.c#L807&lt;/a&gt; )&lt;/p&gt;\n\n&lt;p&gt;So I say my point is still valid -- if you are writing Nautilus, you need a full unicode library which will have utf-8 decoder; and if you are writing xargs, you have no need to decode utf-8. Either way, utf-8 decoder alone is not needed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcjw4b", "score_hidden": false, "stickied": false, "created": 1492404457.0, "created_utc": 1492375657.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbu6ai", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "so_you_like_donuts", "parent_id": "t1_dgbp2ro", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes if you want to display a string to the user. I just tried:\n\n    echo -ne '\\xff' | xargs touch\n\nAnd Nautilus changed the file name to the Unicode replacement character followed by `(invalid encoding)`, which is much better than getting a cryptic error message.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes if you want to display a string to the user. I just tried:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo -ne &amp;#39;\\xff&amp;#39; | xargs touch\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And Nautilus changed the file name to the Unicode replacement character followed by &lt;code&gt;(invalid encoding)&lt;/code&gt;, which is much better than getting a cryptic error message.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbu6ai", "score_hidden": false, "stickied": false, "created": 1492358577.0, "created_utc": 1492329777.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbp2ro", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "theamk2", "parent_id": "t1_dgbk4kh", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This is actually an interesting question -- how often do you need just UTF-8 decoding without the rest of unicode stuff? In my experience, there are two almost-disjoint categories:\n\n- if your application does not modify non-ASCII characters, then all you need to know is \"utf-8 is ASCII compatible, and will never encode national chars to ASCII\", and thus you never care abotu codepoints. Examples: get json from the web and stick it into file/database; web server with utf-8 URLs; html templating; codepoint-exact substring search; command-line tools working with utf-8 filenames etc..\n\n- If you do anything at all with the characters, you always need Unicode tables and very frequently locale information. You also have to handle all the interesting things languages do, which means your code rapidly becomes quite complicated. Examples: limit the string length, uppercase the string, case-insensitive substring search, render the string on screen, get string width in console, split text into the sentences and so on...\n\nThe article mentions utf-8 -&gt; utf-16 conversion and Visual C, which implies Windows. I think that Windows API's still use mixture of codepages and utf-16, and I remember reading about directory traversal bugs via unicode characters, so I can see the utility of this library on Windows. But can the systems such as Linux, where filenames are just almost-opaque bytestrings, use this library?\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is actually an interesting question -- how often do you need just UTF-8 decoding without the rest of unicode stuff? In my experience, there are two almost-disjoint categories:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;if your application does not modify non-ASCII characters, then all you need to know is &amp;quot;utf-8 is ASCII compatible, and will never encode national chars to ASCII&amp;quot;, and thus you never care abotu codepoints. Examples: get json from the web and stick it into file/database; web server with utf-8 URLs; html templating; codepoint-exact substring search; command-line tools working with utf-8 filenames etc..&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you do anything at all with the characters, you always need Unicode tables and very frequently locale information. You also have to handle all the interesting things languages do, which means your code rapidly becomes quite complicated. Examples: limit the string length, uppercase the string, case-insensitive substring search, render the string on screen, get string width in console, split text into the sentences and so on...&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The article mentions utf-8 -&amp;gt; utf-16 conversion and Visual C, which implies Windows. I think that Windows API&amp;#39;s still use mixture of codepages and utf-16, and I remember reading about directory traversal bugs via unicode characters, so I can see the utility of this library on Windows. But can the systems such as Linux, where filenames are just almost-opaque bytestrings, use this library?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbp2ro", "score_hidden": false, "stickied": false, "created": 1492346743.0, "created_utc": 1492317943.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ke97", "likes": null, "replies": "", "user_reports": [], "id": "dgcqrvq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "craftkiller", "parent_id": "t1_dgcpfaw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ah thanks, TIL", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah thanks, TIL&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcqrvq", "score_hidden": false, "stickied": false, "created": 1492413679.0, "created_utc": 1492384879.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcpfaw", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mrexodia", "parent_id": "t1_dgbn1x2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Just for your information, utf16 is also a variable length encoding :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just for your information, utf16 is also a variable length encoding :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcpfaw", "score_hidden": false, "stickied": false, "created": 1492411815.0, "created_utc": 1492383015.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbn1x2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "craftkiller", "parent_id": "t1_dgbk4kh", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Unicode assigned each glyph number. For example, a snowman is 9731. This number needs to be encoded in some way. There were multiple solutions like utf-32 and utf-16 which just encode the number as 32 or 16 bit numbers. This works fine, but the vast majority of text is in the range of 0-127 so they made utf-8 as a variable length encoding where some values can be encoded in 1 byte and some in two bytes ... Etc. Information about how many bytes are in the character and the current position is encoded in the high bits of each byte, so decoding utf-8 is parsing those high bits, to extract the low bits, to concatenate those bits into the final number which identifies what codepoint the character is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Unicode assigned each glyph number. For example, a snowman is 9731. This number needs to be encoded in some way. There were multiple solutions like utf-32 and utf-16 which just encode the number as 32 or 16 bit numbers. This works fine, but the vast majority of text is in the range of 0-127 so they made utf-8 as a variable length encoding where some values can be encoded in 1 byte and some in two bytes ... Etc. Information about how many bytes are in the character and the current position is encoded in the high bits of each byte, so decoding utf-8 is parsing those high bits, to extract the low bits, to concatenate those bits into the final number which identifies what codepoint the character is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbn1x2", "score_hidden": false, "stickied": false, "created": 1492343302.0, "created_utc": 1492314502.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbk4kh", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "GENHEN", "parent_id": "t3_65ke97", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I know I sound like a noob, but what is UTF-8 decoding for? Is it for reading packets?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know I sound like a noob, but what is UTF-8 decoding for? Is it for reading packets?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbk4kh", "score_hidden": false, "stickied": false, "created": 1492338908.0, "created_utc": 1492310108.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]