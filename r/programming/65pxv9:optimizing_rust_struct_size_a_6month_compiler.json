[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65pxv9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 241, "report_reasons": null, "author": "camlorn", "saved": false, "mod_reports": [], "name": "t3_65pxv9", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "camlorn.net", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65pxv9/optimizing_rust_struct_size_a_6month_compiler/", "num_reports": null, "locked": false, "stickied": false, "created": 1492388769.0, "url": "http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html", "author_flair_text": null, "quarantine": false, "title": "Optimizing Rust Struct Size: A 6-month Compiler Development Project", "created_utc": 1492359969.0, "distinguished": null, "media": null, "upvote_ratio": 0.88, "num_comments": 35, "visited": false, "subreddit_type": "public", "ups": 241}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgdca65", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "modulus", "parent_id": "t1_dgdc5q7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Correct, it is not TC. This can present some problems, but the problems are more in appearance than reality, because nothing we run is really TC in practice (we don't have infinite time and we don't have infinite memory).\n\nStill, in order to write certain types of programs you need this sort of mechanisms to bound the computation and halt, otherwise they're invalid.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Correct, it is not TC. This can present some problems, but the problems are more in appearance than reality, because nothing we run is really TC in practice (we don&amp;#39;t have infinite time and we don&amp;#39;t have infinite memory).&lt;/p&gt;\n\n&lt;p&gt;Still, in order to write certain types of programs you need this sort of mechanisms to bound the computation and halt, otherwise they&amp;#39;re invalid.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdca65", "score_hidden": false, "stickied": false, "created": 1492453891.0, "created_utc": 1492425091.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdc5q7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Maser-kun", "parent_id": "t1_dgdanir", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I was actually wondering about this the other day.\n\nFor a turing complete machine, the halting problem is unsolvable (in limited time).\n\nIf you design a languages in a way that it is possible to determine if a program will halt (like these total language you are talking about), is it then not turing complete? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was actually wondering about this the other day.&lt;/p&gt;\n\n&lt;p&gt;For a turing complete machine, the halting problem is unsolvable (in limited time).&lt;/p&gt;\n\n&lt;p&gt;If you design a languages in a way that it is possible to determine if a program will halt (like these total language you are talking about), is it then not turing complete? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdc5q7", "score_hidden": false, "stickied": false, "created": 1492453493.0, "created_utc": 1492424693.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdanir", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "almkglor", "parent_id": "t1_dgda5m3", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Haha!\n\nExcept that termination in a total language you have compile-time proof of termination, unlike stack overflow which is a run-time exception.  So you can indicate some maximum stack depth that is greater than the max number of iterations expected in your algorithm.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haha!&lt;/p&gt;\n\n&lt;p&gt;Except that termination in a total language you have compile-time proof of termination, unlike stack overflow which is a run-time exception.  So you can indicate some maximum stack depth that is greater than the max number of iterations expected in your algorithm.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdanir", "score_hidden": false, "stickied": false, "created": 1492448371.0, "created_utc": 1492419571.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgda5m3", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "kefeer", "parent_id": "t1_dgd5mgi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's called stack overflow in our peasant land.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s called stack overflow in our peasant land.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgda5m3", "score_hidden": false, "stickied": false, "created": 1492446637.0, "created_utc": 1492417837.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgdoms0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "apachechief", "parent_id": "t1_dgd5mgi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You are beautiful, thanks!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are beautiful, thanks!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdoms0", "score_hidden": false, "stickied": false, "created": 1492474264.0, "created_utc": 1492445464.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd5mgi", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "almkglor", "parent_id": "t1_dgcywe6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Basically, he was pointing out that one way of proving termination in a total language (i.e. proving that you will exit a loop that has some complex condition for stopping the loop) is to add a maximum number of iterations.  You just hard exit when the max number of iterations is achieved.\n\nThis is similar to the fuel concept, where the optimization loop terminates after it runs out of fuel.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Basically, he was pointing out that one way of proving termination in a total language (i.e. proving that you will exit a loop that has some complex condition for stopping the loop) is to add a maximum number of iterations.  You just hard exit when the max number of iterations is achieved.&lt;/p&gt;\n\n&lt;p&gt;This is similar to the fuel concept, where the optimization loop terminates after it runs out of fuel.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd5mgi", "score_hidden": false, "stickied": false, "created": 1492435363.0, "created_utc": 1492406563.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcywe6", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "apachechief", "parent_id": "t1_dgcxxur", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yeah I just don't get it because I don't know what syntax you're using and why you're even mentioning this...?\n\nThis is what you replied to:\n\n&gt; *The fuel idea is pretty cool. It reminds me of some of the tricks used for proving things about non-total languages in Coq.*\n\nJust seems like we're going off into space...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah I just don&amp;#39;t get it because I don&amp;#39;t know what syntax you&amp;#39;re using and why you&amp;#39;re even mentioning this...?&lt;/p&gt;\n\n&lt;p&gt;This is what you replied to:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;The fuel idea is pretty cool. It reminds me of some of the tricks used for proving things about non-total languages in Coq.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Just seems like we&amp;#39;re going off into space...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcywe6", "score_hidden": false, "stickied": false, "created": 1492424622.0, "created_utc": 1492395822.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 9}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcxxur", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "PM_ME_UR_OBSIDIAN", "parent_id": "t1_dgcxpn6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'll zoom out a bit. This is the kind of stuff you concern yourself with when you're designing a new programming language.\n\nSo let's say that you're designing a new programming language. Most languages have a keyword for recursion (F#, OCaml), or they just let you do recursion whenever, wherever (Java, C, ...).\n\nBut you, my friend, are feeling very clever today, and you want to keep your syntax to a strict minimum. You don't want your syntax to include loops or `rec` or anything like that.\n\nIt turns out that it's possible to include recursion as a library function. Of course under the hood your compiler is going to need to swoop in and do some black magic, but from the point of view of the programmer it just looks like you're using a regular higher-order function.\n\nThe demonstration above only applies to non-strict languages like Haskell, though. In Rust (or C, or Java) it wouldn't quite work. I'm not sure this is feasible at all in a strict language.", "edited": 1492395856.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ll zoom out a bit. This is the kind of stuff you concern yourself with when you&amp;#39;re designing a new programming language.&lt;/p&gt;\n\n&lt;p&gt;So let&amp;#39;s say that you&amp;#39;re designing a new programming language. Most languages have a keyword for recursion (F#, OCaml), or they just let you do recursion whenever, wherever (Java, C, ...).&lt;/p&gt;\n\n&lt;p&gt;But you, my friend, are feeling very clever today, and you want to keep your syntax to a strict minimum. You don&amp;#39;t want your syntax to include loops or &lt;code&gt;rec&lt;/code&gt; or anything like that.&lt;/p&gt;\n\n&lt;p&gt;It turns out that it&amp;#39;s possible to include recursion as a library function. Of course under the hood your compiler is going to need to swoop in and do some black magic, but from the point of view of the programmer it just looks like you&amp;#39;re using a regular higher-order function.&lt;/p&gt;\n\n&lt;p&gt;The demonstration above only applies to non-strict languages like Haskell, though. In Rust (or C, or Java) it wouldn&amp;#39;t quite work. I&amp;#39;m not sure this is feasible at all in a strict language.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcxxur", "score_hidden": false, "stickied": false, "created": 1492423286.0, "created_utc": 1492394486.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcxpn6", "gilded": 0, "archived": false, "score": 29, "report_reasons": null, "author": "apachechief", "parent_id": "t1_dgcxhkb", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "...what...?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;...what...?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcxpn6", "score_hidden": false, "stickied": false, "created": 1492422964.0, "created_utc": 1492394164.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 29}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcxhkb", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "PM_ME_UR_OBSIDIAN", "parent_id": "t1_dgcrd9y", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Expanding on that:\n\nIn a non-strict language, typing general recursion is easy: `('a -&gt; 'a) -&gt; 'a`, the type of the [Y combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus).\n\nNow, let's say you want to restrict to [primitive recursion](https://en.wikipedia.org/wiki/Primitive_recursive_function). Primitive recursion is nice because it lets you easily prove things about your programs. It's basically the same thing as `fold`: one base case, one induction step. How do you do that?\n\nThe idea is to take a `fuel` argument (a natural number), and a base case for when `fuel` runs out. You only recurse `fuel` times, after which you apply the base case. So your recursor would look like:\n\n    primitiveFix: Nat -&gt; ('a -&gt; 'a) -&gt; ('a -&gt; 'a)\n\nIf you're clever, you already recognize this as the function which takes a natural number and returns the corresponding [Church numerals](https://en.wikipedia.org/wiki/Church_encoding#Church_numerals).\n\nImplementing fold with this is easy. In pseudocode:\n\n    let fold f init input = primitiveFix input.length (fun (s, l) -&gt; f(s, l.head), l.tail)) init\n\n...or something like that.\n\nIf you figure out how to do this kind of stuff in a strict language, let me know.", "edited": 1492394605.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Expanding on that:&lt;/p&gt;\n\n&lt;p&gt;In a non-strict language, typing general recursion is easy: &lt;code&gt;(&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; &amp;#39;a&lt;/code&gt;, the type of the &lt;a href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus\"&gt;Y combinator&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now, let&amp;#39;s say you want to restrict to &lt;a href=\"https://en.wikipedia.org/wiki/Primitive_recursive_function\"&gt;primitive recursion&lt;/a&gt;. Primitive recursion is nice because it lets you easily prove things about your programs. It&amp;#39;s basically the same thing as &lt;code&gt;fold&lt;/code&gt;: one base case, one induction step. How do you do that?&lt;/p&gt;\n\n&lt;p&gt;The idea is to take a &lt;code&gt;fuel&lt;/code&gt; argument (a natural number), and a base case for when &lt;code&gt;fuel&lt;/code&gt; runs out. You only recurse &lt;code&gt;fuel&lt;/code&gt; times, after which you apply the base case. So your recursor would look like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;primitiveFix: Nat -&amp;gt; (&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; (&amp;#39;a -&amp;gt; &amp;#39;a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&amp;#39;re clever, you already recognize this as the function which takes a natural number and returns the corresponding &lt;a href=\"https://en.wikipedia.org/wiki/Church_encoding#Church_numerals\"&gt;Church numerals&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Implementing fold with this is easy. In pseudocode:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let fold f init input = primitiveFix input.length (fun (s, l) -&amp;gt; f(s, l.head), l.tail)) init\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...or something like that.&lt;/p&gt;\n\n&lt;p&gt;If you figure out how to do this kind of stuff in a strict language, let me know.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcxhkb", "score_hidden": false, "stickied": false, "created": 1492422648.0, "created_utc": 1492393848.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcrd9y", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "modulus", "parent_id": "t3_65pxv9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The fuel idea is pretty cool. It reminds me of some of the tricks used for proving things about non-total languages in Coq.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The fuel idea is pretty cool. It reminds me of some of the tricks used for proving things about non-total languages in Coq.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcrd9y", "score_hidden": false, "stickied": false, "created": 1492414490.0, "created_utc": 1492385690.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgdn7hb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "steveklabnik1", "parent_id": "t1_dgdmvk1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; These limitations are fundamental, not language specific.\n\nIn some sense yes, but in others, no. That is, you're absolutely correct that there are some fundamental limitations here, but there are also some specific things that make static dispatch more possible based on the language. For example, a generic function bounded by a trait is always going to be statically dispatched, even across crate boundaries, thanks to Rust storing the information needed to do so in the library itself.\n\nThere are also some possible future changes to Rust that will let you do the layout in a more C++-like way; they're not very high priority at the moment.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;These limitations are fundamental, not language specific.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In some sense yes, but in others, no. That is, you&amp;#39;re absolutely correct that there are some fundamental limitations here, but there are also some specific things that make static dispatch more possible based on the language. For example, a generic function bounded by a trait is always going to be statically dispatched, even across crate boundaries, thanks to Rust storing the information needed to do so in the library itself.&lt;/p&gt;\n\n&lt;p&gt;There are also some possible future changes to Rust that will let you do the layout in a more C++-like way; they&amp;#39;re not very high priority at the moment.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdn7hb", "score_hidden": false, "stickied": false, "created": 1492472635.0, "created_utc": 1492443835.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdmvk1", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dgdmkxe", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Err well you can, until you can't. I'm working in high performance C++, believe me we consider very carefully before we add virtual functions. But when you are dealing with applications that are heavily configuration driven, you often don't have much choice.  Compile time dispatch is great when you can use it, but often it's extremely limiting, and often so are forms of run time dispatch that require knowing all paths in advance (if, switch, ADT/visitor, etc). These limitations are fundamental, not language specific.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Err well you can, until you can&amp;#39;t. I&amp;#39;m working in high performance C++, believe me we consider very carefully before we add virtual functions. But when you are dealing with applications that are heavily configuration driven, you often don&amp;#39;t have much choice.  Compile time dispatch is great when you can use it, but often it&amp;#39;s extremely limiting, and often so are forms of run time dispatch that require knowing all paths in advance (if, switch, ADT/visitor, etc). These limitations are fundamental, not language specific.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdmvk1", "score_hidden": false, "stickied": false, "created": 1492472257.0, "created_utc": 1492443457.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdmkxe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "steveklabnik1", "parent_id": "t1_dgdkuo7", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Trait objects in Rust are used very sparingly, so this doesn't come up very much. You almost always can use static dispatch instead.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Trait objects in Rust are used very sparingly, so this doesn&amp;#39;t come up very much. You almost always can use static dispatch instead.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdmkxe", "score_hidden": false, "stickied": false, "created": 1492471913.0, "created_utc": 1492443113.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdkuo7", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dgdaivi", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's fair and a valid point, but it's still a staggering performance cost. If you have half a dozen virtual functions on an interface with a dozen concrete implementations, in a vector with ten thousand boxed objects, the vector in C++ would be ten thousand words in size, versus seventy thousand in rust. That's a lot of cache misses. Whereas the cost of the extra indirection is likely to be almost negligible. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s fair and a valid point, but it&amp;#39;s still a staggering performance cost. If you have half a dozen virtual functions on an interface with a dozen concrete implementations, in a vector with ten thousand boxed objects, the vector in C++ would be ten thousand words in size, versus seventy thousand in rust. That&amp;#39;s a lot of cache misses. Whereas the cost of the extra indirection is likely to be almost negligible. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdkuo7", "score_hidden": false, "stickied": false, "created": 1492469825.0, "created_utc": 1492441025.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdaivi", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "jkleo2", "parent_id": "t1_dgd9k6y", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Rust simply cannot do it the way C++ does it. You can implement new traits for types defined outside of your crate, even for built-in types, and then put them in trait objects.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust simply cannot do it the way C++ does it. You can implement new traits for types defined outside of your crate, even for built-in types, and then put them in trait objects.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdaivi", "score_hidden": false, "stickied": false, "created": 1492447914.0, "created_utc": 1492419114.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd9k6y", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dgd7n15", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's pretty surprising. While that may be a small win for a single boxed trait, for a vector of boxed traits that's probably significantly worse. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s pretty surprising. While that may be a small win for a single boxed trait, for a vector of boxed traits that&amp;#39;s probably significantly worse. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd9k6y", "score_hidden": false, "stickied": false, "created": 1492444671.0, "created_utc": 1492415871.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgdj2j4", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "kazagistar", "parent_id": "t1_dgdc14v", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's only relevant if you are trying to make a heterogenus list, which is certainly the unusual case, especially with the prevalence of enums (first class tagged unions) covering most of the use cases.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s only relevant if you are trying to make a heterogenus list, which is certainly the unusual case, especially with the prevalence of enums (first class tagged unions) covering most of the use cases.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdj2j4", "score_hidden": false, "stickied": false, "created": 1492467476.0, "created_utc": 1492438676.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdc14v", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "samkellett", "parent_id": "t1_dgd7n15", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "that's also surprising because all T will use the exact same vtable so sharing a static vtable is almost certainly gonna be cached causing that pointer redirection to be pretty much free.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;that&amp;#39;s also surprising because all T will use the exact same vtable so sharing a static vtable is almost certainly gonna be cached causing that pointer redirection to be pretty much free.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdc14v", "score_hidden": false, "stickied": false, "created": 1492453084.0, "created_utc": 1492424284.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd7n15", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "kazagistar", "parent_id": "t1_dgcmnhc", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "In case you are curious:\n\nThe vtables for boxed traits in Rust are stored alongside the data pointer on the stack, trading off larger size for less pointer chasing. (Unboxed traits don't need vtables since they are known at compile time).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In case you are curious:&lt;/p&gt;\n\n&lt;p&gt;The vtables for boxed traits in Rust are stored alongside the data pointer on the stack, trading off larger size for less pointer chasing. (Unboxed traits don&amp;#39;t need vtables since they are known at compile time).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd7n15", "score_hidden": false, "stickied": false, "created": 1492439681.0, "created_utc": 1492410881.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgcvcao", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "metalmutt", "parent_id": "t1_dgcv14d", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "(to /u/cat_in_the_wall: this means no, it's not configureable)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(to &lt;a href=\"/u/cat_in_the_wall\"&gt;/u/cat_in_the_wall&lt;/a&gt;: this means no, it&amp;#39;s not configureable)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcvcao", "score_hidden": false, "stickied": false, "created": 1492419835.0, "created_utc": 1492391035.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcv14d", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "flukus", "parent_id": "t1_dgcpbcu", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You can avoid it entirely by avoiding virtual functions. I guess for the very few places where they're really needed you could write you're own vtable.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can avoid it entirely by avoiding virtual functions. I guess for the very few places where they&amp;#39;re really needed you could write you&amp;#39;re own vtable.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcv14d", "score_hidden": false, "stickied": false, "created": 1492419428.0, "created_utc": 1492390628.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgdlkck", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dgcpbcu", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You can't configure where the vtable is directly, no. That said, it's fairly simple to re-organize things so that you don't do the extra pointer chase. It's extra work, no argument, but it's relatively rare that it would be a big win, and it's most likely to be a big win where you only care about a single polymorphic function, so the amount of extra work is lesser.\n\nAlso, the author of Boost Hana has a non-production grade (his own words) library that explores how these choices can even be controlled automatically by the user: https://github.com/ldionne/dyno. It's neat insofar as you can choose to store some methods in the vtable, some not, etc.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can&amp;#39;t configure where the vtable is directly, no. That said, it&amp;#39;s fairly simple to re-organize things so that you don&amp;#39;t do the extra pointer chase. It&amp;#39;s extra work, no argument, but it&amp;#39;s relatively rare that it would be a big win, and it&amp;#39;s most likely to be a big win where you only care about a single polymorphic function, so the amount of extra work is lesser.&lt;/p&gt;\n\n&lt;p&gt;Also, the author of Boost Hana has a non-production grade (his own words) library that explores how these choices can even be controlled automatically by the user: &lt;a href=\"https://github.com/ldionne/dyno\"&gt;https://github.com/ldionne/dyno&lt;/a&gt;. It&amp;#39;s neat insofar as you can choose to store some methods in the vtable, some not, etc.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdlkck", "score_hidden": false, "stickied": false, "created": 1492470711.0, "created_utc": 1492441911.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgcrchb", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "oridb", "parent_id": "t1_dgcpbcu", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "&gt; is layout like that configureable in c++?\n\nYes, mostly. You just write it in the order you want it. C++ doesn't rearrange anything for you -- the ABI spec says that members are laid out in the order they're declared. The vtable comes first, but you can put commonly accessed members anywhere else you feel like. If it's a POD object, of course, there's no vtable to worry about.", "edited": 1492419387.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;is layout like that configureable in c++?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, mostly. You just write it in the order you want it. C++ doesn&amp;#39;t rearrange anything for you -- the ABI spec says that members are laid out in the order they&amp;#39;re declared. The vtable comes first, but you can put commonly accessed members anywhere else you feel like. If it&amp;#39;s a POD object, of course, there&amp;#39;s no vtable to worry about.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcrchb", "score_hidden": false, "stickied": false, "created": 1492414461.0, "created_utc": 1492385661.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcpbcu", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dgcmnhc", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "is layout like that configureable in c++? i can imagine situations where data access is way more common than anything to do with the vtable.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;is layout like that configureable in c++? i can imagine situations where data access is way more common than anything to do with the vtable.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcpbcu", "score_hidden": false, "stickied": false, "created": 1492411669.0, "created_utc": 1492382869.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcmnhc", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "quicknir", "parent_id": "t1_dgclyje", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree with you generally, but the exception is quite a bit broader than that. It's generally advantageous for any data processed in the same routines to be located close to each other in the class. It simply minimizes the number of cache misses, and a cache line is typically 64 bytes so you can pack quite a bit in.\n\nThe most common example of this is that in C++, the vtable is usually stored at the beginning of a class (and I would guess similar in Rust for boxed objects). That means that in C++, when using a class polymorphically, any data outside the first 56 bytes is more expensive to use in a virtual function call.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree with you generally, but the exception is quite a bit broader than that. It&amp;#39;s generally advantageous for any data processed in the same routines to be located close to each other in the class. It simply minimizes the number of cache misses, and a cache line is typically 64 bytes so you can pack quite a bit in.&lt;/p&gt;\n\n&lt;p&gt;The most common example of this is that in C++, the vtable is usually stored at the beginning of a class (and I would guess similar in Rust for boxed objects). That means that in C++, when using a class polymorphically, any data outside the first 56 bytes is more expensive to use in a virtual function call.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcmnhc", "score_hidden": false, "stickied": false, "created": 1492408071.0, "created_utc": 1492379271.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgd6bwx", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cbmuser", "parent_id": "t1_dgclyje", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Unless you break alignment. Then speed goes down dramatically or you'll end up with a Bus Error (SPARC).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Unless you break alignment. Then speed goes down dramatically or you&amp;#39;ll end up with a Bus Error (SPARC).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd6bwx", "score_hidden": false, "stickied": false, "created": 1492436816.0, "created_utc": 1492408016.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65pxv9", "likes": null, "replies": "", "user_reports": [], "id": "dgd2vsr", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "hotoatmeal", "parent_id": "t1_dgcn1to", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "DCE tends to speed up compilers. There's no use in spending time optimizing code that won't ever be executed at runtime. Likewise canonicalizations can have a positive effect.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;DCE tends to speed up compilers. There&amp;#39;s no use in spending time optimizing code that won&amp;#39;t ever be executed at runtime. Likewise canonicalizations can have a positive effect.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd2vsr", "score_hidden": false, "stickied": false, "created": 1492430417.0, "created_utc": 1492401617.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcn1to", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "xzxzzx", "parent_id": "t1_dgcmhj4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's both a very strange way of interpreting that sentence (he seems to be referring to general principle of time/space tradeoff, which would happen in the same problem domain, not cross-domain like you say), and a very strange way of thinking about an optimizing compiler, since nearly every optimization a compiler does to its output will take more time than not doing that optimization.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s both a very strange way of interpreting that sentence (he seems to be referring to general principle of time/space tradeoff, which would happen in the same problem domain, not cross-domain like you say), and a very strange way of thinking about an optimizing compiler, since nearly every optimization a compiler does to its output will take more time than not doing that optimization.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcn1to", "score_hidden": false, "stickied": false, "created": 1492408608.0, "created_utc": 1492379808.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 17}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcmhj4", "gilded": 0, "archived": false, "score": -14, "report_reasons": null, "author": "_Skuzzzy", "parent_id": "t1_dgclyje", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Disagree: I think he meant optimizing for speed (of the compiler), which is True.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Disagree: I think he meant optimizing for speed (of the compiler), which is True.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcmhj4", "score_hidden": false, "stickied": false, "created": 1492407850.0, "created_utc": 1492379050.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -14}}], "after": null, "before": null}}, "user_reports": [], "id": "dgclyje", "gilded": 0, "archived": false, "score": 43, "report_reasons": null, "author": "f2u", "parent_id": "t1_dgclr0e", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Not really. Reordering fields to avoid padding is almost always a win. The only exception is when struct fields have been ordered carefully in such a way that cache-line boundaries are respected *and* allocation is suitable aligned. Linux does that a lot, but it's certainly not for everyone.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not really. Reordering fields to avoid padding is almost always a win. The only exception is when struct fields have been ordered carefully in such a way that cache-line boundaries are respected &lt;em&gt;and&lt;/em&gt; allocation is suitable aligned. Linux does that a lot, but it&amp;#39;s certainly not for everyone.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgclyje", "score_hidden": false, "stickied": false, "created": 1492407159.0, "created_utc": 1492378359.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 43}}], "after": null, "before": null}}, "user_reports": [], "id": "dgclr0e", "gilded": 0, "archived": false, "score": -28, "report_reasons": null, "author": "deus_lemmus", "parent_id": "t3_65pxv9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "By optimizing for size, you are not optimizing for speed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;By optimizing for size, you are not optimizing for speed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgclr0e", "score_hidden": false, "stickied": false, "created": 1492406883.0, "created_utc": 1492378083.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -28}}], "after": null, "before": null}}]