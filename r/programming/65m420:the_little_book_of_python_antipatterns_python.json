[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65m420", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 25, "report_reasons": null, "author": "Worse_Username", "saved": false, "mod_reports": [], "name": "t3_65m420", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "docs.quantifiedcode.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65m420/the_little_book_of_python_antipatterns_python/", "num_reports": null, "locked": false, "stickied": false, "created": 1492327404.0, "url": "https://docs.quantifiedcode.com/python-anti-patterns/index.html", "author_flair_text": null, "quarantine": false, "title": "The Little Book of Python Anti-Patterns \u2014 Python Anti-Patterns documentation", "created_utc": 1492298604.0, "distinguished": null, "media": null, "upvote_ratio": 0.71, "num_comments": 18, "visited": false, "subreddit_type": "public", "ups": 25}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgd4298", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kurashu89", "parent_id": "t1_dgbq513", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; The example replaces an except: without a type with an... except Exception:, which is only marginally better.\n\nIt's actually a lot better as a bare except all catch everything, including KeyboardInterrupt and RuntimeError. \n\nYou should still catch only what you want, but at least this way you won't catch literally everything", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The example replaces an except: without a type with an... except Exception:, which is only marginally better.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s actually a lot better as a bare except all catch everything, including KeyboardInterrupt and RuntimeError. &lt;/p&gt;\n\n&lt;p&gt;You should still catch only what you want, but at least this way you won&amp;#39;t catch literally everything&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgd4298", "score_hidden": false, "stickied": false, "created": 1492432381.0, "created_utc": 1492403581.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgcno59", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Beaverman", "parent_id": "t1_dgcko39", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "By expressing the optional using the type system, and never returning None. You are guaranteeing the programmer that methods returning a type always return that type.\n\nMy problem with None/Null has always been that it allows the API consumer to use the endpoint as if it always returns a valid object, even if it doesn't. By using an optional, even in a dynamic language, you can force the API consumer to think about what to do when you return None. By extension the consumer can reasonably expect you to not return None from the functions that don't return an optional.\n\nThe point is that if you return an object or None, the consumer might not realize that you can return None, at least before they see it. If you return some optional, then they are faced with extracting the actual object first, and therefore they know that they are going to have to deal with the case where it's None, since otherwise you would just return the object. Even if the documentation says \"returns the object\", it becomes pretty obvious that the documentation is wrong if you, as the consumer, get back and optional containing the object.\n\nIt's hard for me to explain.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;By expressing the optional using the type system, and never returning None. You are guaranteeing the programmer that methods returning a type always return that type.&lt;/p&gt;\n\n&lt;p&gt;My problem with None/Null has always been that it allows the API consumer to use the endpoint as if it always returns a valid object, even if it doesn&amp;#39;t. By using an optional, even in a dynamic language, you can force the API consumer to think about what to do when you return None. By extension the consumer can reasonably expect you to not return None from the functions that don&amp;#39;t return an optional.&lt;/p&gt;\n\n&lt;p&gt;The point is that if you return an object or None, the consumer might not realize that you can return None, at least before they see it. If you return some optional, then they are faced with extracting the actual object first, and therefore they know that they are going to have to deal with the case where it&amp;#39;s None, since otherwise you would just return the object. Even if the documentation says &amp;quot;returns the object&amp;quot;, it becomes pretty obvious that the documentation is wrong if you, as the consumer, get back and optional containing the object.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s hard for me to explain.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcno59", "score_hidden": false, "stickied": false, "created": 1492409408.0, "created_utc": 1492380608.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcko39", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ColonelThirtyTwo", "parent_id": "t1_dgc81yt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I don't understand your rebuttal. Both in API documentation and in in-code comments, saying \"type X or None\" is as clear as \"An optional containing type X\", so I don't understand how using an Optional type supposed to help (in fact, the convention in most language is to use \"type X or None\", so going against that convention makes your code less intuitive).\n\nTo put my question another way: How does using an Optional make it more obvious that some random function returns an optional value?", "edited": 1492377265.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t understand your rebuttal. Both in API documentation and in in-code comments, saying &amp;quot;type X or None&amp;quot; is as clear as &amp;quot;An optional containing type X&amp;quot;, so I don&amp;#39;t understand how using an Optional type supposed to help (in fact, the convention in most language is to use &amp;quot;type X or None&amp;quot;, so going against that convention makes your code less intuitive).&lt;/p&gt;\n\n&lt;p&gt;To put my question another way: How does using an Optional make it more obvious that some random function returns an optional value?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcko39", "score_hidden": false, "stickied": false, "created": 1492405487.0, "created_utc": 1492376687.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc81yt", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Beaverman", "parent_id": "t1_dgc7uqk", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "We are talking about two different forms of documentation here, which is the entire reason i wrote \"/comments\". When i say documentation, I mean the documentation written by a human as freeform text, the one that doesn't always match the code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We are talking about two different forms of documentation here, which is the entire reason i wrote &amp;quot;/comments&amp;quot;. When i say documentation, I mean the documentation written by a human as freeform text, the one that doesn&amp;#39;t always match the code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc81yt", "score_hidden": false, "stickied": false, "created": 1492388917.0, "created_utc": 1492360117.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgck4cb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ColonelThirtyTwo", "parent_id": "t1_dgcgemn", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes, but you can do that with a function that returns a value or `None` too, hence my last sentence.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, but you can do that with a function that returns a value or &lt;code&gt;None&lt;/code&gt; too, hence my last sentence.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgck4cb", "score_hidden": false, "stickied": false, "created": 1492404748.0, "created_utc": 1492375948.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcgemn", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "bryanedds", "parent_id": "t1_dgc7uqk", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "In a dynamically typed lang, you use naming conventions to denote possible null-ness. So you use 'tryFind' or 'findOpt' for functions that might return null, and use variable names like 'thingOpt' to indicate it might be a reference to null. That's usually enough to make things clear.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In a dynamically typed lang, you use naming conventions to denote possible null-ness. So you use &amp;#39;tryFind&amp;#39; or &amp;#39;findOpt&amp;#39; for functions that might return null, and use variable names like &amp;#39;thingOpt&amp;#39; to indicate it might be a reference to null. That&amp;#39;s usually enough to make things clear.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcgemn", "score_hidden": false, "stickied": false, "created": 1492399945.0, "created_utc": 1492371145.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc7uqk", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "ColonelThirtyTwo", "parent_id": "t1_dgc7mow", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "\"reduces your reliance on documentation/comments\" How so? How would you know, in a dynamically typed language, that a function returns an Optional type, without looking at the code or the documentation? How would that answer change if the function instead returned a value or `None`?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;reduces your reliance on documentation/comments&amp;quot; How so? How would you know, in a dynamically typed language, that a function returns an Optional type, without looking at the code or the documentation? How would that answer change if the function instead returned a value or &lt;code&gt;None&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc7uqk", "score_hidden": false, "stickied": false, "created": 1492388650.0, "created_utc": 1492359850.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc7mow", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Beaverman", "parent_id": "t1_dgc6lvl", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Even in a dynamically typed language, i would argue that having an Optional type, and using that whenever needed, reduces your reliance on documentation/comments, which have a tendency to become outdated. It may also reduce your mental overhead, since you know that a function can only ever return one type, and never None.\n\nIf you have 10 functions, and some of them return Option, then you know which of them can return without a result, and which you don't have to care about. Even if the type system is dynamic, it's still there, so why not use it?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Even in a dynamically typed language, i would argue that having an Optional type, and using that whenever needed, reduces your reliance on documentation/comments, which have a tendency to become outdated. It may also reduce your mental overhead, since you know that a function can only ever return one type, and never None.&lt;/p&gt;\n\n&lt;p&gt;If you have 10 functions, and some of them return Option, then you know which of them can return without a result, and which you don&amp;#39;t have to care about. Even if the type system is dynamic, it&amp;#39;s still there, so why not use it?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc7mow", "score_hidden": false, "stickied": false, "created": 1492388349.0, "created_utc": 1492359549.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc6lvl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ColonelThirtyTwo", "parent_id": "t1_dgbz4cp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "In a statically typed language? Sure. In a dynamically typed language, there's not much of a point.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In a statically typed language? Sure. In a dynamically typed language, there&amp;#39;s not much of a point.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc6lvl", "score_hidden": false, "stickied": false, "created": 1492386963.0, "created_utc": 1492358163.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbz4cp", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Beaverman", "parent_id": "t1_dgbq513", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Returning more than one variable type from function call\n\nI'd imagine they would want you to use some sort of option type if the result can be None.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Returning more than one variable type from function call&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;d imagine they would want you to use some sort of option type if the result can be None.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbz4cp", "score_hidden": false, "stickied": false, "created": 1492374334.0, "created_utc": 1492345534.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbq513", "gilded": 0, "archived": false, "score": 15, "report_reasons": null, "author": "ColonelThirtyTwo", "parent_id": "t3_65m420", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "There are a few \"anti-patterns\" listed here that irk me a bit:\n\n* \"Bad except clauses order\" This is a straight-up bug. The `except DivisionByZero` after the `except Exception` is dead code.\n* \"\\_\\_future\\_\\_ import is not the first non-docstring statement\" `__future__` imports _must_ be the first statement, and anything else is a _syntax error_. It's useless to muse about \"if the code were to execute\" with a `__future__` import in the middle of it, because it _cannot happen_.\n* \"Indentation contains tabs\" I don't care what PEP8 says, indentation with tabs vs spaces is mostly a personal preference. Using tabs is certainly not a \"worst practice\".\n* \"No exception type(s) specified\" I agree, but the example is awful. The example replaces an `except:` without a type with an... `except Exception:`, which is only marginally better.\n* \"Not using else where appropriate in a loop\" From the page itself: \"Since `else` on a `for` loop is so unintuitive and error-prone, even some experienced Python developers suggest not using this feature at all.\" Doesn't seem very convincing.\n* \"Returning more than one variable type from function call\" The example goes too far; apparently a function that can return either a value or `None` falls into this anti-pattern. If \"no result\" is not an exceptional outcome, it should not be communicated with exceptions.\n* \"Not using unpacking for updating multiple values at once\" Can be convenient for exchanging values, as in the example, but combining assignments for the sake of combining them makes things _less_ readable.\n* \"Test for object identity should be `is`\" The entire point of `is`. Using `is` when you want `==` is a bug.\n\nTo me, \"anti-patterns\" are _design_ patterns that result in a poor design. A lot of these aren't about design at all; rather, they are just common bugs or issues with code. Not that I'm saying a list of common bugs isn't value-less, but it's confusing to call them \"design patterns\".", "edited": 1492359092.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are a few &amp;quot;anti-patterns&amp;quot; listed here that irk me a bit:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&amp;quot;Bad except clauses order&amp;quot; This is a straight-up bug. The &lt;code&gt;except DivisionByZero&lt;/code&gt; after the &lt;code&gt;except Exception&lt;/code&gt; is dead code.&lt;/li&gt;\n&lt;li&gt;&amp;quot;__future__ import is not the first non-docstring statement&amp;quot; &lt;code&gt;__future__&lt;/code&gt; imports &lt;em&gt;must&lt;/em&gt; be the first statement, and anything else is a &lt;em&gt;syntax error&lt;/em&gt;. It&amp;#39;s useless to muse about &amp;quot;if the code were to execute&amp;quot; with a &lt;code&gt;__future__&lt;/code&gt; import in the middle of it, because it &lt;em&gt;cannot happen&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Indentation contains tabs&amp;quot; I don&amp;#39;t care what PEP8 says, indentation with tabs vs spaces is mostly a personal preference. Using tabs is certainly not a &amp;quot;worst practice&amp;quot;.&lt;/li&gt;\n&lt;li&gt;&amp;quot;No exception type(s) specified&amp;quot; I agree, but the example is awful. The example replaces an &lt;code&gt;except:&lt;/code&gt; without a type with an... &lt;code&gt;except Exception:&lt;/code&gt;, which is only marginally better.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Not using else where appropriate in a loop&amp;quot; From the page itself: &amp;quot;Since &lt;code&gt;else&lt;/code&gt; on a &lt;code&gt;for&lt;/code&gt; loop is so unintuitive and error-prone, even some experienced Python developers suggest not using this feature at all.&amp;quot; Doesn&amp;#39;t seem very convincing.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Returning more than one variable type from function call&amp;quot; The example goes too far; apparently a function that can return either a value or &lt;code&gt;None&lt;/code&gt; falls into this anti-pattern. If &amp;quot;no result&amp;quot; is not an exceptional outcome, it should not be communicated with exceptions.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Not using unpacking for updating multiple values at once&amp;quot; Can be convenient for exchanging values, as in the example, but combining assignments for the sake of combining them makes things &lt;em&gt;less&lt;/em&gt; readable.&lt;/li&gt;\n&lt;li&gt;&amp;quot;Test for object identity should be &lt;code&gt;is&lt;/code&gt;&amp;quot; The entire point of &lt;code&gt;is&lt;/code&gt;. Using &lt;code&gt;is&lt;/code&gt; when you want &lt;code&gt;==&lt;/code&gt; is a bug.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To me, &amp;quot;anti-patterns&amp;quot; are &lt;em&gt;design&lt;/em&gt; patterns that result in a poor design. A lot of these aren&amp;#39;t about design at all; rather, they are just common bugs or issues with code. Not that I&amp;#39;m saying a list of common bugs isn&amp;#39;t value-less, but it&amp;#39;s confusing to call them &amp;quot;design patterns&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbq513", "score_hidden": false, "stickied": false, "created": 1492348686.0, "created_utc": 1492319886.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgcxdqq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "littlemetal", "parent_id": "t1_dgbx952", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Not sure what DPE is, but if this is DPE style then... ugh.  Its hard to recommend someone go read this, or share it widely.  \n\n* Intro blurbs are oddly stilted, and hard to read.  This is when I know the issue already.\n* Examples are broken up with too much text.  could use inline comments\n* Over-deep hierarchy makes exploring difficult.  There isn't MSDN level of content depth, so it feels odd to click down down down into something and see a copy/paste of standard knowledge plus a one line example.  \n\nIt could be saved by flattening it into maybe 3 top level pages with lots of items.  As it is, even though I find it valuable, I won't bother to click so many times and decipher the stuff.   Its just not well enough written yet.\n\nEvery click on a link breaks focus, and there are a lot of links here.  ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not sure what DPE is, but if this is DPE style then... ugh.  Its hard to recommend someone go read this, or share it widely.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Intro blurbs are oddly stilted, and hard to read.  This is when I know the issue already.&lt;/li&gt;\n&lt;li&gt;Examples are broken up with too much text.  could use inline comments&lt;/li&gt;\n&lt;li&gt;Over-deep hierarchy makes exploring difficult.  There isn&amp;#39;t MSDN level of content depth, so it feels odd to click down down down into something and see a copy/paste of standard knowledge plus a one line example.&lt;br/&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It could be saved by flattening it into maybe 3 top level pages with lots of items.  As it is, even though I find it valuable, I won&amp;#39;t bother to click so many times and decipher the stuff.   Its just not well enough written yet.&lt;/p&gt;\n\n&lt;p&gt;Every click on a link breaks focus, and there are a lot of links here.  &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcxdqq", "score_hidden": false, "stickied": false, "created": 1492422502.0, "created_utc": 1492393702.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbx952", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Worse_Username", "parent_id": "t1_dgbp0j8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Maybe they tried to do it in the style of DPE?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe they tried to do it in the style of DPE?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbx952", "score_hidden": false, "stickied": false, "created": 1492368961.0, "created_utc": 1492340161.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbp0j8", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "littlemetal", "parent_id": "t3_65m420", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Ok repackaging of basic guidance, but its like a slide show with 1000 pages.   Much better format would have been \"do/don't\" with a small header and intro.  Fit 50 on a page, not 1. For an example, see http://python-future.org/compatible_idioms.html\n\nAlso, its not very readable as is.  Too much reading and long preambles to very basic stuff.  Seems oddly academic somehow?  Or maybe like someone is transcribing lecture notes.  In the end its not smooth to read, even if it is correct.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok repackaging of basic guidance, but its like a slide show with 1000 pages.   Much better format would have been &amp;quot;do/don&amp;#39;t&amp;quot; with a small header and intro.  Fit 50 on a page, not 1. For an example, see &lt;a href=\"http://python-future.org/compatible_idioms.html\"&gt;http://python-future.org/compatible_idioms.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also, its not very readable as is.  Too much reading and long preambles to very basic stuff.  Seems oddly academic somehow?  Or maybe like someone is transcribing lecture notes.  In the end its not smooth to read, even if it is correct.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbp0j8", "score_hidden": false, "stickied": false, "created": 1492346631.0, "created_utc": 1492317831.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgc1rxp", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "sporgyeek", "parent_id": "t3_65m420", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Some of the stuff was very interesting.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some of the stuff was very interesting.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc1rxp", "score_hidden": false, "stickied": false, "created": 1492379764.0, "created_utc": 1492350964.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgc9x0h", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "htuhola", "parent_id": "t1_dgc5t95", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The performance under CPython is obvious about things such as allocating memory repeatedly, but it's not obvious for PyPy and JIT that may detect the pointlessly allocated list and remove it.\n\nAnyways your point about siths and absolutes is very well holding and I just reinforce that viewpoint. Unless siths are superb programmers, then that's not holding very well.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The performance under CPython is obvious about things such as allocating memory repeatedly, but it&amp;#39;s not obvious for PyPy and JIT that may detect the pointlessly allocated list and remove it.&lt;/p&gt;\n\n&lt;p&gt;Anyways your point about siths and absolutes is very well holding and I just reinforce that viewpoint. Unless siths are superb programmers, then that&amp;#39;s not holding very well.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc9x0h", "score_hidden": false, "stickied": false, "created": 1492391328.0, "created_utc": 1492362528.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc5t95", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "flamingshits", "parent_id": "t3_65m420", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Only siths deal in absolutes.\n\nFrom https://docs.quantifiedcode.com/python-anti-patterns/correctness/not_using_setdefault_to_initialize_a_dictionary.html :\n\n&gt; dictionary.setdefault(\"list\", []).append(\"list_item\")\n\n\nYou now construct a new list and throw it away every time that is called. If you're constructing anything with cost, your code now sucks.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Only siths deal in absolutes.&lt;/p&gt;\n\n&lt;p&gt;From &lt;a href=\"https://docs.quantifiedcode.com/python-anti-patterns/correctness/not_using_setdefault_to_initialize_a_dictionary.html\"&gt;https://docs.quantifiedcode.com/python-anti-patterns/correctness/not_using_setdefault_to_initialize_a_dictionary.html&lt;/a&gt; :&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;dictionary.setdefault(&amp;quot;list&amp;quot;, []).append(&amp;quot;list_item&amp;quot;)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You now construct a new list and throw it away every time that is called. If you&amp;#39;re constructing anything with cost, your code now sucks.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc5t95", "score_hidden": false, "stickied": false, "created": 1492385885.0, "created_utc": 1492357085.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65m420", "likes": null, "replies": "", "user_reports": [], "id": "dgcaa4x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "htuhola", "parent_id": "t3_65m420", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I was expecting something a whole lot more by the title. I was expecting for actual observations and ideas about what makes Python code more likely to be incorrect, hard to maintain, insecure, badly performing or hard to read for no benefits.\n\nInstead I see this lint shit that is worth less than the memory it occupies and the effort it causes. I mean seriously this.\n\nDoing `def f(x): return 2*x` versus `f = lambda x: 2*x` does not matter for your code correctness. Not using all the features of Python all the time neither matters a shit. Using wildcard imports where appropriate is okay. Using the dynamic properties of Python is okay too.\n\nNothing described in this stillborn website claimed to be bad or incorrect is not, except the obviously buggy clauses like the incorrectly layed `except` flow or bad use of `super()`.\n\nInstead of this, I would propose you to follow one rule: Put the program do something only when it results in something you want, otherwise do not put it do it. For example. Do not use `class` unless you actually need an object with methods in it to get the results you are looking for. Don't use anything without a reason, and when you do, consider all approaches and try to pick the best approach.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was expecting something a whole lot more by the title. I was expecting for actual observations and ideas about what makes Python code more likely to be incorrect, hard to maintain, insecure, badly performing or hard to read for no benefits.&lt;/p&gt;\n\n&lt;p&gt;Instead I see this lint shit that is worth less than the memory it occupies and the effort it causes. I mean seriously this.&lt;/p&gt;\n\n&lt;p&gt;Doing &lt;code&gt;def f(x): return 2*x&lt;/code&gt; versus &lt;code&gt;f = lambda x: 2*x&lt;/code&gt; does not matter for your code correctness. Not using all the features of Python all the time neither matters a shit. Using wildcard imports where appropriate is okay. Using the dynamic properties of Python is okay too.&lt;/p&gt;\n\n&lt;p&gt;Nothing described in this stillborn website claimed to be bad or incorrect is not, except the obviously buggy clauses like the incorrectly layed &lt;code&gt;except&lt;/code&gt; flow or bad use of &lt;code&gt;super()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Instead of this, I would propose you to follow one rule: Put the program do something only when it results in something you want, otherwise do not put it do it. For example. Do not use &lt;code&gt;class&lt;/code&gt; unless you actually need an object with methods in it to get the results you are looking for. Don&amp;#39;t use anything without a reason, and when you do, consider all approaches and try to pick the best approach.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcaa4x", "score_hidden": false, "stickied": false, "created": 1492391813.0, "created_utc": 1492363013.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]