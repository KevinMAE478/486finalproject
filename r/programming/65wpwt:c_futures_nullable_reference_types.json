[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65wpwt", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 33, "report_reasons": null, "author": "grauenwolf", "saved": false, "mod_reports": [], "name": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "infoq.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65wpwt/c_futures_nullable_reference_types/", "num_reports": null, "locked": false, "stickied": false, "created": 1492476451.0, "url": "https://www.infoq.com/news/2017/04/CSharp-Nullable", "author_flair_text": null, "quarantine": false, "title": "C# Futures: Nullable Reference Types", "created_utc": 1492447651.0, "distinguished": null, "media": null, "upvote_ratio": 0.82, "num_comments": 26, "visited": false, "subreddit_type": "public", "ups": 33}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dge2hcv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "jetRink", "parent_id": "t1_dgdwcsd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I like Reddit's inline code feature.\n\n&gt; Or is it assumed to return `T?` instead of `T`?\n\nA site like InfoQ should offer something like that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like Reddit&amp;#39;s inline code feature.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Or is it assumed to return &lt;code&gt;T?&lt;/code&gt; instead of &lt;code&gt;T&lt;/code&gt;?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A site like InfoQ should offer something like that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge2hcv", "score_hidden": false, "stickied": false, "created": 1492489756.0, "created_utc": 1492460956.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dge1ceo", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Eirenarch", "parent_id": "t1_dgdwcsd", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The English language syntax collides with this proposal's syntax. This should definitely be reported to the team so they can fix it before shipping.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The English language syntax collides with this proposal&amp;#39;s syntax. This should definitely be reported to the team so they can fix it before shipping.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge1ceo", "score_hidden": false, "stickied": false, "created": 1492488496.0, "created_utc": 1492459696.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwcsd", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "Cats_and_Shit", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;Or is it assumed to return T? instead of T?\n\nI feel like this could have been phrased a little better.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Or is it assumed to return T? instead of T?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I feel like this could have been phrased a little better.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdwcsd", "score_hidden": false, "stickied": false, "created": 1492482847.0, "created_utc": 1492454047.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgduj9a", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dgdrms8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Depends on the context. If T is a generic type parameter, whether or not that is safe depends on if T us also covariant or contravariant. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Depends on the context. If T is a generic type parameter, whether or not that is safe depends on if T us also covariant or contravariant. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgduj9a", "score_hidden": false, "stickied": false, "created": 1492480809.0, "created_utc": 1492452009.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdtuhq", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "QuineQuest", "parent_id": "t1_dgdrms8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I can't find that. There's a warning when you cast from `T[]` to `T?[]`, but that's for good reason:\n\n    ((Foo?[])arr)[0] = null;\n\nShouldn't be possible if `arr` is of type `Foo[]`", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can&amp;#39;t find that. There&amp;#39;s a warning when you cast from &lt;code&gt;T[]&lt;/code&gt; to &lt;code&gt;T?[]&lt;/code&gt;, but that&amp;#39;s for good reason:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;((Foo?[])arr)[0] = null;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Shouldn&amp;#39;t be possible if &lt;code&gt;arr&lt;/code&gt; is of type &lt;code&gt;Foo[]&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdtuhq", "score_hidden": false, "stickied": false, "created": 1492480058.0, "created_utc": 1492451258.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdtqas", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ItzWarty", "parent_id": "t1_dgdrms8", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Where is that warning specified? In the case of T[] to T?[] which is the closest thing I see in the spec, the problem is that you could store a null into the T?[], so a T[] could then contain nulls. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Where is that warning specified? In the case of T[] to T?[] which is the closest thing I see in the spec, the problem is that you could store a null into the T?[], so a T[] could then contain nulls. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdtqas", "score_hidden": false, "stickied": false, "created": 1492479928.0, "created_utc": 1492451128.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdrms8", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "YourGamerMom", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Wondering why a cast from `T` to `T?` would be a warning? The cast is always correct, and will never fail.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wondering why a cast from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;T?&lt;/code&gt; would be a warning? The cast is always correct, and will never fail.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdrms8", "score_hidden": false, "stickied": false, "created": 1492477604.0, "created_utc": 1492448804.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdzjip", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "miminor", "parent_id": "t1_dgdsknv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "[here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html) got it for you", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\"&gt;here&lt;/a&gt; got it for you&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdzjip", "score_hidden": false, "stickied": false, "created": 1492486468.0, "created_utc": 1492457668.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdsknv", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Euphoricus", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I want it!\nAnd I want it now!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I want it!\nAnd I want it now!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdsknv", "score_hidden": false, "stickied": false, "created": 1492478654.0, "created_utc": 1492449854.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdw4mb", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "EntroperZero", "parent_id": "t1_dgdvu2k", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's why it's only generating warnings, and is opt-in for libraries.  This is the best we can do without breaking all existing code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s why it&amp;#39;s only generating warnings, and is opt-in for libraries.  This is the best we can do without breaking all existing code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdw4mb", "score_hidden": false, "stickied": false, "created": 1492482591.0, "created_utc": 1492453791.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdzwy2", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mirhagk", "parent_id": "t1_dgdvu2k", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's a very difficult problem, which is why this has been pushed back from many different C# versions. The idea was brought up during 6.0 design, but it isn't in 6.0, 7.0 and likely won't make it for 8.0\n\nIt's also a question of whether they can do it gradually or not. There was discussion of adding both a `?` and `!`. `Foo!` would be non-nullable and the compiler would yell at you all the time if you assigned it null (or a nullable type). `Foo?` would always be nullable. But `Foo` would be dependent on the compiler settings. It would start out assuming it was `Foo?` and eventually it would be assumed to be `Foo!`.\n\nI think they've gone away from that design, but there was some mention of it [during a recent meeting](https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-03-29.md)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a very difficult problem, which is why this has been pushed back from many different C# versions. The idea was brought up during 6.0 design, but it isn&amp;#39;t in 6.0, 7.0 and likely won&amp;#39;t make it for 8.0&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s also a question of whether they can do it gradually or not. There was discussion of adding both a &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;. &lt;code&gt;Foo!&lt;/code&gt; would be non-nullable and the compiler would yell at you all the time if you assigned it null (or a nullable type). &lt;code&gt;Foo?&lt;/code&gt; would always be nullable. But &lt;code&gt;Foo&lt;/code&gt; would be dependent on the compiler settings. It would start out assuming it was &lt;code&gt;Foo?&lt;/code&gt; and eventually it would be assumed to be &lt;code&gt;Foo!&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I think they&amp;#39;ve gone away from that design, but there was some mention of it &lt;a href=\"https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-03-29.md\"&gt;during a recent meeting&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdzwy2", "score_hidden": false, "stickied": false, "created": 1492486889.0, "created_utc": 1492458089.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdvu2k", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Martel_the_Hammer", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "This would have been great in the first version... but can they actually implement such a massive change so far into the game?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This would have been great in the first version... but can they actually implement such a massive change so far into the game?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdvu2k", "score_hidden": false, "stickied": false, "created": 1492482259.0, "created_utc": 1492453459.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdvb06", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "to_be_deleted_soon", "parent_id": "t1_dgdv8fo", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Sweet !", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sweet !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdvb06", "score_hidden": false, "stickied": false, "created": 1492481668.0, "created_utc": 1492452868.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdv8fo", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dgdun5r", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Stay turned. I'm working on some write-ups of those proposals as well. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Stay turned. I&amp;#39;m working on some write-ups of those proposals as well. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdv8fo", "score_hidden": false, "stickied": false, "created": 1492481587.0, "created_utc": 1492452787.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdun5r", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "to_be_deleted_soon", "parent_id": "t1_dgdugil", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Seems reasonable\n\nAnother thing for the wishlist is declarative immutability", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seems reasonable&lt;/p&gt;\n\n&lt;p&gt;Another thing for the wishlist is declarative immutability&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdun5r", "score_hidden": false, "stickied": false, "created": 1492480928.0, "created_utc": 1492452128.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdugil", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dgdu7l9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Null or a compiler error depending on the context.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Null or a compiler error depending on the context.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdugil", "score_hidden": false, "stickied": false, "created": 1492480723.0, "created_utc": 1492451923.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdu7l9", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "to_be_deleted_soon", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Interesting\n\nWhat would be the default value for object?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting&lt;/p&gt;\n\n&lt;p&gt;What would be the default value for object?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdu7l9", "score_hidden": false, "stickied": false, "created": 1492480457.0, "created_utc": 1492451657.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dge0x5z", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Eirenarch", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Why does it say \"new proposals\" isn't this proposal something that has been in limbo since C# 6.0", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why does it say &amp;quot;new proposals&amp;quot; isn&amp;#39;t this proposal something that has been in limbo since C# 6.0&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0x5z", "score_hidden": false, "stickied": false, "created": 1492488018.0, "created_utc": 1492459218.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dge0v57", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cat_in_the_wall", "parent_id": "t1_dgdwpyp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "well T? and T would both be T*. its just that T? might not point to a valid object.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;well T? and T would both be T*. its just that T? might not point to a valid object.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0v57", "score_hidden": false, "stickied": false, "created": 1492487955.0, "created_utc": 1492459155.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdwpyp", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Gotebe", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Cool. I wonder, if this was done on day 0, would T? have been T* :-)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool. I wonder, if this was done on day 0, would T? have been T* :-)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdwpyp", "score_hidden": false, "stickied": false, "created": 1492483261.0, "created_utc": 1492454461.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdykcv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "coloroftheskye", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Awesome. Most of the time my object are non-nullable by logic. Having the compiler help with validating this is a huge addition./", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Awesome. Most of the time my object are non-nullable by logic. Having the compiler help with validating this is a huge addition./&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdykcv", "score_hidden": false, "stickied": false, "created": 1492485352.0, "created_utc": 1492456552.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dgdywf9", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "grauenwolf", "parent_id": "t1_dgdw83v", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Having a standard way to indicate that a method won't return a null is huge.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Having a standard way to indicate that a method won&amp;#39;t return a null is huge.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdywf9", "score_hidden": false, "stickied": false, "created": 1492485736.0, "created_utc": 1492456936.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65wpwt", "likes": null, "replies": "", "user_reports": [], "id": "dge0n1a", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "inmatarian", "parent_id": "t1_dge0aas", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Yeah, already understood that... thanks for nothing.\n\nGlad to be of service. \ud83d\udc4d", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Yeah, already understood that... thanks for nothing.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Glad to be of service. \ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0n1a", "score_hidden": false, "stickied": false, "created": 1492487698.0, "created_utc": 1492458898.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dge0aas", "gilded": 0, "archived": false, "score": -5, "report_reasons": null, "author": "irish_throwaway_1", "parent_id": "t1_dgdxhhm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; It's working with the compiler to track down bugs and errors.\n\nYeah, already understood that... thanks for nothing. Whether it's the compiler finding these, or a separate static analysis tool, the value is the same. There are already several very workable ways to detect situations where a reference is incorrectly null at compile-time. Why change a fundamental element of the language to solve a problem that already has a solution?\n\nFor method signatures, ReSharper already has a [NotNull] attribute for parameters that is widely adopted and can be used to statically detect when there's potential for the method to be invoked with a null value and provide a warning. Would be perfectly reasonable to standardize this approach as part of a core library.\n\nFields and properties could easily be handled in similar fashion - decorate them with an attribute and a static analyzer could raise errors when the field either isn't initialized in the constructor, or it is set to a value that hasn't been null checked.\n\nLocal variables are perhaps the trickiest, but also the lowest value IMO since both the initialization and the usage are within the control of the same method, so the developer should be aware whether a null value is a possibility. Even still, I believe this could be handled by adding a NotNullable&lt;T&gt; struct that mirrors the Nullable&lt;T&gt; class. NotNullable&lt;T&gt; would contain a single property `Value`. In the constructor, the argument value passed in would be null checked (throwing an exception on a null value). Since NotNullabe&lt;T&gt; is a value type, it could never be null and the constructor check would prevent NotNullable&lt;T&gt; from ever being initialized to an empty default value.\n\nBam, problem already solved if you want to start writing code that guarantees non-nullability for reference types. So why change the default behavior of the language in a way that will cause confusion at best and more likely massive upgrade headaches?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;It&amp;#39;s working with the compiler to track down bugs and errors.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yeah, already understood that... thanks for nothing. Whether it&amp;#39;s the compiler finding these, or a separate static analysis tool, the value is the same. There are already several very workable ways to detect situations where a reference is incorrectly null at compile-time. Why change a fundamental element of the language to solve a problem that already has a solution?&lt;/p&gt;\n\n&lt;p&gt;For method signatures, ReSharper already has a [NotNull] attribute for parameters that is widely adopted and can be used to statically detect when there&amp;#39;s potential for the method to be invoked with a null value and provide a warning. Would be perfectly reasonable to standardize this approach as part of a core library.&lt;/p&gt;\n\n&lt;p&gt;Fields and properties could easily be handled in similar fashion - decorate them with an attribute and a static analyzer could raise errors when the field either isn&amp;#39;t initialized in the constructor, or it is set to a value that hasn&amp;#39;t been null checked.&lt;/p&gt;\n\n&lt;p&gt;Local variables are perhaps the trickiest, but also the lowest value IMO since both the initialization and the usage are within the control of the same method, so the developer should be aware whether a null value is a possibility. Even still, I believe this could be handled by adding a NotNullable&amp;lt;T&amp;gt; struct that mirrors the Nullable&amp;lt;T&amp;gt; class. NotNullable&amp;lt;T&amp;gt; would contain a single property &lt;code&gt;Value&lt;/code&gt;. In the constructor, the argument value passed in would be null checked (throwing an exception on a null value). Since NotNullabe&amp;lt;T&amp;gt; is a value type, it could never be null and the constructor check would prevent NotNullable&amp;lt;T&amp;gt; from ever being initialized to an empty default value.&lt;/p&gt;\n\n&lt;p&gt;Bam, problem already solved if you want to start writing code that guarantees non-nullability for reference types. So why change the default behavior of the language in a way that will cause confusion at best and more likely massive upgrade headaches?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dge0aas", "score_hidden": false, "stickied": false, "created": 1492487303.0, "created_utc": 1492458503.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdxhhm", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "inmatarian", "parent_id": "t1_dgdw83v", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It's working _with_ the compiler to track down bugs and errors. By having it flag null warnings everywhere, and you taking the time to walk through your code making sure that nullables are properly marked, you can catch the places where the non-null assumptions are not being held true and fix a potential bug.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s working &lt;em&gt;with&lt;/em&gt; the compiler to track down bugs and errors. By having it flag null warnings everywhere, and you taking the time to walk through your code making sure that nullables are properly marked, you can catch the places where the non-null assumptions are not being held true and fix a potential bug.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdxhhm", "score_hidden": false, "stickied": false, "created": 1492484128.0, "created_utc": 1492455328.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdw83v", "gilded": 0, "archived": false, "score": -4, "report_reasons": null, "author": "irish_throwaway_1", "parent_id": "t3_65wpwt", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Aside from removing a few Check.NotNull statements at the beginning of method declarations, I'm not really seeing any benefit to this. Even the static analysis can be achieved relatively easily using existing mechanisms without changing the type system (combination of annotations and potentially a NotNullable struct). Given what a fundamental change it would be, it seems like the benefit isn't worth the price.", "edited": 1492454204.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Aside from removing a few Check.NotNull statements at the beginning of method declarations, I&amp;#39;m not really seeing any benefit to this. Even the static analysis can be achieved relatively easily using existing mechanisms without changing the type system (combination of annotations and potentially a NotNullable struct). Given what a fundamental change it would be, it seems like the benefit isn&amp;#39;t worth the price.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgdw83v", "score_hidden": false, "stickied": false, "created": 1492482699.0, "created_utc": 1492453899.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -4}}], "after": null, "before": null}}]