[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65ct5j", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 37, "report_reasons": null, "author": "pyotrgalois", "saved": false, "mod_reports": [], "name": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "approved_by": null, "over_18": false, "domain": "notamonadtutorial.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/65ct5j/a_pythonist_finds_a_new_home_at_clojure_land/", "num_reports": null, "locked": false, "stickied": false, "created": 1492208754.0, "url": "https://notamonadtutorial.com/a-pythonist-finds-a-new-home-at-clojure-land-761ad8612b47", "author_flair_text": null, "quarantine": false, "title": "A Pythonist finds a new home at Clojure land", "created_utc": 1492179954.0, "distinguished": null, "media": null, "upvote_ratio": 0.65, "num_comments": 76, "visited": false, "subreddit_type": "public", "ups": 37}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9kyu6", "gilded": 0, "archived": false, "score": 36, "report_reasons": null, "author": "lkraider", "parent_id": "t1_dg9kilw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9kyu6", "score_hidden": false, "stickied": false, "created": 1492225322.0, "created_utc": 1492196522.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 36}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9lbvh", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "badfontkeming", "parent_id": "t1_dg9kilw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'd say it definitely can make a language better. A strong community makes for better documentation and more robust libraries, which both can definitely make a language more desirable to use.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d say it definitely can make a language better. A strong community makes for better documentation and more robust libraries, which both can definitely make a language more desirable to use.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9lbvh", "score_hidden": false, "stickied": false, "created": 1492225765.0, "created_utc": 1492196965.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgba5j8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "glacialthinker", "parent_id": "t1_dgaidkq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Your reply has little to do with what I said... you just took general offence and used that to springboard into some self-validation argument, while making absolute statements about limits of individuals.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your reply has little to do with what I said... you just took general offence and used that to springboard into some self-validation argument, while making absolute statements about limits of individuals.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgba5j8", "score_hidden": false, "stickied": false, "created": 1492324518.0, "created_utc": 1492295718.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaidkq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pistacchio", "parent_id": "t1_dgafx2k", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "We, as developers, deal with very complex problems. No one is expected to be a master of everything, that's why we build communities, so that I can use the most stable network library done by people that know networks better than I do and present the gathered data on a GUI done by people that knows UX better than me. \nYou're either programming \"hello worlds\" programs or, if you are in the field of complexity and pretend not to rely on the shoulders of others, you're doomed to deliver amateurish software. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We, as developers, deal with very complex problems. No one is expected to be a master of everything, that&amp;#39;s why we build communities, so that I can use the most stable network library done by people that know networks better than I do and present the gathered data on a GUI done by people that knows UX better than me. \nYou&amp;#39;re either programming &amp;quot;hello worlds&amp;quot; programs or, if you are in the field of complexity and pretend not to rely on the shoulders of others, you&amp;#39;re doomed to deliver amateurish software. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaidkq", "score_hidden": false, "stickied": false, "created": 1492279762.0, "created_utc": 1492250962.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgafx2k", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "glacialthinker", "parent_id": "t1_dga34y1", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "And the more half-baked the developers are... Which is only natural with exponential growth. (A very small percentage is actually experienced, plus wider accessibility means the average natural talent -- IQ, patience, logic -- is lowering.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And the more half-baked the developers are... Which is only natural with exponential growth. (A very small percentage is actually experienced, plus wider accessibility means the average natural talent -- IQ, patience, logic -- is lowering.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgafx2k", "score_hidden": false, "stickied": false, "created": 1492272052.0, "created_utc": 1492243252.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dga34y1", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "phalp", "parent_id": "t1_dg9w5ih", "subreddit_name_prefixed": "r/programming", "controversiality": 1, "body": "Community matters more and more, the more half-baked a technology is.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Community matters more and more, the more half-baked a technology is.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga34y1", "score_hidden": false, "stickied": false, "created": 1492248706.0, "created_utc": 1492219906.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9w5ih", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "pistacchio", "parent_id": "t1_dg9kilw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I ended up believing that the community around a technology is actually more important than the technology itself.\n\nYes, you can design the best language, but if no one uses it and provides libraries, it's just a fancy, yet useless, calculator. If no one uses it, you're deep in a project, stuck on something, and there's no community to ask for a prompt help.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I ended up believing that the community around a technology is actually more important than the technology itself.&lt;/p&gt;\n\n&lt;p&gt;Yes, you can design the best language, but if no one uses it and provides libraries, it&amp;#39;s just a fancy, yet useless, calculator. If no one uses it, you&amp;#39;re deep in a project, stuck on something, and there&amp;#39;s no community to ask for a prompt help.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9w5ih", "score_hidden": false, "stickied": false, "created": 1492239340.0, "created_utc": 1492210540.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "more"}], "after": null, "before": null}}, "user_reports": [], "id": "dgalk2a", "gilded": 0, "archived": false, "score": -3, "report_reasons": null, "author": "BadGoyWithAGun", "parent_id": "t1_dgaldho", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Why rust will not replace anything anywhere ever: reason \\#1488", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why rust will not replace anything anywhere ever: reason #1488&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgalk2a", "score_hidden": false, "stickied": false, "created": 1492288599.0, "created_utc": 1492259799.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": -3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaldho", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dgal85r", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Oh, you're a a racist, you're an anti-Semite and you support ethnic cleansing?  You should not ever be able to participate in any communities.\n\nThanks for reaffirming how great the Rust community is, Nazi motherfucker.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh, you&amp;#39;re a a racist, you&amp;#39;re an anti-Semite and you support ethnic cleansing?  You should not ever be able to participate in any communities.&lt;/p&gt;\n\n&lt;p&gt;Thanks for reaffirming how great the Rust community is, Nazi motherfucker.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaldho", "score_hidden": false, "stickied": false, "created": 1492288198.0, "created_utc": 1492259398.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgal85r", "gilded": 0, "archived": false, "score": -6, "report_reasons": null, "author": "BadGoyWithAGun", "parent_id": "t1_dgako44", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Someone with my posting history can participate in C communities without having it thrown in their face. This is not the case for Rust.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Someone with my posting history can participate in C communities without having it thrown in their face. This is not the case for Rust.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgal85r", "score_hidden": false, "stickied": false, "created": 1492287852.0, "created_utc": 1492259052.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": -6}}], "after": null, "before": null}}, "user_reports": [], "id": "dgako44", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dgaf5my", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Politically charged?  What do you mean?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Politically charged?  What do you mean?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgako44", "score_hidden": false, "stickied": false, "created": 1492286490.0, "created_utc": 1492257690.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaf5my", "gilded": 0, "archived": false, "score": -7, "report_reasons": null, "author": "BadGoyWithAGun", "parent_id": "t1_dga62g0", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Try observing it from the outside. It's a very politically-charged environment, the opposite of what you want for a supposedly universal programming language that you'd like to replace C with.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Try observing it from the outside. It&amp;#39;s a very politically-charged environment, the opposite of what you want for a supposedly universal programming language that you&amp;#39;d like to replace C with.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaf5my", "score_hidden": false, "stickied": false, "created": 1492269970.0, "created_utc": 1492241170.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": -7}}], "after": null, "before": null}}, "user_reports": [], "id": "dga62g0", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dg9rm1z", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Wait, what's wrong with the Rust community?  My impression was pretty good...\n\nEDIT: Predictably, /u/BadGoyWithAGun (whose username I just noticed) turned out to be an actual neo-Nazi.", "edited": 1492260450.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wait, what&amp;#39;s wrong with the Rust community?  My impression was pretty good...&lt;/p&gt;\n\n&lt;p&gt;EDIT: Predictably, &lt;a href=\"/u/BadGoyWithAGun\"&gt;/u/BadGoyWithAGun&lt;/a&gt; (whose username I just noticed) turned out to be an actual neo-Nazi.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga62g0", "score_hidden": false, "stickied": false, "created": 1492252853.0, "created_utc": 1492224053.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 13}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9sv89", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "ebrythil", "parent_id": "t1_dg9rm1z", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "At least one seems to be you are not part of it. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At least one seems to be you are not part of it. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9sv89", "score_hidden": false, "stickied": false, "created": 1492234988.0, "created_utc": 1492206188.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9rm1z", "gilded": 0, "archived": false, "score": -8, "report_reasons": null, "author": "BadGoyWithAGun", "parent_id": "t1_dg9kilw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Yes. Case in point: Rust. Good idea, ok language, horrible, horrible people with no redeeming qualities.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes. Case in point: Rust. Good idea, ok language, horrible, horrible people with no redeeming qualities.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9rm1z", "score_hidden": false, "stickied": false, "created": 1492233383.0, "created_utc": 1492204583.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": -8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9me55", "gilded": 0, "archived": false, "score": -6, "report_reasons": null, "author": "the_evergrowing_fool", "parent_id": "t1_dg9kilw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Indeed, I personally can't stand the Clojure community since the recurrent zealotry.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Indeed, I personally can&amp;#39;t stand the Clojure community since the recurrent zealotry.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9me55", "score_hidden": false, "stickied": false, "created": 1492227046.0, "created_utc": 1492198246.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": -6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9kilw", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "shevegen", "parent_id": "t1_dg97xl9", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Wait a moment ... we have to have an opinion about a \"community\"?\n\nIs a language itself better or worse depending on any community?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wait a moment ... we have to have an opinion about a &amp;quot;community&amp;quot;?&lt;/p&gt;\n\n&lt;p&gt;Is a language itself better or worse depending on any community?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9kilw", "score_hidden": false, "stickied": false, "created": 1492224778.0, "created_utc": 1492195978.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg97xl9", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "pyotrgalois", "parent_id": "t1_dg97mao", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I agree, strange waters. Check this question and the answer: \"What do you think about the JVM and its community?\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I agree, strange waters. Check this question and the answer: &amp;quot;What do you think about the JVM and its community?&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg97xl9", "score_hidden": false, "stickied": false, "created": 1492210112.0, "created_utc": 1492181312.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgag7hn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "glacialthinker", "parent_id": "t1_dg97mao", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Dammit... I read this comment before the article... and that made for a double-take when it seemed like this comment was referred to *in* the article... time warp! Nicely done. :P\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dammit... I read this comment before the article... and that made for a double-take when it seemed like this comment was referred to &lt;em&gt;in&lt;/em&gt; the article... time warp! Nicely done. :P&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgag7hn", "score_hidden": false, "stickied": false, "created": 1492272890.0, "created_utc": 1492244090.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg97mao", "gilded": 0, "archived": false, "score": 31, "report_reasons": null, "author": "stesch", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Clojure land is in the Java sea. Strange waters.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure land is in the Java sea. Strange waters.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg97mao", "score_hidden": false, "stickied": false, "created": 1492209711.0, "created_utc": 1492180911.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 31}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9us9b", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "yogthos", "parent_id": "t1_dg9nol6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Note that Clojure isn't actually tied to the JVM in any way. It runs on top of Js runtimes in the browser and Node.js, as well as on .NET. There are popular projects using all these runtimes out there. Not only that, but thanks to reader conditionals, a lot of the libraries are actually completely platform independent.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Note that Clojure isn&amp;#39;t actually tied to the JVM in any way. It runs on top of Js runtimes in the browser and Node.js, as well as on .NET. There are popular projects using all these runtimes out there. Not only that, but thanks to reader conditionals, a lot of the libraries are actually completely platform independent.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9us9b", "score_hidden": false, "stickied": false, "created": 1492237494.0, "created_utc": 1492208694.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9vvoy", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9nol6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; In many ways is it much broader than Clojure, since there is much more choice\n\ngood point and nice counter example with the compilers. I may be too web-centric, where there are more libraries, and mature ones, in Clojure land. Still, there are great stuff in CL and it's moving !", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;In many ways is it much broader than Clojure, since there is much more choice&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;good point and nice counter example with the compilers. I may be too web-centric, where there are more libraries, and mature ones, in Clojure land. Still, there are great stuff in CL and it&amp;#39;s moving !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9vvoy", "score_hidden": false, "stickied": false, "created": 1492238973.0, "created_utc": 1492210173.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9vz0w", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9p8rk", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "that's an awesome example and tutorial that I'd love to see on a blog post or just a gist or something for further reference and better archiving, this will be buried too quickly on reddit !", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;that&amp;#39;s an awesome example and tutorial that I&amp;#39;d love to see on a blog post or just a gist or something for further reference and better archiving, this will be buried too quickly on reddit !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9vz0w", "score_hidden": false, "stickied": false, "created": 1492239095.0, "created_utc": 1492210295.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9p8rk", "gilded": 0, "archived": false, "score": 13, "report_reasons": null, "author": "lispm", "parent_id": "t1_dg9ok3l", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "That's not an interpreter. A REPL is not the same as a Lisp interpreter. REPL means read eval print loop. EVAL can be implemented by a compiler or an interpreter. Common Lisp has both and mixed implementations with both compiler and interpreter.\n\nA Lisp interpreter is executing Lisp code directly. Clojure does not have an Interpreter.\n\n&gt; https://clojure.org/reference/evaluation\n\n&gt; Clojure has no interpreter.\n\nExample in LispWorks, which uses the Interpreter in the REPL.\n\n    CL-USER 29 &gt; (let ((f (lambda (a b)\n                             (+ (prog1 2 (break))  ; we have a break here\n                                (* a b)))))\n                  (funcall f 2 3))\n\n    Break.\n      1 (continue) Return from break.\n      2 (abort) Return to level 0.\n      3 Return to top loop level 0.\n\n    Type :b for backtrace or :c &lt;option number&gt; to proceed.\n    Type :bug-form \"&lt;subject&gt;\" for a bug report template or :? for other options.\n\nAs you see Lisp comes with a sub-repl in the break. The sub-repl is just another repl, but in the context of the break. The break could be done by the debugger when it sees an error or by user code - as above.\n\nNow we ask the interpreter for the current lambda expression:\n\n    CL-USER 30 : 1 &gt; :lambda\n    (LAMBDA (A B) (+ (PROG1 2 (BREAK)) (* A B)))\n\nAbove is actually Lisp data. Code as data.\n\nNow I'm changing the + function in the code to be expt, exponentiation. To be clear: I'm changing in the debugger the current executed Lisp function on the Lisp level. We take the third element of the list, and then the first one of that. This is the + symbol. We change it to be expt. * holds the last evaluation result of the REPL.\n\n    CL-USER 31 : 1 &gt; (setf (first (third *)) 'expt)\n    EXPT\n\nThen I'm restarting the current stack frame:\n\n    CL-USER 32 : 1 &gt; :res\n\nWe get another break, which we just continue from:\n\n    Break.\n      1 (continue) Return from break.\n      2 (abort) Return to level 0.\n      3 Return to top loop level 0.\n\n    Type :b for backtrace or :c &lt;option number&gt; to proceed.\n    Type :bug-form \"&lt;subject&gt;\" for a bug report template or :? for other options.\n\n    CL-USER 33 : 1 &gt; :c 1\n    64                                   ; we computed 2^(2*3)  instead of 2+(2*3)\n\nWhat did we see? We saw that the interpreter uses actual Lisp code.\nLisp code we can change with Lisp code in the debugger.\n\nA second example.\n\nWhat can we do with that for debugging? Well, we can for example write our own evaluation tracer. The Evaluator prints each expression and its result nicely indented, while walking the expression tree and evaluating subexpressions.\nRemember: this is now user-level code. The example is from CLtL2. You will also see that LispWorks can freely mix compiled and interpreted functions. The function COMPILE takes a function name and compiles its Lisp code to machine code.\n\n\n    CL-USER 1 &gt; (defvar *hooklevel* 0)\n    *HOOKLEVEL*\n\n    CL-USER 2 &gt; (defun hook (x) \n                  (let ((*evalhook* 'eval-hook-function)) \n                    (eval x)))\n    HOOK\n\n    CL-USER 3 &gt; (compile 'hook)\n    HOOK\n    NIL\n    NIL\n\n    CL-USER 4 &gt; (defun eval-hook-function (form &amp;rest env) \n                  (let ((*hooklevel* (+ *hooklevel* 1))) \n                    (format *trace-output* \"~%~V@TForm:  ~S\" \n                            (* *hooklevel* 2) form) \n                    (let ((values (multiple-value-list \n                                   (evalhook form \n                                             #'eval-hook-function \n                                             nil \n                                             env)))) \n                      (format *trace-output* \"~%~V@TValue:~{ ~S~}\" \n                              (* *hooklevel* 2) values) \n                      (values-list values))))\n    EVAL-HOOK-FUNCTION\n\n    CL-USER 5 &gt; (compile 'eval-hook-function)\n    EVAL-HOOK-FUNCTION\n    NIL\n    NIL\n\nNow we can trace the evaluation of expressions on the Lisp level:\n\n    CL-USER 6 &gt; (hook '(cons (floor *print-base* 2) 'b))\n\n      Form:  (CONS (FLOOR *PRINT-BASE* 2) (QUOTE B))\n        Form:  (FLOOR *PRINT-BASE* 2)\n          Form:  *PRINT-BASE*\n          Value: 10\n          Form:  2\n          Value: 2\n        Value: 5 0\n        Form:  (QUOTE B)\n        Value: B\n      Value: (5 . B)\n    (5 . B)\n\n", "edited": 1492204897.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s not an interpreter. A REPL is not the same as a Lisp interpreter. REPL means read eval print loop. EVAL can be implemented by a compiler or an interpreter. Common Lisp has both and mixed implementations with both compiler and interpreter.&lt;/p&gt;\n\n&lt;p&gt;A Lisp interpreter is executing Lisp code directly. Clojure does not have an Interpreter.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=\"https://clojure.org/reference/evaluation\"&gt;https://clojure.org/reference/evaluation&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Clojure has no interpreter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Example in LispWorks, which uses the Interpreter in the REPL.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 29 &amp;gt; (let ((f (lambda (a b)\n                         (+ (prog1 2 (break))  ; we have a break here\n                            (* a b)))))\n              (funcall f 2 3))\n\nBreak.\n  1 (continue) Return from break.\n  2 (abort) Return to level 0.\n  3 Return to top loop level 0.\n\nType :b for backtrace or :c &amp;lt;option number&amp;gt; to proceed.\nType :bug-form &amp;quot;&amp;lt;subject&amp;gt;&amp;quot; for a bug report template or :? for other options.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you see Lisp comes with a sub-repl in the break. The sub-repl is just another repl, but in the context of the break. The break could be done by the debugger when it sees an error or by user code - as above.&lt;/p&gt;\n\n&lt;p&gt;Now we ask the interpreter for the current lambda expression:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 30 : 1 &amp;gt; :lambda\n(LAMBDA (A B) (+ (PROG1 2 (BREAK)) (* A B)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above is actually Lisp data. Code as data.&lt;/p&gt;\n\n&lt;p&gt;Now I&amp;#39;m changing the + function in the code to be expt, exponentiation. To be clear: I&amp;#39;m changing in the debugger the current executed Lisp function on the Lisp level. We take the third element of the list, and then the first one of that. This is the + symbol. We change it to be expt. * holds the last evaluation result of the REPL.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 31 : 1 &amp;gt; (setf (first (third *)) &amp;#39;expt)\nEXPT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I&amp;#39;m restarting the current stack frame:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 32 : 1 &amp;gt; :res\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We get another break, which we just continue from:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Break.\n  1 (continue) Return from break.\n  2 (abort) Return to level 0.\n  3 Return to top loop level 0.\n\nType :b for backtrace or :c &amp;lt;option number&amp;gt; to proceed.\nType :bug-form &amp;quot;&amp;lt;subject&amp;gt;&amp;quot; for a bug report template or :? for other options.\n\nCL-USER 33 : 1 &amp;gt; :c 1\n64                                   ; we computed 2^(2*3)  instead of 2+(2*3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What did we see? We saw that the interpreter uses actual Lisp code.\nLisp code we can change with Lisp code in the debugger.&lt;/p&gt;\n\n&lt;p&gt;A second example.&lt;/p&gt;\n\n&lt;p&gt;What can we do with that for debugging? Well, we can for example write our own evaluation tracer. The Evaluator prints each expression and its result nicely indented, while walking the expression tree and evaluating subexpressions.\nRemember: this is now user-level code. The example is from CLtL2. You will also see that LispWorks can freely mix compiled and interpreted functions. The function COMPILE takes a function name and compiles its Lisp code to machine code.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 1 &amp;gt; (defvar *hooklevel* 0)\n*HOOKLEVEL*\n\nCL-USER 2 &amp;gt; (defun hook (x) \n              (let ((*evalhook* &amp;#39;eval-hook-function)) \n                (eval x)))\nHOOK\n\nCL-USER 3 &amp;gt; (compile &amp;#39;hook)\nHOOK\nNIL\nNIL\n\nCL-USER 4 &amp;gt; (defun eval-hook-function (form &amp;amp;rest env) \n              (let ((*hooklevel* (+ *hooklevel* 1))) \n                (format *trace-output* &amp;quot;~%~V@TForm:  ~S&amp;quot; \n                        (* *hooklevel* 2) form) \n                (let ((values (multiple-value-list \n                               (evalhook form \n                                         #&amp;#39;eval-hook-function \n                                         nil \n                                         env)))) \n                  (format *trace-output* &amp;quot;~%~V@TValue:~{ ~S~}&amp;quot; \n                          (* *hooklevel* 2) values) \n                  (values-list values))))\nEVAL-HOOK-FUNCTION\n\nCL-USER 5 &amp;gt; (compile &amp;#39;eval-hook-function)\nEVAL-HOOK-FUNCTION\nNIL\nNIL\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we can trace the evaluation of expressions on the Lisp level:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CL-USER 6 &amp;gt; (hook &amp;#39;(cons (floor *print-base* 2) &amp;#39;b))\n\n  Form:  (CONS (FLOOR *PRINT-BASE* 2) (QUOTE B))\n    Form:  (FLOOR *PRINT-BASE* 2)\n      Form:  *PRINT-BASE*\n      Value: 10\n      Form:  2\n      Value: 2\n    Value: 5 0\n    Form:  (QUOTE B)\n    Value: B\n  Value: (5 . B)\n(5 . B)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9p8rk", "score_hidden": false, "stickied": false, "created": 1492230471.0, "created_utc": 1492201671.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 13}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ok3l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MagicMurderBagYT", "parent_id": "t1_dg9nol6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; No Interpreter.\n\nHol up. What about the REPL?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;No Interpreter.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hol up. What about the REPL?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9ok3l", "score_hidden": false, "stickied": false, "created": 1492229648.0, "created_utc": 1492200848.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9nol6", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "lispm", "parent_id": "t1_dg9copf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;  tiny compared to clojure\n\nIn many ways is it much broader than Clojure, since there is much more choice. Interpreters, compilers, native code compilers, batch compilers, compilers targeting C/LLVM/JVM/ARM/ARM64/x86/x86-64/SPARC64/POWER/... \n\nClojure on the JVM uses a relatively simple and not very user-friendly compiler to the JVM. No Interpreter. No mixed use of interpreted and compiled code. Functions need to be declared before used. Error messages are exposing the underlying JVM. No TCO. No images. Slow startup.\n\nThe Roomba cleans your home with a CL program.\n", "edited": 1492200225.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;tiny compared to clojure&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In many ways is it much broader than Clojure, since there is much more choice. Interpreters, compilers, native code compilers, batch compilers, compilers targeting C/LLVM/JVM/ARM/ARM64/x86/x86-64/SPARC64/POWER/... &lt;/p&gt;\n\n&lt;p&gt;Clojure on the JVM uses a relatively simple and not very user-friendly compiler to the JVM. No Interpreter. No mixed use of interpreted and compiled code. Functions need to be declared before used. Error messages are exposing the underlying JVM. No TCO. No images. Slow startup.&lt;/p&gt;\n\n&lt;p&gt;The Roomba cleans your home with a CL program.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9nol6", "score_hidden": false, "stickied": false, "created": 1492228598.0, "created_utc": 1492199798.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dga7c89", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "phalp", "parent_id": "t1_dga4put", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I guess I think of it the other way around. I'm writing a function definition and it's time to write the arguments: no searching my memory, it's parens. Let binding? Parens. No contextual call for different braces. Whereas when reading, I don't need to care anyway since arguments would still look like arguments `\ud83c\udf4cif you wrapped them in bananas\ud83c\udf4c`.\n\nThere's a further kind of symmetry too in that the general meaning of `(foo bar)` in code is that `foo` is in some sense the head of the form. Not universally, argument lists being an exception, but that's the case in `let` bindings, in `case` or `cond`, in the well-known `iter` macro, in the \"second level\" of argument lists, where default values are specified, and in `defstruct` and `defmethod`. It's the difference between looking at \"evaluate\" as the general meaning of a list, or looking at it as a head and a body.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess I think of it the other way around. I&amp;#39;m writing a function definition and it&amp;#39;s time to write the arguments: no searching my memory, it&amp;#39;s parens. Let binding? Parens. No contextual call for different braces. Whereas when reading, I don&amp;#39;t need to care anyway since arguments would still look like arguments &lt;code&gt;\ud83c\udf4cif you wrapped them in bananas\ud83c\udf4c&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s a further kind of symmetry too in that the general meaning of &lt;code&gt;(foo bar)&lt;/code&gt; in code is that &lt;code&gt;foo&lt;/code&gt; is in some sense the head of the form. Not universally, argument lists being an exception, but that&amp;#39;s the case in &lt;code&gt;let&lt;/code&gt; bindings, in &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;cond&lt;/code&gt;, in the well-known &lt;code&gt;iter&lt;/code&gt; macro, in the &amp;quot;second level&amp;quot; of argument lists, where default values are specified, and in &lt;code&gt;defstruct&lt;/code&gt; and &lt;code&gt;defmethod&lt;/code&gt;. It&amp;#39;s the difference between looking at &amp;quot;evaluate&amp;quot; as the general meaning of a list, or looking at it as a head and a body.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga7c89", "score_hidden": false, "stickied": false, "created": 1492254717.0, "created_utc": 1492225917.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dga4put", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "facundoolano", "parent_id": "t1_dga3b4b", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It has a purpose (which you may or may not consider worthy), I think Rich Hickey mentions it in one of his talks: making it a list would cause the sexp to behave differently depending on the context, i.e. most of the times a list would be evaluated by calling the first element, but not in the case of arg lists; by making it a vector the syntax becomes more consistent, since you know a list will always mean the first element is going to be the operator that gets called.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It has a purpose (which you may or may not consider worthy), I think Rich Hickey mentions it in one of his talks: making it a list would cause the sexp to behave differently depending on the context, i.e. most of the times a list would be evaluated by calling the first element, but not in the case of arg lists; by making it a vector the syntax becomes more consistent, since you know a list will always mean the first element is going to be the operator that gets called.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga4put", "score_hidden": false, "stickied": false, "created": 1492250904.0, "created_utc": 1492222104.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dga3b4b", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "phalp", "parent_id": "t1_dg9ro1z", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Granted you'll write a lot of functions and learn it quick, but it seems like a purposeless syntax quirk to me.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Granted you&amp;#39;ll write a lot of functions and learn it quick, but it seems like a purposeless syntax quirk to me.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga3b4b", "score_hidden": false, "stickied": false, "created": 1492248940.0, "created_utc": 1492220140.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ro1z", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "athousandcounts", "parent_id": "t1_dg9n5ah", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I recommend using a vector for the parameter collection", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I recommend using a vector for the parameter collection&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9ro1z", "score_hidden": false, "stickied": false, "created": 1492233452.0, "created_utc": 1492204652.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9n5ah", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "lispm", "parent_id": "t1_dg9m6u2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Well, in Lisp a function parameter LIST is a list. Not a vector.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, in Lisp a function parameter LIST is a list. Not a vector.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9n5ah", "score_hidden": false, "stickied": false, "created": 1492227952.0, "created_utc": 1492199152.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgccz22", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dgb5xlz", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I skimmed through the video and I don't really know what to think :p maybe I must wait to realize the wisdom. I just see a call to functional programming.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I skimmed through the video and I don&amp;#39;t really know what to think :p maybe I must wait to realize the wisdom. I just see a call to functional programming.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgccz22", "score_hidden": false, "stickied": false, "created": 1492395369.0, "created_utc": 1492366569.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgb5xlz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "athousandcounts", "parent_id": "t1_dgaient", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt;I'll give the talk a try\n\nAwesome. Let me know what you think.\n\n&gt;there is a library\n\nI think the difference with CL is that it is idiomatic in Clojure to use the various threading macros.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;ll give the talk a try&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Awesome. Let me know what you think.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;there is a library&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I think the difference with CL is that it is idiomatic in Clojure to use the various threading macros.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb5xlz", "score_hidden": false, "stickied": false, "created": 1492318608.0, "created_utc": 1492289808.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgcdnan", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dgcclx2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "we can have CL and Clojure(Script) in the same project :) https://github.com/cicakhq/potato/ ([video](https://www.youtube.com/watch?v=bl8jQ2wRh6k)).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;we can have CL and Clojure(Script) in the same project :) &lt;a href=\"https://github.com/cicakhq/potato/\"&gt;https://github.com/cicakhq/potato/&lt;/a&gt; (&lt;a href=\"https://www.youtube.com/watch?v=bl8jQ2wRh6k\"&gt;video&lt;/a&gt;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcdnan", "score_hidden": false, "stickied": false, "created": 1492396268.0, "created_utc": 1492367468.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcclx2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dgbvjyb", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I don't really know videos but:\n\n- just watched [Is Clojure an acceptable lisp ?](https://www.youtube.com/watch?v=Y0LUZ7gbWbk), on ClojureDeutschland, by Hans H\u00fcbner. It discusses many advanced CL features and their interest today: rich possibilities of keyword arguments, dynamic scope (catching exceptions and stopping early in the callstack) (doesn't work with threads), the object system (generics, before/after/around methods), the Meta Object Protocol, declarative optimizations, the advanced debugger, the \"big\" size of programs but their **near to 0** start up time, and then why he works with Clojure today.\n- the [CLASP](https://www.youtube.com/watch?v=8X69_42Mj-g) video is impressive (LLVM and C++ for molecular metaprogramming)\n\nI'm more into written material and I had to dig a bit to discover those that got me hooked:\n\n- http://lisp-lang.org/: excellent propaganda :) with success stories and straight to the point tutorials,\n- the book [Common Lisp recipes](http://weitz.de/cl-recipes/) which is a modern one, written in 2016. It's more than recipes, it's a CL advanced guide that doesn't teach lisp basics.\n- great [blog posts](http://malisper.me/category/debugging-common-lisp/) on debugging common lisp \n- the [Series](https://github.com/tokenrove/series/wiki) package is very curious. It looks neat -functional programming without any runtime penalty at all, since it transforms the program into imperative style, but is underdocumented, looks like it's left abandonned, I wonder if anybody uses that\u2026\n- the awesome list has many useful libraries (dictionnaries `{` syntax, sets, immutable data structures,\u2026),\n- I summed up my foundings on web development on [this SO answer](https://stackoverflow.com/questions/1275547/how-i-can-do-web-programming-with-lisp-or-scheme#42838145). There's quite a lot but IMO it isn't easy to put up a working stack.\n- **edit**: [Portacle](https://shinmera.github.io/portacle/) is the easiest way to get started: a portable and multiplatform dev environment, shipping Emacs25, SBCL, Slime, Quicklisp and Git !\n\nI'll still program in python professionally so I don't want to bother with memory hogs, long startup times and enormous stacktraces, I'll carry on learning stuff with CL. And I see community efforts on modern documentation and modern idioms, this is positive. Unless I find a nicer lisp, of which [Lisp Flavoured Erlang](http://docs.lfe.io/) could be a candidate, but it's even tinier and it has nearly no editor support ! ", "edited": 1492368147.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t really know videos but:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;just watched &lt;a href=\"https://www.youtube.com/watch?v=Y0LUZ7gbWbk\"&gt;Is Clojure an acceptable lisp ?&lt;/a&gt;, on ClojureDeutschland, by Hans H\u00fcbner. It discusses many advanced CL features and their interest today: rich possibilities of keyword arguments, dynamic scope (catching exceptions and stopping early in the callstack) (doesn&amp;#39;t work with threads), the object system (generics, before/after/around methods), the Meta Object Protocol, declarative optimizations, the advanced debugger, the &amp;quot;big&amp;quot; size of programs but their &lt;strong&gt;near to 0&lt;/strong&gt; start up time, and then why he works with Clojure today.&lt;/li&gt;\n&lt;li&gt;the &lt;a href=\"https://www.youtube.com/watch?v=8X69_42Mj-g\"&gt;CLASP&lt;/a&gt; video is impressive (LLVM and C++ for molecular metaprogramming)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;m more into written material and I had to dig a bit to discover those that got me hooked:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"http://lisp-lang.org/:\"&gt;http://lisp-lang.org/:&lt;/a&gt; excellent propaganda :) with success stories and straight to the point tutorials,&lt;/li&gt;\n&lt;li&gt;the book &lt;a href=\"http://weitz.de/cl-recipes/\"&gt;Common Lisp recipes&lt;/a&gt; which is a modern one, written in 2016. It&amp;#39;s more than recipes, it&amp;#39;s a CL advanced guide that doesn&amp;#39;t teach lisp basics.&lt;/li&gt;\n&lt;li&gt;great &lt;a href=\"http://malisper.me/category/debugging-common-lisp/\"&gt;blog posts&lt;/a&gt; on debugging common lisp &lt;/li&gt;\n&lt;li&gt;the &lt;a href=\"https://github.com/tokenrove/series/wiki\"&gt;Series&lt;/a&gt; package is very curious. It looks neat -functional programming without any runtime penalty at all, since it transforms the program into imperative style, but is underdocumented, looks like it&amp;#39;s left abandonned, I wonder if anybody uses that\u2026&lt;/li&gt;\n&lt;li&gt;the awesome list has many useful libraries (dictionnaries &lt;code&gt;{&lt;/code&gt; syntax, sets, immutable data structures,\u2026),&lt;/li&gt;\n&lt;li&gt;I summed up my foundings on web development on &lt;a href=\"https://stackoverflow.com/questions/1275547/how-i-can-do-web-programming-with-lisp-or-scheme#42838145\"&gt;this SO answer&lt;/a&gt;. There&amp;#39;s quite a lot but IMO it isn&amp;#39;t easy to put up a working stack.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;edit&lt;/strong&gt;: &lt;a href=\"https://shinmera.github.io/portacle/\"&gt;Portacle&lt;/a&gt; is the easiest way to get started: a portable and multiplatform dev environment, shipping Emacs25, SBCL, Slime, Quicklisp and Git !&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;ll still program in python professionally so I don&amp;#39;t want to bother with memory hogs, long startup times and enormous stacktraces, I&amp;#39;ll carry on learning stuff with CL. And I see community efforts on modern documentation and modern idioms, this is positive. Unless I find a nicer lisp, of which &lt;a href=\"http://docs.lfe.io/\"&gt;Lisp Flavoured Erlang&lt;/a&gt; could be a candidate, but it&amp;#39;s even tinier and it has nearly no editor support ! &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgcclx2", "score_hidden": false, "stickied": false, "created": 1492394882.0, "created_utc": 1492366082.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbvjyb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "athousandcounts", "parent_id": "t1_dgaient", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "What video on CL do you recommend?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What video on CL do you recommend?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbvjyb", "score_hidden": false, "stickied": false, "created": 1492363108.0, "created_utc": 1492334308.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaient", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9m6u2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I'll give the talk a try. For notice, in CL threading macros are not built-in but as for any language construct, there is a library, in that case cl-arrows https://github.com/nightfly19/cl-arrows (and another one).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ll give the talk a try. For notice, in CL threading macros are not built-in but as for any language construct, there is a library, in that case cl-arrows &lt;a href=\"https://github.com/nightfly19/cl-arrows\"&gt;https://github.com/nightfly19/cl-arrows&lt;/a&gt; (and another one).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaient", "score_hidden": false, "stickied": false, "created": 1492279862.0, "created_utc": 1492251062.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9m6u2", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "athousandcounts", "parent_id": "t1_dg9copf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I find `[` and `{` much easier to read. Common Lisp is re-using the same syntax for various purposes (list, function parameter list, et cetera). Also the idiomatic thread-first and thread-list macros help with reducing parens. \n\nIf you haven't seen in I can highly recommend watching [Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy). Here the author of Clojure explains his philosophy. Great talk, no matter what language you're using.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I find &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;{&lt;/code&gt; much easier to read. Common Lisp is re-using the same syntax for various purposes (list, function parameter list, et cetera). Also the idiomatic thread-first and thread-list macros help with reducing parens. &lt;/p&gt;\n\n&lt;p&gt;If you haven&amp;#39;t seen in I can highly recommend watching &lt;a href=\"https://www.infoq.com/presentations/Simple-Made-Easy\"&gt;Simple Made Easy&lt;/a&gt;. Here the author of Clojure explains his philosophy. Great talk, no matter what language you&amp;#39;re using.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9m6u2", "score_hidden": false, "stickied": false, "created": 1492226806.0, "created_utc": 1492198006.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9u87w", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "bobthecimmerian", "parent_id": "t1_dg9i0hg", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Thanks.  dzecniv below posted a reference to a StackOverflow question he or she posted, and some other people answer the question there in useful detail.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks.  dzecniv below posted a reference to a StackOverflow question he or she posted, and some other people answer the question there in useful detail.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9u87w", "score_hidden": false, "stickied": false, "created": 1492236758.0, "created_utc": 1492207958.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9i0hg", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bik1230", "parent_id": "t1_dg9e8sg", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "You kinda need a bunch of different equality operators, for different situations. ``equal`` is the most generalised, and if you just need to check if two things look the same you can use that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You kinda need a bunch of different equality operators, for different situations. &lt;code&gt;equal&lt;/code&gt; is the most generalised, and if you just need to check if two things look the same you can use that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9i0hg", "score_hidden": false, "stickied": false, "created": 1492221786.0, "created_utc": 1492192986.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9u6l9", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "bobthecimmerian", "parent_id": "t1_dg9g6zc", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Thanks for doing that!  I'm learning things from the answers being posted.  It looks like 'eq' is equivalent to the Java '==' and 'equal' is equivalent to the Java 'equals'.  (Well, I should say the reverse since of course Java is over thirty years younger than Lisp.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for doing that!  I&amp;#39;m learning things from the answers being posted.  It looks like &amp;#39;eq&amp;#39; is equivalent to the Java &amp;#39;==&amp;#39; and &amp;#39;equal&amp;#39; is equivalent to the Java &amp;#39;equals&amp;#39;.  (Well, I should say the reverse since of course Java is over thirty years younger than Lisp.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9u6l9", "score_hidden": false, "stickied": false, "created": 1492236697.0, "created_utc": 1492207897.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9g6zc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9e8sg", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "thanks for the input. I so much agree for CL operators\u2026 I don't get it. I wanted to ask this for a while, so now I\u00a0did: https://stackoverflow.com/questions/43416293/why-is-there-no-generic-operators-for-common-lisp let's see.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;thanks for the input. I so much agree for CL operators\u2026 I don&amp;#39;t get it. I wanted to ask this for a while, so now I\u00a0did: &lt;a href=\"https://stackoverflow.com/questions/43416293/why-is-there-no-generic-operators-for-common-lisp\"&gt;https://stackoverflow.com/questions/43416293/why-is-there-no-generic-operators-for-common-lisp&lt;/a&gt; let&amp;#39;s see.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9g6zc", "score_hidden": false, "stickied": false, "created": 1492219670.0, "created_utc": 1492190870.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9e8sg", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "bobthecimmerian", "parent_id": "t1_dg9copf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Thanks for the awesome list, that's pretty cool.\n\nI like both languages.  But as a minor expression of preference, I really appreciate the way Clojure delimits function parameter lists with '[' and ']' instead of '(' and ')'.  And the different versions of 'equals' in Common Lisp is one of the first things I encountered that made me crazy.  '==' vs. 'equals' is a big stumbling block for Java novices, and there's only two options to switch between.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for the awesome list, that&amp;#39;s pretty cool.&lt;/p&gt;\n\n&lt;p&gt;I like both languages.  But as a minor expression of preference, I really appreciate the way Clojure delimits function parameter lists with &amp;#39;[&amp;#39; and &amp;#39;]&amp;#39; instead of &amp;#39;(&amp;#39; and &amp;#39;)&amp;#39;.  And the different versions of &amp;#39;equals&amp;#39; in Common Lisp is one of the first things I encountered that made me crazy.  &amp;#39;==&amp;#39; vs. &amp;#39;equals&amp;#39; is a big stumbling block for Java novices, and there&amp;#39;s only two options to switch between.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9e8sg", "score_hidden": false, "stickied": false, "created": 1492217442.0, "created_utc": 1492188642.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9t0y0", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "mac", "parent_id": "t1_dg9klp6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Lisp 1958, COBOL 1959. https://en.wikipedia.org/wiki/History_of_programming_languages", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lisp 1958, COBOL 1959. &lt;a href=\"https://en.wikipedia.org/wiki/History_of_programming_languages\"&gt;https://en.wikipedia.org/wiki/History_of_programming_languages&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9t0y0", "score_hidden": false, "stickied": false, "created": 1492235190.0, "created_utc": 1492206390.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgaj5yu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9klp6", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I claim this is not hard to read:\n\n    @route app \"/\"\n    (defview index ()\n      (if (lucerne-auth:logged-in-p)\n          ;; Serve the user's timeline\n          (let* ((user (current-user)))\n            (render-template (+timeline+)\n                             :username (utweet.models:user-username user)\n                             :name (utweet.models:user-full-name user)\n                             :tweets (display-tweets (utweet.models:user-timeline user))))\n          (render-template (+index+))))\n\nreal world example from https://github.com/eudoxia0/lucerne/blob/master/examples/utweet/views.lisp", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I claim this is not hard to read:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;@route app &amp;quot;/&amp;quot;\n(defview index ()\n  (if (lucerne-auth:logged-in-p)\n      ;; Serve the user&amp;#39;s timeline\n      (let* ((user (current-user)))\n        (render-template (+timeline+)\n                         :username (utweet.models:user-username user)\n                         :name (utweet.models:user-full-name user)\n                         :tweets (display-tweets (utweet.models:user-timeline user))))\n      (render-template (+index+))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;real world example from &lt;a href=\"https://github.com/eudoxia0/lucerne/blob/master/examples/utweet/views.lisp\"&gt;https://github.com/eudoxia0/lucerne/blob/master/examples/utweet/views.lisp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaj5yu", "score_hidden": false, "stickied": false, "created": 1492282253.0, "created_utc": 1492253453.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9klp6", "gilded": 0, "archived": false, "score": -8, "report_reasons": null, "author": "shevegen", "parent_id": "t1_dg9copf", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Lisp is very hard to read due to the spacing of the ()'s.\n\nWhen you filter the () away it becomes a bit easier to do. Some scheme code is semi-readable. But that was like 50 years ago, we have better languages these days.\n\nLisp is like the old grandpa everyone thinks to have been cool a long time ago - not as old as COBOL-headgrandgrandpa but getting close.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lisp is very hard to read due to the spacing of the ()&amp;#39;s.&lt;/p&gt;\n\n&lt;p&gt;When you filter the () away it becomes a bit easier to do. Some scheme code is semi-readable. But that was like 50 years ago, we have better languages these days.&lt;/p&gt;\n\n&lt;p&gt;Lisp is like the old grandpa everyone thinks to have been cool a long time ago - not as old as COBOL-headgrandgrandpa but getting close.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9klp6", "score_hidden": false, "stickied": false, "created": 1492224880.0, "created_utc": 1492196080.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": -8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9copf", "gilded": 0, "archived": false, "score": 10, "report_reasons": null, "author": "dzecniv", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "On Common Lisp, I agree with the criticisms except \n&gt; the code was very difficult to read\n\nI find it very easy, always well expressed, with concise functions. And I find Clojure's harder, with more `[`, `{` and the same number of other symbols (`#`, `*`). \n\nAnyway, I'm in the process of trying to go from python to CL. The CL ecosystem is quite good nowadays (equivalents of pip, venvs, pyenv, implementations (even for the JVM or iOS), CI, sphinx, readthedocs, wsgi, setup.py,,\u2026), it's moving, we can do quite a lot ([awesome list](https://github.com/CodyReichert/awesome-cl)), it has unique features but yeah, the ecosystem is tiny compared to clojure's\u2026\n\nps: interested ? http://lisp-lang.org/ !", "edited": 1492187101.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On Common Lisp, I agree with the criticisms except &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;the code was very difficult to read&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I find it very easy, always well expressed, with concise functions. And I find Clojure&amp;#39;s harder, with more &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt; and the same number of other symbols (&lt;code&gt;#&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;). &lt;/p&gt;\n\n&lt;p&gt;Anyway, I&amp;#39;m in the process of trying to go from python to CL. The CL ecosystem is quite good nowadays (equivalents of pip, venvs, pyenv, implementations (even for the JVM or iOS), CI, sphinx, readthedocs, wsgi, setup.py,,\u2026), it&amp;#39;s moving, we can do quite a lot (&lt;a href=\"https://github.com/CodyReichert/awesome-cl\"&gt;awesome list&lt;/a&gt;), it has unique features but yeah, the ecosystem is tiny compared to clojure&amp;#39;s\u2026&lt;/p&gt;\n\n&lt;p&gt;ps: interested ? &lt;a href=\"http://lisp-lang.org/\"&gt;http://lisp-lang.org/&lt;/a&gt; !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9copf", "score_hidden": false, "stickied": false, "created": 1492215694.0, "created_utc": 1492186894.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9vl8d", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9feq4", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "no not all, it's juste because I know I\u00a0can drop any language feature I\u00a0want in my code, with the same syntax and I\u00a0like it, it's consistent (pipes, pattern matching ? Same syntax, and right now (no need to wait for the language to implement them (this is not necessarily due to parens, but to \"code is data\" (homoiconicity (nice word eh ?))))).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;no not all, it&amp;#39;s juste because I know I\u00a0can drop any language feature I\u00a0want in my code, with the same syntax and I\u00a0like it, it&amp;#39;s consistent (pipes, pattern matching ? Same syntax, and right now (no need to wait for the language to implement them (this is not necessarily due to parens, but to &amp;quot;code is data&amp;quot; (homoiconicity (nice word eh ?))))).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9vl8d", "score_hidden": false, "stickied": false, "created": 1492238583.0, "created_utc": 1492209783.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9feq4", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "stesch", "parent_id": "t1_dg9e2o3", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Sexp maniac. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sexp maniac. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9feq4", "score_hidden": false, "stickied": false, "created": 1492218766.0, "created_utc": 1492189966.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9kynf", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "stesch", "parent_id": "t1_dg9kj7i", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": ")))", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;)))&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9kynf", "score_hidden": false, "stickied": false, "created": 1492225316.0, "created_utc": 1492196516.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 21}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9kj7i", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "shevegen", "parent_id": "t1_dg9e2o3", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "(you(need(parens for sexpressions!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(you(need(parens for sexpressions!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9kj7i", "score_hidden": false, "stickied": false, "created": 1492224798.0, "created_utc": 1492195998.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9e2o3", "gilded": 0, "archived": false, "score": 17, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9chcr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "but sometimes we like s-expressions !", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;but sometimes we like s-expressions !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9e2o3", "score_hidden": false, "stickied": false, "created": 1492217253.0, "created_utc": 1492188453.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 17}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgayvo0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "stesch", "parent_id": "t1_dgavarm", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "The limited lambda of Python makes more compact code nearly impossible. But it's just longer, more explicit code. Not ugly code.\n\nDo you have examples?\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The limited lambda of Python makes more compact code nearly impossible. But it&amp;#39;s just longer, more explicit code. Not ugly code.&lt;/p&gt;\n\n&lt;p&gt;Do you have examples?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgayvo0", "score_hidden": false, "stickied": false, "created": 1492309039.0, "created_utc": 1492280239.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgavarm", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ganglygorilla", "parent_id": "t1_dg9chcr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I point out that python code can look ugly when compared to Clojure code", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I point out that python code can look ugly when compared to Clojure code&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgavarm", "score_hidden": false, "stickied": false, "created": 1492304187.0, "created_utc": 1492275387.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgayrwi", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "stesch", "parent_id": "t1_dgampxw", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "A lot of Python users switched to Go.\n\nRuby users to Elixir.\n\nPHP users to node.js\n\nnode.js users to Go.\n\n\u2026\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A lot of Python users switched to Go.&lt;/p&gt;\n\n&lt;p&gt;Ruby users to Elixir.&lt;/p&gt;\n\n&lt;p&gt;PHP users to node.js&lt;/p&gt;\n\n&lt;p&gt;node.js users to Go.&lt;/p&gt;\n\n&lt;p&gt;\u2026&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgayrwi", "score_hidden": false, "stickied": false, "created": 1492308897.0, "created_utc": 1492280097.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgampxw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "vivainio", "parent_id": "t1_dg9fviq", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "While the theory of operation is very different, I figure a pythonista will be right at home with F#. In surely am, while lisp syntax remains slow to read and messy", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;While the theory of operation is very different, I figure a pythonista will be right at home with F#. In surely am, while lisp syntax remains slow to read and messy&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgampxw", "score_hidden": false, "stickied": false, "created": 1492291055.0, "created_utc": 1492262255.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9fviq", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "PortaMiVia", "parent_id": "t1_dg9chcr", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Those are really different though...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Those are really different though...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9fviq", "score_hidden": false, "stickied": false, "created": 1492219301.0, "created_utc": 1492190501.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9chcr", "gilded": 0, "archived": false, "score": 14, "report_reasons": null, "author": "vivainio", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Article points out Clojure code looking a bit ugly when you compare it with Python. Folks interested in a more pythonic look could find F# more suitable to their tastes", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Article points out Clojure code looking a bit ugly when you compare it with Python. Folks interested in a more pythonic look could find F# more suitable to their tastes&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9chcr", "score_hidden": false, "stickied": false, "created": 1492215470.0, "created_utc": 1492186670.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 14}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9uzzv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dzecniv", "parent_id": "t1_dg9ncci", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I heard about the project but didn't know the blog post, thanks !", "edited": 1492209861.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I heard about the project but didn&amp;#39;t know the blog post, thanks !&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9uzzv", "score_hidden": false, "stickied": false, "created": 1492237781.0, "created_utc": 1492208981.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ncci", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "lispm", "parent_id": "t1_dg9dpwj", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "http://pgloader.io\n\nhttp://tapoueh.org/blog/2014/05/14-pgloader-got-faster.html\n\n&gt; \"I switched from Python to Lisp because I wanted a modern language\" ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://pgloader.io\"&gt;http://pgloader.io&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://tapoueh.org/blog/2014/05/14-pgloader-got-faster.html\"&gt;http://tapoueh.org/blog/2014/05/14-pgloader-got-faster.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&amp;quot;I switched from Python to Lisp because I wanted a modern language&amp;quot; &lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9ncci", "score_hidden": false, "stickied": false, "created": 1492228187.0, "created_utc": 1492199387.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9dpwj", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "dzecniv", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Anyone knows a blog post on a successful experience of migrating to Common Lisp ?! ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Anyone knows a blog post on a successful experience of migrating to Common Lisp ?! &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9dpwj", "score_hidden": false, "stickied": false, "created": 1492216855.0, "created_utc": 1492188055.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dga1a6v", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "cakebotfiend", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "\"I felt I had been wasting my time writing XMLs and type hierarchies, while there was a simpler way to do [just] about everything: dynamic typing gave me polymorphism for free, the data structures were built-in and had literals, string manipulation was just amazingly easy, you could have standalone functions and pass them like values, a lot of the Java design patterns were reduced to one-liners\u2026\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;I felt I had been wasting my time writing XMLs and type hierarchies, while there was a simpler way to do [just] about everything: dynamic typing gave me polymorphism for free, the data structures were built-in and had literals, string manipulation was just amazingly easy, you could have standalone functions and pass them like values, a lot of the Java design patterns were reduced to one-liners\u2026&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dga1a6v", "score_hidden": false, "stickied": false, "created": 1492246161.0, "created_utc": 1492217361.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgc2pac", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "jyf", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "as a python developer , clojure is cool from my view, but the ecosystem is not, if leiningen failed on some situation, you need to go down to the shit ocean of java. that's not that pythonic", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;as a python developer , clojure is cool from my view, but the ecosystem is not, if leiningen failed on some situation, you need to go down to the shit ocean of java. that&amp;#39;s not that pythonic&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgc2pac", "score_hidden": false, "stickied": false, "created": 1492381304.0, "created_utc": 1492352504.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dg9sxha", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "kirbyfan64sos", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "*cough* [Hy is a Lisp that compiles to a Python AST](http://docs.hylang.org/en/latest/) *cough*", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;cough&lt;/em&gt; &lt;a href=\"http://docs.hylang.org/en/latest/\"&gt;Hy is a Lisp that compiles to a Python AST&lt;/a&gt; &lt;em&gt;cough&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9sxha", "score_hidden": false, "stickied": false, "created": 1492235068.0, "created_utc": 1492206268.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgbfx5f", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "the_evergrowing_fool", "parent_id": "t1_dgah2u5", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Is there anything to like about the language?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is there anything to like about the language?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgbfx5f", "score_hidden": false, "stickied": false, "created": 1492332774.0, "created_utc": 1492303974.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgah2u5", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ArmoredPancake", "parent_id": "t1_dg9mg36", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "And why is that?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And why is that?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgah2u5", "score_hidden": false, "stickied": false, "created": 1492275578.0, "created_utc": 1492246778.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9mg36", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "the_evergrowing_fool", "parent_id": "t1_dg9khof", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Nobody should.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nobody should.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9mg36", "score_hidden": false, "stickied": false, "created": 1492227109.0, "created_utc": 1492198309.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9khof", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "shevegen", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Guess he was not much of a pythonist then.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Guess he was not much of a pythonist then.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dg9khof", "score_hidden": false, "stickied": false, "created": 1492224746.0, "created_utc": 1492195946.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgb143s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "facundoolano", "parent_id": "t1_dgazpuv", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "Obviously one's more likely to agree with one analogy or another depending on their background. I'm somewhat familiar with literature and creative writing so I tend to see the connections in those areas.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Obviously one&amp;#39;s more likely to agree with one analogy or another depending on their background. I&amp;#39;m somewhat familiar with literature and creative writing so I tend to see the connections in those areas.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgb143s", "score_hidden": false, "stickied": false, "created": 1492312088.0, "created_utc": 1492283288.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgazpuv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "facundoolano", "parent_id": "t1_dgaudm2", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "It would've been pretentious to assert that, but I did say it was half-joking. The half-serious part is that I'm convinced that there's a lot in common between the creative process of writing and the creative process of programming.\n\nI've seen people call programming a science, a craft and an art; comparing it to math, engineering, architecture, urban planning and even painting. Most of those analogies aren't usually considered pretentious, yet I think programming bears more similarities with writing a poem or a short story than with designing a building or proving a theorem.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It would&amp;#39;ve been pretentious to assert that, but I did say it was half-joking. The half-serious part is that I&amp;#39;m convinced that there&amp;#39;s a lot in common between the creative process of writing and the creative process of programming.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve seen people call programming a science, a craft and an art; comparing it to math, engineering, architecture, urban planning and even painting. Most of those analogies aren&amp;#39;t usually considered pretentious, yet I think programming bears more similarities with writing a poem or a short story than with designing a building or proving a theorem.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgazpuv", "score_hidden": false, "stickied": false, "created": 1492310211.0, "created_utc": 1492281411.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgaudm2", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "lihang123", "parent_id": "t1_dgau9ql", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I know, you guys have absolutely no capacity to detect or police pretentious bullshit", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know, you guys have absolutely no capacity to detect or police pretentious bullshit&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaudm2", "score_hidden": false, "stickied": false, "created": 1492302884.0, "created_utc": 1492274084.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgau9ql", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pyotrgalois", "parent_id": "t1_dgau7bp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I don't get why you say that ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t get why you say that &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgau9ql", "score_hidden": false, "stickied": false, "created": 1492302733.0, "created_utc": 1492273933.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "removal_reason": null, "link_id": "t3_65ct5j", "likes": null, "replies": "", "user_reports": [], "id": "dgaywyj", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "stesch", "parent_id": "t1_dgau7bp", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "I know, right? We all know that programming is like painting.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know, right? We all know that programming is like painting.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgaywyj", "score_hidden": false, "stickied": false, "created": 1492309091.0, "created_utc": 1492280291.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dgau7bp", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "lihang123", "parent_id": "t3_65ct5j", "subreddit_name_prefixed": "r/programming", "controversiality": 0, "body": "&gt; Sometimes I say, half-joking, that programming is a branch of literature.\n\nIs everyone in this industry a massive wanker? Why am I doing this shit...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Sometimes I say, half-joking, that programming is a branch of literature.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Is everyone in this industry a massive wanker? Why am I doing this shit...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "programming", "name": "t1_dgau7bp", "score_hidden": false, "stickied": false, "created": 1492302640.0, "created_utc": 1492273840.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}]