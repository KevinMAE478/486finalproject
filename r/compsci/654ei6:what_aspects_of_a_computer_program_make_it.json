[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Specifically, are there certain frameworks involved?  Or is it just the syntax?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Specifically, are there certain frameworks involved?  Or is it just the syntax?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "654ei6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 8, "report_reasons": null, "author": "Neineleven82", "saved": false, "mod_reports": [], "name": "t3_654ei6", "subreddit_name_prefixed": "r/compsci", "approved_by": null, "over_18": false, "domain": "self.compsci", "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qhmr", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/compsci/comments/654ei6/what_aspects_of_a_computer_program_make_it/", "num_reports": null, "locked": false, "stickied": false, "created": 1492103816.0, "url": "https://www.reddit.com/r/compsci/comments/654ei6/what_aspects_of_a_computer_program_make_it/", "author_flair_text": null, "quarantine": false, "title": "What aspects of a computer program make it compatible with certain operating systems, and not others?", "created_utc": 1492075016.0, "distinguished": null, "media": null, "upvote_ratio": 0.7, "num_comments": 6, "visited": false, "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": "", "user_reports": [], "id": "dg7eohj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rockyearth", "parent_id": "t1_dg7eisq", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "[Testing the WSL](https://blogs.msdn.microsoft.com/wsl/2017/04/11/testing-the-windows-subsystem-for-linux/) is a great article released two days ago, they've done an *outstanding* job supporting Linux system calls (and developed a great testing and fuzzing framework). ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://blogs.msdn.microsoft.com/wsl/2017/04/11/testing-the-windows-subsystem-for-linux/\"&gt;Testing the WSL&lt;/a&gt; is a great article released two days ago, they&amp;#39;ve done an &lt;em&gt;outstanding&lt;/em&gt; job supporting Linux system calls (and developed a great testing and fuzzing framework). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7eohj", "score_hidden": false, "stickied": false, "created": 1492110572.0, "created_utc": 1492081772.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7eisq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "vytah", "parent_id": "t1_dg7e4j3", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "Not only compiled, but also run without recompiling, thanks to things like Windows Subsystem for Linux on Windows and Linux Binary Compatibility on FreeBSD. The story is similar to that to Wine, except that they can use many non-kernel facing libraries directly instead of reimplementing them.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not only compiled, but also run without recompiling, thanks to things like Windows Subsystem for Linux on Windows and Linux Binary Compatibility on FreeBSD. The story is similar to that to Wine, except that they can use many non-kernel facing libraries directly instead of reimplementing them.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7eisq", "score_hidden": false, "stickied": false, "created": 1492110168.0, "created_utc": 1492081368.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7e4j3", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "rockyearth", "parent_id": "t1_dg7dmh3", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "Great answer, you covered almost everything. Most Linux programs like the GNU Binutils and gcc can be compiled for any platform, assuming the target can provide the C POSIX library and there is a cross-compiler for that target.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great answer, you covered almost everything. Most Linux programs like the GNU Binutils and gcc can be compiled for any platform, assuming the target can provide the C POSIX library and there is a cross-compiler for that target.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7e4j3", "score_hidden": false, "stickied": false, "created": 1492109092.0, "created_utc": 1492080292.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": "", "user_reports": [], "id": "dg7jrut", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Snaipe_S", "parent_id": "t1_dg7dmh3", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "nit: dwarf isn't really an executable format, and can be used in any format implementing sections; ELF of course but also PE (as done by mingw-gcc) or Mach-O", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;nit: dwarf isn&amp;#39;t really an executable format, and can be used in any format implementing sections; ELF of course but also PE (as done by mingw-gcc) or Mach-O&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7jrut", "score_hidden": false, "stickied": false, "created": 1492119480.0, "created_utc": 1492090680.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7dmh3", "gilded": 0, "archived": false, "score": 21, "report_reasons": null, "author": "vytah", "parent_id": "t3_654ei6", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "Let's assume we're talking about native programs:\n\n1. First, obviously, processor instruction set.\n\n2. Executable file format. Examples: https://en.wikipedia.org/wiki/COM_file https://en.wikipedia.org/wiki/Portable_Executable https://en.wikipedia.org/wiki/Executable_and_Linkable_Format https://en.wikipedia.org/wiki/DWARF\n\n3. Required dynamically loaded libraries.\n\n4. Expected behaviour of those libraries, sometimes even relying on security bugs in old versions of the library (that's why Windows carries around old versions of some libraries and uses them in compatibility mode)\n\n5. If the program directly calls the OS, then also system call method used and the behaviour of system calls that are used: https://en.wikipedia.org/wiki/System_call\n\n6. And sometimes also other various things, like existence of certain files, filesystem used, and so on (for example, Adobe Photoshop for Mac used to require, and probably still does, that you run it from a case-insensitive filesystem)\n\nFor example, let's look at Wine. It achieves compatibility with many Windows programs on a Linux host. It does it by following:\n\n* requiring x86 or x64 instruction set from the host\n\n* understanding and loading PE executable format\n\n* providing necessary libraries with behaviour similar enough to their Windows counterparts\n\n* since most Windows user-facing programs don't do system calls to the Windows kernel directly, but use either kernel32.dll and ntdll.dll, it's enough to provide custom implementations for those two\n\n* DOS syscalls are done using software interrupts, and Wine somehow handles those on its own (I'm not sure here)\n\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s assume we&amp;#39;re talking about native programs:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;First, obviously, processor instruction set.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Executable file format. Examples: &lt;a href=\"https://en.wikipedia.org/wiki/COM_file\"&gt;https://en.wikipedia.org/wiki/COM_file&lt;/a&gt; &lt;a href=\"https://en.wikipedia.org/wiki/Portable_Executable\"&gt;https://en.wikipedia.org/wiki/Portable_Executable&lt;/a&gt; &lt;a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\"&gt;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&lt;/a&gt; &lt;a href=\"https://en.wikipedia.org/wiki/DWARF\"&gt;https://en.wikipedia.org/wiki/DWARF&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Required dynamically loaded libraries.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Expected behaviour of those libraries, sometimes even relying on security bugs in old versions of the library (that&amp;#39;s why Windows carries around old versions of some libraries and uses them in compatibility mode)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the program directly calls the OS, then also system call method used and the behaviour of system calls that are used: &lt;a href=\"https://en.wikipedia.org/wiki/System_call\"&gt;https://en.wikipedia.org/wiki/System_call&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And sometimes also other various things, like existence of certain files, filesystem used, and so on (for example, Adobe Photoshop for Mac used to require, and probably still does, that you run it from a case-insensitive filesystem)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For example, let&amp;#39;s look at Wine. It achieves compatibility with many Windows programs on a Linux host. It does it by following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;requiring x86 or x64 instruction set from the host&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;understanding and loading PE executable format&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;providing necessary libraries with behaviour similar enough to their Windows counterparts&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;since most Windows user-facing programs don&amp;#39;t do system calls to the Windows kernel directly, but use either kernel32.dll and ntdll.dll, it&amp;#39;s enough to provide custom implementations for those two&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;DOS syscalls are done using software interrupts, and Wine somehow handles those on its own (I&amp;#39;m not sure here)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7dmh3", "score_hidden": false, "stickied": false, "created": 1492107647.0, "created_utc": 1492078847.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 21}}, {"kind": "t1", "data": {"author_cakeday": true, "subreddit_id": "t5_2qhmr", "removal_reason": null, "link_id": "t3_654ei6", "likes": null, "replies": "", "user_reports": [], "id": "dg7ckmv", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "beknowly", "parent_id": "t3_654ei6", "subreddit_name_prefixed": "r/compsci", "controversiality": 0, "body": "Not using platform specific features.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not using platform specific features.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "compsci", "name": "t1_dg7ckmv", "score_hidden": false, "stickied": false, "created": 1492104458.0, "created_utc": 1492075658.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}]