[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Simplify square roots in the form &lt;code&gt;(a sqrt(b))/(c sqrt(d))&lt;/code&gt;. A simplified radical should have no square roots in the denominator and no number in a square root should have a square factor. For example, the input &lt;code&gt;2 5 5 10&lt;/code&gt; for &lt;code&gt;a b c d&lt;/code&gt;, respectively, should simplify to &lt;code&gt;1 2 5&lt;/code&gt; where a=1, b=2, and c=5.&lt;/p&gt;\n\n&lt;h1&gt;Output description&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; a b c \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(d should not exist after simplifying)&lt;/p&gt;\n\n&lt;h1&gt;Challenge input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;45 1465 26 15\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;15 879 26\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by user &lt;a href=\"/u/alchzh\"&gt;/u/alchzh&lt;/a&gt; on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;, many thanks. If you have an idea, please share it there and we might use it!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\nSimplify square roots in the form `(a sqrt(b))/(c sqrt(d))`. A simplified radical should have no square roots in the denominator and no number in a square root should have a square factor. For example, the input `2 5 5 10` for `a b c d`, respectively, should simplify to `1 2 5` where a=1, b=2, and c=5.\n\n#Output description\n \n     a b c \n\n(d should not exist after simplifying)\n  \n#Challenge input\n\n    45 1465 26 15\n\n#Challenge output\n\n    15 879 26\n\n# Credit\nThis challenge was suggested by user /u/alchzh on /r/dailyprogrammer_ideas, many thanks. If you have an idea, please share it there and we might use it!\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64y4cf", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 66, "report_reasons": null, "author": "jnazario", "saved": false, "mod_reports": [], "name": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "approved_by": null, "over_18": false, "domain": "self.dailyprogrammer", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/", "num_reports": null, "locked": false, "stickied": false, "created": 1492032362.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/", "author_flair_text": "2 0", "quarantine": false, "title": "[2017-04-12] Challenge #310 [Intermediate] Simplifying square roots", "created_utc": 1492003562.0, "distinguished": null, "media": null, "upvote_ratio": 0.93, "num_comments": 41, "visited": false, "subreddit_type": "restricted", "ups": 66}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dgbplwj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "i3aizey", "parent_id": "t1_dgbf3s3", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "It's my own little class, I just got tired of System.out.write not handling arrays properly, it's essentially just an extension on that", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s my own little class, I just got tired of System.out.write not handling arrays properly, it&amp;#39;s essentially just an extension on that&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbplwj", "score_hidden": false, "stickied": false, "created": 1492347718.0, "created_utc": 1492318918.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbf3s3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "VomBaTN", "parent_id": "t1_dg5y0y7", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "&gt; lsm.helpers.Note\n\nWhat is that exactly ? i can't find anything about it...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;lsm.helpers.Note&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What is that exactly ? i can&amp;#39;t find anything about it...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbf3s3", "score_hidden": false, "stickied": false, "created": 1492331629.0, "created_utc": 1492302829.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5y0y7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "i3aizey", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Java**\n\nSemi bruteforcing :/\n\nExplanation:\n\nGiven the 2 formulas\n\n    (a * sqrt(b)) / (c * sqrt(d)) = x\n    (a_1 * sqrt(b_1) / c = x\n\nWe need to find a_1 and b_1\n\nI simply do this by isolating a_1 and b_1.\n\nAfterward I brute search 1..Integer.MAX for b_1\n\nLooking for the first number where\n\n    a_1 = x * c / sqrt(b_1)\n\nGives a round number\n\nNote:\n\nround(x) -&gt; rounds number down to at most 8 decimals // My own little function\n\nMath.round -&gt; Rounds number to nearest integer          // Default rounding function in Java\n\nI do this since double can be fiddly with sqrt and rarely gives exact numbers down to the decimals they support.\n\n    package Reddit;\n    \n    import lsm.helpers.Note;\n    \n    import java.math.BigDecimal;\n    import java.math.RoundingMode;\n    \n    public class N310Inter {\n    \n        public static void main(String... args){\n            solve(2, 5, 5, 10); Note.nl();\n            solve(45, 1465, 26, 15); Note.nl();\n        }\n    \n        private static double[] solve(double a, double b, double c, double d){\n            Note.write(\"Input:  \"); Note.write(new double[]{a, b, c, d});\n            double[] res = new double[]{1, 1, c};\n            double temp, alone = ((a * Math.sqrt(b)) / (c * Math.sqrt(d))) * c;\n            for(int i = 1; i &lt; Integer.MAX_VALUE; i++){\n                temp = round(alone / Math.sqrt(i));\n                if(Math.round(temp) == temp){\n                    res[0] = Math.round(temp);\n                    res[1] = i;\n                    break;\n                }\n            }\n            Note.write(\"Output: \"); Note.write(res);\n            return res;\n        }\n    \n        private static double round(double value) {\n            BigDecimal bd = new BigDecimal(value);\n            bd = bd.setScale(8, RoundingMode.HALF_UP);\n            return bd.doubleValue();\n        }\n    }\n    \nOutput:\n\n    Input:  [2.0, 5.0, 5.0, 10.0]\n    Output: [1.0, 2.0, 5.0]\n    \n    Input:  [45.0, 1465.0, 26.0, 15.0]\n    Output: [15.0, 879.0, 26.0]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Semi bruteforcing :/&lt;/p&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;p&gt;Given the 2 formulas&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(a * sqrt(b)) / (c * sqrt(d)) = x\n(a_1 * sqrt(b_1) / c = x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We need to find a_1 and b_1&lt;/p&gt;\n\n&lt;p&gt;I simply do this by isolating a_1 and b_1.&lt;/p&gt;\n\n&lt;p&gt;Afterward I brute search 1..Integer.MAX for b_1&lt;/p&gt;\n\n&lt;p&gt;Looking for the first number where&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a_1 = x * c / sqrt(b_1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Gives a round number&lt;/p&gt;\n\n&lt;p&gt;Note:&lt;/p&gt;\n\n&lt;p&gt;round(x) -&amp;gt; rounds number down to at most 8 decimals // My own little function&lt;/p&gt;\n\n&lt;p&gt;Math.round -&amp;gt; Rounds number to nearest integer          // Default rounding function in Java&lt;/p&gt;\n\n&lt;p&gt;I do this since double can be fiddly with sqrt and rarely gives exact numbers down to the decimals they support.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package Reddit;\n\nimport lsm.helpers.Note;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class N310Inter {\n\n    public static void main(String... args){\n        solve(2, 5, 5, 10); Note.nl();\n        solve(45, 1465, 26, 15); Note.nl();\n    }\n\n    private static double[] solve(double a, double b, double c, double d){\n        Note.write(&amp;quot;Input:  &amp;quot;); Note.write(new double[]{a, b, c, d});\n        double[] res = new double[]{1, 1, c};\n        double temp, alone = ((a * Math.sqrt(b)) / (c * Math.sqrt(d))) * c;\n        for(int i = 1; i &amp;lt; Integer.MAX_VALUE; i++){\n            temp = round(alone / Math.sqrt(i));\n            if(Math.round(temp) == temp){\n                res[0] = Math.round(temp);\n                res[1] = i;\n                break;\n            }\n        }\n        Note.write(&amp;quot;Output: &amp;quot;); Note.write(res);\n        return res;\n    }\n\n    private static double round(double value) {\n        BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(8, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Input:  [2.0, 5.0, 5.0, 10.0]\nOutput: [1.0, 2.0, 5.0]\n\nInput:  [45.0, 1465.0, 26.0, 15.0]\nOutput: [15.0, 879.0, 26.0]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg5y0y7", "score_hidden": false, "stickied": false, "created": 1492036656.0, "created_utc": 1492007856.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg6b5xf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "J_Gamer", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "C++. Pretty sure it should be possible to optimize extracting the square factors, but that would prob take fast prime factorization.\n\n    #include &lt;iostream&gt;\n    #include &lt;numeric&gt;\n    \n    int main() {\n      int a, b, c, d;\n      std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n      \n      //Multiply both nominator and denominator with sqrt(d)\n      c *= d;\n      b *= d;\n      \n      //Extract square factors from b\n      for(int i = 2; ; ++i) {\n        int sq = i*i;\n        if(sq &gt; b) break;\n        while(b % sq == 0) {\n          b /= sq;\n          a *= i;\n        }\n      }\n      \n      //Simplify a/c\n      int gcd = std::gcd(a,c);\n      a /= gcd;\n      c /= gcd;\n      std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; '\\n';\n      return 0;\n    }\n\nExample on [wandbox](https://wandbox.org/permlink/9Dot6HR0pz2AWTDK)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++. Pretty sure it should be possible to optimize extracting the square factors, but that would prob take fast prime factorization.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n\nint main() {\n  int a, b, c, d;\n  std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c &amp;gt;&amp;gt; d;\n\n  //Multiply both nominator and denominator with sqrt(d)\n  c *= d;\n  b *= d;\n\n  //Extract square factors from b\n  for(int i = 2; ; ++i) {\n    int sq = i*i;\n    if(sq &amp;gt; b) break;\n    while(b % sq == 0) {\n      b /= sq;\n      a *= i;\n    }\n  }\n\n  //Simplify a/c\n  int gcd = std::gcd(a,c);\n  a /= gcd;\n  c /= gcd;\n  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n  return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example on &lt;a href=\"https://wandbox.org/permlink/9Dot6HR0pz2AWTDK\"&gt;wandbox&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6b5xf", "score_hidden": false, "stickied": false, "created": 1492050538.0, "created_utc": 1492021738.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg6blvf", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "conceptuality", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3:**\n\nThis solution is to extend the fraction with sqrt(d), thus removing the root in the denominator. Then it extracts the square factors from sqrt(b*d) and finally reduced the rest of the fraction using Euclid's algorithm.\n\nOh, and it uses recursion twice, so I suppose this isn't a wise choice of language...\n\n\n    import numpy as np\n    \n    # finding square factors:\n    def squaresUpTo(n):\n        return [i**2 for i in range(2,int(np.sqrt(n)+1))]\n    \n    def squareFactors(n,previous = []):\n        factors = list(filter(lambda i: n%i == 0, squaresUpTo(n)))\n        if not factors:\n            return (n,previous)\n        \n        new = previous + [factors[-1]]\n        \n        return squareFactors(int(n/factors[-1]),new)\n        \n    # reducing the sum\n    def euclid(n,d):\n        q = n // d\n        r = n - d*q\n        \n        if r == 0:\n            return d\n        else:\n            return euclid(d,r)\n    \n    def reducedFraction(n,d):\n        q = euclid(n,d)\n        \n        return (int(n/q),int(d/q))\n    \n    # main:\n    def reducedRadical(a,b,c,d):\n        newRoot = b*d\n        (y,additionalFactorSquared) = squareFactors(newRoot)\n        \n        (x,z) = reducedFraction(a*int(np.sqrt(additionalFactorSquared)), c*d)\n        \n        return (x,y,z)", "edited": 1492022960.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This solution is to extend the fraction with sqrt(d), thus removing the root in the denominator. Then it extracts the square factors from sqrt(b*d) and finally reduced the rest of the fraction using Euclid&amp;#39;s algorithm.&lt;/p&gt;\n\n&lt;p&gt;Oh, and it uses recursion twice, so I suppose this isn&amp;#39;t a wise choice of language...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import numpy as np\n\n# finding square factors:\ndef squaresUpTo(n):\n    return [i**2 for i in range(2,int(np.sqrt(n)+1))]\n\ndef squareFactors(n,previous = []):\n    factors = list(filter(lambda i: n%i == 0, squaresUpTo(n)))\n    if not factors:\n        return (n,previous)\n\n    new = previous + [factors[-1]]\n\n    return squareFactors(int(n/factors[-1]),new)\n\n# reducing the sum\ndef euclid(n,d):\n    q = n // d\n    r = n - d*q\n\n    if r == 0:\n        return d\n    else:\n        return euclid(d,r)\n\ndef reducedFraction(n,d):\n    q = euclid(n,d)\n\n    return (int(n/q),int(d/q))\n\n# main:\ndef reducedRadical(a,b,c,d):\n    newRoot = b*d\n    (y,additionalFactorSquared) = squareFactors(newRoot)\n\n    (x,z) = reducedFraction(a*int(np.sqrt(additionalFactorSquared)), c*d)\n\n    return (x,y,z)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6blvf", "score_hidden": false, "stickied": false, "created": 1492050987.0, "created_utc": 1492022187.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg8cwh3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Harakou", "parent_id": "t1_dg81hwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I plead temporary insanity.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I plead temporary insanity.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg8cwh3", "score_hidden": false, "stickied": false, "created": 1492152360.0, "created_utc": 1492123560.0, "depth": 4, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg81hwh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Toctave", "parent_id": "t1_dg7va6v", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Haha ok, but dividing by the largest factor first isn't necessary either\n(Still nitpicking.. :) ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haha ok, but dividing by the largest factor first isn&amp;#39;t necessary either\n(Still nitpicking.. :) &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg81hwh", "score_hidden": false, "stickied": false, "created": 1492138979.0, "created_utc": 1492110179.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7va6v", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Harakou", "parent_id": "t1_dg7n6xn", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "That's a cool little operator that I didn't know about before, thanks.\n\nUh, looking at it now, I have no idea. I wanted to be sure that it divided by the largest factors first, but I could have just generated in reverse order. Chalk it up to a mental lapse I guess.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a cool little operator that I didn&amp;#39;t know about before, thanks.&lt;/p&gt;\n\n&lt;p&gt;Uh, looking at it now, I have no idea. I wanted to be sure that it divided by the largest factors first, but I could have just generated in reverse order. Chalk it up to a mental lapse I guess.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7va6v", "score_hidden": false, "stickied": false, "created": 1492132351.0, "created_utc": 1492103551.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7n6xn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Toctave", "parent_id": "t1_dg727h2", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "If I may nitpick just a little, you could use // instead of / in your simplify function to avoid having to apply int(..) to your results.\n\nAlso I don't get why you sort your square factors.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If I may nitpick just a little, you could use // instead of / in your simplify function to avoid having to apply int(..) to your results.&lt;/p&gt;\n\n&lt;p&gt;Also I don&amp;#39;t get why you sort your square factors.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7n6xn", "score_hidden": false, "stickied": false, "created": 1492123664.0, "created_utc": 1492094864.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg727h2", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Harakou", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "###Python\n\n**Explanation:**\n\n    Remove the root from the denominator by multiplying both sides by sqrt(d).\n    Calculate the nontrivial square factors of b by iterating over the squares of all ints 2 &gt;= x &gt;= sqrt(b).\n    Iterate once over the factors from largest to smallest, dividing b by each and multiplying a by its square whenever possible.\n        (Factors are stored in the forms of their square roots, to avoid recalculating roots.)\n    Finally, simplify the fraction a/c by dividing both by their greatest common denominator.\n\n**Code:**\n\n    import math\n    import sys\n\n    def sqrtfactors(n):\n        return sorted((x for x in range(2, math.floor(math.sqrt(n)))\n                        if not n % (x**2)),\n                      reverse=True)\n\n    def simplify(a, b, c, d):\n        # Multiply by sqrt(d)/sqrt(d) to eliminate root in denominator\n        b *= d\n        c *= d\n        d = 1 # Never used again but this hopefully clarifies what's going on\n\n        # Repeatedly factor out square factors of b and mutliply them into a\n        for factor in sqrtfactors(b):\n            while not b % (factor**2):\n                b /= factor**2\n                a *= factor\n\n        # Simplify fraction\n        gcd = math.gcd(a,c)\n        a /= gcd\n        c /= gcd\n\n        return int(a),int(b),int(c)\n\n    def main():\n        if len(sys.argv) &gt; 4:\n            try:\n                a = int(sys.argv[1])\n                b = int(sys.argv[2])\n                c = int(sys.argv[3])\n                d = int(sys.argv[4])\n            except ValueError as e:\n                print(e)\n                print(\"Please enter 4 integers as arguments\")\n                exit(0)\n                \n            print(simplify(a, b, c, d))\n\n    if __name__ == \"__main__\":\n        main()\n\n\n**Output:**\n\n    &gt;&gt;&gt; simplify(2, 5, 5, 10)\n    (1, 2, 5)\n    &gt;&gt;&gt; simplify(45, 1465, 26, 15)\n    (15, 879, 26)\n\n&amp;nbsp;\n\n    $ python 2017-04-12-simplify-square-roots.py 2 5 5 10\n    (1, 2, 5)\n    $ python 2017-04-12-simplify-square-roots.py 45 1465 26 15\n    (15, 879, 26)\n\nEdit: Fixed a bug thanks to /u/HigherFive's test input. Got tripped up on perfect squares because it would only divide once!", "edited": 1492053919.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Python&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Remove the root from the denominator by multiplying both sides by sqrt(d).\nCalculate the nontrivial square factors of b by iterating over the squares of all ints 2 &amp;gt;= x &amp;gt;= sqrt(b).\nIterate once over the factors from largest to smallest, dividing b by each and multiplying a by its square whenever possible.\n    (Factors are stored in the forms of their square roots, to avoid recalculating roots.)\nFinally, simplify the fraction a/c by dividing both by their greatest common denominator.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import math\nimport sys\n\ndef sqrtfactors(n):\n    return sorted((x for x in range(2, math.floor(math.sqrt(n)))\n                    if not n % (x**2)),\n                  reverse=True)\n\ndef simplify(a, b, c, d):\n    # Multiply by sqrt(d)/sqrt(d) to eliminate root in denominator\n    b *= d\n    c *= d\n    d = 1 # Never used again but this hopefully clarifies what&amp;#39;s going on\n\n    # Repeatedly factor out square factors of b and mutliply them into a\n    for factor in sqrtfactors(b):\n        while not b % (factor**2):\n            b /= factor**2\n            a *= factor\n\n    # Simplify fraction\n    gcd = math.gcd(a,c)\n    a /= gcd\n    c /= gcd\n\n    return int(a),int(b),int(c)\n\ndef main():\n    if len(sys.argv) &amp;gt; 4:\n        try:\n            a = int(sys.argv[1])\n            b = int(sys.argv[2])\n            c = int(sys.argv[3])\n            d = int(sys.argv[4])\n        except ValueError as e:\n            print(e)\n            print(&amp;quot;Please enter 4 integers as arguments&amp;quot;)\n            exit(0)\n\n        print(simplify(a, b, c, d))\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; simplify(2, 5, 5, 10)\n(1, 2, 5)\n&amp;gt;&amp;gt;&amp;gt; simplify(45, 1465, 26, 15)\n(15, 879, 26)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ python 2017-04-12-simplify-square-roots.py 2 5 5 10\n(1, 2, 5)\n$ python 2017-04-12-simplify-square-roots.py 45 1465 26 15\n(15, 879, 26)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: Fixed a bug thanks to &lt;a href=\"/u/HigherFive\"&gt;/u/HigherFive&lt;/a&gt;&amp;#39;s test input. Got tripped up on perfect squares because it would only divide once!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg727h2", "score_hidden": false, "stickied": false, "created": 1492082137.0, "created_utc": 1492053337.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg6jxnm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "HigherFive", "parent_id": "t1_dg6jwmi", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6jxnm", "score_hidden": false, "stickied": false, "created": 1492059613.0, "created_utc": 1492030813.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jwmi", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Toctave", "parent_id": "t1_dg6jket", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Good catch, I really didn't think this through, I'll update it asap", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good catch, I really didn&amp;#39;t think this through, I&amp;#39;ll update it asap&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6jwmi", "score_hidden": false, "stickied": false, "created": 1492059580.0, "created_utc": 1492030780.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg9o0ic", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pier4r", "parent_id": "t1_dg9ntcv", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "kudos for the quick fix.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;kudos for the quick fix.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9o0ic", "score_hidden": false, "stickied": false, "created": 1492228989.0, "created_utc": 1492200189.0, "depth": 4, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ntcv", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "HigherFive", "parent_id": "t1_dg9ng29", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Yep, I was wrong. Edited", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep, I was wrong. Edited&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9ntcv", "score_hidden": false, "stickied": false, "created": 1492228751.0, "created_utc": 1492199951.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9ng29", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pier4r", "parent_id": "t1_dg6jket", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "&gt; 1 1 1 16 gives 1 0 2, 1 4 1 is correct\n\nno. There is no need for the root at denominator. Moreover your result gives a wrong result. (4 instead of 0.25)\n\n    1 1 1 16 , correct 1 1 4", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;1 1 1 16 gives 1 0 2, 1 4 1 is correct&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;no. There is no need for the root at denominator. Moreover your result gives a wrong result. (4 instead of 0.25)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 1 1 16 , correct 1 1 4\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9ng29", "score_hidden": false, "stickied": false, "created": 1492228311.0, "created_utc": 1492199511.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dgbgo15", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jacwah", "parent_id": "t1_dgbayaz", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Oops, guess I havent refreshed in a while", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oops, guess I havent refreshed in a while&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbgo15", "score_hidden": false, "stickied": false, "created": 1492333824.0, "created_utc": 1492305024.0, "depth": 4, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbayaz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "HigherFive", "parent_id": "t1_dgbav14", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Yep, you are absolutely right. I corrected my comment earlier, when pier4r brought it up.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep, you are absolutely right. I corrected my comment earlier, when pier4r brought it up.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbayaz", "score_hidden": false, "stickied": false, "created": 1492325704.0, "created_utc": 1492296904.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgbav14", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jacwah", "parent_id": "t1_dg6jket", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Thanks! I discovered a similar issue with my own code.\n\nHowever I think one of your cases are wrong. `1 * sqrt(1) / (1 * sqrt(16)) = 1 / sqrt(16) = 1/4`. Thus `1 1 1 16` should yield `1 1 4`.", "edited": 1492296992.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! I discovered a similar issue with my own code.&lt;/p&gt;\n\n&lt;p&gt;However I think one of your cases are wrong. &lt;code&gt;1 * sqrt(1) / (1 * sqrt(16)) = 1 / sqrt(16) = 1/4&lt;/code&gt;. Thus &lt;code&gt;1 1 1 16&lt;/code&gt; should yield &lt;code&gt;1 1 4&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbav14", "score_hidden": false, "stickied": false, "created": 1492325567.0, "created_utc": 1492296767.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jket", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "HigherFive", "parent_id": "t1_dg5z2ud", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Fails on inputs with 4th+ power factors in the roots (or their product).\n\n`1 16 1 1` gives `8 0 1`, `4 1 1` is correct.\n\n`1 1 1 16` gives `1 0 2`, `1 1 4` is correct.\n\n`1 4 1 4` gives `2 0 1`, `1 1 1` is correct.", "edited": 1492199960.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fails on inputs with 4th+ power factors in the roots (or their product).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;1 16 1 1&lt;/code&gt; gives &lt;code&gt;8 0 1&lt;/code&gt;, &lt;code&gt;4 1 1&lt;/code&gt; is correct.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;1 1 1 16&lt;/code&gt; gives &lt;code&gt;1 0 2&lt;/code&gt;, &lt;code&gt;1 1 4&lt;/code&gt; is correct.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;1 4 1 4&lt;/code&gt; gives &lt;code&gt;2 0 1&lt;/code&gt;, &lt;code&gt;1 1 1&lt;/code&gt; is correct.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6jket", "score_hidden": false, "stickied": false, "created": 1492059210.0, "created_utc": 1492030410.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5z2ud", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Toctave", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3** - O(b*d)\n\n    from math import gcd\n    \n    def square_factors(n):\n    \tfor d in range(2, n):\n    \t\tif n%(d*d) == 0:\n    \t\t\tyield d\n    \n    a, b, c, d = input().split()\n    \n    b *= d\n    c *= d\n    \n    for div in square_factors(b):\n    \twhile b%(div*div)\n    \t\ta *= div\n    \t\tb //= div * div\n    \n    g = gcd(a, c)\n    a //= g\n    c //= g\n    \n    for factor in square_factors(16):\n    \tprint(factor)\n    \n    print(a, b, c)\n\nEDIT : corrected a mistake that /u/HigherFive pointed out ", "edited": 1492153974.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt; - O(b*d)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from math import gcd\n\ndef square_factors(n):\n    for d in range(2, n):\n        if n%(d*d) == 0:\n            yield d\n\na, b, c, d = input().split()\n\nb *= d\nc *= d\n\nfor div in square_factors(b):\n    while b%(div*div)\n        a *= div\n        b //= div * div\n\ng = gcd(a, c)\na //= g\nc //= g\n\nfor factor in square_factors(16):\n    print(factor)\n\nprint(a, b, c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT : corrected a mistake that &lt;a href=\"/u/HigherFive\"&gt;/u/HigherFive&lt;/a&gt; pointed out &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg5z2ud", "score_hidden": false, "stickied": false, "created": 1492037853.0, "created_utc": 1492009053.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg611jf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "popillol", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Go / Golang** [Playground Link](https://play.golang.org/p/jACy3iMIPr). A little longer than the others but more explicitly does each step. Method is as follows:\n\n    1. Multiply fraction by sqrt(d)/sqrt(d) which basically means multiply b and c by d to remove d from the expression\n    2. Simplify root b\n    3. Simplify integer fraction a/c using gcd (greatest common divisor)\n    4. output only the values that make sense\n\nCode:\n\n\tpackage main\n\t\n\timport (\n\t\t\"fmt\"\n\t)\n\t\n\tfunc ssr(a, b, c, d int) {\n\t\tfmt.Printf(\"%d[%d] / %d[%d] --&gt; \", a, b, c, d)\n\t\tb *= d\n\t\tc *= d\n\t\ta, b = simplifyRoot(a, b)\n\t\ta, c = simplifyFrac(a, c)\n\t\toutput(a, b, c)\n\t}\n\t\n\tfunc simplifyRoot(out, in int) (int, int) {\n\t\ti := 2\n\t\tfor i*i &lt;= in {\n\t\t\tif in%(i*i) == 0 {\n\t\t\t\tin = in / (i * i)\n\t\t\t\tout = out * i\n\t\t\t} else {\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t\treturn out, in\n\t}\n\t\n\tfunc simplifyFrac(num, den int) (int, int) {\n\t\tvar gcd func(a, b int) int\n\t\tgcd = func(a, b int) int {\n\t\t\tif a == b {\n\t\t\t\treturn a\n\t\t\t}\n\t\t\tif a &gt; b {\n\t\t\t\treturn gcd(a-b, b)\n\t\t\t}\n\t\t\treturn gcd(a, b-a)\n\t\t}\n\t\ti := gcd(num, den)\n\t\treturn num / i, den / i\n\t}\n\t\n\tfunc output(a, b, c int) {\n\t\tswitch {\n\t\tcase b == 1 &amp;&amp; c == 1:\n\t\t\tfmt.Println(a)\n\t\tcase b == 1:\n\t\t\tfmt.Println(a, \"/\", c)\n\t\tcase c == 1:\n\t\t\tfmt.Printf(\"%d[%d]\\n\", a, b)\n\t\tdefault:\n\t\t\tfmt.Printf(\"%d[%d] / %d\\n\", a, b, c)\n\t\t}\n\t}\n\t\n\tfunc main() {\n\t\tssr(2, 5, 5, 10)\n\t\tssr(45, 1465, 26, 15)\n\t}\n\nOutput (uses [] to mean square root)\n\n    input --&gt; output\n    2[5] / 5[10] --&gt; 1[2] / 5\n    45[1465] / 26[15] --&gt; 15[879] / 26", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Go / Golang&lt;/strong&gt; &lt;a href=\"https://play.golang.org/p/jACy3iMIPr\"&gt;Playground Link&lt;/a&gt;. A little longer than the others but more explicitly does each step. Method is as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1. Multiply fraction by sqrt(d)/sqrt(d) which basically means multiply b and c by d to remove d from the expression\n2. Simplify root b\n3. Simplify integer fraction a/c using gcd (greatest common divisor)\n4. output only the values that make sense\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n)\n\nfunc ssr(a, b, c, d int) {\n    fmt.Printf(&amp;quot;%d[%d] / %d[%d] --&amp;gt; &amp;quot;, a, b, c, d)\n    b *= d\n    c *= d\n    a, b = simplifyRoot(a, b)\n    a, c = simplifyFrac(a, c)\n    output(a, b, c)\n}\n\nfunc simplifyRoot(out, in int) (int, int) {\n    i := 2\n    for i*i &amp;lt;= in {\n        if in%(i*i) == 0 {\n            in = in / (i * i)\n            out = out * i\n        } else {\n            i++\n        }\n    }\n    return out, in\n}\n\nfunc simplifyFrac(num, den int) (int, int) {\n    var gcd func(a, b int) int\n    gcd = func(a, b int) int {\n        if a == b {\n            return a\n        }\n        if a &amp;gt; b {\n            return gcd(a-b, b)\n        }\n        return gcd(a, b-a)\n    }\n    i := gcd(num, den)\n    return num / i, den / i\n}\n\nfunc output(a, b, c int) {\n    switch {\n    case b == 1 &amp;amp;&amp;amp; c == 1:\n        fmt.Println(a)\n    case b == 1:\n        fmt.Println(a, &amp;quot;/&amp;quot;, c)\n    case c == 1:\n        fmt.Printf(&amp;quot;%d[%d]\\n&amp;quot;, a, b)\n    default:\n        fmt.Printf(&amp;quot;%d[%d] / %d\\n&amp;quot;, a, b, c)\n    }\n}\n\nfunc main() {\n    ssr(2, 5, 5, 10)\n    ssr(45, 1465, 26, 15)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output (uses [] to mean square root)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input --&amp;gt; output\n2[5] / 5[10] --&amp;gt; 1[2] / 5\n45[1465] / 26[15] --&amp;gt; 15[879] / 26\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg611jf", "score_hidden": false, "stickied": false, "created": 1492040035.0, "created_utc": 1492011235.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg6det6", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t1_dg6c79o", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I think my complexity might be wrong... :(\n\nMy prime factorizer looks like:\n\n\t/// &lt;summary&gt;\n\t/// Get factors of a given int.\n\t/// &lt;/summary&gt;\n\t/// &lt;param name=\"n\"&gt;The given integer.&lt;/param&gt;\n\t/// &lt;remarks&gt;The factors of 'n' are found in ascending order, guaranteeing they are also the prime factors.&lt;/remarks&gt;\n\tpublic static IEnumerable&lt;int&gt; ToFactors(this int n)\n\t{\n\t\tfor (var divisor = 2; n &gt; 1; divisor++)\n\t\t{\n\t\t\tfor (; n % divisor == 0; n /= divisor)\n\t\t\t{\n\t\t\t\tyield return divisor;\n\t\t\t}\n\t\t}\n\t}\n\nPretty sure this means my complexity would be more like: O([number of prime factors in *b*] * [distinct primes of *b*]).", "edited": 1492024279.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think my complexity might be wrong... :(&lt;/p&gt;\n\n&lt;p&gt;My prime factorizer looks like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;\n/// Get factors of a given int.\n/// &amp;lt;/summary&amp;gt;\n/// &amp;lt;param name=&amp;quot;n&amp;quot;&amp;gt;The given integer.&amp;lt;/param&amp;gt;\n/// &amp;lt;remarks&amp;gt;The factors of &amp;#39;n&amp;#39; are found in ascending order, guaranteeing they are also the prime factors.&amp;lt;/remarks&amp;gt;\npublic static IEnumerable&amp;lt;int&amp;gt; ToFactors(this int n)\n{\n    for (var divisor = 2; n &amp;gt; 1; divisor++)\n    {\n        for (; n % divisor == 0; n /= divisor)\n        {\n            yield return divisor;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pretty sure this means my complexity would be more like: O([number of prime factors in &lt;em&gt;b&lt;/em&gt;] * [distinct primes of &lt;em&gt;b&lt;/em&gt;]).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6det6", "score_hidden": false, "stickied": false, "created": 1492052857.0, "created_utc": 1492024057.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6c79o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**C#** - O([distinct factors of *b*] * *b*)\n\n\tvoid Main()\n\t{\n\t\tList&lt;Dictionary&lt;char, int?&gt;&gt; inputSets = new List&lt;Dictionary&lt;char, int?&gt;&gt; { new Dictionary&lt;char, int?&gt; { { 'a', 2 }, { 'b', 5 }, { 'c', 5 }, { 'd', 10 } }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  , new Dictionary&lt;char, int?&gt; { { 'a', 45 }, { 'b', 1465 }, { 'c', 26 }, { 'd', 15 } }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  };\n\t\tinputSets.ForEach(SimplifySqrt);\n\t}\n\n\t// Define other methods and classes here\n\tvoid SimplifySqrt(Dictionary&lt;char, int?&gt; inputs)\n\t{\n\t\t// Simplify : a * sqrt(b)\n\t\t//            -----------\n\t\t//\t\t\t  c * sqrt(d)\n\t\t// Result   : no sqrt in denominator\n\n\t\tif (inputs['a'] == 0)\n\t\t{\n\t\t\tConsole.WriteLine(\"a = 0\");\n\t\t}\n\n\t\tinputs['c'] *= inputs['d']; // == c * [sqrt(d) * sqrt(d)]\n\t\tif (inputs['c'] == 0)\n\t\t{\n\t\t\tthrow new DivideByZeroException(\"c or d^2 cannot be zero\");\n\t\t}\n\n\t\tinputs['b'] *= inputs['d']; // == inside part of sqrt(b) * sqrt(d), or more simply, sqrt(b*d)\n\n\t\t// d does not exist, set to null\n\t\tinputs['d'] = null;\n\n\t\tvar bPrimeFactorGroups = inputs['b'].Value.ToFactors().GroupBy(primeFactor =&gt; primeFactor);\n\n\t\tinputs['b'] = 1;\n\t\tforeach (var primeFactorGroup in bPrimeFactorGroups)\n\t\t{\n\t\t\tvar factorCount = primeFactorGroup.Count();\n\t\t\tvar newAFactor = primeFactorGroup.Key * (factorCount / 2);\n\t\t\tif (newAFactor == 0)\n\t\t\t{\n\t\t\t\tnewAFactor = 1;\n\t\t\t}\n\t\t\tinputs['a'] *= newAFactor;\n\t\t\t\n\t\t\tvar leftoverFactor = factorCount % 2 != 0 ? primeFactorGroup.Key : 1;\n\t\t\tinputs['b'] *= leftoverFactor;\n\t\t}\n\n\t\tif (inputs['b'] == 1) { inputs['b'] = null; }\n\n\t\tvar gcm = (int)BigInteger.GreatestCommonDivisor(inputs['a'].Value, inputs['c'].Value);\n\t\tinputs['a'] /= gcm;\n\t\tinputs['c'] /= gcm;\n\n\t\tforeach (var kvp in inputs.Where(input =&gt; input.Value.HasValue))\n\t\t{\n\t\t\tConsole.WriteLine($\"{kvp.Key} = {kvp.Value}\");\n\t\t}\n\t\tConsole.WriteLine();\n\t}\n\nAs always, feedback welcome.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt; - O([distinct factors of &lt;em&gt;b&lt;/em&gt;] * &lt;em&gt;b&lt;/em&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void Main()\n{\n    List&amp;lt;Dictionary&amp;lt;char, int?&amp;gt;&amp;gt; inputSets = new List&amp;lt;Dictionary&amp;lt;char, int?&amp;gt;&amp;gt; { new Dictionary&amp;lt;char, int?&amp;gt; { { &amp;#39;a&amp;#39;, 2 }, { &amp;#39;b&amp;#39;, 5 }, { &amp;#39;c&amp;#39;, 5 }, { &amp;#39;d&amp;#39;, 10 } }\n                                                                              , new Dictionary&amp;lt;char, int?&amp;gt; { { &amp;#39;a&amp;#39;, 45 }, { &amp;#39;b&amp;#39;, 1465 }, { &amp;#39;c&amp;#39;, 26 }, { &amp;#39;d&amp;#39;, 15 } }\n                                                                              };\n    inputSets.ForEach(SimplifySqrt);\n}\n\n// Define other methods and classes here\nvoid SimplifySqrt(Dictionary&amp;lt;char, int?&amp;gt; inputs)\n{\n    // Simplify : a * sqrt(b)\n    //            -----------\n    //            c * sqrt(d)\n    // Result   : no sqrt in denominator\n\n    if (inputs[&amp;#39;a&amp;#39;] == 0)\n    {\n        Console.WriteLine(&amp;quot;a = 0&amp;quot;);\n    }\n\n    inputs[&amp;#39;c&amp;#39;] *= inputs[&amp;#39;d&amp;#39;]; // == c * [sqrt(d) * sqrt(d)]\n    if (inputs[&amp;#39;c&amp;#39;] == 0)\n    {\n        throw new DivideByZeroException(&amp;quot;c or d^2 cannot be zero&amp;quot;);\n    }\n\n    inputs[&amp;#39;b&amp;#39;] *= inputs[&amp;#39;d&amp;#39;]; // == inside part of sqrt(b) * sqrt(d), or more simply, sqrt(b*d)\n\n    // d does not exist, set to null\n    inputs[&amp;#39;d&amp;#39;] = null;\n\n    var bPrimeFactorGroups = inputs[&amp;#39;b&amp;#39;].Value.ToFactors().GroupBy(primeFactor =&amp;gt; primeFactor);\n\n    inputs[&amp;#39;b&amp;#39;] = 1;\n    foreach (var primeFactorGroup in bPrimeFactorGroups)\n    {\n        var factorCount = primeFactorGroup.Count();\n        var newAFactor = primeFactorGroup.Key * (factorCount / 2);\n        if (newAFactor == 0)\n        {\n            newAFactor = 1;\n        }\n        inputs[&amp;#39;a&amp;#39;] *= newAFactor;\n\n        var leftoverFactor = factorCount % 2 != 0 ? primeFactorGroup.Key : 1;\n        inputs[&amp;#39;b&amp;#39;] *= leftoverFactor;\n    }\n\n    if (inputs[&amp;#39;b&amp;#39;] == 1) { inputs[&amp;#39;b&amp;#39;] = null; }\n\n    var gcm = (int)BigInteger.GreatestCommonDivisor(inputs[&amp;#39;a&amp;#39;].Value, inputs[&amp;#39;c&amp;#39;].Value);\n    inputs[&amp;#39;a&amp;#39;] /= gcm;\n    inputs[&amp;#39;c&amp;#39;] /= gcm;\n\n    foreach (var kvp in inputs.Where(input =&amp;gt; input.Value.HasValue))\n    {\n        Console.WriteLine($&amp;quot;{kvp.Key} = {kvp.Value}&amp;quot;);\n    }\n    Console.WriteLine();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As always, feedback welcome.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6c79o", "score_hidden": false, "stickied": false, "created": 1492051592.0, "created_utc": 1492022792.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg8r9x9", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "im_not_afraid", "parent_id": "t1_dg6dul2", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "mine using the prime gem.\n\n    require 'prime'\n    \n    class Integer\n      def square_factors\n        prime_division.select do |f|\n          f.last &gt; 1\n        end.map(&amp;:first)\n      end\n    end\n    \n    class Sqrt\n      def initialize(a, b, c, d = 1)\n        b *= d\n        c *= d\n    \n        f = b.square_factors.inject(1, &amp;:*)\n        r = Rational a * f, c\n    \n        @a = r.numerator\n        @b = b / (f ** 2)\n        @c = r.denominator\n        @d = 1\n      end\n    \n      def to_s\n        \"#{@a} #{@b} #{@c}#{\" #{@d}\" unless @d == 1}\"\n      end\n    end\n    \n    input = gets.chomp.split(' ').map(&amp;:to_i)\n    puts Sqrt.new(*input).to_s", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;mine using the prime gem.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require &amp;#39;prime&amp;#39;\n\nclass Integer\n  def square_factors\n    prime_division.select do |f|\n      f.last &amp;gt; 1\n    end.map(&amp;amp;:first)\n  end\nend\n\nclass Sqrt\n  def initialize(a, b, c, d = 1)\n    b *= d\n    c *= d\n\n    f = b.square_factors.inject(1, &amp;amp;:*)\n    r = Rational a * f, c\n\n    @a = r.numerator\n    @b = b / (f ** 2)\n    @c = r.denominator\n    @d = 1\n  end\n\n  def to_s\n    &amp;quot;#{@a} #{@b} #{@c}#{&amp;quot; #{@d}&amp;quot; unless @d == 1}&amp;quot;\n  end\nend\n\ninput = gets.chomp.split(&amp;#39; &amp;#39;).map(&amp;amp;:to_i)\nputs Sqrt.new(*input).to_s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg8r9x9", "score_hidden": false, "stickied": false, "created": 1492172862.0, "created_utc": 1492144062.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6dul2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "foxneZz", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Ruby**\n\n    def simplify_sqrt(outside, inside)\n      (2..inside ** 0.5).select { |n| inside % (n ** 2) == 0 }.each do |i|\n        inside /= i ** 2\n        outside *= i\n      end\n      [outside, inside]\n    end\n\n    def simplify_fraction(num, den)\n      g = num.gcd den\n      [num / g, den / g]\n    end\n\n    a, b, c, d = ARGV.map { |s| s.to_i }\n\n    b *= d\n    c *= d\n\n    a, b = simplify_sqrt a, b\n    a, c = simplify_fraction a, c\n\n    puts a, b, c", "edited": 1492027167.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def simplify_sqrt(outside, inside)\n  (2..inside ** 0.5).select { |n| inside % (n ** 2) == 0 }.each do |i|\n    inside /= i ** 2\n    outside *= i\n  end\n  [outside, inside]\nend\n\ndef simplify_fraction(num, den)\n  g = num.gcd den\n  [num / g, den / g]\nend\n\na, b, c, d = ARGV.map { |s| s.to_i }\n\nb *= d\nc *= d\n\na, b = simplify_sqrt a, b\na, c = simplify_fraction a, c\n\nputs a, b, c\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6dul2", "score_hidden": false, "stickied": false, "created": 1492053305.0, "created_utc": 1492024505.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg6ip8t", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "GregMartinez", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": " Go solution:\n    \n    package main\n    \n    import \"fmt\"\n    \n    func main() {\n    \n    \t// (1\u221a2)/5\n    \tfmt.Println(simplify(2, 5, 5, 10))\n    \t// (15\u221a879)/26\n    \tfmt.Println(simplify(45, 1465, 26, 15))\n    }\n    \n    /*\n     *  a(\u221a(b*d)) / cd\n     */\n    func simplify(a int, b int, c int, d int) string {\n    \n    \toa, oc := a, c\n    \n    \ti, r := simplifyRadical(b * d)\n    \n    \tc = c * d\n    \ta = a * i\n    \n    \tgcf := getGCF(a, c)\n    \n    \tif gcf != 1 {\n    \t\ta, c = a/gcf, c/gcf\n    \t}\n    \n    \treturn fmt.Sprintf(\"Input: (%d\u221a%d)/(%d\u221a%d) \\nOutput: (%d\u221a%d)/%d\", oa, b, oc, d, a, r, c)\n    }\n    \n    /*\n     *\tindex\u221aradicand\n     */\n    func simplifyRadical(radicand int) (int, int) {\n    \tindex, n := 1, 2\n    \tfor n*n &lt;= radicand {\n    \t\tif radicand%(n*n) == 0 {\n    \t\t\tradicand = radicand / (n * n)\n    \t\t\tindex = index * n\n    \t\t} else {\n    \t\t\tn++\n    \t\t}\n    \t}\n    \n    \treturn index, radicand\n    }\n    \n    func getGCF(a int, b int) int {\n    \tfor b != 0 {\n    \t\ttemp := b\n    \t\tb = a % b\n    \t\ta = temp\n    \t}\n    \n    \treturn a\n    }\n\n**Output**\n\n    Input: (2\u221a5)/(5\u221a10) \n    Output: (1\u221a2)/5\n    \n    Input: (45\u221a1465)/(26\u221a15) \n    Output: (15\u221a879)/26\n\n \n", "edited": 1492029953.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Go solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport &amp;quot;fmt&amp;quot;\n\nfunc main() {\n\n    // (1\u221a2)/5\n    fmt.Println(simplify(2, 5, 5, 10))\n    // (15\u221a879)/26\n    fmt.Println(simplify(45, 1465, 26, 15))\n}\n\n/*\n *  a(\u221a(b*d)) / cd\n */\nfunc simplify(a int, b int, c int, d int) string {\n\n    oa, oc := a, c\n\n    i, r := simplifyRadical(b * d)\n\n    c = c * d\n    a = a * i\n\n    gcf := getGCF(a, c)\n\n    if gcf != 1 {\n        a, c = a/gcf, c/gcf\n    }\n\n    return fmt.Sprintf(&amp;quot;Input: (%d\u221a%d)/(%d\u221a%d) \\nOutput: (%d\u221a%d)/%d&amp;quot;, oa, b, oc, d, a, r, c)\n}\n\n/*\n *  index\u221aradicand\n */\nfunc simplifyRadical(radicand int) (int, int) {\n    index, n := 1, 2\n    for n*n &amp;lt;= radicand {\n        if radicand%(n*n) == 0 {\n            radicand = radicand / (n * n)\n            index = index * n\n        } else {\n            n++\n        }\n    }\n\n    return index, radicand\n}\n\nfunc getGCF(a int, b int) int {\n    for b != 0 {\n        temp := b\n        b = a % b\n        a = temp\n    }\n\n    return a\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Input: (2\u221a5)/(5\u221a10) \nOutput: (1\u221a2)/5\n\nInput: (45\u221a1465)/(26\u221a15) \nOutput: (15\u221a879)/26\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6ip8t", "score_hidden": false, "stickied": false, "created": 1492058289.0, "created_utc": 1492029489.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg7bvvd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "DrTurnos", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Java8**\n\n    package com.turnos;\n    \n    import static java.lang.Math.sqrt;\n    \n    \n    /*\n        Daily Programmer #310 [Intermediate] Simplifying square roots\n        https://www.reddit.com/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/\n     */\n    \n    \n    public class Main {\n    \n        public static void main(String[] args) {\n    \n            //You can change the values right here\n            //Example: 2 5 5 10; Expected result: 1 2 5\n            //Challenge Input: 45 1465 26 15; Expected result: 15 879 26\n            int a = 45;\n            int b = 1465;\n            int c = 26;\n            int d = 15;\n    \n            System.out.println(\"Input: \\n a=\" + a + \" b=\" + b + \" c=\" + c + \" d=\" + d);\n    \n           //Actual method\n            simplify(a, b, c, d);\n    \n        }\n    \n        //(a * sqrt(b))/(c * sqrt(d)) = (new_a * sqrt(new_b))/new_c\n        public static void simplify(int a, int b, int c, int d){\n    \n            //Multiplying both sides with sqrt(d) to remove the root from the denominator\n            b = b*d;\n            c = c*d;\n            //This will result in: ((a*sqrt(b*d))/(c*d)\n    \n            //Find the biggest square factor in b\n            int sqrFactor = findFactor(b);\n            //Remove the square factor from sqrt(b) and multiply it by a\n            b=b/sqrFactor;\n            sqrFactor = (int) sqrt(sqrFactor);\n            a = a * sqrFactor;\n    \n            //Simplify a/c by finding the greatest common denominator\n            int denominator = findDenominator(a, c);\n            a = a/denominator;\n            c = c/denominator;\n    \n            //Print the result\n            System.out.println(\"Result: \\n a=\" + a + \" b=\" + b + \" c=\" + c);\n    \n        }\n    \n        private static int findDenominator(int a, int c) {\n            //In case there is no other common denominator than 1\n            int temp = 1;\n            if(a&lt;=c){\n                for (int i = 2; i &lt;= a; i++) {\n                    if(a%i==0 &amp;&amp; c%i==0) temp=i;\n                }\n            }else{\n                for (int i = 2; i &lt;= c ; i++) {\n                    if(a%i==0 &amp;&amp; c%i==0) temp=i;\n                }\n            }\n            return temp;\n        }\n    \n        private static int findFactor(int b) {\n            //1 is the smallest square factor\n            int temp = 1;\n            for (int i = 2; i &lt;= b ; i++) {\n                if(b%i==0){     //i is a factor of b\n                    for (int k = 2; k &lt; i ; k++) {\n                        if(k*k==i){ //check if i is also a square factor\n                            temp = i;\n                        }\n                    }\n                }\n            }\n            return temp;\n        }\n    \n    \n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java8&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.turnos;\n\nimport static java.lang.Math.sqrt;\n\n\n/*\n    Daily Programmer #310 [Intermediate] Simplifying square roots\n    https://www.reddit.com/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/\n */\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        //You can change the values right here\n        //Example: 2 5 5 10; Expected result: 1 2 5\n        //Challenge Input: 45 1465 26 15; Expected result: 15 879 26\n        int a = 45;\n        int b = 1465;\n        int c = 26;\n        int d = 15;\n\n        System.out.println(&amp;quot;Input: \\n a=&amp;quot; + a + &amp;quot; b=&amp;quot; + b + &amp;quot; c=&amp;quot; + c + &amp;quot; d=&amp;quot; + d);\n\n       //Actual method\n        simplify(a, b, c, d);\n\n    }\n\n    //(a * sqrt(b))/(c * sqrt(d)) = (new_a * sqrt(new_b))/new_c\n    public static void simplify(int a, int b, int c, int d){\n\n        //Multiplying both sides with sqrt(d) to remove the root from the denominator\n        b = b*d;\n        c = c*d;\n        //This will result in: ((a*sqrt(b*d))/(c*d)\n\n        //Find the biggest square factor in b\n        int sqrFactor = findFactor(b);\n        //Remove the square factor from sqrt(b) and multiply it by a\n        b=b/sqrFactor;\n        sqrFactor = (int) sqrt(sqrFactor);\n        a = a * sqrFactor;\n\n        //Simplify a/c by finding the greatest common denominator\n        int denominator = findDenominator(a, c);\n        a = a/denominator;\n        c = c/denominator;\n\n        //Print the result\n        System.out.println(&amp;quot;Result: \\n a=&amp;quot; + a + &amp;quot; b=&amp;quot; + b + &amp;quot; c=&amp;quot; + c);\n\n    }\n\n    private static int findDenominator(int a, int c) {\n        //In case there is no other common denominator than 1\n        int temp = 1;\n        if(a&amp;lt;=c){\n            for (int i = 2; i &amp;lt;= a; i++) {\n                if(a%i==0 &amp;amp;&amp;amp; c%i==0) temp=i;\n            }\n        }else{\n            for (int i = 2; i &amp;lt;= c ; i++) {\n                if(a%i==0 &amp;amp;&amp;amp; c%i==0) temp=i;\n            }\n        }\n        return temp;\n    }\n\n    private static int findFactor(int b) {\n        //1 is the smallest square factor\n        int temp = 1;\n        for (int i = 2; i &amp;lt;= b ; i++) {\n            if(b%i==0){     //i is a factor of b\n                for (int k = 2; k &amp;lt; i ; k++) {\n                    if(k*k==i){ //check if i is also a square factor\n                        temp = i;\n                    }\n                }\n            }\n        }\n        return temp;\n    }\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7bvvd", "score_hidden": false, "stickied": false, "created": 1492102342.0, "created_utc": 1492073542.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg7fkfv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pier4r", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Just checking the capabilities of the CAS of the hp50g. Then will be the turn of the userRPL itself without CAS\n\n      - equation writer typing the equation\n      - set flags -3 and -105 as clear\n        or \n        'savedFlags' RCLF\n        -3 CF\n        -105 CF\n        ... execution here ...\n        'savedFlags' STOF\n      - eval. Solved.\n\nuserRPL no CAS solution, WIP. (A further iteration could even dive in calculating roots without the root function, I will see. That would be fun on the [free42](https://en.wikipedia.org/wiki/HP-42S) stack)", "edited": 1492084358.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just checking the capabilities of the CAS of the hp50g. Then will be the turn of the userRPL itself without CAS&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  - equation writer typing the equation\n  - set flags -3 and -105 as clear\n    or \n    &amp;#39;savedFlags&amp;#39; RCLF\n    -3 CF\n    -105 CF\n    ... execution here ...\n    &amp;#39;savedFlags&amp;#39; STOF\n  - eval. Solved.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;userRPL no CAS solution, WIP. (A further iteration could even dive in calculating roots without the root function, I will see. That would be fun on the &lt;a href=\"https://en.wikipedia.org/wiki/HP-42S\"&gt;free42&lt;/a&gt; stack)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7fkfv", "score_hidden": false, "stickied": false, "created": 1492112617.0, "created_utc": 1492083817.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg7hscr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zod77", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3**    \n\n    import sys\n    \n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i &lt;= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n &gt; 1:\n            factors.append(n)\n        return factors\n    \n    def product(values=None):\n        p = 1\n        for x in values:\n            p = p*x\n        return p\n    \n    \n    a, b, c, d = map(int, sys.argv[1:])\n    \n    c = c * d\n    b = b * d\n    \n    afactors = prime_factors(a)\n    bfactors = prime_factors(b)\n    cfactors = prime_factors(c)\n    \n    # Simplify b by searching for pairs of common factors (perfect squares)\n    duplicates = []\n    seen = []\n    for f in bfactors[:]:\n        if f in seen:\n            duplicates.append(f)\n        else:\n            seen.append(f)\n    \n    for f in duplicates:\n        afactors.append(f)\n        bfactors.remove(f)\n        bfactors.remove(f)\n    \n    # Simplify a and c by removing factors\n    for f in afactors[:]:\n        if f in cfactors:\n            afactors.remove(f)\n            cfactors.remove(f)\n    \n    # Reduce fraction\n    i = set(afactors).intersection(set(cfactors))\n    afactors = list(set(afactors).difference(i))\n    cfactors = list(set(cfactors).difference(i))\n    \n    a = product(afactors)\n    b = product(bfactors)\n    c = product(cfactors)\n    \n    print(\"{} sqr({}) / {}\".format(a,b,c))\n    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import sys\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i &amp;lt;= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n &amp;gt; 1:\n        factors.append(n)\n    return factors\n\ndef product(values=None):\n    p = 1\n    for x in values:\n        p = p*x\n    return p\n\n\na, b, c, d = map(int, sys.argv[1:])\n\nc = c * d\nb = b * d\n\nafactors = prime_factors(a)\nbfactors = prime_factors(b)\ncfactors = prime_factors(c)\n\n# Simplify b by searching for pairs of common factors (perfect squares)\nduplicates = []\nseen = []\nfor f in bfactors[:]:\n    if f in seen:\n        duplicates.append(f)\n    else:\n        seen.append(f)\n\nfor f in duplicates:\n    afactors.append(f)\n    bfactors.remove(f)\n    bfactors.remove(f)\n\n# Simplify a and c by removing factors\nfor f in afactors[:]:\n    if f in cfactors:\n        afactors.remove(f)\n        cfactors.remove(f)\n\n# Reduce fraction\ni = set(afactors).intersection(set(cfactors))\nafactors = list(set(afactors).difference(i))\ncfactors = list(set(cfactors).difference(i))\n\na = product(afactors)\nb = product(bfactors)\nc = product(cfactors)\n\nprint(&amp;quot;{} sqr({}) / {}&amp;quot;.format(a,b,c))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7hscr", "score_hidden": false, "stickied": false, "created": 1492116629.0, "created_utc": 1492087829.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg7uabd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "PoopDollaMakeMeHolla", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Javascript. I'm new to Javascript but gave this a shot. Feedback welcome\n    \n    var nums = prompt(\"Enter 4 numbers (with space between) you would like to reduce. (a sqrt(b)) / (c sqrt(d))\");\n    var array = nums.split(\" \");\n\n    var a = Number(array[0]);\n    var b = Number(array[1]);\n    var c = Number(array[2]);\n    var d = Number(array[3]);\n\n    console.log(\"(\" + a + \" sqrt(\" + b + \")) / (\" + c + \" sqrt(\" + d + \"))\");\n    console.log(\"is reduced to\");\n\n    var gcd = function (a, b) {\n        if (!b) {\n            return a;\n        }\n\n        return gcd(b, a % b);\n    };\n\n    var gcdBD = gcd (b, d);\n    var secA = (a)*gcdBD;\n    var secB = (b/gcdBD)*(d/gcdBD)\n    var secC = c*d;\n\n    var gcdSecAC = gcd(secA, secC);\n    var x = secA / gcdSecAC;\n    var z = secC / gcdSecAC;\n\n    console.log(x + \" sqrt(\" + secB + \") / \" +z);\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript. I&amp;#39;m new to Javascript but gave this a shot. Feedback welcome&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var nums = prompt(&amp;quot;Enter 4 numbers (with space between) you would like to reduce. (a sqrt(b)) / (c sqrt(d))&amp;quot;);\nvar array = nums.split(&amp;quot; &amp;quot;);\n\nvar a = Number(array[0]);\nvar b = Number(array[1]);\nvar c = Number(array[2]);\nvar d = Number(array[3]);\n\nconsole.log(&amp;quot;(&amp;quot; + a + &amp;quot; sqrt(&amp;quot; + b + &amp;quot;)) / (&amp;quot; + c + &amp;quot; sqrt(&amp;quot; + d + &amp;quot;))&amp;quot;);\nconsole.log(&amp;quot;is reduced to&amp;quot;);\n\nvar gcd = function (a, b) {\n    if (!b) {\n        return a;\n    }\n\n    return gcd(b, a % b);\n};\n\nvar gcdBD = gcd (b, d);\nvar secA = (a)*gcdBD;\nvar secB = (b/gcdBD)*(d/gcdBD)\nvar secC = c*d;\n\nvar gcdSecAC = gcd(secA, secC);\nvar x = secA / gcdSecAC;\nvar z = secC / gcdSecAC;\n\nconsole.log(x + &amp;quot; sqrt(&amp;quot; + secB + &amp;quot;) / &amp;quot; +z);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg7uabd", "score_hidden": false, "stickied": false, "created": 1492131301.0, "created_utc": 1492102501.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg8u9wy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "hellord1203", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3:**\n\nI'm a bit late to this party, but I wanted to try my take on python\n\n    import math\n    \n    def findSquares(num):\n        for i in range(2, (num + 2) // 2 ):\n            if(num % (i*i)  == 0):\n                return i\n        return -1\n    \n    def GCD(num1, num2):\n        if(num1 &gt; num2):\n            num = num2\n        else:\n            num = num1\n    \n        for i in range(num,1,-1):\n            if(num1 % i == 0) and (num2 % i == 0):\n                return i\n        return 1\n    \n    for i in range(2,2,-1):\n        print(i)\n    \n    numList = input(\"Enter the 4 numbers: \").split()\n    if(len(numList) != 4):\n        print(\"Error. Not 4 numbers.\", len(numList), \"numbers input\")\n    else:\n        print(numList[0],\"\u221a\",numList[1],\"/\",numList[2],\"\u221a\",numList[3])\n        numList[1] = int(numList[1]) * int(numList[3])\n        numList[2] = int(numList[2]) * int(numList[3])\n        del numList[3]\n        while(findSquares(int(numList[1])) != -1):\n            num = findSquares(int(numList[1]))\n            numList[0] = num * int(numList[0])\n            numList[1] = int(numList[1]) / (num*num)\n    \n        GCDNum = GCD(int(numList[0]), int(numList[2]))\n        if(GCDNum != 1):\n            numList[0] = int(numList[0]) / GCDNum\n            numList[2] = int(numList[2]) / GCDNum\n        print(numList)", "edited": 1492150738.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m a bit late to this party, but I wanted to try my take on python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import math\n\ndef findSquares(num):\n    for i in range(2, (num + 2) // 2 ):\n        if(num % (i*i)  == 0):\n            return i\n    return -1\n\ndef GCD(num1, num2):\n    if(num1 &amp;gt; num2):\n        num = num2\n    else:\n        num = num1\n\n    for i in range(num,1,-1):\n        if(num1 % i == 0) and (num2 % i == 0):\n            return i\n    return 1\n\nfor i in range(2,2,-1):\n    print(i)\n\nnumList = input(&amp;quot;Enter the 4 numbers: &amp;quot;).split()\nif(len(numList) != 4):\n    print(&amp;quot;Error. Not 4 numbers.&amp;quot;, len(numList), &amp;quot;numbers input&amp;quot;)\nelse:\n    print(numList[0],&amp;quot;\u221a&amp;quot;,numList[1],&amp;quot;/&amp;quot;,numList[2],&amp;quot;\u221a&amp;quot;,numList[3])\n    numList[1] = int(numList[1]) * int(numList[3])\n    numList[2] = int(numList[2]) * int(numList[3])\n    del numList[3]\n    while(findSquares(int(numList[1])) != -1):\n        num = findSquares(int(numList[1]))\n        numList[0] = num * int(numList[0])\n        numList[1] = int(numList[1]) / (num*num)\n\n    GCDNum = GCD(int(numList[0]), int(numList[2]))\n    if(GCDNum != 1):\n        numList[0] = int(numList[0]) / GCDNum\n        numList[2] = int(numList[2]) / GCDNum\n    print(numList)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg8u9wy", "score_hidden": false, "stickied": false, "created": 1492178745.0, "created_utc": 1492149945.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg93jrk", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "F-0X", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Racket.** \n\nUsing the same approach others did (mult top/bottom by sqrt(d), remove the excess factors from sqrt(bd) and stick them in a, then use gcd(a cd) to bring to lowest terms).\n    \n    #lang racket\n    \n    (require math)\n    \n    (define (simplify a b c d)\n      (define (get-extra-powers primes) (for/list ([i primes] #:when (&gt;= (second i) 2))\n                                          (make-list (second i) (first i))))\n      \n      (define (divide-extra-powers n extra-powers)\n        (/ n (apply * (flatten extra-powers))))\n      \n      (define (multiply-extra-powers n extra-powers)\n        (define (factor-list extra-powers)\n          (for/list ([i extra-powers])\n            (if (odd? (length i))\n                (make-list (/ (sub1 (length i)) 2) (first i))\n                (make-list (/ (length i) 2) (first i)))))\n        (* n (apply * (flatten (factor-list extra-powers)))))\n      \n      (define (get-simplification a b c)\n        (list (/ a (gcd a c)) b (/ c (gcd a c))))\n      \n      (get-simplification (multiply-extra-powers a (get-extra-powers (factorize (* b d))))\n                          (divide-extra-powers (* b d) (get-extra-powers (factorize (* b d))))\n                          (* c d)))\n    \n    (simplify 45 1465 26 15)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Racket.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Using the same approach others did (mult top/bottom by sqrt(d), remove the excess factors from sqrt(bd) and stick them in a, then use gcd(a cd) to bring to lowest terms).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang racket\n\n(require math)\n\n(define (simplify a b c d)\n  (define (get-extra-powers primes) (for/list ([i primes] #:when (&amp;gt;= (second i) 2))\n                                      (make-list (second i) (first i))))\n\n  (define (divide-extra-powers n extra-powers)\n    (/ n (apply * (flatten extra-powers))))\n\n  (define (multiply-extra-powers n extra-powers)\n    (define (factor-list extra-powers)\n      (for/list ([i extra-powers])\n        (if (odd? (length i))\n            (make-list (/ (sub1 (length i)) 2) (first i))\n            (make-list (/ (length i) 2) (first i)))))\n    (* n (apply * (flatten (factor-list extra-powers)))))\n\n  (define (get-simplification a b c)\n    (list (/ a (gcd a c)) b (/ c (gcd a c))))\n\n  (get-simplification (multiply-extra-powers a (get-extra-powers (factorize (* b d))))\n                      (divide-extra-powers (* b d) (get-extra-powers (factorize (* b d))))\n                      (* c d)))\n\n(simplify 45 1465 26 15)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg93jrk", "score_hidden": false, "stickied": false, "created": 1492203764.0, "created_utc": 1492174964.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg9nnxf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pier4r", "parent_id": "t1_dg9lpr7", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Note: it fails if a product of the solution is equal to 1 and has to be factored, because the list of factors ends up to be empty.\n\nLike  1 1 1 1 produces errors", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Note: it fails if a product of the solution is equal to 1 and has to be factored, because the list of factors ends up to be empty.&lt;/p&gt;\n\n&lt;p&gt;Like  1 1 1 1 produces errors&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9nnxf", "score_hidden": false, "stickied": false, "created": 1492228578.0, "created_utc": 1492199778.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9lpr7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pier4r", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "And userRPL solution using as less CAS as possible, aside from functions (factors) that could be coded but are not so interesting because well known.\n\n      \n      %%HP: T(0)A(D)F(.);\n      @ alternative found online %%HP: T(3)A(R)F(.);\n      @ You may edit the T(0)A(D)F(.) parts.\n      @ The earlier parts of the line are used by Debug4x.\n\n      @ in npp, just select language \"normal\" to get rid of the highlight.\n\n      DIR\n\n        c20170412\n        DIR\n        \n        factorsFsetUnset\n        @to set the flag and unset it around factors otherwise the main program\n        @is affected\n        \\&lt;&lt;\n          @input, a number\n          @output, factors.\n          \n          -3 CF\n            @exact mode\n          \n          @the number should be converted now in exact mode\n          \\-&gt;Q\n          FACTORS\n          \n          -3 SF\n            @numerical mode\n        \\&gt;&gt;\n        \n        \n        @ www.reddit.com/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/\n        @ Description \n        @ \n        @ Simplify square roots in the form (a sqrt(b))/(c sqrt(d)). A simplified \n        @ radical should have no square roots in the denominator and no number in \n        @ a square root should have a square factorV. For example, the input 2 5 5 \n        @ 10 for a b c d, respectively, should simplify to 1 2 5 where a=1, b=2, \n        @ and c=5. Output description \n        @ \n        @ a b c \n        @ \n        @ (d should not exist after simplifying) Challenge input \n        @ \n        @ 45 1465 26 15 \n        @ \n        @ Challenge output \n        @ \n        @ 15 879 26 \n        @ \n        @ Credit \n        @ \n        @ This challenge was suggested by user /u/alchzh on \n        @ /r/dailyprogrammer_ideas, many thanks. If you have an idea, please share \n        @ it there and we might use it! \n        cRootSol\n        \\&lt;&lt;\n          45. 1465. 26. 15. @ a b c d , for quick testing. reals.\n          0 @factorsListV1\n          0 @factorsListV2\n          0 @factorsListNumEl\n          1 @cdProd\n          1 @bdProd\n          1 @numeratorProd\n          1 @rootProd\n          0 @factorV\n          0 @multiplicity\n          0 @extrMultiplicity\n          0 @maxMultiplicity\n          0 @posV\n          10 @uFlag1\n          0 @sysFlags\n          \\-&gt;\n          @external input\n          a\n          b\n          c\n          d\n          @local var\n          factorsListV1\n          factorsListV2\n          factorsListNumEl\n          cdProd\n          bdProd\n          numeratorProd\n            @product outside the root at numerator\n          rootProd\n          factorV\n          multiplicity\n          extrMultiplicity\n          maxMultiplicity\n          posV\n          uFlag1\n          sysFlags\n          @output\n          @3: numerator value, outside the root\n          @2: numerator value in the root\n          @1: denominator value\n          \\&lt;&lt;\n            RCLF 'sysFlags' STO\n            \n            @set flags to avoid exact fractions\n            @we have to set, unset for factors,\n            -3 SF\n            -105 SF\n          \n            @so we know that  ( a sqrt (b) ) / ( c sqrt (d) )\n            @can be rewrtitten as \n            @[( a * sqrt (b) ) / ( c * sqrt (d) )] * ( sqrt(d) / sqrt (d) )\n            @giving back\n            @( a * sqrt (b*d) ) / ( c * d )\n            @from sqrt (b*d) we need to extract the proper factors. (and FACTORS is a good command)\n            \n            c d * 'cdProd' STO\n            \n            @we extract what can be extracted from the root\n            b d * factorsFsetUnset\n              @ now in the stack there is a list with factors and multiplicity.\n              \n            OBJ\\-&gt;\n              @list exploded\n              @ the number of elements is on the stack on level 1\n              \n            'factorsListNumEl' STO\n              @save num elements\n              \n            @we know that from an exploded list, the multiplicity is always in position\n            @after the factorV, so odd positions since the list is inverted.\n            @so we just consume the entries until we are finished\n            \n            a 'numeratorProd' STO*\n              @we start to build the num prod\n            uFlag1 CF\n              @we use this flag to say if the multiplicity was big enough\n              @to extract a factorV.\n              \n            1 factorsListNumEl\n            FOR counter\n              IF\n                counter 2 MOD \n                0 ==\n              THEN\n                @ we have an even position, so the factorV\n                'factorV' STO\n                @we continue to compute the rootProduct\n                factorV multiplicity ^ 'rootProd' STO*\n                  @if the program is correct, the multiplicity of the factorV is 1 or 0\n                  @within the root.\n                \n                @we compute the external product\n                IF\n                  uFlag1 FS?\n                THEN\n                  uFlag1 CF\n                    @for the next iteration\n                    \n                  factorV extrMultiplicity ^ 'numeratorProd' STO*\n                   \n                  0 'extrMultiplicity' STO\n                    @reset\n                END\n              ELSE\n                @ we have an odd position, so the multiplicity\n                'multiplicity' STO\n                IF\n                  multiplicity 2 \\&gt;=\n                THEN\n                  @the factorV can be extracted\n                  uFlag1 SF\n                    @we mention this in the flag for the next operation\n                    \n                  @ we collect how many times the factorV can be extracted\n                  WHILE multiplicity 2 \\&gt;=\n                  REPEAT\n                    1 'extrMultiplicity' STO+\n                    'multiplicity' 2 STO-\n                  END\n                END\n                @multiplicity here is either 0 or 1.\n              END\n            NEXT\n            \n            @now the product under the root is fine\n            @time to simplify the other two terms still using factors.\n            @GCD function avoided.\n            \n            cdProd factorsFsetUnset 'factorsListV1' STO\n            numeratorProd factorsFsetUnset 'factorsListV2' STO\n            \n            1 factorsListV1 SIZE\n            FOR counter\n              @factors in odd positions\n              \n              @we get the factor\n              factorsListV1 counter GET 'factorV' STO\n              \n              @we see if it exist in the other factorization\n              factorsListV2 factorV POS 'posV' STO\n              \n              IF\n                posV 0 &gt;\n                 @compare the position\n              THEN\n                @if the position is non-zero, then the factor exists in\n                @both lists, so we can compare the multiplicity\n                \n                @get the min multiplicity (I could use the GCD actually\n                @to make things faster)\n                factorsListV1 counter 1 + GET\n                factorsListV2 posV 1 + GET\n                MIN\n                \n                @ we get the min factor multiple for both numbers\n                factorV SWAP\n                  @2: factorV\n                  @1: min multiplicity\n                ^\n                \n                @we divide the numbers\n                DUP\n                  @ 2: factor^minMultiplicity\n                  @ 1: factor^minMultiplicity\n                \n                'cdProd' SWAP\n                  @ 3: factor^minMultiplicity\n                  @ 2: 'cdProd'\n                  @ 1: factor^minMultiplicity\n                STO/\n                \n                'numeratorProd' SWAP\n                  @ 2: 'numeratorProd'\n                  @ 1: factor^minMultiplicity\n                STO/\n              END\n            2 STEP\n            \n            @output\n            numeratorProd\n            rootProd\n            cdProd\n            \n            sysFlags STOF\n          \\&gt;&gt;\n        \\&gt;&gt;\n        END\n        \n      END", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And userRPL solution using as less CAS as possible, aside from functions (factors) that could be coded but are not so interesting because well known.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  %%HP: T(0)A(D)F(.);\n  @ alternative found online %%HP: T(3)A(R)F(.);\n  @ You may edit the T(0)A(D)F(.) parts.\n  @ The earlier parts of the line are used by Debug4x.\n\n  @ in npp, just select language &amp;quot;normal&amp;quot; to get rid of the highlight.\n\n  DIR\n\n    c20170412\n    DIR\n\n    factorsFsetUnset\n    @to set the flag and unset it around factors otherwise the main program\n    @is affected\n    \\&amp;lt;&amp;lt;\n      @input, a number\n      @output, factors.\n\n      -3 CF\n        @exact mode\n\n      @the number should be converted now in exact mode\n      \\-&amp;gt;Q\n      FACTORS\n\n      -3 SF\n        @numerical mode\n    \\&amp;gt;&amp;gt;\n\n\n    @ www.reddit.com/r/dailyprogrammer/comments/64y4cf/20170412_challenge_310_intermediate_simplifying/\n    @ Description \n    @ \n    @ Simplify square roots in the form (a sqrt(b))/(c sqrt(d)). A simplified \n    @ radical should have no square roots in the denominator and no number in \n    @ a square root should have a square factorV. For example, the input 2 5 5 \n    @ 10 for a b c d, respectively, should simplify to 1 2 5 where a=1, b=2, \n    @ and c=5. Output description \n    @ \n    @ a b c \n    @ \n    @ (d should not exist after simplifying) Challenge input \n    @ \n    @ 45 1465 26 15 \n    @ \n    @ Challenge output \n    @ \n    @ 15 879 26 \n    @ \n    @ Credit \n    @ \n    @ This challenge was suggested by user /u/alchzh on \n    @ /r/dailyprogrammer_ideas, many thanks. If you have an idea, please share \n    @ it there and we might use it! \n    cRootSol\n    \\&amp;lt;&amp;lt;\n      45. 1465. 26. 15. @ a b c d , for quick testing. reals.\n      0 @factorsListV1\n      0 @factorsListV2\n      0 @factorsListNumEl\n      1 @cdProd\n      1 @bdProd\n      1 @numeratorProd\n      1 @rootProd\n      0 @factorV\n      0 @multiplicity\n      0 @extrMultiplicity\n      0 @maxMultiplicity\n      0 @posV\n      10 @uFlag1\n      0 @sysFlags\n      \\-&amp;gt;\n      @external input\n      a\n      b\n      c\n      d\n      @local var\n      factorsListV1\n      factorsListV2\n      factorsListNumEl\n      cdProd\n      bdProd\n      numeratorProd\n        @product outside the root at numerator\n      rootProd\n      factorV\n      multiplicity\n      extrMultiplicity\n      maxMultiplicity\n      posV\n      uFlag1\n      sysFlags\n      @output\n      @3: numerator value, outside the root\n      @2: numerator value in the root\n      @1: denominator value\n      \\&amp;lt;&amp;lt;\n        RCLF &amp;#39;sysFlags&amp;#39; STO\n\n        @set flags to avoid exact fractions\n        @we have to set, unset for factors,\n        -3 SF\n        -105 SF\n\n        @so we know that  ( a sqrt (b) ) / ( c sqrt (d) )\n        @can be rewrtitten as \n        @[( a * sqrt (b) ) / ( c * sqrt (d) )] * ( sqrt(d) / sqrt (d) )\n        @giving back\n        @( a * sqrt (b*d) ) / ( c * d )\n        @from sqrt (b*d) we need to extract the proper factors. (and FACTORS is a good command)\n\n        c d * &amp;#39;cdProd&amp;#39; STO\n\n        @we extract what can be extracted from the root\n        b d * factorsFsetUnset\n          @ now in the stack there is a list with factors and multiplicity.\n\n        OBJ\\-&amp;gt;\n          @list exploded\n          @ the number of elements is on the stack on level 1\n\n        &amp;#39;factorsListNumEl&amp;#39; STO\n          @save num elements\n\n        @we know that from an exploded list, the multiplicity is always in position\n        @after the factorV, so odd positions since the list is inverted.\n        @so we just consume the entries until we are finished\n\n        a &amp;#39;numeratorProd&amp;#39; STO*\n          @we start to build the num prod\n        uFlag1 CF\n          @we use this flag to say if the multiplicity was big enough\n          @to extract a factorV.\n\n        1 factorsListNumEl\n        FOR counter\n          IF\n            counter 2 MOD \n            0 ==\n          THEN\n            @ we have an even position, so the factorV\n            &amp;#39;factorV&amp;#39; STO\n            @we continue to compute the rootProduct\n            factorV multiplicity ^ &amp;#39;rootProd&amp;#39; STO*\n              @if the program is correct, the multiplicity of the factorV is 1 or 0\n              @within the root.\n\n            @we compute the external product\n            IF\n              uFlag1 FS?\n            THEN\n              uFlag1 CF\n                @for the next iteration\n\n              factorV extrMultiplicity ^ &amp;#39;numeratorProd&amp;#39; STO*\n\n              0 &amp;#39;extrMultiplicity&amp;#39; STO\n                @reset\n            END\n          ELSE\n            @ we have an odd position, so the multiplicity\n            &amp;#39;multiplicity&amp;#39; STO\n            IF\n              multiplicity 2 \\&amp;gt;=\n            THEN\n              @the factorV can be extracted\n              uFlag1 SF\n                @we mention this in the flag for the next operation\n\n              @ we collect how many times the factorV can be extracted\n              WHILE multiplicity 2 \\&amp;gt;=\n              REPEAT\n                1 &amp;#39;extrMultiplicity&amp;#39; STO+\n                &amp;#39;multiplicity&amp;#39; 2 STO-\n              END\n            END\n            @multiplicity here is either 0 or 1.\n          END\n        NEXT\n\n        @now the product under the root is fine\n        @time to simplify the other two terms still using factors.\n        @GCD function avoided.\n\n        cdProd factorsFsetUnset &amp;#39;factorsListV1&amp;#39; STO\n        numeratorProd factorsFsetUnset &amp;#39;factorsListV2&amp;#39; STO\n\n        1 factorsListV1 SIZE\n        FOR counter\n          @factors in odd positions\n\n          @we get the factor\n          factorsListV1 counter GET &amp;#39;factorV&amp;#39; STO\n\n          @we see if it exist in the other factorization\n          factorsListV2 factorV POS &amp;#39;posV&amp;#39; STO\n\n          IF\n            posV 0 &amp;gt;\n             @compare the position\n          THEN\n            @if the position is non-zero, then the factor exists in\n            @both lists, so we can compare the multiplicity\n\n            @get the min multiplicity (I could use the GCD actually\n            @to make things faster)\n            factorsListV1 counter 1 + GET\n            factorsListV2 posV 1 + GET\n            MIN\n\n            @ we get the min factor multiple for both numbers\n            factorV SWAP\n              @2: factorV\n              @1: min multiplicity\n            ^\n\n            @we divide the numbers\n            DUP\n              @ 2: factor^minMultiplicity\n              @ 1: factor^minMultiplicity\n\n            &amp;#39;cdProd&amp;#39; SWAP\n              @ 3: factor^minMultiplicity\n              @ 2: &amp;#39;cdProd&amp;#39;\n              @ 1: factor^minMultiplicity\n            STO/\n\n            &amp;#39;numeratorProd&amp;#39; SWAP\n              @ 2: &amp;#39;numeratorProd&amp;#39;\n              @ 1: factor^minMultiplicity\n            STO/\n          END\n        2 STEP\n\n        @output\n        numeratorProd\n        rootProd\n        cdProd\n\n        sysFlags STOF\n      \\&amp;gt;&amp;gt;\n    \\&amp;gt;&amp;gt;\n    END\n\n  END\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9lpr7", "score_hidden": false, "stickied": false, "created": 1492226226.0, "created_utc": 1492197426.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dgbbozv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jacwah", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Using Rust. I decided to go all out on iterators which probably adds a few lines, but is nicer in my opinion. Feedback is very welcome!\n\n    use std::env;\n\n    struct SquareFactors {\n        step: u32,\n        factorand: u32,\n    }\n\n    impl Iterator for SquareFactors {\n        type Item = u32;\n\n        fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n            let root = (self.factorand as f64).sqrt() as u32;\n\n            for i in self.step..(root + 1) {\n                if self.factorand % i.pow(2) == 0 {\n                    self.factorand /= i.pow(2);\n                    self.step = i;\n                    \n                    return Some(i);\n                }\n            }\n            \n            None\n        }\n    }            \n\n    /// Iterator over the square (4, 9, 16, ...) factors of x.\n    fn square_factors(x: u32) -&gt; SquareFactors {\n        SquareFactors { step: 2, factorand: x }\n    }\n\n    fn gcd(a: u32, b: u32) -&gt; u32 {\n        if a % b == 0 {\n            b\n        } else {\n            gcd(b, a % b)\n        }\n    }\n\n    fn main() {\n        let mut args = env::args()\n            .skip(1)\n            .map(|s| s.parse::&lt;u32&gt;().unwrap());\n\n        // Input = a * sqrt(b) / (c * sqrt(d))\n        let a = args.next().unwrap();\n        let b = args.next().unwrap();\n        let c = args.next().unwrap();\n        let d = args.next().unwrap();\n\n        // Output = x * sqrt(y) / z\n        let mut x = a;\n        let mut y = b * d;\n        let mut z = c * d;\n\n        for factor in square_factors(y) {\n            x *= factor;\n            y /= factor.pow(2);\n        }\n\n        let divisor = gcd(x, z);\n        x /= divisor;\n        z /= divisor;\n\n        println!(\"{} {} {}\", x, y, z);\n    }\n", "edited": 1492298433.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using Rust. I decided to go all out on iterators which probably adds a few lines, but is nicer in my opinion. Feedback is very welcome!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::env;\n\nstruct SquareFactors {\n    step: u32,\n    factorand: u32,\n}\n\nimpl Iterator for SquareFactors {\n    type Item = u32;\n\n    fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; {\n        let root = (self.factorand as f64).sqrt() as u32;\n\n        for i in self.step..(root + 1) {\n            if self.factorand % i.pow(2) == 0 {\n                self.factorand /= i.pow(2);\n                self.step = i;\n\n                return Some(i);\n            }\n        }\n\n        None\n    }\n}            \n\n/// Iterator over the square (4, 9, 16, ...) factors of x.\nfn square_factors(x: u32) -&amp;gt; SquareFactors {\n    SquareFactors { step: 2, factorand: x }\n}\n\nfn gcd(a: u32, b: u32) -&amp;gt; u32 {\n    if a % b == 0 {\n        b\n    } else {\n        gcd(b, a % b)\n    }\n}\n\nfn main() {\n    let mut args = env::args()\n        .skip(1)\n        .map(|s| s.parse::&amp;lt;u32&amp;gt;().unwrap());\n\n    // Input = a * sqrt(b) / (c * sqrt(d))\n    let a = args.next().unwrap();\n    let b = args.next().unwrap();\n    let c = args.next().unwrap();\n    let d = args.next().unwrap();\n\n    // Output = x * sqrt(y) / z\n    let mut x = a;\n    let mut y = b * d;\n    let mut z = c * d;\n\n    for factor in square_factors(y) {\n        x *= factor;\n        y /= factor.pow(2);\n    }\n\n    let divisor = gcd(x, z);\n    x /= divisor;\n    z /= divisor;\n\n    println!(&amp;quot;{} {} {}&amp;quot;, x, y, z);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgbbozv", "score_hidden": false, "stickied": false, "created": 1492326781.0, "created_utc": 1492297981.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dgcrgk1", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "BloodEngineer", "parent_id": "t1_dgcrcfw", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Would love feedback on using integer and floors. I know I could cast the final float and get your exact output. Plus implicit conversions aren't the best.\n\nThanks for the challenge it was pretty fun.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Would love feedback on using integer and floors. I know I could cast the final float and get your exact output. Plus implicit conversions aren&amp;#39;t the best.&lt;/p&gt;\n\n&lt;p&gt;Thanks for the challenge it was pretty fun.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgcrgk1", "score_hidden": false, "stickied": false, "created": 1492414612.0, "created_utc": 1492385812.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgcrcfw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "BloodEngineer", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": " **Python 3**\n\n    # input b*d, the floor of the square root of b*d is the maximum possible square root. \n    # iterate from that max, but iterate from squareroot.\n    # if b*d = 50, this starts with 7 **2 = 49. This is not divisible, checks all values until 1.\n    # each time finds a divisible value, removes the square of this value from b*d, and increases val which is the item factored out.  \n    def simplify(int1):\n        val = 1   \n        for i in range(int(int1 ** 0.5),1,-1):        \n            if int1 % i**2 is 0:            \n                int1 = int1/(i**2)            \n                val *= i\n        return [val, int1]\n\n    # Use eulers method to find the gcf of two values. \n    def gcf(A,B):\n        while B:\n            A, B = B, A % B\n        return A    \n\n    # a*sqrt(b)/ (c*sqrt(d)) is equivalent to a*sqrt(b*d)/(c*d)    \n    # just need to get sqrt(b*d) into normal form where sqrt(b*d)= m *sqrt(n)\n    # then need to get a*m/(c*d) into a form that is normal. \n        \n    def simplify_helper(a,b,c,d):\n        [denom, b] = simplify(int(b*d))\n        g_ = gcf(a*denom, c*d)\n        a, c = a*denom/g_, c*d/g_    \n        print(a,b,c)\n        \n        \n    simplify_helper(1,16,1,1)    \n    simplify_helper(45, 1465, 26, 15)\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# input b*d, the floor of the square root of b*d is the maximum possible square root. \n# iterate from that max, but iterate from squareroot.\n# if b*d = 50, this starts with 7 **2 = 49. This is not divisible, checks all values until 1.\n# each time finds a divisible value, removes the square of this value from b*d, and increases val which is the item factored out.  \ndef simplify(int1):\n    val = 1   \n    for i in range(int(int1 ** 0.5),1,-1):        \n        if int1 % i**2 is 0:            \n            int1 = int1/(i**2)            \n            val *= i\n    return [val, int1]\n\n# Use eulers method to find the gcf of two values. \ndef gcf(A,B):\n    while B:\n        A, B = B, A % B\n    return A    \n\n# a*sqrt(b)/ (c*sqrt(d)) is equivalent to a*sqrt(b*d)/(c*d)    \n# just need to get sqrt(b*d) into normal form where sqrt(b*d)= m *sqrt(n)\n# then need to get a*m/(c*d) into a form that is normal. \n\ndef simplify_helper(a,b,c,d):\n    [denom, b] = simplify(int(b*d))\n    g_ = gcf(a*denom, c*d)\n    a, c = a*denom/g_, c*d/g_    \n    print(a,b,c)\n\n\nsimplify_helper(1,16,1,1)    \nsimplify_helper(45, 1465, 26, 15)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgcrcfw", "score_hidden": false, "stickied": false, "created": 1492414459.0, "created_utc": 1492385659.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_64y4cf", "likes": null, "replies": "", "user_reports": [], "id": "dg9m2yr", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "alchzh", "parent_id": "t1_dg6ds2c", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "you can two line this in sympy btw (one discounting the import)\n\n    from sympy import sqrt, radsimp  \n    print(radsimp((a*sqrt(b))/(c*sqrt(d))))", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;you can two line this in sympy btw (one discounting the import)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from sympy import sqrt, radsimp  \nprint(radsimp((a*sqrt(b))/(c*sqrt(d))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9m2yr", "score_hidden": false, "stickied": false, "created": 1492226677.0, "created_utc": 1492197877.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ds2c", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "joetheschmoe4000", "parent_id": "t1_dg68v4n", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I feel like using sympy might be cheating a bit :P. In that case, we could have a 1-line solution using Wolfram language ", "edited": 1492046369.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel like using sympy might be cheating a bit :P. In that case, we could have a 1-line solution using Wolfram language &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg6ds2c", "score_hidden": false, "stickied": false, "created": 1492053233.0, "created_utc": 1492024433.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg68v4n", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Garth5689", "parent_id": "t3_64y4cf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "python 3, using sympy library:\n\nI'll admit it's a bit counter to the spirit of the challenge :)\n\n    from sympy.abc import a,b,c,d\n    from sympy import sqrt\n    eq = a*sqrt(b)/(c*sqrt(d))\n    eq.subs([(a,2),(b,5),(c,5),(d,10)])\n    eq.subs([(a,45),(b,1465),(c,26),(d,15)])\n\noutput:\n\n    sqrt(2)/5\n    15*sqrt(879)/26\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;python 3, using sympy library:&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll admit it&amp;#39;s a bit counter to the spirit of the challenge :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from sympy.abc import a,b,c,d\nfrom sympy import sqrt\neq = a*sqrt(b)/(c*sqrt(d))\neq.subs([(a,2),(b,5),(c,5),(d,10)])\neq.subs([(a,45),(b,1465),(c,26),(d,15)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sqrt(2)/5\n15*sqrt(879)/26\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg68v4n", "score_hidden": false, "stickied": false, "created": 1492048180.0, "created_utc": 1492019380.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}]