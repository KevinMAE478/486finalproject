[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A sequence of n &amp;gt; 0 integers is called a jolly jumper if the absolute values of the differences between successive elements take on all possible values through n - 1 (which may include negative numbers). For instance,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 4 2 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is a jolly jumper, because the absolute differences are 3, 2, and 1, respectively. The definition implies that any sequence of a single integer is a jolly jumper. Write a program to determine whether each of a number of sequences is a jolly jumper.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a row of numbers. The first number tells you the number of integers to calculate over, &lt;em&gt;N&lt;/em&gt;, followed by &lt;em&gt;N&lt;/em&gt; integers to calculate the differences. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3\n8 1 6 -1 8 9 5 2 7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit some indication if the sequence is a jolly jumper or not. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3 JOLLY\n8 1 6 -1 8 9 5 2 7 NOT JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3\n5 1 4 2 -1 6\n4 19 22 24 21\n4 19 22 24 25\n4 2 -1 0 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3 JOLLY\n5 1 4 2 -1 6 NOT JOLLY\n4 19 22 24 21 NOT JOLLY\n4 19 22 24 25 JOLLY\n4 2 -1 0 2 JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nA sequence of n &gt; 0 integers is called a jolly jumper if the absolute values of the differences between successive elements take on all possible values through n - 1 (which may include negative numbers). For instance,\n\n    1 4 2 3\n\nis a jolly jumper, because the absolute differences are 3, 2, and 1, respectively. The definition implies that any sequence of a single integer is a jolly jumper. Write a program to determine whether each of a number of sequences is a jolly jumper.\n\n# Input Description\n\nYou'll be given a row of numbers. The first number tells you the number of integers to calculate over, *N*, followed by *N* integers to calculate the differences. Example:\n\n    4 1 4 2 3\n    8 1 6 -1 8 9 5 2 7\n\n# Output Description\n\nYour program should emit some indication if the sequence is a jolly jumper or not. Example:\n\n    4 1 4 2 3 JOLLY\n    8 1 6 -1 8 9 5 2 7 NOT JOLLY\n\n# Challenge Input\n\n\t4 1 4 2 3\n\t5 1 4 2 -1 6\n\t4 19 22 24 21\n\t4 19 22 24 25\n\t4 2 -1 0 2\n\n# Challenge Output\n\n\t4 1 4 2 3 JOLLY\n\t5 1 4 2 -1 6 NOT JOLLY\n\t4 19 22 24 21 NOT JOLLY\n\t4 19 22 24 25 JOLLY\n\t4 2 -1 0 2 JOLLY\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65vgkh", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 66, "report_reasons": null, "author": "jnazario", "saved": false, "mod_reports": [], "name": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "approved_by": null, "over_18": false, "domain": "self.dailyprogrammer", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/", "num_reports": null, "locked": false, "stickied": false, "created": 1492463579.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/", "author_flair_text": "2 0", "quarantine": false, "title": "[2017-04-17] Challenge #311 [Easy] Jolly Jumper", "created_utc": 1492434779.0, "distinguished": null, "media": null, "upvote_ratio": 0.93, "num_comments": 67, "visited": false, "subreddit_type": "restricted", "ups": 66}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdxllm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "moeghoeg", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Racket**\n\n    #lang racket\n\n    (define (jolly len lst)\n      (equal? (range 1 len)\n              (sort (map (\u03bb (x y) (abs (- x y))) \n                         (cdr lst) \n                         (drop-right lst 1))\n                    &lt;)))\n\n    (for ([line (in-lines)])\n         (displayln (~a line \" \" \n                             (let ([s (map string-&gt;number (string-split line))])\n                                (if (jolly (car s) (cdr s)) \"\" \"NOT \"))\n                             \"JOLLY\")))\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Racket&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang racket\n\n(define (jolly len lst)\n  (equal? (range 1 len)\n          (sort (map (\u03bb (x y) (abs (- x y))) \n                     (cdr lst) \n                     (drop-right lst 1))\n                &amp;lt;)))\n\n(for ([line (in-lines)])\n     (displayln (~a line &amp;quot; &amp;quot; \n                         (let ([s (map string-&amp;gt;number (string-split line))])\n                            (if (jolly (car s) (cdr s)) &amp;quot;&amp;quot; &amp;quot;NOT &amp;quot;))\n                         &amp;quot;JOLLY&amp;quot;)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdxllm", "score_hidden": true, "stickied": false, "created": 1492484258.0, "created_utc": 1492455458.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdyokv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gandalfx", "parent_id": "t1_dgdxd5l", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Python is awesome like that. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python is awesome like that. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdyokv", "score_hidden": true, "stickied": false, "created": 1492485486.0, "created_utc": 1492456686.0, "depth": 4, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdxd5l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Farren246", "parent_id": "t1_dgdofoi", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I don't know Python syntax very well, but knowing the problem and your solution going in, I'm somehow still able to read this...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t know Python syntax very well, but knowing the problem and your solution going in, I&amp;#39;m somehow still able to read this...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdxd5l", "score_hidden": true, "stickied": false, "created": 1492483992.0, "created_utc": 1492455192.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdofoi", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "gandalfx", "parent_id": "t1_dgdm3e4", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I can do it in a single line, but then it looses quite a bit of readability:\n\n    def is_jolly_jumper_short(ns):\n        return not set(range(1, len(ns))) - {abs(a - b) for a, b in zip(ns, ns[1:])}", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can do it in a single line, but then it looses quite a bit of readability:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def is_jolly_jumper_short(ns):\n    return not set(range(1, len(ns))) - {abs(a - b) for a, b in zip(ns, ns[1:])}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdofoi", "score_hidden": false, "stickied": false, "created": 1492474042.0, "created_utc": 1492445242.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdm3e4", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "Farren246", "parent_id": "t1_dgdkr4t", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Holy fuck that's small! I need to learn more better Python...", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Holy fuck that&amp;#39;s small! I need to learn more better Python...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdm3e4", "score_hidden": false, "stickied": false, "created": 1492471345.0, "created_utc": 1492442545.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdvzw2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zatoichi49", "parent_id": "t1_dgdkr4t", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Very nice!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very nice!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdvzw2", "score_hidden": true, "stickied": false, "created": 1492482441.0, "created_utc": 1492453641.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdyofi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Soccer21x", "parent_id": "t1_dgdkr4t", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "TIL about zip. That's pretty slick.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TIL about zip. That&amp;#39;s pretty slick.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdyofi", "score_hidden": true, "stickied": false, "created": 1492485481.0, "created_utc": 1492456681.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdkr4t", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "gandalfx", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3** (most likely Python 2 as well)\n\n    def is_jolly_jumper(numbers):\n        to_eliminate = set(range(1, len(numbers)))\n        for a, b in zip(numbers, numbers[1:]):\n            to_eliminate.discard(abs(a - b))\n        return not to_eliminate\n\nTests:\n\n    challenges = {  # without the leading length, don't need that\n        \"1 4 2 3\": True,\n        \"1 3 1 3\": False,\n        \"1 4 2 3\": True,\n        \"1 6 -1 8 9 5 2 7\": False,\n        \"1 4 2 -1 6\": False,\n        \"19 22 24 21\": False,\n        \"19 22 24 25\": True,\n        \"2 -1 0 2\": True,\n        \"5\": True,\n        \"0\": True,\n    }\n    for input, expected in challenges.items():\n        assert is_jolly_jumper(list(map(int, input.split()))) == expected", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt; (most likely Python 2 as well)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def is_jolly_jumper(numbers):\n    to_eliminate = set(range(1, len(numbers)))\n    for a, b in zip(numbers, numbers[1:]):\n        to_eliminate.discard(abs(a - b))\n    return not to_eliminate\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tests:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;challenges = {  # without the leading length, don&amp;#39;t need that\n    &amp;quot;1 4 2 3&amp;quot;: True,\n    &amp;quot;1 3 1 3&amp;quot;: False,\n    &amp;quot;1 4 2 3&amp;quot;: True,\n    &amp;quot;1 6 -1 8 9 5 2 7&amp;quot;: False,\n    &amp;quot;1 4 2 -1 6&amp;quot;: False,\n    &amp;quot;19 22 24 21&amp;quot;: False,\n    &amp;quot;19 22 24 25&amp;quot;: True,\n    &amp;quot;2 -1 0 2&amp;quot;: True,\n    &amp;quot;5&amp;quot;: True,\n    &amp;quot;0&amp;quot;: True,\n}\nfor input, expected in challenges.items():\n    assert is_jolly_jumper(list(map(int, input.split()))) == expected\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdkr4t", "score_hidden": false, "stickied": false, "created": 1492469701.0, "created_utc": 1492440901.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdh25z", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "jnazario", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "F# solution\n\n\tlet jolly (s:string) : string = \n\t\tlet differences (s:string) : int list = \n\t\t\ts.Split(' ').[1..] \n\t\t\t|&gt; Array.map (fun x -&gt; int x) \n\t\t\t|&gt; Seq.windowed 2 \n\t\t\t|&gt; Seq.map (fun [|x;y|] -&gt; System.Math.Abs(x-y)) \n\t\t\t|&gt; Seq.sort\n\t\t\t|&gt; List.ofSeq\n\n\t\tlet target (s:string) : int list =\n\t\t\tlet n = s.Split(' ').[0] |&gt; int\n\t\t\t[(n-n+1)..(n-1)] \n\t\tmatch (differences s) = (target s) with\n\t\t| true  -&gt; \"JOLLY\"\n\t\t| false -&gt; \"NOT JOLLY\"", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;F# solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let jolly (s:string) : string = \n    let differences (s:string) : int list = \n        s.Split(&amp;#39; &amp;#39;).[1..] \n        |&amp;gt; Array.map (fun x -&amp;gt; int x) \n        |&amp;gt; Seq.windowed 2 \n        |&amp;gt; Seq.map (fun [|x;y|] -&amp;gt; System.Math.Abs(x-y)) \n        |&amp;gt; Seq.sort\n        |&amp;gt; List.ofSeq\n\n    let target (s:string) : int list =\n        let n = s.Split(&amp;#39; &amp;#39;).[0] |&amp;gt; int\n        [(n-n+1)..(n-1)] \n    match (differences s) = (target s) with\n    | true  -&amp;gt; &amp;quot;JOLLY&amp;quot;\n    | false -&amp;gt; &amp;quot;NOT JOLLY&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdh25z", "score_hidden": false, "stickied": false, "created": 1492464479.0, "created_utc": 1492435679.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdjbqx", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "qwesx", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "D solution.\n\nI left out the parsing and input-error checking because it's boring anyway. I went with a bool array.\n\n    void print(int[] vals, bool[] dut) {\n        import std.stdio: write, writeln;\n        import std.algorithm: all;\n        \n        foreach (val; vals)\n            write(val, \" \");\n        writeln(all!\"a\"(dut) ? \"\" : \"NOT \", \"JOLLY\");\n    }\n    \n    void compute_and_print(int[] vals) {\n        import std.math: abs;\n        \n        if (vals.length == 1) {\n            print(vals, [true]);\n        } else {\n            auto diff = new bool[vals.length - 1];\n            for (int i = 1; i &lt; vals.length; ++i) {\n                int idx = (vals[i-1] - vals[i]).abs - 1;\n                if ((idx &lt; 0) || (idx &gt;= diff.length) || diff[idx]) {\n                    print(vals, [false]);\n                    return;\n                } else {\n                    diff[idx] = true;\n                }\n            }\n            print(vals, diff);\n        }\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;D solution.&lt;/p&gt;\n\n&lt;p&gt;I left out the parsing and input-error checking because it&amp;#39;s boring anyway. I went with a bool array.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void print(int[] vals, bool[] dut) {\n    import std.stdio: write, writeln;\n    import std.algorithm: all;\n\n    foreach (val; vals)\n        write(val, &amp;quot; &amp;quot;);\n    writeln(all!&amp;quot;a&amp;quot;(dut) ? &amp;quot;&amp;quot; : &amp;quot;NOT &amp;quot;, &amp;quot;JOLLY&amp;quot;);\n}\n\nvoid compute_and_print(int[] vals) {\n    import std.math: abs;\n\n    if (vals.length == 1) {\n        print(vals, [true]);\n    } else {\n        auto diff = new bool[vals.length - 1];\n        for (int i = 1; i &amp;lt; vals.length; ++i) {\n            int idx = (vals[i-1] - vals[i]).abs - 1;\n            if ((idx &amp;lt; 0) || (idx &amp;gt;= diff.length) || diff[idx]) {\n                print(vals, [false]);\n                return;\n            } else {\n                diff[idx] = true;\n            }\n        }\n        print(vals, diff);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdjbqx", "score_hidden": false, "stickied": false, "created": 1492467832.0, "created_utc": 1492439032.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdl3ay", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "minikomi", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "#K5 (oK version):\n\n    &gt;  challenge :(4 1 4 2 3\n    5 1 4 2 -1 6\n    4 19 22 24 21\n    4 19 22 24 25\n    4 2 -1 0 2)\n    \n    &gt; abs:{%x*x}\n    &gt; asc:{x@&lt;x}\n    &gt; jollytest:{range: 1_!*x; found:asc@abs@1_(-':)1_x; (\"NOT JOLLY\";\"JOLLY\") range~found}\n\n    &gt;  jollytest ' challenge\n    (\"JOLLY\"\n     \"NOT JOLLY\"\n     \"NOT JOLLY\"\n     \"JOLLY\"\n     \"JOLLY\")\n\nYou can try it here: http://johnearnest.github.io/ok/index.html", "edited": 1492441554.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;K5 (oK version):&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;  challenge :(4 1 4 2 3\n5 1 4 2 -1 6\n4 19 22 24 21\n4 19 22 24 25\n4 2 -1 0 2)\n\n&amp;gt; abs:{%x*x}\n&amp;gt; asc:{x@&amp;lt;x}\n&amp;gt; jollytest:{range: 1_!*x; found:asc@abs@1_(-&amp;#39;:)1_x; (&amp;quot;NOT JOLLY&amp;quot;;&amp;quot;JOLLY&amp;quot;) range~found}\n\n&amp;gt;  jollytest &amp;#39; challenge\n(&amp;quot;JOLLY&amp;quot;\n &amp;quot;NOT JOLLY&amp;quot;\n &amp;quot;NOT JOLLY&amp;quot;\n &amp;quot;JOLLY&amp;quot;\n &amp;quot;JOLLY&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can try it here: &lt;a href=\"http://johnearnest.github.io/ok/index.html\"&gt;http://johnearnest.github.io/ok/index.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdl3ay", "score_hidden": false, "stickied": false, "created": 1492470122.0, "created_utc": 1492441322.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdoarj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Toctave", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**J**\n\n    *./@(+/@(}.@i.@# =\"0 _ &gt;./@([ , -)\"0@}.@(] - 0 , }:)))\n\nJust recently started learning J, it's pretty cool how obfuscated solutions such a simple problem can give", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;*./@(+/@(}.@i.@# =&amp;quot;0 _ &amp;gt;./@([ , -)&amp;quot;0@}.@(] - 0 , }:)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just recently started learning J, it&amp;#39;s pretty cool how obfuscated solutions such a simple problem can give&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdoarj", "score_hidden": false, "stickied": false, "created": 1492473884.0, "created_utc": 1492445084.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgek6g4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "chunes", "parent_id": "t1_dgedz4g", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Order doesn't matter. Think of it as comparing sets.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Order doesn&amp;#39;t matter. Think of it as comparing sets.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgek6g4", "score_hidden": true, "stickied": false, "created": 1492511612.0, "created_utc": 1492482812.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgedz4g", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evolvish", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I have a solution but I'm not sure if I'm correct in my understanding of a jolly number due to the last line of your expected output. My understanding is you do this:\n\n[4], 1, 4, 2, 3    [The first number being the number you start from.]\n\nThen for each number after, you count down:\n\n1-4= -3(3)\n\n4-2= (2)\n\n2-3= (1)\n\nBut for the last one:\n\n[4], 2, -1, 0, 2\n\n2- -1= (3)\n\n-1-0= (**1**)\n\n0-2=(2)\n\nDoes this mean that order doesn't matter? The wording seems to imply that they must be in sequential order.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have a solution but I&amp;#39;m not sure if I&amp;#39;m correct in my understanding of a jolly number due to the last line of your expected output. My understanding is you do this:&lt;/p&gt;\n\n&lt;p&gt;[4], 1, 4, 2, 3    [The first number being the number you start from.]&lt;/p&gt;\n\n&lt;p&gt;Then for each number after, you count down:&lt;/p&gt;\n\n&lt;p&gt;1-4= -3(3)&lt;/p&gt;\n\n&lt;p&gt;4-2= (2)&lt;/p&gt;\n\n&lt;p&gt;2-3= (1)&lt;/p&gt;\n\n&lt;p&gt;But for the last one:&lt;/p&gt;\n\n&lt;p&gt;[4], 2, -1, 0, 2&lt;/p&gt;\n\n&lt;p&gt;2- -1= (3)&lt;/p&gt;\n\n&lt;p&gt;-1-0= (&lt;strong&gt;1&lt;/strong&gt;)&lt;/p&gt;\n\n&lt;p&gt;0-2=(2)&lt;/p&gt;\n\n&lt;p&gt;Does this mean that order doesn&amp;#39;t matter? The wording seems to imply that they must be in sequential order.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgedz4g", "score_hidden": true, "stickied": false, "created": 1492504075.0, "created_utc": 1492475275.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdlx7t", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Farren246", "parent_id": "t1_dgdilmv", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Ooh, so the range is n-1 =&gt; 5 elements - 1 =&gt; 4, and any integer difference 4 or less will still be jolly.\n\nSo 2 - (-1) = 3 doesn't break it (still less than 4), nor does (-1) - 0 = (-1).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ooh, so the range is n-1 =&amp;gt; 5 elements - 1 =&amp;gt; 4, and any integer difference 4 or less will still be jolly.&lt;/p&gt;\n\n&lt;p&gt;So 2 - (-1) = 3 doesn&amp;#39;t break it (still less than 4), nor does (-1) - 0 = (-1).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdlx7t", "score_hidden": false, "stickied": false, "created": 1492471143.0, "created_utc": 1492442343.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdiyun", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t1_dgdilmv", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Alrighty, thanks for clearing that up.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Alrighty, thanks for clearing that up.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdiyun", "score_hidden": false, "stickied": false, "created": 1492467335.0, "created_utc": 1492438535.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdilmv", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "jnazario", "parent_id": "t1_dgdi87n", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "no, that refers to some sequence of integers of 1 or more numbers, which may be negative. \"n &gt; 0\" in this case refers to the length of the sequence not restrictions on members of the sequence. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;no, that refers to some sequence of integers of 1 or more numbers, which may be negative. &amp;quot;n &amp;gt; 0&amp;quot; in this case refers to the length of the sequence not restrictions on members of the sequence. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdilmv", "score_hidden": false, "stickied": false, "created": 1492466828.0, "created_utc": 1492438028.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdi87n", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Why is the last challenge input _JOLLY_? Shouldn't it be _NOT JOLLY_ it contains a negative number. The very first sentence says the sequence should be _n &gt; 0_.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why is the last challenge input &lt;em&gt;JOLLY&lt;/em&gt;? Shouldn&amp;#39;t it be &lt;em&gt;NOT JOLLY&lt;/em&gt; it contains a negative number. The very first sentence says the sequence should be &lt;em&gt;n &amp;gt; 0&lt;/em&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdi87n", "score_hidden": false, "stickied": false, "created": 1492466287.0, "created_utc": 1492437487.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdijaj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "5k17", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Factor**\n\n    USING: grouping splitting math.parser ;\n    \n    readln \" \" split [ string&gt;number ] map\n    unclip [ head ] keep\n    iota rest swap\n    2 clump [ first2 - abs ] map natural-sort\n    = [ \"JOLLY\" ] [ \"NOT JOLLY\" ] if print", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Factor&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING: grouping splitting math.parser ;\n\nreadln &amp;quot; &amp;quot; split [ string&amp;gt;number ] map\nunclip [ head ] keep\niota rest swap\n2 clump [ first2 - abs ] map natural-sort\n= [ &amp;quot;JOLLY&amp;quot; ] [ &amp;quot;NOT JOLLY&amp;quot; ] if print\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdijaj", "score_hidden": false, "stickied": false, "created": 1492466737.0, "created_utc": 1492437937.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdjntn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "el_loke", "parent_id": "t1_dgdjjjf", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Oh, yes. Thank you!\nWill do it again", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh, yes. Thank you!\nWill do it again&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdjntn", "score_hidden": false, "stickied": false, "created": 1492468288.0, "created_utc": 1492439488.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdjjjf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gandalfx", "parent_id": "t1_dgdivzd", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "That doesn't work. For instance the input `1 3 1 3` has only gaps of width 2 (definitely not jolly) but will be accept by your function since the sum of the gaps is 2+2+2 = 6 = 1+2+3.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That doesn&amp;#39;t work. For instance the input &lt;code&gt;1 3 1 3&lt;/code&gt; has only gaps of width 2 (definitely not jolly) but will be accept by your function since the sum of the gaps is 2+2+2 = 6 = 1+2+3.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdjjjf", "score_hidden": false, "stickied": false, "created": 1492468125.0, "created_utc": 1492439325.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdivzd", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "el_loke", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3**\n\n    \"\"\"\n    for convenience it takes an array as input,\n    but with little redo will work with space separated numbers\n    \"\"\"\n    def jolly(numbers):\n        \"\"\"THIS METHOD DOES NOT WORK, WILL KEEP IT FOR FUTURE REFERENCE\"\"\"\n        \n        \"\"\"The sum from 0 to n-1\"\"\"\n        suma = sum(range(0,numbers[0]))\n\n        for idx in range(1,len(numbers)-1):\n            diff = abs(numbers[idx] - numbers[idx+1])\n            suma -= diff\n\n        \"\"\"\n        A sequence is Jolly if after substracting the subsequent differences\n        to the sum from 0 to n-1, the result is 0.\n        Or by definition, if the sequence is only one number.\n        \"\"\"\n        if(not suma or numbers[0] == 1):\n            print(str(numbers) + \"Jolly\")\n        else:\n            print(str(numbers) + \"Not Jolly\")\n\n\n    \n    \n    \n    def jolly_2(numbers):\n        \n        suma = sum(range(0,numbers[0]))\n\n        differences = set()\n\n        for idx in range(1,len(numbers)-1):\n            diff = abs(numbers[idx] - numbers[idx+1])\n            differences.add(diff)\n\n        sum_of_diff = sum(differences)\n\n\n        if(suma == sum_of_diff or numbers[0] == 1):\n            print(str(numbers) + \"Jolly\")\n        else:\n            print(str(numbers) + \"Not Jolly\")", "edited": 1492440144.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;\nfor convenience it takes an array as input,\nbut with little redo will work with space separated numbers\n&amp;quot;&amp;quot;&amp;quot;\ndef jolly(numbers):\n    &amp;quot;&amp;quot;&amp;quot;THIS METHOD DOES NOT WORK, WILL KEEP IT FOR FUTURE REFERENCE&amp;quot;&amp;quot;&amp;quot;\n\n    &amp;quot;&amp;quot;&amp;quot;The sum from 0 to n-1&amp;quot;&amp;quot;&amp;quot;\n    suma = sum(range(0,numbers[0]))\n\n    for idx in range(1,len(numbers)-1):\n        diff = abs(numbers[idx] - numbers[idx+1])\n        suma -= diff\n\n    &amp;quot;&amp;quot;&amp;quot;\n    A sequence is Jolly if after substracting the subsequent differences\n    to the sum from 0 to n-1, the result is 0.\n    Or by definition, if the sequence is only one number.\n    &amp;quot;&amp;quot;&amp;quot;\n    if(not suma or numbers[0] == 1):\n        print(str(numbers) + &amp;quot;Jolly&amp;quot;)\n    else:\n        print(str(numbers) + &amp;quot;Not Jolly&amp;quot;)\n\n\n\n\n\ndef jolly_2(numbers):\n\n    suma = sum(range(0,numbers[0]))\n\n    differences = set()\n\n    for idx in range(1,len(numbers)-1):\n        diff = abs(numbers[idx] - numbers[idx+1])\n        differences.add(diff)\n\n    sum_of_diff = sum(differences)\n\n\n    if(suma == sum_of_diff or numbers[0] == 1):\n        print(str(numbers) + &amp;quot;Jolly&amp;quot;)\n    else:\n        print(str(numbers) + &amp;quot;Not Jolly&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdivzd", "score_hidden": false, "stickied": false, "created": 1492467225.0, "created_utc": 1492438425.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdk25x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gabyjunior", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "C solution\n\n    #include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n    \n    int main(void) {\n    int n, *f, v1, v2, d, i;\n        if (scanf(\"%d\", &amp;n) != 1 || !n) {\n            return EXIT_FAILURE;\n        }\n        f = calloc((size_t)n, sizeof(int));\n        if (!f) {\n            return EXIT_FAILURE;\n        }\n        if (scanf(\"%d\", &amp;v1) != 1) {\n            free(f);\n            return EXIT_FAILURE;\n        }\n        f[0] = 1;\n        for (i = 1; i &lt; n; i++) {\n            if (scanf(\"%d\", &amp;v2) != 1) {\n                free(f);\n                return EXIT_FAILURE;\n            }\n            d = abs(v1-v2);\n            if (d &gt;= n || f[d]) {\n                break;\n            }\n            f[d] = 1;\n            v1 = v2;\n        }\n        if (i &lt; n) {\n            printf(\"NOT \");\n        }\n        puts(\"JOLLY\");\n        free(f);\n        return EXIT_SUCCESS;\n    }\n", "edited": 1492440208.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\nint main(void) {\nint n, *f, v1, v2, d, i;\n    if (scanf(&amp;quot;%d&amp;quot;, &amp;amp;n) != 1 || !n) {\n        return EXIT_FAILURE;\n    }\n    f = calloc((size_t)n, sizeof(int));\n    if (!f) {\n        return EXIT_FAILURE;\n    }\n    if (scanf(&amp;quot;%d&amp;quot;, &amp;amp;v1) != 1) {\n        free(f);\n        return EXIT_FAILURE;\n    }\n    f[0] = 1;\n    for (i = 1; i &amp;lt; n; i++) {\n        if (scanf(&amp;quot;%d&amp;quot;, &amp;amp;v2) != 1) {\n            free(f);\n            return EXIT_FAILURE;\n        }\n        d = abs(v1-v2);\n        if (d &amp;gt;= n || f[d]) {\n            break;\n        }\n        f[d] = 1;\n        v1 = v2;\n    }\n    if (i &amp;lt; n) {\n        printf(&amp;quot;NOT &amp;quot;);\n    }\n    puts(&amp;quot;JOLLY&amp;quot;);\n    free(f);\n    return EXIT_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdk25x", "score_hidden": false, "stickied": false, "created": 1492468814.0, "created_utc": 1492440014.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdko6x", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "skeeto", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**C**\n\n    #include &lt;stdio.h&gt;\n    #include &lt;stdlib.h&gt;\n\n    #define MAX_N 256\n\n    int\n    main(void)\n    {\n        int n;\n        while (scanf(\"%d\", &amp;n) == 1) {\n            unsigned char table[MAX_N] = {0};\n            int valid = 1;\n            int last;\n            scanf(\"%d\", &amp;last);\n            printf(\"%d %d\", n, last);\n            for (int i = 1; i &lt; n; i++) {\n                int v;\n                scanf(\"%d\", &amp;v);\n                printf(\" %d\", v);\n                table[abs(v - last)]++;\n                last = v;\n            }\n            for (int i = 1; i &lt; n; i++)\n                if (table[i] != 1)\n                    valid = 0;\n            if (!valid)\n                printf(\" NOT\");\n            puts(\" JOLLY\");\n        }\n        return 0;\n    }\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\n#define MAX_N 256\n\nint\nmain(void)\n{\n    int n;\n    while (scanf(&amp;quot;%d&amp;quot;, &amp;amp;n) == 1) {\n        unsigned char table[MAX_N] = {0};\n        int valid = 1;\n        int last;\n        scanf(&amp;quot;%d&amp;quot;, &amp;amp;last);\n        printf(&amp;quot;%d %d&amp;quot;, n, last);\n        for (int i = 1; i &amp;lt; n; i++) {\n            int v;\n            scanf(&amp;quot;%d&amp;quot;, &amp;amp;v);\n            printf(&amp;quot; %d&amp;quot;, v);\n            table[abs(v - last)]++;\n            last = v;\n        }\n        for (int i = 1; i &amp;lt; n; i++)\n            if (table[i] != 1)\n                valid = 0;\n        if (!valid)\n            printf(&amp;quot; NOT&amp;quot;);\n        puts(&amp;quot; JOLLY&amp;quot;);\n    }\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdko6x", "score_hidden": false, "stickied": false, "created": 1492469599.0, "created_utc": 1492440799.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdksyn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "esgarth", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "r6rs scheme\n\n    (define (succ-diff nums)\n        (if (or (null? nums) (null? (cdr nums)))\n    \t'()\n    \t(cons (abs (- (car nums) (cadr nums)))\n    \t  (succ-diff (cdr nums)))))\n\n    (define (jolly? total nums)\n      (let ([diffs (sort &gt; (succ-diff nums))])\n        (and (= 1 (apply min diffs) 1)\n    \t (= (- total 1) (apply max diffs))\n    \t (apply = 1 (succ-diff diffs)))))\n\n    (define (read-n n)\n      (if (zero? n)\n          '()\n          (cons (read) (read-n (- n 1)))))\n\n    (define (jolly-repl)\n      (let ([n (read)])\n        (unless (eof-object? n)\n          (let ([j? (jolly? n (read-n n))])\n    \t(if j?\n            (display \"JOLLY\")\n    \t    (display \"NOT JOLLY\"))\n    \t(newline))\n    \t(jolly-repl))))\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;r6rs scheme&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(define (succ-diff nums)\n    (if (or (null? nums) (null? (cdr nums)))\n    &amp;#39;()\n    (cons (abs (- (car nums) (cadr nums)))\n      (succ-diff (cdr nums)))))\n\n(define (jolly? total nums)\n  (let ([diffs (sort &amp;gt; (succ-diff nums))])\n    (and (= 1 (apply min diffs) 1)\n     (= (- total 1) (apply max diffs))\n     (apply = 1 (succ-diff diffs)))))\n\n(define (read-n n)\n  (if (zero? n)\n      &amp;#39;()\n      (cons (read) (read-n (- n 1)))))\n\n(define (jolly-repl)\n  (let ([n (read)])\n    (unless (eof-object? n)\n      (let ([j? (jolly? n (read-n n))])\n    (if j?\n        (display &amp;quot;JOLLY&amp;quot;)\n        (display &amp;quot;NOT JOLLY&amp;quot;))\n    (newline))\n    (jolly-repl))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdksyn", "score_hidden": false, "stickied": false, "created": 1492469766.0, "created_utc": 1492440966.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge7zf3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "svgwrk", "parent_id": "t1_dgdzlyy", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "My reason for #4 (\"`for` loop would be faster\") was this:\n\n`foreach` in C# is based on the arcane and esoteric enumeration pattern found beneath all the `IEnumerable(T)` prettiness. Not on `IEnumerable` and `IEnumerator`, but on... Well, deep magic. Or black magic. Or whatever. Anyway, `IEnumerable` and `IEnumerable(T)` are the public face of C#'s iterator story, but they aren't the whole story. That said...\n\n...What it boils down to is that iteration via an enumerator in C# requires two method calls for each item in the collection: `MoveNext()` and `Current`, which is a property and therefore a call to `__Get_Foo()` or something like that...\n\nIn many cases these can be largely optimized away. Like in your case, where we actually have a `List(T)`, which returns a concrete enumerator (in contrast to some kind of co-routine-based creature of Cthulhu like you would get with `yield return`) hand-coded by the likes of Merlin the Murderous, or possibly Hansvald the Munificent, or even Bob the Intern, but even so the compiler has to deal with two method calls for each item in the collection.\n\nEverything I just said applies directly to Linq methods, except that Linq requires that an object actually implement `IEnumerable(T)`. \n\nIn contrast, a for loop involves no method calls at all, if I understand things correctly. For this reason, even after inlining is considered, a for loop is generally the fastest form of iteration available in C#, so, if you're interested in efficiency (which is why I assumed you did all that hard math instead of lazily checking for set membership like I did), the smart money says it's a better way to go (even though the usual caveats on profiling apply as always).\n\nObviously I didn't personally make use of one, so I don't think it matters in this case, but that's the answer to your question. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My reason for #4 (&amp;quot;&lt;code&gt;for&lt;/code&gt; loop would be faster&amp;quot;) was this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; in C# is based on the arcane and esoteric enumeration pattern found beneath all the &lt;code&gt;IEnumerable(T)&lt;/code&gt; prettiness. Not on &lt;code&gt;IEnumerable&lt;/code&gt; and &lt;code&gt;IEnumerator&lt;/code&gt;, but on... Well, deep magic. Or black magic. Or whatever. Anyway, &lt;code&gt;IEnumerable&lt;/code&gt; and &lt;code&gt;IEnumerable(T)&lt;/code&gt; are the public face of C#&amp;#39;s iterator story, but they aren&amp;#39;t the whole story. That said...&lt;/p&gt;\n\n&lt;p&gt;...What it boils down to is that iteration via an enumerator in C# requires two method calls for each item in the collection: &lt;code&gt;MoveNext()&lt;/code&gt; and &lt;code&gt;Current&lt;/code&gt;, which is a property and therefore a call to &lt;code&gt;__Get_Foo()&lt;/code&gt; or something like that...&lt;/p&gt;\n\n&lt;p&gt;In many cases these can be largely optimized away. Like in your case, where we actually have a &lt;code&gt;List(T)&lt;/code&gt;, which returns a concrete enumerator (in contrast to some kind of co-routine-based creature of Cthulhu like you would get with &lt;code&gt;yield return&lt;/code&gt;) hand-coded by the likes of Merlin the Murderous, or possibly Hansvald the Munificent, or even Bob the Intern, but even so the compiler has to deal with two method calls for each item in the collection.&lt;/p&gt;\n\n&lt;p&gt;Everything I just said applies directly to Linq methods, except that Linq requires that an object actually implement &lt;code&gt;IEnumerable(T)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;In contrast, a for loop involves no method calls at all, if I understand things correctly. For this reason, even after inlining is considered, a for loop is generally the fastest form of iteration available in C#, so, if you&amp;#39;re interested in efficiency (which is why I assumed you did all that hard math instead of lazily checking for set membership like I did), the smart money says it&amp;#39;s a better way to go (even though the usual caveats on profiling apply as always).&lt;/p&gt;\n\n&lt;p&gt;Obviously I didn&amp;#39;t personally make use of one, so I don&amp;#39;t think it matters in this case, but that&amp;#39;s the answer to your question. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge7zf3", "score_hidden": true, "stickied": false, "created": 1492496325.0, "created_utc": 1492467525.0, "depth": 3, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdzlyy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t1_dgdpdjb", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Thanks!\n\n1. I just use it here because I was attempting to make the `Main` method as uninteresting as possible. I guess that failed, haha!\n2. You're right it is, I do you like the way you did it better.\n3. I don't think I have ever used/seen that method, thanks for that.\n4. Why do you think a for loop would be faster?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;I just use it here because I was attempting to make the &lt;code&gt;Main&lt;/code&gt; method as uninteresting as possible. I guess that failed, haha!&lt;/li&gt;\n&lt;li&gt;You&amp;#39;re right it is, I do you like the way you did it better.&lt;/li&gt;\n&lt;li&gt;I don&amp;#39;t think I have ever used/seen that method, thanks for that.&lt;/li&gt;\n&lt;li&gt;Why do you think a for loop would be faster?&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdzlyy", "score_hidden": true, "stickied": false, "created": 1492486545.0, "created_utc": 1492457745.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdpdjb", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "svgwrk", "parent_id": "t1_dgdkx95", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Hey, I always like giving feedback on these things. Feel free to go gripe about mine--I always like getting it, too. Here's what I thought as I read through:\n\n1. `.ForEach()` is used pretty rarely and is usually confusing to people who haven't seen it before. People who have seen it are sometimes slightly annoyed that it inverts the usual Linq thing A) not being lazy, and Also) being wholly given over to producing side effects rather than just returning a value. Whereas `.Select()` is an expression, `.ForEach()` is a statement.\n\n2. The for loop in `IsJollyJumperEtc...` is very dense!\n\n3. It would be more efficient to sort JollyList just by calling `.Sort()` on it. There are two reasons for this: first, `.Sort()` is just plain more efficient than `.OrderBy()`; second, you could then avoid calling `.ToList()` a second time.\n\n4. I think your method for testing the validity of `jollyList` is almost certainly faster than what I used. That said, it's also quite dense! Might be more readable as a for loop. Also faster that way.", "edited": 1492446543.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey, I always like giving feedback on these things. Feel free to go gripe about mine--I always like getting it, too. Here&amp;#39;s what I thought as I read through:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;.ForEach()&lt;/code&gt; is used pretty rarely and is usually confusing to people who haven&amp;#39;t seen it before. People who have seen it are sometimes slightly annoyed that it inverts the usual Linq thing A) not being lazy, and Also) being wholly given over to producing side effects rather than just returning a value. Whereas &lt;code&gt;.Select()&lt;/code&gt; is an expression, &lt;code&gt;.ForEach()&lt;/code&gt; is a statement.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The for loop in &lt;code&gt;IsJollyJumperEtc...&lt;/code&gt; is very dense!&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It would be more efficient to sort JollyList just by calling &lt;code&gt;.Sort()&lt;/code&gt; on it. There are two reasons for this: first, &lt;code&gt;.Sort()&lt;/code&gt; is just plain more efficient than &lt;code&gt;.OrderBy()&lt;/code&gt;; second, you could then avoid calling &lt;code&gt;.ToList()&lt;/code&gt; a second time.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I think your method for testing the validity of &lt;code&gt;jollyList&lt;/code&gt; is almost certainly faster than what I used. That said, it&amp;#39;s also quite dense! Might be more readable as a for loop. Also faster that way.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdpdjb", "score_hidden": false, "stickied": false, "created": 1492475102.0, "created_utc": 1492446302.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdkx95", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**C#** - O(n-1)\n\n    void Main()\n    {\n    \tvar inputs = new List&lt;List&lt;int&gt;&gt; { new List&lt;int&gt; { 4, 1, 4, 2, 3 }\n    \t\t\t\t\t\t\t\t\t , new List&lt;int&gt; { 8, 1, 6, -1, 8, 9, 5, 2, 7 }\n    \t\t\t\t\t\t\t\t\t };\n    \n    \tinputs.ForEach(TestJolliness);\n    \n    \tinputs = new List&lt;List&lt;int&gt;&gt; { new List&lt;int&gt; { 4, 1, 4, 2, 3 }\n    \t\t\t\t\t\t\t\t , new List&lt;int&gt; { 5, 1, 4, 2, -1, 6 }\n    \t\t\t\t\t\t\t\t , new List&lt;int&gt; { 4, 19, 22, 24, 21 }\n    \t\t\t\t\t\t\t\t , new List&lt;int&gt; { 4, 19, 22, 24, 25 }\n    \t\t\t\t\t\t\t\t , new List&lt;int&gt; { 4, 2, -1, 0, 2 }\n    \t\t\t\t\t\t\t\t };\n    \n    \tConsole.WriteLine(\"\\n--- CHALLENGE ---\");\n    \tinputs.ForEach(TestJolliness);\n    }\n    \n    // Define other methods and classes here\n    bool IsJollyJumperSequence(List&lt;int&gt; sequnece)\n    {\n    \tvar input = sequnece.Skip(1).ToList();\n    \tvar jollyList = new List&lt;int&gt;();\n    \tvar numElements = sequnece.First();\n    \tfor (int i = 1; i &lt; numElements; i++)\n    \t{\n    \t\tjollyList.Add(Math.Abs(input[i-1]-input[i]));\n    \t}\n    \tjollyList = jollyList.OrderBy(i =&gt; i).ToList();\n    \tint checkvalue = jollyList.First();\n    \treturn !jollyList.Any(val =&gt; val != checkvalue++);\n    }\n    \n    void TestJolliness(List&lt;int&gt; input)\n    {\n    \tConsole.WriteLine(IsJollyJumperSequence(input)?\"JOLLY\":\"NOT JOLLY\");\n    }\n\nFeedback welcome.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt; - O(n-1)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void Main()\n{\n    var inputs = new List&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; { new List&amp;lt;int&amp;gt; { 4, 1, 4, 2, 3 }\n                                     , new List&amp;lt;int&amp;gt; { 8, 1, 6, -1, 8, 9, 5, 2, 7 }\n                                     };\n\n    inputs.ForEach(TestJolliness);\n\n    inputs = new List&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; { new List&amp;lt;int&amp;gt; { 4, 1, 4, 2, 3 }\n                                 , new List&amp;lt;int&amp;gt; { 5, 1, 4, 2, -1, 6 }\n                                 , new List&amp;lt;int&amp;gt; { 4, 19, 22, 24, 21 }\n                                 , new List&amp;lt;int&amp;gt; { 4, 19, 22, 24, 25 }\n                                 , new List&amp;lt;int&amp;gt; { 4, 2, -1, 0, 2 }\n                                 };\n\n    Console.WriteLine(&amp;quot;\\n--- CHALLENGE ---&amp;quot;);\n    inputs.ForEach(TestJolliness);\n}\n\n// Define other methods and classes here\nbool IsJollyJumperSequence(List&amp;lt;int&amp;gt; sequnece)\n{\n    var input = sequnece.Skip(1).ToList();\n    var jollyList = new List&amp;lt;int&amp;gt;();\n    var numElements = sequnece.First();\n    for (int i = 1; i &amp;lt; numElements; i++)\n    {\n        jollyList.Add(Math.Abs(input[i-1]-input[i]));\n    }\n    jollyList = jollyList.OrderBy(i =&amp;gt; i).ToList();\n    int checkvalue = jollyList.First();\n    return !jollyList.Any(val =&amp;gt; val != checkvalue++);\n}\n\nvoid TestJolliness(List&amp;lt;int&amp;gt; input)\n{\n    Console.WriteLine(IsJollyJumperSequence(input)?&amp;quot;JOLLY&amp;quot;:&amp;quot;NOT JOLLY&amp;quot;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Feedback welcome.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdkx95", "score_hidden": false, "stickied": false, "created": 1492469913.0, "created_utc": 1492441113.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdp5ly", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quantik64", "parent_id": "t1_dgdp0sq", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "OH! I see. Thanks. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OH! I see. Thanks. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdp5ly", "score_hidden": false, "stickied": false, "created": 1492474856.0, "created_utc": 1492446056.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdp0sq", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "curtmack", "parent_id": "t1_dgdn6t3", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I had the same confusion. The first number in each input problem isn't part of the list, but rather the number of elements in the *real* list, i.e. the count of numbers on the input line not including itself.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I had the same confusion. The first number in each input problem isn&amp;#39;t part of the list, but rather the number of elements in the &lt;em&gt;real&lt;/em&gt; list, i.e. the count of numbers on the input line not including itself.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdp0sq", "score_hidden": false, "stickied": false, "created": 1492474705.0, "created_utc": 1492445905.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdpg50", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "svgwrk", "parent_id": "t1_dgdn6t3", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "The first value in each of the challenge inputs is only there to tell you how many values are in the sequence. It is *not* a part of the sequence itself. Took me forever to figure that out, because I only skimmed the directions.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The first value in each of the challenge inputs is only there to tell you how many values are in the sequence. It is &lt;em&gt;not&lt;/em&gt; a part of the sequence itself. Took me forever to figure that out, because I only skimmed the directions.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdpg50", "score_hidden": false, "stickied": false, "created": 1492475180.0, "created_utc": 1492446380.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdn6t3", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quantik64", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "The first one is NOT JOLLY right? Because it never takes on the value 4 even though there are 5 integers but (3, 3, 2, 1). ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The first one is NOT JOLLY right? Because it never takes on the value 4 even though there are 5 integers but (3, 3, 2, 1). &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdn6t3", "score_hidden": false, "stickied": false, "created": 1492472615.0, "created_utc": 1492443815.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdnw2o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "quantik64", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "I believe your classification of JOLLY in your solutions is incorrect. As mentioned above.\n\nAssuming I understand what you truly mean by NOT JOLLY which is the list contains a sublist that is both ordered and consists of *all* elements between 1 and n-1?\n\n**EDIT** Realized I had a misunderstanding. This should be correct now:\n\n**PERL**\n\n\t#!/usr/bin/perl\n\t#jolly.pl\n\tuse warnings;\n\tuse strict;\n\n\tmy @inputy = @ARGV[1..$#ARGV];\n\tmy @jolly = ();\n\tfor my $i (0..($#inputy-1))\t{\n\t\tif (abs($inputy[$i]-$inputy[$i+1]) ~~ [1..$#inputy])\t{\n\t\t\tpush @jolly, abs($inputy[$i]-$inputy[$i+1]);\n\t\t}\n\t}\n\tforeach (1..$#inputy)\t{\n\t\tunless ($_ ~~ @jolly)\t{\n\t\t\tjolly(0);\n\t\t}\n\t}\n\tjolly(1);\n\tsub jolly\t{\n\t\tforeach (@ARGV)\t{\n\t\t\tprint $_, ' ';\n\t\t}\n\t\tif ($_[0] == 1)\t{\n\t\t\tprint \"JOLLY\\n\";\n\t\t}\n\t\telse\t{\n\t\t\tprint \"NOT JOLLY\\n\";\n\t\t}\n        exit;\n\t}\n\nOf course you can replace all $#inputy with $ARGV[0] if you wish.", "edited": 1492447696.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe your classification of JOLLY in your solutions is incorrect. As mentioned above.&lt;/p&gt;\n\n&lt;p&gt;Assuming I understand what you truly mean by NOT JOLLY which is the list contains a sublist that is both ordered and consists of &lt;em&gt;all&lt;/em&gt; elements between 1 and n-1?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Realized I had a misunderstanding. This should be correct now:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;PERL&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl\n#jolly.pl\nuse warnings;\nuse strict;\n\nmy @inputy = @ARGV[1..$#ARGV];\nmy @jolly = ();\nfor my $i (0..($#inputy-1)) {\n    if (abs($inputy[$i]-$inputy[$i+1]) ~~ [1..$#inputy])    {\n        push @jolly, abs($inputy[$i]-$inputy[$i+1]);\n    }\n}\nforeach (1..$#inputy)   {\n    unless ($_ ~~ @jolly)   {\n        jolly(0);\n    }\n}\njolly(1);\nsub jolly   {\n    foreach (@ARGV) {\n        print $_, &amp;#39; &amp;#39;;\n    }\n    if ($_[0] == 1) {\n        print &amp;quot;JOLLY\\n&amp;quot;;\n    }\n    else    {\n        print &amp;quot;NOT JOLLY\\n&amp;quot;;\n    }\n    exit;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you can replace all $#inputy with $ARGV[0] if you wish.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdnw2o", "score_hidden": false, "stickied": false, "created": 1492473417.0, "created_utc": 1492444617.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdo1fp", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "popillol", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Go / Golang** [Playground Link](https://play.golang.org/p/wiimUdeh-l). \n\nCode:\n\n\tpackage main\n\t\n\timport (\n\t\t\"fmt\"\n\t\t\"strings\"\n\t\t\"strconv\"\n\t)\n\t\n\tfunc jolly(input string) string {\n\t\tss := strings.Fields(input)\n\t\t// convert to int slice\n\t\ts := make([]int, len(ss))\n\t\tfor i := range ss {\n\t\t\ts[i], _ = strconv.Atoi(ss[i])\n\t\t}\n\t\tn, v := s[0], s[1:]\n\t\tm := make(map[int]bool)\n\t\tvar x int\n\t\tfor i := 0; i &lt; len(v)-1; i++ {\n\t\t\tx = abs(v[i] - v[i+1])\n\t\t\tm[x] = true\n\t\t}\n\t\tfor i := 1; i &lt; n-1; i++ {\n\t\t\tif !m[i] {\n\t\t\t\treturn \"NOT JOLLY\"\n\t\t\t}\n\t\t}\n\t\treturn \"JOLLY\"\n\t}\n\t\n\tfunc Jolly(input string) {\n\t\ts := strings.Split(input, \"\\n\")\n\t\tfor i := range s {\n\t\t\tv := jolly(s[i])\n\t\t\tfmt.Println(v, s[i])\n\t\t}\n\t}\n\t\n\tfunc abs(v int) int {\n\t\tif v &gt;= 0 {\n\t\t\treturn v\n\t\t} else {\n\t\t\treturn v*-1\n\t\t}\n\t}\n\t\n\tfunc main() {\n\t\tinput := `4 1 4 2 3\n\t\t\t  5 1 4 2 -1 6\n\t\t          4 19 22 24 21\n\t\t\t  4 19 22 24 25\n\t\t\t  4 2 -1 0 2`\n\t\tJolly(input)\n\t}\n\nOutput: \n\n    JOLLY 4 1 4 2 3\n    NOT JOLLY 5 1 4 2 -1 6\n    NOT JOLLY 4 19 22 24 21\n    JOLLY 4 19 22 24 25\n    JOLLY 4 2 -1 0 2", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Go / Golang&lt;/strong&gt; &lt;a href=\"https://play.golang.org/p/wiimUdeh-l\"&gt;Playground Link&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;Code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;strings&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc jolly(input string) string {\n    ss := strings.Fields(input)\n    // convert to int slice\n    s := make([]int, len(ss))\n    for i := range ss {\n        s[i], _ = strconv.Atoi(ss[i])\n    }\n    n, v := s[0], s[1:]\n    m := make(map[int]bool)\n    var x int\n    for i := 0; i &amp;lt; len(v)-1; i++ {\n        x = abs(v[i] - v[i+1])\n        m[x] = true\n    }\n    for i := 1; i &amp;lt; n-1; i++ {\n        if !m[i] {\n            return &amp;quot;NOT JOLLY&amp;quot;\n        }\n    }\n    return &amp;quot;JOLLY&amp;quot;\n}\n\nfunc Jolly(input string) {\n    s := strings.Split(input, &amp;quot;\\n&amp;quot;)\n    for i := range s {\n        v := jolly(s[i])\n        fmt.Println(v, s[i])\n    }\n}\n\nfunc abs(v int) int {\n    if v &amp;gt;= 0 {\n        return v\n    } else {\n        return v*-1\n    }\n}\n\nfunc main() {\n    input := `4 1 4 2 3\n          5 1 4 2 -1 6\n              4 19 22 24 21\n          4 19 22 24 25\n          4 2 -1 0 2`\n    Jolly(input)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;JOLLY 4 1 4 2 3\nNOT JOLLY 5 1 4 2 -1 6\nNOT JOLLY 4 19 22 24 21\nJOLLY 4 19 22 24 25\nJOLLY 4 2 -1 0 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdo1fp", "score_hidden": false, "stickied": false, "created": 1492473588.0, "created_utc": 1492444788.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge08uv", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "c0wb0yc0d3r", "parent_id": "t1_dgdoexo", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Thanks again for your feedback on my solution!\n\nAs you already noticed you can improve upon the checking for jolliness.\n\nThere is a spot during your data parsing that could cause a slip up though.  When splitting a string like that you might want to use the overload that allows you to ignore empty entries. If there were an extra white space between two numbers, what you have would get derailed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks again for your feedback on my solution!&lt;/p&gt;\n\n&lt;p&gt;As you already noticed you can improve upon the checking for jolliness.&lt;/p&gt;\n\n&lt;p&gt;There is a spot during your data parsing that could cause a slip up though.  When splitting a string like that you might want to use the overload that allows you to ignore empty entries. If there were an extra white space between two numbers, what you have would get derailed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge08uv", "score_hidden": true, "stickied": false, "created": 1492487258.0, "created_utc": 1492458458.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdoexo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "svgwrk", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "C#:\n\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n\n    namespace JollyJumper\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                if (args.Length == 0)\n                {\n                    args = new [] { \"input.txt\" };\n                }\n\n                var sequences = File.ReadLines(args[0])\n                    .Select(l =&gt; l.Split(' ').Skip(1).Select(x =&gt; int.Parse(x)).ToList());\n\n                foreach (var seq in sequences)\n                {\n                    Console.WriteLine($\"[{string.Join(\", \", seq)}] is {(IsJolly(seq) ? \"Jolly\" : \"Grouchy\")}\");\n                }\n            }\n\n            static bool IsJolly(IList&lt;int&gt; sequence)\n            {\n                var set = new HashSet&lt;int&gt;();\n                var last = sequence[0];\n\n                foreach (var current in sequence.Skip(1))\n                {\n                    set.Add(Math.Abs(last - current));\n                    last = current;\n                }\n\n                for (var i = 1; i &lt; sequence.Count; i++)\n                {\n                    if (!set.Contains(i))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        }\n    }\n\nAnd again in Rust:\n\n    extern crate grabinput;\n\n    fn main() {\n        let sequences = grabinput::from_args().with_fallback()\n            .filter_map(|line| {\n                let seq: Option&lt;Vec&lt;_&gt;&gt; = line.split_whitespace()\n                    .skip(1)\n                    .map(|x| x.parse::&lt;i32&gt;().ok())\n                    .collect();\n\n                seq\n            });\n\n        for seq in sequences {\n            println!(\"{:?} is {}\", seq, if is_jj(&amp;seq) { \"Jolly\" } else { \"Grouchy\" });\n        }\n    }\n\n    fn is_jj(values: &amp;[i32]) -&gt; bool {\n        use std::collections::HashSet;\n\n        let differences: HashSet&lt;_&gt; = PairingIterator::new(values).map(|(&amp;x, &amp;y)| (x - y).abs()).collect();\n        (1..(values.len() as i32)).all(|n| differences.contains(&amp;n))\n    }\n\n    struct PairingIterator&lt;T: Iterator&gt; {\n        source: T,\n        item: Option&lt;T::Item&gt;,\n    }\n\n    impl&lt;T: Iterator&gt; PairingIterator&lt;T&gt; {\n        fn new&lt;I&gt;(items: I) -&gt; PairingIterator&lt;T&gt;\n        where\n            I: IntoIterator&lt;IntoIter=T, Item=T::Item&gt;\n        {\n            let mut items = items.into_iter();\n            PairingIterator {\n                item: items.next(),\n                source: items,\n            }\n        }\n    }\n\n    impl&lt;T: Iterator&gt; Iterator for PairingIterator&lt;T&gt;\n    where\n        T::Item: Copy\n    {\n        type Item = (T::Item, T::Item);\n\n        fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n            match self.source.next() {\n                None =&gt; None,\n                Some(right) =&gt; {\n                    let ret = self.item.take().map(|left| (left, right));\n                    self.item = Some(right);\n                    ret\n                }\n            }\n        }\n    }\n\nOutput for both:\n\n    [1, 4, 2, 3] is Jolly\n    [1, 4, 2, -1, 6] is Grouchy\n    [19, 22, 24, 21] is Grouchy\n    [19, 22, 24, 25] is Jolly\n    [2, -1, 0, 2] is Jolly", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace JollyJumper\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length == 0)\n            {\n                args = new [] { &amp;quot;input.txt&amp;quot; };\n            }\n\n            var sequences = File.ReadLines(args[0])\n                .Select(l =&amp;gt; l.Split(&amp;#39; &amp;#39;).Skip(1).Select(x =&amp;gt; int.Parse(x)).ToList());\n\n            foreach (var seq in sequences)\n            {\n                Console.WriteLine($&amp;quot;[{string.Join(&amp;quot;, &amp;quot;, seq)}] is {(IsJolly(seq) ? &amp;quot;Jolly&amp;quot; : &amp;quot;Grouchy&amp;quot;)}&amp;quot;);\n            }\n        }\n\n        static bool IsJolly(IList&amp;lt;int&amp;gt; sequence)\n        {\n            var set = new HashSet&amp;lt;int&amp;gt;();\n            var last = sequence[0];\n\n            foreach (var current in sequence.Skip(1))\n            {\n                set.Add(Math.Abs(last - current));\n                last = current;\n            }\n\n            for (var i = 1; i &amp;lt; sequence.Count; i++)\n            {\n                if (!set.Contains(i))\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And again in Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;extern crate grabinput;\n\nfn main() {\n    let sequences = grabinput::from_args().with_fallback()\n        .filter_map(|line| {\n            let seq: Option&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt; = line.split_whitespace()\n                .skip(1)\n                .map(|x| x.parse::&amp;lt;i32&amp;gt;().ok())\n                .collect();\n\n            seq\n        });\n\n    for seq in sequences {\n        println!(&amp;quot;{:?} is {}&amp;quot;, seq, if is_jj(&amp;amp;seq) { &amp;quot;Jolly&amp;quot; } else { &amp;quot;Grouchy&amp;quot; });\n    }\n}\n\nfn is_jj(values: &amp;amp;[i32]) -&amp;gt; bool {\n    use std::collections::HashSet;\n\n    let differences: HashSet&amp;lt;_&amp;gt; = PairingIterator::new(values).map(|(&amp;amp;x, &amp;amp;y)| (x - y).abs()).collect();\n    (1..(values.len() as i32)).all(|n| differences.contains(&amp;amp;n))\n}\n\nstruct PairingIterator&amp;lt;T: Iterator&amp;gt; {\n    source: T,\n    item: Option&amp;lt;T::Item&amp;gt;,\n}\n\nimpl&amp;lt;T: Iterator&amp;gt; PairingIterator&amp;lt;T&amp;gt; {\n    fn new&amp;lt;I&amp;gt;(items: I) -&amp;gt; PairingIterator&amp;lt;T&amp;gt;\n    where\n        I: IntoIterator&amp;lt;IntoIter=T, Item=T::Item&amp;gt;\n    {\n        let mut items = items.into_iter();\n        PairingIterator {\n            item: items.next(),\n            source: items,\n        }\n    }\n}\n\nimpl&amp;lt;T: Iterator&amp;gt; Iterator for PairingIterator&amp;lt;T&amp;gt;\nwhere\n    T::Item: Copy\n{\n    type Item = (T::Item, T::Item);\n\n    fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; {\n        match self.source.next() {\n            None =&amp;gt; None,\n            Some(right) =&amp;gt; {\n                let ret = self.item.take().map(|left| (left, right));\n                self.item = Some(right);\n                ret\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output for both:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[1, 4, 2, 3] is Jolly\n[1, 4, 2, -1, 6] is Grouchy\n[19, 22, 24, 21] is Grouchy\n[19, 22, 24, 25] is Jolly\n[2, -1, 0, 2] is Jolly\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdoexo", "score_hidden": false, "stickied": false, "created": 1492474019.0, "created_utc": 1492445219.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdoysj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Godspiral", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "in J, assumes a 0 gap makes it not jolly,\n\n    isjolly =: (/:~ -: &gt;:@i.@#)@:~.@:(2&amp;(|@-/\\))\n    isjolly 4 2 _1 0 2\n1\n\nif a 0 gap doesn't make it unjolly, then,\n\n     (/:~ -: &gt;:@i.@#)@:(0 -.~ ~.)@:(2&amp;(|@-/\\))", "edited": 1492446224.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;in J, assumes a 0 gap makes it not jolly,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;isjolly =: (/:~ -: &amp;gt;:@i.@#)@:~.@:(2&amp;amp;(|@-/\\))\nisjolly 4 2 _1 0 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;1&lt;/p&gt;\n\n&lt;p&gt;if a 0 gap doesn&amp;#39;t make it unjolly, then,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; (/:~ -: &amp;gt;:@i.@#)@:(0 -.~ ~.)@:(2&amp;amp;(|@-/\\))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdoysj", "score_hidden": false, "stickied": false, "created": 1492474641.0, "created_utc": 1492445841.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdp314", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MasterAgent47", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "C++ \n\n    #include &lt;iostream&gt;\n    #include &lt;vector&gt;\n    using namespace std;\n\n    int mod (int x)\n    {\n         if (x&gt;=0)\n             return x;\n        else\n             return -x;\n    } \n\n    int main()\n    {\n        int lim;\n        cout &lt;&lt; \"Enter the number of integers in the sequence: \";\n        cin &gt;&gt; lim;\n\n        cout &lt;&lt; \"Enter \" &lt;&lt; lim &lt;&lt; \" integers : \";\n        int x,y;\n        cin &gt;&gt; x;\n\n        vector &lt;int&gt; v {lim};\n        v[0]=0;\n\n        for (int i=1; i&lt;lim; i++)    // taken x, so it is not &lt;=lim\n        {\n            cin &gt;&gt; y;\n            v[i]=mod(x-y);\n            x=y;\n        }\n\n        for (int i=lim; i&gt;1; i--)\n            for (int j=1; j&lt;i-1; j++)\n                if (v[j]&gt;v[j+1])\n                   swap(v[j], v[j+1]);\n\n        for (int i=1; i&lt;lim; i++)\n        {\n            if (v[i]!= i)\n            { \n                cout &lt;&lt; \"\\n\\nNOT JOLLY\";\n                return 0;\n            }\n        }\n        cout &lt;&lt; \"\\n\\nJOLLY\";\n\n    }\n\n    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++ &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;vector&amp;gt;\nusing namespace std;\n\nint mod (int x)\n{\n     if (x&amp;gt;=0)\n         return x;\n    else\n         return -x;\n} \n\nint main()\n{\n    int lim;\n    cout &amp;lt;&amp;lt; &amp;quot;Enter the number of integers in the sequence: &amp;quot;;\n    cin &amp;gt;&amp;gt; lim;\n\n    cout &amp;lt;&amp;lt; &amp;quot;Enter &amp;quot; &amp;lt;&amp;lt; lim &amp;lt;&amp;lt; &amp;quot; integers : &amp;quot;;\n    int x,y;\n    cin &amp;gt;&amp;gt; x;\n\n    vector &amp;lt;int&amp;gt; v {lim};\n    v[0]=0;\n\n    for (int i=1; i&amp;lt;lim; i++)    // taken x, so it is not &amp;lt;=lim\n    {\n        cin &amp;gt;&amp;gt; y;\n        v[i]=mod(x-y);\n        x=y;\n    }\n\n    for (int i=lim; i&amp;gt;1; i--)\n        for (int j=1; j&amp;lt;i-1; j++)\n            if (v[j]&amp;gt;v[j+1])\n               swap(v[j], v[j+1]);\n\n    for (int i=1; i&amp;lt;lim; i++)\n    {\n        if (v[i]!= i)\n        { \n            cout &amp;lt;&amp;lt; &amp;quot;\\n\\nNOT JOLLY&amp;quot;;\n            return 0;\n        }\n    }\n    cout &amp;lt;&amp;lt; &amp;quot;\\n\\nJOLLY&amp;quot;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdp314", "score_hidden": false, "stickied": false, "created": 1492474777.0, "created_utc": 1492445977.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdp5fg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "_kim", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**MATLAB**\n\n    function s = jollyjumper(input)\n    s = sprintf('%s', num2str(input));\n    if ~all(sum(bsxfun(@eq, abs(input(2:end-1) - input(3:end))', 1:input(1))))\n        s = strcat(s, ' NOT');\n    end\n    s = strcat(s, ' JOLLY');\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;MATLAB&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function s = jollyjumper(input)\ns = sprintf(&amp;#39;%s&amp;#39;, num2str(input));\nif ~all(sum(bsxfun(@eq, abs(input(2:end-1) - input(3:end))&amp;#39;, 1:input(1))))\n    s = strcat(s, &amp;#39; NOT&amp;#39;);\nend\ns = strcat(s, &amp;#39; JOLLY&amp;#39;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdp5fg", "score_hidden": false, "stickied": false, "created": 1492474850.0, "created_utc": 1492446050.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdsg78", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Arcdieus", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Ruby**\n\n    input = gets\n    array = input.chomp.split(' ')\n    \n    num_of_elements = array.shift.to_i\n    \n    jump = (0..(num_of_elements-2)).each.map {|i| (array[i].to_i-array[i+1].to_i).abs}.sort {|x,y| y &lt;=&gt; x}\n    \n    jolly = (jump[0] == num_of_elements-1)\n    \n    diff = (0..(num_of_elements-2)).each.map {|i| (jump[i].to_i-jump[i+1].to_i).abs}\n    \n    if (jolly == true) &amp;&amp; (diff.all? { |i| i == 1})\n      print input.chomp + \" JOLLY\\n\"\n    else\n      print input.chomp + \" NOT JOLLY\\n\"\n    end\n\n**Algorithm**\n\n    1. Remove the first element as it refers to the number of element using the shift method\n    2. find out the difference between each element\n    3. Sort out the elements\n    4. Check if these two conditions are true\n       a. Check if the highest element == num_of_elements-1\n       b. find out the difference between each sorted element to make sure it is consecutive", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input = gets\narray = input.chomp.split(&amp;#39; &amp;#39;)\n\nnum_of_elements = array.shift.to_i\n\njump = (0..(num_of_elements-2)).each.map {|i| (array[i].to_i-array[i+1].to_i).abs}.sort {|x,y| y &amp;lt;=&amp;gt; x}\n\njolly = (jump[0] == num_of_elements-1)\n\ndiff = (0..(num_of_elements-2)).each.map {|i| (jump[i].to_i-jump[i+1].to_i).abs}\n\nif (jolly == true) &amp;amp;&amp;amp; (diff.all? { |i| i == 1})\n  print input.chomp + &amp;quot; JOLLY\\n&amp;quot;\nelse\n  print input.chomp + &amp;quot; NOT JOLLY\\n&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1. Remove the first element as it refers to the number of element using the shift method\n2. find out the difference between each element\n3. Sort out the elements\n4. Check if these two conditions are true\n   a. Check if the highest element == num_of_elements-1\n   b. find out the difference between each sorted element to make sure it is consecutive\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdsg78", "score_hidden": true, "stickied": false, "created": 1492478515.0, "created_utc": 1492449715.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdtzkj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ivanhlb", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Java**\n\nWas really confused by the phrasing of the challenge but the comments cleared it up for me. I just started learning Java recently. (Came from a HTML/JavaScript background)\n\n    package jollyjumper;\n    import java.util.Arrays;\n    public class JollyJumper {\n        public static void main(String[] args) {\n            int[][] input = {\n                {/*4*/1, 4, 2, 3},\n                {/*5*/1, 4, 2, -1, 6},\n                {/*4*/19, 22, 24, 21},\n                {/*4*/19, 22, 24, 25},\n                {/*4*/2, -1, 0, 2}\n            };\n            int[][] output = new int[5][];\n            for (int i = 0; i &lt; input.length; i++) {//iterates input\n                output[i] = new int[input[i].length - 1];\n                for (int j = 0; j &lt; input[i].length; j++) {//iterates elements\n\n                    if (j != input[i].length - 1) {//if not the last element\n                        output[i][j] = Math.abs(input[i][j] - input[i][j + 1]);\n                    } else {//if last element, sort the array.\n                        String strJolly = null;\n                        Arrays.sort(output[i]);\n                        for (int k = 0; k &lt; output[i].length; k++) {\n                            if (output[i][k] != k + 1) {\n                                strJolly = \"Not Jolly\";\n                                break;\n                            } else strJolly = \"Jolly\";\n                        }\n                        System.out.println(Arrays.toString(input[i]) + \" is \" + strJolly);\n                    }\n                }\n            }\n        }\n    }\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Was really confused by the phrasing of the challenge but the comments cleared it up for me. I just started learning Java recently. (Came from a HTML/JavaScript background)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package jollyjumper;\nimport java.util.Arrays;\npublic class JollyJumper {\n    public static void main(String[] args) {\n        int[][] input = {\n            {/*4*/1, 4, 2, 3},\n            {/*5*/1, 4, 2, -1, 6},\n            {/*4*/19, 22, 24, 21},\n            {/*4*/19, 22, 24, 25},\n            {/*4*/2, -1, 0, 2}\n        };\n        int[][] output = new int[5][];\n        for (int i = 0; i &amp;lt; input.length; i++) {//iterates input\n            output[i] = new int[input[i].length - 1];\n            for (int j = 0; j &amp;lt; input[i].length; j++) {//iterates elements\n\n                if (j != input[i].length - 1) {//if not the last element\n                    output[i][j] = Math.abs(input[i][j] - input[i][j + 1]);\n                } else {//if last element, sort the array.\n                    String strJolly = null;\n                    Arrays.sort(output[i]);\n                    for (int k = 0; k &amp;lt; output[i].length; k++) {\n                        if (output[i][k] != k + 1) {\n                            strJolly = &amp;quot;Not Jolly&amp;quot;;\n                            break;\n                        } else strJolly = &amp;quot;Jolly&amp;quot;;\n                    }\n                    System.out.println(Arrays.toString(input[i]) + &amp;quot; is &amp;quot; + strJolly);\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdtzkj", "score_hidden": true, "stickied": false, "created": 1492480215.0, "created_utc": 1492451415.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge2odm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zatoichi49", "parent_id": "t1_dgdz3o0", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Good addition, much cleaner.  Appreciate the feedback.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good addition, much cleaner.  Appreciate the feedback.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge2odm", "score_hidden": true, "stickied": false, "created": 1492489975.0, "created_utc": 1492461175.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdz3o0", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "gandalfx", "parent_id": "t1_dgdvi1o", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "That works nicely. You can simplify the set expression with a call to the set constructor function: `set(range(1, length))`.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That works nicely. You can simplify the set expression with a call to the set constructor function: &lt;code&gt;set(range(1, length))&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdz3o0", "score_hidden": true, "stickied": false, "created": 1492485969.0, "created_utc": 1492457169.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdvi1o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "zatoichi49", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Method:**\n\nAdd the absolute differences between the numbers in the sequence into a set, and add all the integers between 1 and the length of the sequence into a second set.  If the sets are equal, then the sequence is a jolly jumper.\n\n**Python 3:**\n\n    inputs = '''4 1 4 2 3\n    5 1 4 2 -1 6\n    4 19 22 24 21\n    4 19 22 24 25\n    4 2 -1 0 2'''.split('\\n')\n\n    def jolly(s):\n        x = s.split()\n        length, seq, num = int(x[0]), [int(i) for i in x[1:]], set()\n        for i in range(length-1):\n            num.add(abs(seq[i+1]-seq[i]))\n        if num == set(range(1, length)): # simplified following gandalfx's recommendation\n            return s+' '+'JOLLY'\n        else:\n            return s+' '+'NOT JOLLY'\n    for i in inputs:\n        print(jolly(i))\n\n**Output:**\n\n    4 1 4 2 3 JOLLY\n    5 1 4 2 -1 6 NOT JOLLY\n    4 19 22 24 21 NOT JOLLY\n    4 19 22 24 25 JOLLY\n    4 2 -1 0 2 JOLLY", "edited": 1492461691.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Add the absolute differences between the numbers in the sequence into a set, and add all the integers between 1 and the length of the sequence into a second set.  If the sets are equal, then the sequence is a jolly jumper.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Python 3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;inputs = &amp;#39;&amp;#39;&amp;#39;4 1 4 2 3\n5 1 4 2 -1 6\n4 19 22 24 21\n4 19 22 24 25\n4 2 -1 0 2&amp;#39;&amp;#39;&amp;#39;.split(&amp;#39;\\n&amp;#39;)\n\ndef jolly(s):\n    x = s.split()\n    length, seq, num = int(x[0]), [int(i) for i in x[1:]], set()\n    for i in range(length-1):\n        num.add(abs(seq[i+1]-seq[i]))\n    if num == set(range(1, length)): # simplified following gandalfx&amp;#39;s recommendation\n        return s+&amp;#39; &amp;#39;+&amp;#39;JOLLY&amp;#39;\n    else:\n        return s+&amp;#39; &amp;#39;+&amp;#39;NOT JOLLY&amp;#39;\nfor i in inputs:\n    print(jolly(i))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3 JOLLY\n5 1 4 2 -1 6 NOT JOLLY\n4 19 22 24 21 NOT JOLLY\n4 19 22 24 25 JOLLY\n4 2 -1 0 2 JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdvi1o", "score_hidden": true, "stickied": false, "created": 1492481888.0, "created_utc": 1492453088.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdvn8m", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Kosi_i", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Java\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Integer [] numbers = {4,2,-1,0,2};\n        List &lt; Integer&gt; newNumbers = new ArrayList &lt;Integer&gt; ();\n        int counter=0;\n        \n        for(int i = 0; i&lt;numbers[0]-1;i++){\n            int krof = numbers[i]-numbers[i+1];\n            newNumbers.add((int )Math.sqrt(krof*krof));\n        }\n\n        for(int i=0; i&lt;numbers[0]-1;i++){\n         if(newNumbers.contains(i+1)){\n            counter++;\n         }\n        }\n         if(counter == numbers[0]-1){\n            System.out.println(\"Jolley!\");\n          }\n         else {\n            System.out.println(\"Not Jolley!\");\n         }\n   \n    }\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/**\n * @param args the command line arguments\n */\npublic static void main(String[] args) {\n    Integer [] numbers = {4,2,-1,0,2};\n    List &amp;lt; Integer&amp;gt; newNumbers = new ArrayList &amp;lt;Integer&amp;gt; ();\n    int counter=0;\n\n    for(int i = 0; i&amp;lt;numbers[0]-1;i++){\n        int krof = numbers[i]-numbers[i+1];\n        newNumbers.add((int )Math.sqrt(krof*krof));\n    }\n\n    for(int i=0; i&amp;lt;numbers[0]-1;i++){\n     if(newNumbers.contains(i+1)){\n        counter++;\n     }\n    }\n     if(counter == numbers[0]-1){\n        System.out.println(&amp;quot;Jolley!&amp;quot;);\n      }\n     else {\n        System.out.println(&amp;quot;Not Jolley!&amp;quot;);\n     }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdvn8m", "score_hidden": true, "stickied": false, "created": 1492482049.0, "created_utc": 1492453249.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdys77", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "nomegustameanswhat", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Python3\n\n    input = [[4, 1, 4, 2, 3],[5, 1, 4, 2, -1, 6],[4, 19, 22, 24, 21],[4, 19, 22, 24, 25],\n    [4, 2, -1, 0, 2]]\n    for j in range(0, len(input)):\n\t    out, n = [], []\n\t    count = len(input[j])-1\n\t    for i in range(1,len(input[j])-1):\n\t    \tdiff = abs(input[j][i] - input[j][i+1])\n\t    \tout.append(diff)\n\t    \tcount = count - 1\n\t    \tn.append(count)\n\t    test = sorted(out, reverse = True)\n\t    if test == n:\n\t    \tprint(input[j],\" Jolly\")\n\t    else:\n\t    \tprint(input[j], \" Not Jolly\")", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input = [[4, 1, 4, 2, 3],[5, 1, 4, 2, -1, 6],[4, 19, 22, 24, 21],[4, 19, 22, 24, 25],\n[4, 2, -1, 0, 2]]\nfor j in range(0, len(input)):\n    out, n = [], []\n    count = len(input[j])-1\n    for i in range(1,len(input[j])-1):\n        diff = abs(input[j][i] - input[j][i+1])\n        out.append(diff)\n        count = count - 1\n        n.append(count)\n    test = sorted(out, reverse = True)\n    if test == n:\n        print(input[j],&amp;quot; Jolly&amp;quot;)\n    else:\n        print(input[j], &amp;quot; Not Jolly&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdys77", "score_hidden": true, "stickied": false, "created": 1492485600.0, "created_utc": 1492456800.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdzmcl", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CompileBot", "parent_id": "t1_dgdyudm", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Output:\n\n    4 1 4 2 3 JOLLY\n    \t5 1 4 2 -1 6 NOT JOLLY\n    \t4 19 22 24 21 NOT JOLLY\n    \t4 19 22 24 25 JOLLY\n    \t4 2 -1 0 2 JOLLY\n    \n\n[^source](http://ideone.com/vqiVkX) ^|\n[^info](http://www.reddit.com/r/CompileBot/wiki) ^|\n[^git](https://github.com/renfredxh/compilebot) ^|\n[^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/dgdyudm%20Include%20your%20reason%20for%20reporting%20here.)\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3 JOLLY\n    5 1 4 2 -1 6 NOT JOLLY\n    4 19 22 24 21 NOT JOLLY\n    4 19 22 24 25 JOLLY\n    4 2 -1 0 2 JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://ideone.com/vqiVkX\"&gt;&lt;sup&gt;source&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"http://www.reddit.com/r/CompileBot/wiki\"&gt;&lt;sup&gt;info&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"https://github.com/renfredxh/compilebot\"&gt;&lt;sup&gt;git&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"http://www.reddit.com/message/compose?to=compilebot&amp;amp;subject=Report%20Abuse&amp;amp;message=--report%20https%3A//www.reddit.com/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/dgdyudm%20Include%20your%20reason%20for%20reporting%20here.\"&gt;&lt;sup&gt;report&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdzmcl", "score_hidden": true, "stickied": false, "created": 1492486557.0, "created_utc": 1492457757.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdyudm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Scroph", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "D (dlang) solution :\n\n+/u/CompileBot D\n\n\timport std.stdio;\n\timport std.algorithm;\n\timport std.math;\n\timport std.conv;\n\timport std.string;\n\timport std.range;\n\timport std.array;\n\n\tvoid main()\n\t{\n\t\tforeach(line; stdin.byLine)\n\t\t{\n\t\t\tint[] numbers = line.strip.splitter.map!(to!int).array;\n\t\t\tint[] seq;\n\t\t\tforeach(i; 0 .. numbers.length - 1)\n\t\t\t\tseq ~= abs(numbers[i + 1] - numbers[i]);\n\t\t\tbool ok = iota(1, numbers.length - 1).all!(n =&gt; seq.canFind(n));\n\t\t\twriteln(line, ok ? \" JOLLY\" : \" NOT JOLLY\");\n\t\t}\n\t}\n\nInput:\n\n\t4 1 4 2 3\n\t5 1 4 2 -1 6\n\t4 19 22 24 21\n\t4 19 22 24 25\n\t4 2 -1 0 2", "edited": 1492457631.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;D (dlang) solution :&lt;/p&gt;\n\n&lt;p&gt;+&lt;a href=\"/u/CompileBot\"&gt;/u/CompileBot&lt;/a&gt; D&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import std.stdio;\nimport std.algorithm;\nimport std.math;\nimport std.conv;\nimport std.string;\nimport std.range;\nimport std.array;\n\nvoid main()\n{\n    foreach(line; stdin.byLine)\n    {\n        int[] numbers = line.strip.splitter.map!(to!int).array;\n        int[] seq;\n        foreach(i; 0 .. numbers.length - 1)\n            seq ~= abs(numbers[i + 1] - numbers[i]);\n        bool ok = iota(1, numbers.length - 1).all!(n =&amp;gt; seq.canFind(n));\n        writeln(line, ok ? &amp;quot; JOLLY&amp;quot; : &amp;quot; NOT JOLLY&amp;quot;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3\n5 1 4 2 -1 6\n4 19 22 24 21\n4 19 22 24 25\n4 2 -1 0 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdyudm", "score_hidden": true, "stickied": false, "created": 1492485670.0, "created_utc": 1492456870.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgdz4jj", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "CompileBot", "parent_id": "t1_dgdz30n", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Output:\n\n    4 1 4 2 3 : Jolly\n    8 1 6 -1 8 9 5 2 7 : Not Jolly\n    4 1 4 2 3 : Jolly\n    5 1 4 2 -1 6 : Not Jolly\n    4 19 22 24 21 : Not Jolly\n    4 19 22 24 25 : Jolly\n    4 2 -1 0 2 : Jolly\n    \n\n[^source](http://ideone.com/EtGubQ) ^|\n[^info](http://www.reddit.com/r/CompileBot/wiki) ^|\n[^git](https://github.com/renfredxh/compilebot) ^|\n[^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/dgdz30n%20Include%20your%20reason%20for%20reporting%20here.)\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3 : Jolly\n8 1 6 -1 8 9 5 2 7 : Not Jolly\n4 1 4 2 3 : Jolly\n5 1 4 2 -1 6 : Not Jolly\n4 19 22 24 21 : Not Jolly\n4 19 22 24 25 : Jolly\n4 2 -1 0 2 : Jolly\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://ideone.com/EtGubQ\"&gt;&lt;sup&gt;source&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"http://www.reddit.com/r/CompileBot/wiki\"&gt;&lt;sup&gt;info&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"https://github.com/renfredxh/compilebot\"&gt;&lt;sup&gt;git&lt;/sup&gt;&lt;/a&gt; &lt;sup&gt;|&lt;/sup&gt;\n&lt;a href=\"http://www.reddit.com/message/compose?to=compilebot&amp;amp;subject=Report%20Abuse&amp;amp;message=--report%20https%3A//www.reddit.com/r/dailyprogrammer/comments/65vgkh/20170417_challenge_311_easy_jolly_jumper/dgdz30n%20Include%20your%20reason%20for%20reporting%20here.\"&gt;&lt;sup&gt;report&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdz4jj", "score_hidden": true, "stickied": false, "created": 1492485996.0, "created_utc": 1492457196.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdz30n", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SoraFirestorm", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Common Lisp:\n\n+/u/CompileBot Common Lisp\n\n\n    (defparameter *sample-in* '((4 1 4 2 3)\n\t\t\t\t(8 1 6 -1 8 9 5 2 7)))\n\n    (defparameter *challenge-in* '((4 1 4 2 3)\n\t\t\t\t   (5 1 4 2 -1 6)\n\t\t\t\t   (4 19 22 24 21)\n\t\t\t\t   (4 19 22 24 25)\n\t\t\t\t   (4 2 -1 0 2)))\n\n    (defun jolly-jumper-p (jolly-list)\n      (let ((len (1- (car jolly-list)))\n\t    (jolly-list (cdr jolly-list)))\n\t(search (loop for i below len collecting (1+ i))\n\t\t(sort (remove-duplicates (butlast\n\t\t\t\t\t  (loop for (x y) on jolly-list collecting\n\t\t\t\t\t       (abs (- x (or y 0))))))\n\t\t      #'&lt;))))\n\n    (dolist (in (append *sample-in* *challenge-in*))\n      (format t \"~{~a ~}:~:[ Not~;~] Jolly~%\" in (jolly-jumper-p in)))\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Common Lisp:&lt;/p&gt;\n\n&lt;p&gt;+&lt;a href=\"/u/CompileBot\"&gt;/u/CompileBot&lt;/a&gt; Common Lisp&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defparameter *sample-in* &amp;#39;((4 1 4 2 3)\n            (8 1 6 -1 8 9 5 2 7)))\n\n(defparameter *challenge-in* &amp;#39;((4 1 4 2 3)\n               (5 1 4 2 -1 6)\n               (4 19 22 24 21)\n               (4 19 22 24 25)\n               (4 2 -1 0 2)))\n\n(defun jolly-jumper-p (jolly-list)\n  (let ((len (1- (car jolly-list)))\n    (jolly-list (cdr jolly-list)))\n(search (loop for i below len collecting (1+ i))\n    (sort (remove-duplicates (butlast\n                  (loop for (x y) on jolly-list collecting\n                       (abs (- x (or y 0))))))\n          #&amp;#39;&amp;lt;))))\n\n(dolist (in (append *sample-in* *challenge-in*))\n  (format t &amp;quot;~{~a ~}:~:[ Not~;~] Jolly~%&amp;quot; in (jolly-jumper-p in)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgdz30n", "score_hidden": true, "stickied": false, "created": 1492485949.0, "created_utc": 1492457149.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge28eb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "J_Gamer", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**C++**\n\nI used this as an exercise to build my own ranges and experiment with iterator composition. The core of the algorithm is this:\n\n    template&lt;typename R&gt;\n    bool is_jolly(int size, R&amp;&amp; r) {\n      boost::dynamic_bitset found(size-1,0);\n      for(auto i : apply([](auto it) {return std::abs(it.first-it.second);},adjacent(std::forward&lt;R&gt;(r)))) {\n        if(i &lt; size &amp;&amp; i != 0) {\n          found.set(i-1);\n        }\n      }\n      return found.all();\n    }\n\n    int main() {\n      while(std::cin) {\n        int num;\n        std::cin &gt;&gt; num;\n        if(!std::cin) break;\n        if(is_jolly(num,limited(num,std::istream_iterator&lt;int&gt;(std::cin))))\n          std::cout &lt;&lt; \"JOLLY\\n\";\n        else\n          std::cout &lt;&lt; \"NOT JOLLY\\n\";\n      }\n    }\n\nWhere the helper functions limited, adjacent and apply are defined as follows:\n\n    #include &lt;utility&gt;\n    #include &lt;vector&gt;\n    #include &lt;numeric&gt;\n    #include &lt;array&gt;\n    #include &lt;iterator&gt;\n    #include &lt;algorithm&gt;\n    #include &lt;iostream&gt;\n    #include &lt;boost/dynamic_bitset/dynamic_bitset.hpp&gt;\n\n    template&lt;typename It&gt;\n    struct LimitedInputRange {\n      It in;\n      int total;\n\n      struct iterator {\n        It in;\n        int remaining = 0;\n        using value_type = typename It::value_type;\n\n        bool operator==(const iterator&amp; other) {return remaining == other.remaining;}\n        bool operator!=(const iterator&amp; other) {return !(*this == other);}\n\n        decltype(auto) operator*() {\n            return *in;\n        }\n\n        decltype(auto) operator++() {\n            --remaining;\n            if(remaining &gt; 0)\n              ++in;\n            return *this;\n        }\n\n      };\n\n      auto begin() {\n        return iterator{in,total};\n      }\n\n      auto end() {\n        return iterator{in,0};\n      }\n\n    };\n\n    template&lt;typename It&gt;\n    auto limited(int len, It&amp;&amp; it) {\n        return LimitedInputRange&lt;std::remove_reference_t&lt;It&gt;&gt;{std::forward&lt;It&gt;(it),len};\n    }\n\n    template&lt;typename It&gt;\n    struct AdjacentRange {\n      It itstart;\n      It itend;\n\n      AdjacentRange(It s, It e) : itstart(s), itend(e) {};\n      template&lt;typename Range&gt;\n      AdjacentRange(Range&amp;&amp; r) : itstart(r.begin()), itend(r.end()) {};\n\n      struct iterator {\n        using value_type = std::pair&lt;typename It::value_type,typename It::value_type&gt;;\n        It current;\n        typename It::value_type last;\n        \n        auto operator*() {\n            return std::make_pair(last,*current);\n        }\n        \n        decltype(auto) operator++() {\n          last = *current;\n          ++current;\n          return *this;\n        }\n\n        bool operator==(const iterator&amp; other) {return current == other.current;}\n        bool operator!=(const iterator&amp; other) {return !(*this == other);}\n      };\n\n      auto begin() {\n        auto val = *itstart;\n        return iterator{++itstart,std::move(val)};\n      };\n\n      auto end() {\n          return iterator{itend,{}};\n      }\n    };\n\n    template&lt;typename R&gt;\n    auto adjacent(R&amp;&amp; range) {\n      return AdjacentRange&lt;typename std::remove_reference_t&lt;R&gt;::iterator&gt;(std::forward&lt;R&gt;(range));\n    }\n\n    template&lt;typename It, typename F&gt;\n    struct ApplyRange {\n      It itstart;\n      It itend;\n      F f;\n\n      struct iterator {\n        It current;\n        F f;\n\n        using value_type = decltype(f(*current));\n\n        decltype(auto) operator*() {\n            return f(*current);\n        }\n\n        decltype(auto) operator++() {\n            ++current;\n            return *this;\n        }\n\n        bool operator==(const iterator&amp; other) {return current == other.current;}\n        bool operator!=(const iterator&amp; other) {return !(*this == other);}\n      };\n\n      auto begin() {\n          return iterator{itstart,f};\n      }\n\n      auto end() {\n          return iterator{itend,f};\n      }\n    };\n\n    template&lt;typename R, typename F&gt;\n    auto apply(F&amp;&amp; f, R&amp;&amp; r) {\n      return ApplyRange&lt;typename std::remove_reference_t&lt;R&gt;::iterator, std::remove_reference_t&lt;F&gt;&gt;{r.begin(),r.end(),std::forward&lt;F&gt;(f)};\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I used this as an exercise to build my own ranges and experiment with iterator composition. The core of the algorithm is this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;template&amp;lt;typename R&amp;gt;\nbool is_jolly(int size, R&amp;amp;&amp;amp; r) {\n  boost::dynamic_bitset found(size-1,0);\n  for(auto i : apply([](auto it) {return std::abs(it.first-it.second);},adjacent(std::forward&amp;lt;R&amp;gt;(r)))) {\n    if(i &amp;lt; size &amp;amp;&amp;amp; i != 0) {\n      found.set(i-1);\n    }\n  }\n  return found.all();\n}\n\nint main() {\n  while(std::cin) {\n    int num;\n    std::cin &amp;gt;&amp;gt; num;\n    if(!std::cin) break;\n    if(is_jolly(num,limited(num,std::istream_iterator&amp;lt;int&amp;gt;(std::cin))))\n      std::cout &amp;lt;&amp;lt; &amp;quot;JOLLY\\n&amp;quot;;\n    else\n      std::cout &amp;lt;&amp;lt; &amp;quot;NOT JOLLY\\n&amp;quot;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the helper functions limited, adjacent and apply are defined as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;utility&amp;gt;\n#include &amp;lt;vector&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n#include &amp;lt;array&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;boost/dynamic_bitset/dynamic_bitset.hpp&amp;gt;\n\ntemplate&amp;lt;typename It&amp;gt;\nstruct LimitedInputRange {\n  It in;\n  int total;\n\n  struct iterator {\n    It in;\n    int remaining = 0;\n    using value_type = typename It::value_type;\n\n    bool operator==(const iterator&amp;amp; other) {return remaining == other.remaining;}\n    bool operator!=(const iterator&amp;amp; other) {return !(*this == other);}\n\n    decltype(auto) operator*() {\n        return *in;\n    }\n\n    decltype(auto) operator++() {\n        --remaining;\n        if(remaining &amp;gt; 0)\n          ++in;\n        return *this;\n    }\n\n  };\n\n  auto begin() {\n    return iterator{in,total};\n  }\n\n  auto end() {\n    return iterator{in,0};\n  }\n\n};\n\ntemplate&amp;lt;typename It&amp;gt;\nauto limited(int len, It&amp;amp;&amp;amp; it) {\n    return LimitedInputRange&amp;lt;std::remove_reference_t&amp;lt;It&amp;gt;&amp;gt;{std::forward&amp;lt;It&amp;gt;(it),len};\n}\n\ntemplate&amp;lt;typename It&amp;gt;\nstruct AdjacentRange {\n  It itstart;\n  It itend;\n\n  AdjacentRange(It s, It e) : itstart(s), itend(e) {};\n  template&amp;lt;typename Range&amp;gt;\n  AdjacentRange(Range&amp;amp;&amp;amp; r) : itstart(r.begin()), itend(r.end()) {};\n\n  struct iterator {\n    using value_type = std::pair&amp;lt;typename It::value_type,typename It::value_type&amp;gt;;\n    It current;\n    typename It::value_type last;\n\n    auto operator*() {\n        return std::make_pair(last,*current);\n    }\n\n    decltype(auto) operator++() {\n      last = *current;\n      ++current;\n      return *this;\n    }\n\n    bool operator==(const iterator&amp;amp; other) {return current == other.current;}\n    bool operator!=(const iterator&amp;amp; other) {return !(*this == other);}\n  };\n\n  auto begin() {\n    auto val = *itstart;\n    return iterator{++itstart,std::move(val)};\n  };\n\n  auto end() {\n      return iterator{itend,{}};\n  }\n};\n\ntemplate&amp;lt;typename R&amp;gt;\nauto adjacent(R&amp;amp;&amp;amp; range) {\n  return AdjacentRange&amp;lt;typename std::remove_reference_t&amp;lt;R&amp;gt;::iterator&amp;gt;(std::forward&amp;lt;R&amp;gt;(range));\n}\n\ntemplate&amp;lt;typename It, typename F&amp;gt;\nstruct ApplyRange {\n  It itstart;\n  It itend;\n  F f;\n\n  struct iterator {\n    It current;\n    F f;\n\n    using value_type = decltype(f(*current));\n\n    decltype(auto) operator*() {\n        return f(*current);\n    }\n\n    decltype(auto) operator++() {\n        ++current;\n        return *this;\n    }\n\n    bool operator==(const iterator&amp;amp; other) {return current == other.current;}\n    bool operator!=(const iterator&amp;amp; other) {return !(*this == other);}\n  };\n\n  auto begin() {\n      return iterator{itstart,f};\n  }\n\n  auto end() {\n      return iterator{itend,f};\n  }\n};\n\ntemplate&amp;lt;typename R, typename F&amp;gt;\nauto apply(F&amp;amp;&amp;amp; f, R&amp;amp;&amp;amp; r) {\n  return ApplyRange&amp;lt;typename std::remove_reference_t&amp;lt;R&amp;gt;::iterator, std::remove_reference_t&amp;lt;F&amp;gt;&amp;gt;{r.begin(),r.end(),std::forward&amp;lt;F&amp;gt;(f)};\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge28eb", "score_hidden": true, "stickied": false, "created": 1492489483.0, "created_utc": 1492460683.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge3tvg", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "DrejkCZ", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**JavaScript (ES6)**\n\n*Omitted the first integer stating the number of integers, since it seems redundant.*\n\nAny feedback much appreciated.\n\n    let inList, isJolly, testInList;\n\n    inList = [\n        '1 4 2 3',\n        '1 4 2 -1 6',\n        '19 22 24 21',\n        '19 22 24 25',\n        '2 -1 0 2'\n    ];\n\n    isJolly = function(sequence) {\n        let distances;\n        if (sequence.length === 1) return true;\n        sequence = sequence.split(' ');\n        distances = [];\n        for (let i = 1; i &lt; sequence.length; i++) {\n            distances.push(Math.abs(sequence[i] - sequence[i - 1]));\n        }\n        for (let i = 1; i &lt; sequence.length; i++) {\n            if (distances.indexOf(i) === -1) return false;\n        }\n        return true;\n    };\n\n    testInList = function() {\n        for (let i = 0; i &lt; inList.length; i++) {\n            console.log(inList[i] + ' ' + (isJolly(inList[i]) ? 'JOLLY' : 'NOT JOLLY'));\n        }\n    };\n\n    testInList();", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;JavaScript (ES6)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Omitted the first integer stating the number of integers, since it seems redundant.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Any feedback much appreciated.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let inList, isJolly, testInList;\n\ninList = [\n    &amp;#39;1 4 2 3&amp;#39;,\n    &amp;#39;1 4 2 -1 6&amp;#39;,\n    &amp;#39;19 22 24 21&amp;#39;,\n    &amp;#39;19 22 24 25&amp;#39;,\n    &amp;#39;2 -1 0 2&amp;#39;\n];\n\nisJolly = function(sequence) {\n    let distances;\n    if (sequence.length === 1) return true;\n    sequence = sequence.split(&amp;#39; &amp;#39;);\n    distances = [];\n    for (let i = 1; i &amp;lt; sequence.length; i++) {\n        distances.push(Math.abs(sequence[i] - sequence[i - 1]));\n    }\n    for (let i = 1; i &amp;lt; sequence.length; i++) {\n        if (distances.indexOf(i) === -1) return false;\n    }\n    return true;\n};\n\ntestInList = function() {\n    for (let i = 0; i &amp;lt; inList.length; i++) {\n        console.log(inList[i] + &amp;#39; &amp;#39; + (isJolly(inList[i]) ? &amp;#39;JOLLY&amp;#39; : &amp;#39;NOT JOLLY&amp;#39;));\n    }\n};\n\ntestInList();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge3tvg", "score_hidden": true, "stickied": false, "created": 1492491265.0, "created_utc": 1492462465.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge4w6l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MoltenCookie", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Python3\n\nConsidering that a jolly jumper requires the set of {1..n-1} to be a subset of the absolute differences between each sequence, I wrote this solution:\n\nGiven an input.txt file like this:\n\n    4 1 4 2 3\n    8 1 6 -1 8 9 5 2 7\n    4 1 4 2 3\n    5 1 4 2 -1 6\n    4 19 22 24 21\n    4 19 22 24 25\n    4 2 -1 0 2\n\nI wrote this solution:\n\n    stream = \"\"\n    \n    with open('input.txt', 'r') as f:\n        for line in f:\n            stream += line\n    \n    def format_stream(stream):\n        stream = stream.split('\\n')\n        stream.pop() #removes terminator byte in file\n        for i in range(len(stream)):\n            stream[i] = [int(x) for x in stream[i].split()] #anyone know how   \n        return stream                                       #I can turn this into \n                                                            #a one-liner? \n    def solve(arr):\n        answer = []\n        for q in arr:\n            s = q[0]\n            abs_set = []\n            for i in range(1,s):\n                abs_set.append(abs(q[i]-q[i+1]))\n            if set(range(1,s)).issubset(set(abs_set)):\n                answer.append(' '.join([str(x) for x in q]) + \" JOLLY\")\n            else:\n                answer.append(' '.join([str(x) for x in q]) + \" NOT JOLLY\")\n        return answer\n    \n    print('\\n'.join(solve(format_stream(stream))))\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3&lt;/p&gt;\n\n&lt;p&gt;Considering that a jolly jumper requires the set of {1..n-1} to be a subset of the absolute differences between each sequence, I wrote this solution:&lt;/p&gt;\n\n&lt;p&gt;Given an input.txt file like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 1 4 2 3\n8 1 6 -1 8 9 5 2 7\n4 1 4 2 3\n5 1 4 2 -1 6\n4 19 22 24 21\n4 19 22 24 25\n4 2 -1 0 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote this solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;stream = &amp;quot;&amp;quot;\n\nwith open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:\n    for line in f:\n        stream += line\n\ndef format_stream(stream):\n    stream = stream.split(&amp;#39;\\n&amp;#39;)\n    stream.pop() #removes terminator byte in file\n    for i in range(len(stream)):\n        stream[i] = [int(x) for x in stream[i].split()] #anyone know how   \n    return stream                                       #I can turn this into \n                                                        #a one-liner? \ndef solve(arr):\n    answer = []\n    for q in arr:\n        s = q[0]\n        abs_set = []\n        for i in range(1,s):\n            abs_set.append(abs(q[i]-q[i+1]))\n        if set(range(1,s)).issubset(set(abs_set)):\n            answer.append(&amp;#39; &amp;#39;.join([str(x) for x in q]) + &amp;quot; JOLLY&amp;quot;)\n        else:\n            answer.append(&amp;#39; &amp;#39;.join([str(x) for x in q]) + &amp;quot; NOT JOLLY&amp;quot;)\n    return answer\n\nprint(&amp;#39;\\n&amp;#39;.join(solve(format_stream(stream))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge4w6l", "score_hidden": true, "stickied": false, "created": 1492492502.0, "created_utc": 1492463702.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge5vis", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "chunes", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Factor**  \n\n    USING: io splitting math.parser sequences math kernel\n        math.ranges grouping sets ;\n\n    readln \" \" split [ string&gt;number ] map unclip\n    [1,b) swap 2 clump [ first2 - abs ] map diff\n    empty? [ \"JOLLY\" ] [ \"NOT JOLLY\" ] if write", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Factor&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING: io splitting math.parser sequences math kernel\n    math.ranges grouping sets ;\n\nreadln &amp;quot; &amp;quot; split [ string&amp;gt;number ] map unclip\n[1,b) swap 2 clump [ first2 - abs ] map diff\nempty? [ &amp;quot;JOLLY&amp;quot; ] [ &amp;quot;NOT JOLLY&amp;quot; ] if write\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge5vis", "score_hidden": true, "stickied": false, "created": 1492493693.0, "created_utc": 1492464893.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge7282", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "doc_gunthrop", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**JavaScript (ES2015)**\n\nThis function assumes the input is in the form of a sequence of numbers (rather than an Array/List). The output is a string.\n\n    const isJolly = (...v) =&gt; {\n    \tlet ix = [],\n    \t\trz = v.slice(2).reduce((a,e) =&gt; (ix.push(Math.abs(e - a)),e),v[1]),\n    \t\trr = Array.from({length:ix.length},(_,i) =&gt; i + 1);\n    \t\n    \tix.sort((a,b) =&gt; a - b);\n    \treturn v.concat(rr.every((e,i) =&gt; e === ix[i]) ? 'JOLLY' : 'NOT JOLLY').join(' ');\n    };", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;JavaScript (ES2015)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This function assumes the input is in the form of a sequence of numbers (rather than an Array/List). The output is a string.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const isJolly = (...v) =&amp;gt; {\n    let ix = [],\n        rz = v.slice(2).reduce((a,e) =&amp;gt; (ix.push(Math.abs(e - a)),e),v[1]),\n        rr = Array.from({length:ix.length},(_,i) =&amp;gt; i + 1);\n\n    ix.sort((a,b) =&amp;gt; a - b);\n    return v.concat(rr.every((e,i) =&amp;gt; e === ix[i]) ? &amp;#39;JOLLY&amp;#39; : &amp;#39;NOT JOLLY&amp;#39;).join(&amp;#39; &amp;#39;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge7282", "score_hidden": true, "stickied": false, "created": 1492495169.0, "created_utc": 1492466369.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge82ah", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "moeghoeg", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Haskell**. I'm learning Haskell so any feedback is appreciated!\n\n    import Data.List (sort)\n\n    jolly :: Integral a =&gt; a -&gt; [a] -&gt; Bool\n    jolly n (x:xs) = [1..n-1] == (sort $ zipWith (\\x y -&gt; abs (x-y)) xs (x:xs))\n\n    main :: IO()\n    main = do\n        inp &lt;- getLine\n        let n:nums = map read (words inp) \n        putStrLn $ inp ++ \" \" ++ (if (jolly n nums) then \"\" else \"NOT \") ++ \"JOLLY\" \n", "edited": 1492469002.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;. I&amp;#39;m learning Haskell so any feedback is appreciated!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import Data.List (sort)\n\njolly :: Integral a =&amp;gt; a -&amp;gt; [a] -&amp;gt; Bool\njolly n (x:xs) = [1..n-1] == (sort $ zipWith (\\x y -&amp;gt; abs (x-y)) xs (x:xs))\n\nmain :: IO()\nmain = do\n    inp &amp;lt;- getLine\n    let n:nums = map read (words inp) \n    putStrLn $ inp ++ &amp;quot; &amp;quot; ++ (if (jolly n nums) then &amp;quot;&amp;quot; else &amp;quot;NOT &amp;quot;) ++ &amp;quot;JOLLY&amp;quot; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge82ah", "score_hidden": true, "stickied": false, "created": 1492496428.0, "created_utc": 1492467628.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgeaheo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "codemonkey14", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Rust 1.16**\nFeedback welcome, still new to Rust. Made main function loop for repeated inputs. \n\n    use std::io;\n    use std::io::Write;\n\n    fn main(){\n        loop{\n            print!(\"&gt;\");\n            io::stdout().flush().unwrap();\n            //get input\n            let mut input = String::new();\n            io::stdin().read_line(&amp;mut input).unwrap();\n            //parse input into integers\n            let numbers:Vec&lt;i32&gt; = input.trim().split(\" \")\n                                                        .map(|x| x.parse().unwrap())\n                                                        .collect();\n            //determine from input how many terms there are \n            let n = numbers[0];\n            if n != (numbers.len()-1) as i32{\n                println!(\"Error: number of terms does not match input spec\");\n                continue;\n            }\n            //initialize a vector of booleans to track the found inputs\n            let mut diffs = vec![false; (n-1) as usize];\n            //initialize 0th diff to true since we don't check for a diff of 0\n            diffs[0]=true;\n            //iterate over list of numbers and mark existing diffs as true\n            for i in 1..(numbers.len()-1) as i32{\n                let diff = (numbers[ i as usize] - numbers[(i+1) as usize]).abs();\n                if diff &lt; diffs.len() as i32{\n                    diffs[diff as usize] = true;\n                }\n            }\n            let mut jolly = true;\n            //check to see if any required jolly diffs weren't found\n            for d in &amp;diffs{\n                if !d{\n                    jolly = false;\n                }\n            }\n            match jolly {\n                true =&gt; {\n                    println!(\"{} - JOLLY\", input.trim());\n                },\n                false =&gt;{\n                    println!(\"{} - NOT JOLLY\", input.trim());\n                }\n            }\n        }\n    }\n\n\nOutput:\n\n    &gt;4 1 4 2 3\n    4 1 4 2 3 - JOLLY\n    &gt;5 1 4 2 -1 6\n    5 1 4 2 -1 6 - NOT JOLLY\n    &gt;4 19 22 24 21\n    4 19 22 24 21 - NOT JOLLY\n    &gt;4 19 22 24 25\n    4 19 22 24 25 - JOLLY\n    &gt;4 2 -1 0 2\n    4 2 -1 0 2 - JOLLY", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust 1.16&lt;/strong&gt;\nFeedback welcome, still new to Rust. Made main function loop for repeated inputs. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::io;\nuse std::io::Write;\n\nfn main(){\n    loop{\n        print!(&amp;quot;&amp;gt;&amp;quot;);\n        io::stdout().flush().unwrap();\n        //get input\n        let mut input = String::new();\n        io::stdin().read_line(&amp;amp;mut input).unwrap();\n        //parse input into integers\n        let numbers:Vec&amp;lt;i32&amp;gt; = input.trim().split(&amp;quot; &amp;quot;)\n                                                    .map(|x| x.parse().unwrap())\n                                                    .collect();\n        //determine from input how many terms there are \n        let n = numbers[0];\n        if n != (numbers.len()-1) as i32{\n            println!(&amp;quot;Error: number of terms does not match input spec&amp;quot;);\n            continue;\n        }\n        //initialize a vector of booleans to track the found inputs\n        let mut diffs = vec![false; (n-1) as usize];\n        //initialize 0th diff to true since we don&amp;#39;t check for a diff of 0\n        diffs[0]=true;\n        //iterate over list of numbers and mark existing diffs as true\n        for i in 1..(numbers.len()-1) as i32{\n            let diff = (numbers[ i as usize] - numbers[(i+1) as usize]).abs();\n            if diff &amp;lt; diffs.len() as i32{\n                diffs[diff as usize] = true;\n            }\n        }\n        let mut jolly = true;\n        //check to see if any required jolly diffs weren&amp;#39;t found\n        for d in &amp;amp;diffs{\n            if !d{\n                jolly = false;\n            }\n        }\n        match jolly {\n            true =&amp;gt; {\n                println!(&amp;quot;{} - JOLLY&amp;quot;, input.trim());\n            },\n            false =&amp;gt;{\n                println!(&amp;quot;{} - NOT JOLLY&amp;quot;, input.trim());\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;4 1 4 2 3\n4 1 4 2 3 - JOLLY\n&amp;gt;5 1 4 2 -1 6\n5 1 4 2 -1 6 - NOT JOLLY\n&amp;gt;4 19 22 24 21\n4 19 22 24 21 - NOT JOLLY\n&amp;gt;4 19 22 24 25\n4 19 22 24 25 - JOLLY\n&amp;gt;4 2 -1 0 2\n4 2 -1 0 2 - JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgeaheo", "score_hidden": true, "stickied": false, "created": 1492499589.0, "created_utc": 1492470789.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgeb384", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "IQ--", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "/* Java */\n\n    import java.util.Scanner;\n    import java.util.Set;\n    import java.util.HashSet;\n\n    class Easy311 {\n        static boolean isJolly(int[] digits) {\n            int len = digits.length;\n            if (digits.length &lt; 2) {\n                return false;\n            }\n\n            Set&lt;Integer&gt; required = new HashSet&lt;&gt;();\n            for (int i = 1; i &lt; len; i++) {\n                required.add(i);\n            }\n\n            for (int i = 0; i &lt; len - 1; i++) {\n                int diff = Math.abs(digits[i] - digits[i+1]);\n                required.remove(diff);\n            }\n            return required.isEmpty();\n        }\n\n        public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n            int n = sc.nextInt();\n            int[] digits = new int[n];\n            for (int i = 0; i &lt; n; i++) {\n                digits[i] = sc.nextInt();\n            }\n\n            String result = isJolly(digits) ? \"JOLLY\" : \"NOT JOLLY\";\n            System.out.println(result);\n        }\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;/* Java */&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.util.Scanner;\nimport java.util.Set;\nimport java.util.HashSet;\n\nclass Easy311 {\n    static boolean isJolly(int[] digits) {\n        int len = digits.length;\n        if (digits.length &amp;lt; 2) {\n            return false;\n        }\n\n        Set&amp;lt;Integer&amp;gt; required = new HashSet&amp;lt;&amp;gt;();\n        for (int i = 1; i &amp;lt; len; i++) {\n            required.add(i);\n        }\n\n        for (int i = 0; i &amp;lt; len - 1; i++) {\n            int diff = Math.abs(digits[i] - digits[i+1]);\n            required.remove(diff);\n        }\n        return required.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] digits = new int[n];\n        for (int i = 0; i &amp;lt; n; i++) {\n            digits[i] = sc.nextInt();\n        }\n\n        String result = isJolly(digits) ? &amp;quot;JOLLY&amp;quot; : &amp;quot;NOT JOLLY&amp;quot;;\n        System.out.println(result);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgeb384", "score_hidden": true, "stickied": false, "created": 1492500387.0, "created_utc": 1492471587.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgeb4wy", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Flynn58", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3.5**\n\n    def jollytest(sequence):\n        jumps = []\n        for i in range(len(sequence)):\n            if i &lt; len(sequence)-1:\n                jumps.append(abs(sequence[i]-sequence[i+1]))\n        ref = [i for i in range(1,len(sequence))]\n        if sorted(jumps) == sorted(ref):\n            print('{} - JOLLY'.format(sequence))\n        else:\n            print('{} - NOT JOLLY'.format(sequence))\n\nTests:\n\n    [1, 4, 2, 3] - JOLLY\n    [1, 4, 2, -1, 6] - NOT JOLLY\n    [19, 22, 24, 21] - NOT JOLLY\n    [19, 22, 24, 25] - JOLLY\n    [2, -1, 0, 2] - JOLLY\n\nI could pack it a lot tighter with some list comprehensions, but I like the readability of the solution.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3.5&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def jollytest(sequence):\n    jumps = []\n    for i in range(len(sequence)):\n        if i &amp;lt; len(sequence)-1:\n            jumps.append(abs(sequence[i]-sequence[i+1]))\n    ref = [i for i in range(1,len(sequence))]\n    if sorted(jumps) == sorted(ref):\n        print(&amp;#39;{} - JOLLY&amp;#39;.format(sequence))\n    else:\n        print(&amp;#39;{} - NOT JOLLY&amp;#39;.format(sequence))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tests:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[1, 4, 2, 3] - JOLLY\n[1, 4, 2, -1, 6] - NOT JOLLY\n[19, 22, 24, 21] - NOT JOLLY\n[19, 22, 24, 25] - JOLLY\n[2, -1, 0, 2] - JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I could pack it a lot tighter with some list comprehensions, but I like the readability of the solution.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgeb4wy", "score_hidden": true, "stickied": false, "created": 1492500447.0, "created_utc": 1492471647.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgec1wc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "binaryblade", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "honestly this is probably cheating but *octave/matlab*\n\n    function f=isjolly(x)\n    f=!length(setdiff(1:x(1)-1,  unique(abs(diff(x(2:x(1)+1))))));\n\t", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;honestly this is probably cheating but &lt;em&gt;octave/matlab&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function f=isjolly(x)\nf=!length(setdiff(1:x(1)-1,  unique(abs(diff(x(2:x(1)+1))))));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgec1wc", "score_hidden": true, "stickied": false, "created": 1492501616.0, "created_utc": 1492472816.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgecgcf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Dr_Octagonapus", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3**        \n\n    def jjumper(example):\n        for i in range(len(example) - 1):\n            num = abs(example[i] - example[i + 1])\n            if num not in example:\n                num = False\n                break\n        if num == True:\n            print( example , \"Jolly\")\n        else:\n            print(example , \"Not Jolly\")\n    \n    \n    example = [5, 1, 4, 2, -1, 6]\n    jjumper(example)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def jjumper(example):\n    for i in range(len(example) - 1):\n        num = abs(example[i] - example[i + 1])\n        if num not in example:\n            num = False\n            break\n    if num == True:\n        print( example , &amp;quot;Jolly&amp;quot;)\n    else:\n        print(example , &amp;quot;Not Jolly&amp;quot;)\n\n\nexample = [5, 1, 4, 2, -1, 6]\njjumper(example)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgecgcf", "score_hidden": true, "stickied": false, "created": 1492502131.0, "created_utc": 1492473331.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgehd7s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Mr_Persons", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**SWI-PROLOG**\nI probably used some predicates that were already available from the standard library, but it doesn't hurt to write them yourself. Text output is very rough as I have no idea how to do such things in Prolog.    \n\n    last([X], X).\n    last([_|T], X) :-\n        last(T, X).\n\n    enumFrom(E, E, [E]).\n    enumFrom(S, E, [S|T]) :-\n        S &lt; E,\n        NewS is S + 1,\n        enumFrom(NewS, E, T).\n\n    differences([_], []).\n    differences([H, H2|T], [Dif|T2]) :-\n        Dif is abs(H - H2),\n        differences([H2|T], T2).\n\n    jolly(L, D) :-\n        differences(L, D),\n        msort(D, [F|DS]),\n        last([F|DS], La),\n        enumFrom(F, La, [F|DS]).\n\n    main(L) :-\n        jolly(L, _),\n        write(\"JOLLY\")\n        ;\n        write(\"NOT JOLLY\").", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;SWI-PROLOG&lt;/strong&gt;\nI probably used some predicates that were already available from the standard library, but it doesn&amp;#39;t hurt to write them yourself. Text output is very rough as I have no idea how to do such things in Prolog.    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;last([X], X).\nlast([_|T], X) :-\n    last(T, X).\n\nenumFrom(E, E, [E]).\nenumFrom(S, E, [S|T]) :-\n    S &amp;lt; E,\n    NewS is S + 1,\n    enumFrom(NewS, E, T).\n\ndifferences([_], []).\ndifferences([H, H2|T], [Dif|T2]) :-\n    Dif is abs(H - H2),\n    differences([H2|T], T2).\n\njolly(L, D) :-\n    differences(L, D),\n    msort(D, [F|DS]),\n    last([F|DS], La),\n    enumFrom(F, La, [F|DS]).\n\nmain(L) :-\n    jolly(L, _),\n    write(&amp;quot;JOLLY&amp;quot;)\n    ;\n    write(&amp;quot;NOT JOLLY&amp;quot;).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgehd7s", "score_hidden": true, "stickied": false, "created": 1492508293.0, "created_utc": 1492479493.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgelds2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mr_smartypants537", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "#C++\n    bool isJolly(vector&lt;int&gt; inputs) {\n        int diffs_size=inputs.size()-1;\n        int diffs[diffs_size];\n        int greatest_diff=0;\n        for (int i=1;i&lt;inputs.size();++i) {\n            int current_diff = inputs[i]-inputs[i-1];\n            if (current_diff&lt;0) current_diff*=-1;\n            if (current_diff&gt;greatest_diff) greatest_diff=current_diff;\n            diffs[i-1] = current_diff;\n        }\n        bool jolly=true;\n        for (int i=1;i&lt;greatest_diff &amp;&amp; jolly;++i) {\n            // search for diff in diff list\n            jolly=false;\n            for (int i2=0;i2&lt;diffs_size;++i2) {\n                if (diffs[i2]==i) jolly=true;\n            }\n        }\n        return jolly;\n    }\n    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C++&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;bool isJolly(vector&amp;lt;int&amp;gt; inputs) {\n    int diffs_size=inputs.size()-1;\n    int diffs[diffs_size];\n    int greatest_diff=0;\n    for (int i=1;i&amp;lt;inputs.size();++i) {\n        int current_diff = inputs[i]-inputs[i-1];\n        if (current_diff&amp;lt;0) current_diff*=-1;\n        if (current_diff&amp;gt;greatest_diff) greatest_diff=current_diff;\n        diffs[i-1] = current_diff;\n    }\n    bool jolly=true;\n    for (int i=1;i&amp;lt;greatest_diff &amp;amp;&amp;amp; jolly;++i) {\n        // search for diff in diff list\n        jolly=false;\n        for (int i2=0;i2&amp;lt;diffs_size;++i2) {\n            if (diffs[i2]==i) jolly=true;\n        }\n    }\n    return jolly;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgelds2", "score_hidden": true, "stickied": false, "created": 1492513127.0, "created_utc": 1492484327.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgen99v", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "sultry_somnambulist", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Python3\n\n    def is_jolly(arr):\n        differences = []\n        for i in range(0, len(arr)-1):\n            differences.append(abs(arr[i] - arr[i+1]))\n        for j in range(1, len(arr)-1):\n            if j not in differences:\n                return \"NOT JOLLY\"\n        return \"JOLLY\"\n    \n    \n    test_inputs = [\n        [4, 1, 4, 2, 3],\n        [5, 1, 4, 2, -1, 6],\n        [4, 19, 22, 24, 21],\n        [4, 19, 22, 24, 25],\n        [4, 2, -1, 0, 2]\n    ]\n    \n    for arr in test_inputs:\n        print(is_jolly(arr))\n    ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def is_jolly(arr):\n    differences = []\n    for i in range(0, len(arr)-1):\n        differences.append(abs(arr[i] - arr[i+1]))\n    for j in range(1, len(arr)-1):\n        if j not in differences:\n            return &amp;quot;NOT JOLLY&amp;quot;\n    return &amp;quot;JOLLY&amp;quot;\n\n\ntest_inputs = [\n    [4, 1, 4, 2, 3],\n    [5, 1, 4, 2, -1, 6],\n    [4, 19, 22, 24, 21],\n    [4, 19, 22, 24, 25],\n    [4, 2, -1, 0, 2]\n]\n\nfor arr in test_inputs:\n    print(is_jolly(arr))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgen99v", "score_hidden": true, "stickied": false, "created": 1492515639.0, "created_utc": 1492486839.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dgeneul", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "numbersnletters", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "# Golang\nThis is the first bit of Go that I've ever written, so feedback is definitely welcome.\n\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"os\"\n\t\t\"strings\"\n\t\t\"strconv\"\n\t)\n\n\tfunc main() {\n\t\ts := bufio.NewScanner(os.Stdin)\n\t\tfor {\n\t\t\ts.Scan()\n\t\t\tline := s.Text()\n\t\t\tif line == \"\" {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tnumbers := parseLine(line)\n\n\t\t\tfmt.Print(line)\n\t\t\tif isJolly(numbers) {\n\t\t\t\tfmt.Println(\" JOLLY\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\" NOT JOLLY\")\n\t\t\t}\n\t\t}\n\t}\n\n\tfunc parseLine(line string)(numbers []int) {\n\t\ttokens := strings.Split(line, \" \")[1:]\n\t\tnumbers = make([]int, len(tokens))\n\n\t\tfor i, v := range tokens {\n\t\t\tnumbers[i], _ = strconv.Atoi(v)\n\t\t}\n\n\t\treturn\n\t}\n\n\tfunc isJolly(numbers []int) bool {\n\t\tdifferences := make([]int, len(numbers) - 1)\n\n\t\tfor i, v := range numbers[:len(numbers) - 1] {\n\t\t\tdiff := v - numbers[i + 1]\n\t\t\tif diff &lt; 0 {\n\t\t\t\tdiff = diff * -1\n\t\t\t}\n\t\t\tdifferences[i] = diff\n\t\t}\n\n\t\tfor i := 1; i &lt; len(numbers); i++ {\n\t\t\tpresent := false\n\t\t\tfor _, v := range differences {\n\t\t\t\tif i == v {\n\t\t\t\t\tpresent = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ! present {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n## Output\n\n\t$ cat input.txt | ./jolly_jumper \n\t4 1 4 2 3 JOLLY\n\t8 1 6 -1 8 9 5 2 7 NOT JOLLY\n\t4 1 4 2 3 JOLLY\n\t5 1 4 2 -1 6 NOT JOLLY\n\t4 19 22 24 21 NOT JOLLY\n\t4 19 22 24 25 JOLLY\n\t4 2 -1 0 2 JOLLY", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Golang&lt;/h1&gt;\n\n&lt;p&gt;This is the first bit of Go that I&amp;#39;ve ever written, so feedback is definitely welcome.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strings&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc main() {\n    s := bufio.NewScanner(os.Stdin)\n    for {\n        s.Scan()\n        line := s.Text()\n        if line == &amp;quot;&amp;quot; {\n            break\n        }\n\n        numbers := parseLine(line)\n\n        fmt.Print(line)\n        if isJolly(numbers) {\n            fmt.Println(&amp;quot; JOLLY&amp;quot;)\n        } else {\n            fmt.Println(&amp;quot; NOT JOLLY&amp;quot;)\n        }\n    }\n}\n\nfunc parseLine(line string)(numbers []int) {\n    tokens := strings.Split(line, &amp;quot; &amp;quot;)[1:]\n    numbers = make([]int, len(tokens))\n\n    for i, v := range tokens {\n        numbers[i], _ = strconv.Atoi(v)\n    }\n\n    return\n}\n\nfunc isJolly(numbers []int) bool {\n    differences := make([]int, len(numbers) - 1)\n\n    for i, v := range numbers[:len(numbers) - 1] {\n        diff := v - numbers[i + 1]\n        if diff &amp;lt; 0 {\n            diff = diff * -1\n        }\n        differences[i] = diff\n    }\n\n    for i := 1; i &amp;lt; len(numbers); i++ {\n        present := false\n        for _, v := range differences {\n            if i == v {\n                present = true\n                break\n            }\n        }\n        if ! present {\n            return false\n        }\n    }\n    return true\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;$ cat input.txt | ./jolly_jumper \n4 1 4 2 3 JOLLY\n8 1 6 -1 8 9 5 2 7 NOT JOLLY\n4 1 4 2 3 JOLLY\n5 1 4 2 -1 6 NOT JOLLY\n4 19 22 24 21 NOT JOLLY\n4 19 22 24 25 JOLLY\n4 2 -1 0 2 JOLLY\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgeneul", "score_hidden": true, "stickied": false, "created": 1492515867.0, "created_utc": 1492487067.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65vgkh", "likes": null, "replies": "", "user_reports": [], "id": "dge0tdc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mech_eng_lewis", "parent_id": "t3_65vgkh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3**\n\n\n    #!/usr/bin/env python3\n    \n    def determine_if_jolly_jumper():\n        n = int(input())\n        inputs = []\n        for i in range(0,n):\n            inputs.append(int(input()))\n    \n        successive_values = []\n        for i in range(0, n-1):\n            successive_values.append(abs(inputs[i+1] - inputs[i]))\n        \n        for i in range(1,n-1):\n            if i not in successive_values:\n                return False\n    \n        return True\n    \n    if __name__ == \"__main__\":\n        if determine_if_jolly_jumper():\n            print('JOLLY')\n        else:\n            print('NOT JOLLY')\n    \n\n\nJust started using Python because a course at uni requires me to. I'm just thankful I don't have to use MATLAB :(. I want to be roasted because I have a programming exam next week, and I need all the help I can get. \n\nroast me plz (with regards to that program, not me in general hahah).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3\n\ndef determine_if_jolly_jumper():\n    n = int(input())\n    inputs = []\n    for i in range(0,n):\n        inputs.append(int(input()))\n\n    successive_values = []\n    for i in range(0, n-1):\n        successive_values.append(abs(inputs[i+1] - inputs[i]))\n\n    for i in range(1,n-1):\n        if i not in successive_values:\n            return False\n\n    return True\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    if determine_if_jolly_jumper():\n        print(&amp;#39;JOLLY&amp;#39;)\n    else:\n        print(&amp;#39;NOT JOLLY&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just started using Python because a course at uni requires me to. I&amp;#39;m just thankful I don&amp;#39;t have to use MATLAB :(. I want to be roasted because I have a programming exam next week, and I need all the help I can get. &lt;/p&gt;\n\n&lt;p&gt;roast me plz (with regards to that program, not me in general hahah).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dge0tdc", "score_hidden": true, "stickied": false, "created": 1492487897.0, "created_utc": 1492459097.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}]