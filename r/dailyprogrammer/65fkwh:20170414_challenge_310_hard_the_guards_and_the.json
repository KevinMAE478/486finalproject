[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;I recently came into some money and built myself a mansion. And I&amp;#39;m afraid of robbers who now want to come and steal the rest of my money. I built my house in the middle of my property, but now I need some guard towers. I didn&amp;#39;t make &lt;em&gt;that&lt;/em&gt; much money, so I can&amp;#39;t build an &lt;em&gt;infinite&lt;/em&gt; number of towers with an infinite number of guards - I can only afford 3. But I do need your help - how many towers do I need to build to give my house adequate coverage, and sufficient variety of coverage to keep thieves at bay?&lt;/p&gt;\n\n&lt;p&gt;For this problem ...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Assume a Euclidean 2 dimensional space with my mansion at the center (0,0)&lt;/li&gt;\n&lt;li&gt;My mansion is circular with a unit radius of 1&lt;/li&gt;\n&lt;li&gt;I&amp;#39;ll tell you the locations of the guard towers as Euclidean coordinates, for example (1,1). They may be negative.&lt;/li&gt;\n&lt;li&gt;The towers only work if they form a triangle that fully emcompasses my mansion (remember, a circle centered at (0,0))&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;ll give you the locations of the towers, one at a time, as a pair of integers &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; representing the coordinates. For &lt;em&gt;every&lt;/em&gt; row of input please tell me how many different triangles I can have - that is arrangements of 3 occupied towers. I like diversity, let&amp;#39;s keep the thieves guessing as to where the towers are occupied every night.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given an integer on the first line telling you how many lines of tower coordinate pairs to read. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4\n3 -1\n-1 3\n-1 -1\n-5 -2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;For &lt;em&gt;every row of input&lt;/em&gt; tell me how many triangles I can make that fully enclose my mansion at (0,0) with a unit radius of 1. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0\n0\n1\n2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;10\n2 -7\n2 2\n4 -9\n-4 -6\n9 3\n-8 -7\n6 0\n-5 -6\n-1 -1\n-7 10\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nI recently came into some money and built myself a mansion. And I'm afraid of robbers who now want to come and steal the rest of my money. I built my house in the middle of my property, but now I need some guard towers. I didn't make *that* much money, so I can't build an *infinite* number of towers with an infinite number of guards - I can only afford 3. But I do need your help - how many towers do I need to build to give my house adequate coverage, and sufficient variety of coverage to keep thieves at bay?\n\nFor this problem ...\n\n- Assume a Euclidean 2 dimensional space with my mansion at the center (0,0)\n- My mansion is circular with a unit radius of 1\n- I'll tell you the locations of the guard towers as Euclidean coordinates, for example (1,1). They may be negative.\n- The towers only work if they form a triangle that fully emcompasses my mansion (remember, a circle centered at (0,0))\n\nI'll give you the locations of the towers, one at a time, as a pair of integers *x* and *y* representing the coordinates. For *every* row of input please tell me how many different triangles I can have - that is arrangements of 3 occupied towers. I like diversity, let's keep the thieves guessing as to where the towers are occupied every night.\n\n# Input Description\n\nYou'll be given an integer on the first line telling you how many lines of tower coordinate pairs to read. Example:\n\n    4\n    3 -1\n    -1 3\n    -1 -1\n    -5 -2\n\n# Output Description\n\nFor *every row of input* tell me how many triangles I can make that fully enclose my mansion at (0,0) with a unit radius of 1. Example:\n\n    0\n    0\n    1\n    2\n\n# Challenge Input\n\n    10\n    2 -7\n    2 2\n    4 -9\n    -4 -6\n    9 3\n    -8 -7\n    6 0\n    -5 -6\n    -1 -1\n    -7 10\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65fkwh", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 41, "report_reasons": null, "author": "jnazario", "saved": false, "mod_reports": [], "name": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "approved_by": null, "over_18": false, "domain": "self.dailyprogrammer", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1492209228.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/dailyprogrammer/comments/65fkwh/20170414_challenge_310_hard_the_guards_and_the/", "num_reports": null, "locked": false, "stickied": false, "created": 1492236598.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/65fkwh/20170414_challenge_310_hard_the_guards_and_the/", "author_flair_text": "2 0", "quarantine": false, "title": "[2017-04-14] Challenge #310 [Hard] The Guards and the Mansion", "created_utc": 1492207798.0, "distinguished": null, "media": null, "upvote_ratio": 0.88, "num_comments": 9, "visited": false, "subreddit_type": "restricted", "ups": 41}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dgaeqen", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "adrian17", "parent_id": "t1_dg9zuq3", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Oops :/\n\nWill fix that later.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oops :/&lt;/p&gt;\n\n&lt;p&gt;Will fix that later.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgaeqen", "score_hidden": false, "stickied": false, "created": 1492268877.0, "created_utc": 1492240077.0, "depth": 2, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9zuq3", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "i3aizey", "parent_id": "t1_dg9vjyi", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Do you remember checking if the triangles formed actually encompass the mansion, or would you also count 'false' positives like: (100, 100), (200,100), (100,200)\n\nSince all lines are far away from (0,0), but the triangle they form are nowhere near covering the mansion\n\n?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do you remember checking if the triangles formed actually encompass the mansion, or would you also count &amp;#39;false&amp;#39; positives like: (100, 100), (200,100), (100,200)&lt;/p&gt;\n\n&lt;p&gt;Since all lines are far away from (0,0), but the triangle they form are nowhere near covering the mansion&lt;/p&gt;\n\n&lt;p&gt;?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9zuq3", "score_hidden": false, "stickied": false, "created": 1492244259.0, "created_utc": 1492215459.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9vjyi", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "adrian17", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "Python.\n\n\t# Looks like the final number is 69?\n\tfrom itertools import combinations\n\n\tpoints = \"\"\"2 -7\n\t2 2\n\t4 -9\n\t-4 -6\n\t9 3\n\t-8 -7\n\t6 0\n\t-5 -6\n\t-1 -1\n\t-7 10\"\"\"\n\tpoints = [list(map(int, line.split())) for line in points.splitlines()]\n\n\tdef distance_from_zero(a, b, c):\n\t\t# https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n\t\treturn abs(c) / (a*a+b*b)**0.5\n\n\tvalid = 0\n\n\tfor triple in combinations(points, 3):\n\t\tp1, p2, p3 = triple\n\t\tfor line in [(p1, p2), (p1, p3), (p2, p3)]:\n\t\t\t(x1, y1), (x2, y2) = line\n\t\t\t# http://stackoverflow.com/a/13242831/2468469\n\t\t\ta = y1 - y2\n\t\t\tb = x2 - x1\n\t\t\tc = x1 * y2 - x2 * y1\n\t\t\tif distance_from_zero(a, b, c) &lt; 1:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tvalid += 1\n\n\tprint(valid)", "edited": 1492209936.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Looks like the final number is 69?\nfrom itertools import combinations\n\npoints = &amp;quot;&amp;quot;&amp;quot;2 -7\n2 2\n4 -9\n-4 -6\n9 3\n-8 -7\n6 0\n-5 -6\n-1 -1\n-7 10&amp;quot;&amp;quot;&amp;quot;\npoints = [list(map(int, line.split())) for line in points.splitlines()]\n\ndef distance_from_zero(a, b, c):\n    # https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    return abs(c) / (a*a+b*b)**0.5\n\nvalid = 0\n\nfor triple in combinations(points, 3):\n    p1, p2, p3 = triple\n    for line in [(p1, p2), (p1, p3), (p2, p3)]:\n        (x1, y1), (x2, y2) = line\n        # http://stackoverflow.com/a/13242831/2468469\n        a = y1 - y2\n        b = x2 - x1\n        c = x1 * y2 - x2 * y1\n        if distance_from_zero(a, b, c) &amp;lt; 1:\n            break\n    else:\n        valid += 1\n\nprint(valid)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9vjyi", "score_hidden": false, "stickied": false, "created": 1492238534.0, "created_utc": 1492209734.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dgai34m", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Toctave", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Python 3**\n\n    from itertools import combinations\n\n    def distance_to_center(p1, p2):\n    \tx1, y1, x2, y2 = *p1, *p2\n    \tif (x1 == x2):\n    \t\treturn abs(x1)\n    \ta = (y2 - y1) / (x2 - x1)\n    \tc = (y1 - a * x1)\n    \n    \treturn abs(c) / (1 + a*a) ** .5\n    \n    def sign(p1, p2, p3):\n    \treturn (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]) &lt; 0\n    \n    def center_in_triangle(triangle):\n    \tb1 = sign((0, 0), triangle[0], triangle[1])\n    \tb2 = sign((0, 0), triangle[1], triangle[2])\n    \tb3 = sign((0, 0), triangle[2], triangle[0])\n    \n    \treturn b1 == b2 == b3\n    \n    n = int(input())\n    towers = []\n    for _ in range(n):\n    \ttowers.append(tuple(map(int, input().split())))\n    \n    total = 0\n    to_draw = []\n    for i in range(n):\n    \tif i &lt; 2:\n    \t\tprint(0)\n    \telse:\n    \t\tfor j in range(i):\n    \t\t\tfor k in range(j):\n    \t\t\t\ttriangle = (towers[k], towers[j], towers[i])\n    \t\t\t\tif all(distance_to_center(triangle[i], triangle[(i+1)%3]) &gt;= 1 for i in range(3)) and center_in_triangle(triangle):\n    \t\t\t\t\ttotal += 1\n    \t\tprint(total)\n\nOutput number is 12.\n\nI thought of an optimization that I was too lazy to implement : instead of checking each possible triangle, divide the canvas into four quadrants along the y and x axis. Candidate triangles are the ones with three points in three distinct quadrants.\n\nI also made these visuals : [all the tests](https://gfycat.com/NearDazzlingJapanesebeetle), [only the triangles that work](https://gfycat.com/HelpfulConcernedHapuka)", "edited": 1492250201.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import combinations\n\ndef distance_to_center(p1, p2):\n    x1, y1, x2, y2 = *p1, *p2\n    if (x1 == x2):\n        return abs(x1)\n    a = (y2 - y1) / (x2 - x1)\n    c = (y1 - a * x1)\n\n    return abs(c) / (1 + a*a) ** .5\n\ndef sign(p1, p2, p3):\n    return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]) &amp;lt; 0\n\ndef center_in_triangle(triangle):\n    b1 = sign((0, 0), triangle[0], triangle[1])\n    b2 = sign((0, 0), triangle[1], triangle[2])\n    b3 = sign((0, 0), triangle[2], triangle[0])\n\n    return b1 == b2 == b3\n\nn = int(input())\ntowers = []\nfor _ in range(n):\n    towers.append(tuple(map(int, input().split())))\n\ntotal = 0\nto_draw = []\nfor i in range(n):\n    if i &amp;lt; 2:\n        print(0)\n    else:\n        for j in range(i):\n            for k in range(j):\n                triangle = (towers[k], towers[j], towers[i])\n                if all(distance_to_center(triangle[i], triangle[(i+1)%3]) &amp;gt;= 1 for i in range(3)) and center_in_triangle(triangle):\n                    total += 1\n        print(total)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output number is 12.&lt;/p&gt;\n\n&lt;p&gt;I thought of an optimization that I was too lazy to implement : instead of checking each possible triangle, divide the canvas into four quadrants along the y and x axis. Candidate triangles are the ones with three points in three distinct quadrants.&lt;/p&gt;\n\n&lt;p&gt;I also made these visuals : &lt;a href=\"https://gfycat.com/NearDazzlingJapanesebeetle\"&gt;all the tests&lt;/a&gt;, &lt;a href=\"https://gfycat.com/HelpfulConcernedHapuka\"&gt;only the triangles that work&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgai34m", "score_hidden": false, "stickied": false, "created": 1492278806.0, "created_utc": 1492250006.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dg9yb8q", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "i3aizey", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**Java**\n\nedit: triangles now have to surround mansion, hue hue hue.\n        \n    public class N310Hard {\n        public static void main(String... args){\n            int sum, curr;\n            String[][] in = {\"3 -1\\n-1 3\\n-1 -1\\n-5 -2\".split(\"\\n\"), \"2 -7\\n2 2\\n4 -9\\n-4 -6\\n9 3\\n-8 -7\\n6 0\\n-5 -6\\n-1 -1\\n-7 10\".split(\"\\n\")};\n            for(String[] input : in){\n                Note.write(input); N310Hard n = new N310Hard(); sum = 0;\n                for(String a : input)\n                    Note.writenl((curr = n.solve(a)) + \"; Sum: \" + (sum += curr) +\"; Tower: (\" + n.towers.get(n.towers.size() - 1).x + \", \" + n.towers.get(n.towers.size() - 1).y + \")\");\n            }\n        }\n        private ArrayList&lt;Point&gt; towers = new ArrayList&lt;&gt;();\n        private int solve(String in){\n            Point a = new Point(Integer.parseInt(in.split(\" \")[0]), Integer.parseInt(in.split(\" \")[1])), b, c;\n            int counter = 0;\n            for(int j = 0; j &lt; towers.size(); j++)\n                for(int k = j + 1; k &lt; towers.size(); k++)\n                    if( lineDistFromOrigo(a, (b = towers.get(j))) &gt;= 1 &amp;&amp;\n                        lineDistFromOrigo(a, (c = towers.get(k))) &gt;= 1 &amp;&amp;\n                        lineDistFromOrigo(b, c) &gt;= 1 &amp;&amp;\n                        origoInsideTriangle(a, b, c))\n                        counter++;\n            towers.add(a);\n            return counter;\n        }\n        private static int lineDistFromOrigo(Point p1, Point p2){\n            int a = p2.y - p1.y,\n                b = p1.x - p2.x,\n                c = a * p1.x + b * p1.y;\n            return (int) Math.abs(c / Math.sqrt(a * a + b * b));\n        }\n        private static boolean origoInsideTriangle(Point a, Point b, Point c){\n            double divBy = (b.y - c.y)*(a.x - c.x) + (c.x - b.x)*(a.y - c.y);\n            double alpha = (double)((b.y - c.y)*(-c.x) + (c.x - b.x)*(-c.y)) / divBy;\n            double beta = (double)((c.y - a.y)*(-c.x) + (a.x - c.x)*(-c.y))  / divBy;\n            double gamma = 1.0 - alpha - beta;\n            return alpha &gt; 0 &amp;&amp; beta &gt; 0 &amp;&amp; gamma &gt; 0;\n        }\n    }\n\n\nMathy sauce:\n\nCheck closest distance from line to point: https://math.stackexchange.com/questions/275529/check-if-line-intersects-with-circles-perimeter\n\nCheck point inside triangle: https://stackoverflow.com/questions/13300904/determine-whether-point-lies-inside-triangle\n\nOutput:\n    \n    // Test example\n    [3 -1, -1 3, -1 -1, -5 -2]\n    0; Sum: 0; Tower: (3, -1)\n    0; Sum: 0; Tower: (-1, 3)\n    1; Sum: 1; Tower: (-1, -1)\n    1; Sum: 2; Tower: (-5, -2)\n    // Challenge\n    [2 -7, 2 2, 4 -9, -4 -6, 9 3, -8 -7, 6 0, -5 -6, -1 -1, -7 10]\n    0; Sum: 0; Tower: (2, -7)\n    0; Sum: 0; Tower: (2, 2)\n    0; Sum: 0; Tower: (4, -9)\n    0; Sum: 0; Tower: (-4, -6)\n    0; Sum: 0; Tower: (9, 3)\n    0; Sum: 0; Tower: (-8, -7)\n    0; Sum: 0; Tower: (6, 0)\n    0; Sum: 0; Tower: (-5, -6)\n    0; Sum: 0; Tower: (-1, -1)\n    12; Sum: 12; Tower: (-7, 10)", "edited": 1492215864.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;edit: triangles now have to surround mansion, hue hue hue.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class N310Hard {\n    public static void main(String... args){\n        int sum, curr;\n        String[][] in = {&amp;quot;3 -1\\n-1 3\\n-1 -1\\n-5 -2&amp;quot;.split(&amp;quot;\\n&amp;quot;), &amp;quot;2 -7\\n2 2\\n4 -9\\n-4 -6\\n9 3\\n-8 -7\\n6 0\\n-5 -6\\n-1 -1\\n-7 10&amp;quot;.split(&amp;quot;\\n&amp;quot;)};\n        for(String[] input : in){\n            Note.write(input); N310Hard n = new N310Hard(); sum = 0;\n            for(String a : input)\n                Note.writenl((curr = n.solve(a)) + &amp;quot;; Sum: &amp;quot; + (sum += curr) +&amp;quot;; Tower: (&amp;quot; + n.towers.get(n.towers.size() - 1).x + &amp;quot;, &amp;quot; + n.towers.get(n.towers.size() - 1).y + &amp;quot;)&amp;quot;);\n        }\n    }\n    private ArrayList&amp;lt;Point&amp;gt; towers = new ArrayList&amp;lt;&amp;gt;();\n    private int solve(String in){\n        Point a = new Point(Integer.parseInt(in.split(&amp;quot; &amp;quot;)[0]), Integer.parseInt(in.split(&amp;quot; &amp;quot;)[1])), b, c;\n        int counter = 0;\n        for(int j = 0; j &amp;lt; towers.size(); j++)\n            for(int k = j + 1; k &amp;lt; towers.size(); k++)\n                if( lineDistFromOrigo(a, (b = towers.get(j))) &amp;gt;= 1 &amp;amp;&amp;amp;\n                    lineDistFromOrigo(a, (c = towers.get(k))) &amp;gt;= 1 &amp;amp;&amp;amp;\n                    lineDistFromOrigo(b, c) &amp;gt;= 1 &amp;amp;&amp;amp;\n                    origoInsideTriangle(a, b, c))\n                    counter++;\n        towers.add(a);\n        return counter;\n    }\n    private static int lineDistFromOrigo(Point p1, Point p2){\n        int a = p2.y - p1.y,\n            b = p1.x - p2.x,\n            c = a * p1.x + b * p1.y;\n        return (int) Math.abs(c / Math.sqrt(a * a + b * b));\n    }\n    private static boolean origoInsideTriangle(Point a, Point b, Point c){\n        double divBy = (b.y - c.y)*(a.x - c.x) + (c.x - b.x)*(a.y - c.y);\n        double alpha = (double)((b.y - c.y)*(-c.x) + (c.x - b.x)*(-c.y)) / divBy;\n        double beta = (double)((c.y - a.y)*(-c.x) + (a.x - c.x)*(-c.y))  / divBy;\n        double gamma = 1.0 - alpha - beta;\n        return alpha &amp;gt; 0 &amp;amp;&amp;amp; beta &amp;gt; 0 &amp;amp;&amp;amp; gamma &amp;gt; 0;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mathy sauce:&lt;/p&gt;\n\n&lt;p&gt;Check closest distance from line to point: &lt;a href=\"https://math.stackexchange.com/questions/275529/check-if-line-intersects-with-circles-perimeter\"&gt;https://math.stackexchange.com/questions/275529/check-if-line-intersects-with-circles-perimeter&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Check point inside triangle: &lt;a href=\"https://stackoverflow.com/questions/13300904/determine-whether-point-lies-inside-triangle\"&gt;https://stackoverflow.com/questions/13300904/determine-whether-point-lies-inside-triangle&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Test example\n[3 -1, -1 3, -1 -1, -5 -2]\n0; Sum: 0; Tower: (3, -1)\n0; Sum: 0; Tower: (-1, 3)\n1; Sum: 1; Tower: (-1, -1)\n1; Sum: 2; Tower: (-5, -2)\n// Challenge\n[2 -7, 2 2, 4 -9, -4 -6, 9 3, -8 -7, 6 0, -5 -6, -1 -1, -7 10]\n0; Sum: 0; Tower: (2, -7)\n0; Sum: 0; Tower: (2, 2)\n0; Sum: 0; Tower: (4, -9)\n0; Sum: 0; Tower: (-4, -6)\n0; Sum: 0; Tower: (9, 3)\n0; Sum: 0; Tower: (-8, -7)\n0; Sum: 0; Tower: (6, 0)\n0; Sum: 0; Tower: (-5, -6)\n0; Sum: 0; Tower: (-1, -1)\n12; Sum: 12; Tower: (-7, 10)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dg9yb8q", "score_hidden": false, "stickied": false, "created": 1492242192.0, "created_utc": 1492213392.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dgari3l", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "rakkar16", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "#Python 3\n\nMore elegant solutions are probably possible. \n\n    from functools import lru_cache\n    from math import sqrt\n    \n    in_num = int(input())\n    inpoints = []\n    for i in range(in_num):\n        inpoints.append(\n            tuple(int(j) for j in input().split()))\n    \n    @lru_cache()\n    def left_of(x, y):\n        return x[0]*y[1] - x[1]*y[0] &lt;= 0\n        \n    @lru_cache()\n    def no_intersect(x, y):\n        if x == y or (x[0] == x[1] and y[0] == y[1]):\n            return False\n        # https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n        dist = abs(x[1]*y[0] - y[1]*x[0]) / sqrt((y[1]-y[0])*(y[1]-y[0]) +\n                                                 (x[1]-x[0])*(x[1]-x[0]))\n        return dist &gt;= 1\n    \n    points = []\n    triangles = 0\n    \n    for point_1 in inpoints:\n        for point_2 in points:\n            if left_of(point_1, point_2) and no_intersect(point_1, point_2):\n                for point_3 in points:\n                    if (left_of(point_2, point_3) and \n                        left_of(point_3, point_1) and \n                        no_intersect(point_2, point_3) and \n                        no_intersect(point_3, point_1)):\n                        triangles += 1\n        print(triangles)\n        points.append(point_1)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python 3&lt;/h1&gt;\n\n&lt;p&gt;More elegant solutions are probably possible. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from functools import lru_cache\nfrom math import sqrt\n\nin_num = int(input())\ninpoints = []\nfor i in range(in_num):\n    inpoints.append(\n        tuple(int(j) for j in input().split()))\n\n@lru_cache()\ndef left_of(x, y):\n    return x[0]*y[1] - x[1]*y[0] &amp;lt;= 0\n\n@lru_cache()\ndef no_intersect(x, y):\n    if x == y or (x[0] == x[1] and y[0] == y[1]):\n        return False\n    # https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    dist = abs(x[1]*y[0] - y[1]*x[0]) / sqrt((y[1]-y[0])*(y[1]-y[0]) +\n                                             (x[1]-x[0])*(x[1]-x[0]))\n    return dist &amp;gt;= 1\n\npoints = []\ntriangles = 0\n\nfor point_1 in inpoints:\n    for point_2 in points:\n        if left_of(point_1, point_2) and no_intersect(point_1, point_2):\n            for point_3 in points:\n                if (left_of(point_2, point_3) and \n                    left_of(point_3, point_1) and \n                    no_intersect(point_2, point_3) and \n                    no_intersect(point_3, point_1)):\n                    triangles += 1\n    print(triangles)\n    points.append(point_1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgari3l", "score_hidden": false, "stickied": false, "created": 1492298859.0, "created_utc": 1492270059.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dgcib4a", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Ilaught", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "## C++11\n    #include &lt;bits/stdc++.h&gt;\n\n    using namespace std;\n\n    bool check(pair&lt;int, int&gt; a, pair&lt;int, int&gt; b) {\n        int dx = a.first - b.first;\n        int dy = a.second - b.second;\n        int dxy = a.first*b.second - b.first*a.second;\n\n        return dx*dx + dy*dy &lt;= dxy*dxy;\n    }\n\n    int cross(pair&lt;int, int&gt; a, pair&lt;int, int&gt; b) {\n        return a.first*b.second - b.first*a.second;\n    }\n\n    pair&lt;int, int&gt; sub(pair&lt;int, int&gt; lhs, pair&lt;int, int&gt; rhs) {\n        return make_pair(lhs.first - rhs.first, lhs.second - rhs.second);\n    }\n\n    int main() {\n        int n;\n        cin &gt;&gt; n;\n\n        vector&lt;pair&lt;int, int&gt;&gt; pts; // (x. y);\n        pair&lt;int, int&gt; origin(0, 0);\n\n        int count = 0;\n\n        for(int i = 0; i &lt; n; i++) {\n            pair&lt;int, int&gt; p;\n            cin &gt;&gt; p.first;\n            cin &gt;&gt; p.second;\n\n            for(int j = 0; j &lt; pts.size(); j++) {\n                for(int k = j + 1; k &lt; pts.size(); k++) {\n                    bool s1 = cross(sub(pts[j], p), sub(origin, p)) &lt; 0;\n                    bool s2 = cross(sub(pts[k], pts[j]), sub(origin, pts[j])) &lt; 0;\n                    bool s3 = cross(sub(p, pts[k]), sub(origin, pts[k])) &lt; 0;\n\n                    if(s1 == s2 &amp;&amp; s2 == s3) {\n                        if(check(p, pts[j]) &amp;&amp; check(p, pts[k]) &amp;&amp; check(pts[j], pts[k])) {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            pts.push_back(p);\n\n            cout &lt;&lt; count &lt;&lt; endl;\n        }\n    }\n\nOutput:\n\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    12", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;C++11&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;\n\nusing namespace std;\n\nbool check(pair&amp;lt;int, int&amp;gt; a, pair&amp;lt;int, int&amp;gt; b) {\n    int dx = a.first - b.first;\n    int dy = a.second - b.second;\n    int dxy = a.first*b.second - b.first*a.second;\n\n    return dx*dx + dy*dy &amp;lt;= dxy*dxy;\n}\n\nint cross(pair&amp;lt;int, int&amp;gt; a, pair&amp;lt;int, int&amp;gt; b) {\n    return a.first*b.second - b.first*a.second;\n}\n\npair&amp;lt;int, int&amp;gt; sub(pair&amp;lt;int, int&amp;gt; lhs, pair&amp;lt;int, int&amp;gt; rhs) {\n    return make_pair(lhs.first - rhs.first, lhs.second - rhs.second);\n}\n\nint main() {\n    int n;\n    cin &amp;gt;&amp;gt; n;\n\n    vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; pts; // (x. y);\n    pair&amp;lt;int, int&amp;gt; origin(0, 0);\n\n    int count = 0;\n\n    for(int i = 0; i &amp;lt; n; i++) {\n        pair&amp;lt;int, int&amp;gt; p;\n        cin &amp;gt;&amp;gt; p.first;\n        cin &amp;gt;&amp;gt; p.second;\n\n        for(int j = 0; j &amp;lt; pts.size(); j++) {\n            for(int k = j + 1; k &amp;lt; pts.size(); k++) {\n                bool s1 = cross(sub(pts[j], p), sub(origin, p)) &amp;lt; 0;\n                bool s2 = cross(sub(pts[k], pts[j]), sub(origin, pts[j])) &amp;lt; 0;\n                bool s3 = cross(sub(p, pts[k]), sub(origin, pts[k])) &amp;lt; 0;\n\n                if(s1 == s2 &amp;amp;&amp;amp; s2 == s3) {\n                    if(check(p, pts[j]) &amp;amp;&amp;amp; check(p, pts[k]) &amp;amp;&amp;amp; check(pts[j], pts[k])) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        pts.push_back(p);\n\n        cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgcib4a", "score_hidden": false, "stickied": false, "created": 1492402417.0, "created_utc": 1492373617.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2tj45", "removal_reason": null, "link_id": "t3_65fkwh", "likes": null, "replies": "", "user_reports": [], "id": "dgc7u9o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mrploszaj", "parent_id": "t1_dgc7r9l", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "output is\n\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    12", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;output is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgc7u9o", "score_hidden": false, "stickied": false, "created": 1492388632.0, "created_utc": 1492359832.0, "depth": 1, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgc7r9l", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mrploszaj", "parent_id": "t3_65fkwh", "subreddit_name_prefixed": "r/dailyprogrammer", "controversiality": 0, "body": "**D**\n\n\timport std.conv;\n\timport std.math;\n\timport std.stdio;\n\timport std.string;\n\timport std.typecons;\n\n\talias Point = Tuple!(int, \"x\", int, \"y\");\n\tvoid main(string[] args){\n\t\targs = args[1..$];//Getting rid of the name of the program\n\t\tPoint[] points;\n\t\tint i = 0;//Solution count\n\t\tfor(int a = 0; a &lt; to!int(args[0]); a++){\n\t\t\tpoints ~= Point(to!(int[2])(args[a + 1].split(\" \")));\n\t\t\tfor(int b = 0; b &lt; a - 1; b++){\n\t\t\t\tif(!distFrom(points[a], points[b])) continue;\n\t\t\t\tfor(int c = b + 1; c &lt; a; c++){\n\t\t\t\t\tif(distFrom(points[a], points[c]) &amp;&amp; distFrom(points[b], points[c]) &amp;&amp; inside(points[a], points[b], points[c])) i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\twriteln(i);\n\t\t}\n\t}\n\tbool distFrom(Point a, Point b){\n\t\treturn abs(b.y * a.x - a.y * b.x) / sqrt(1f * (a.y - b.y).pow(2) + (b.x - a.x).pow(2)) &gt;= 1;\n\t}\n\tbool inside(Point a, Point b, Point c){\n\t\tfloat den = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n\t\tif(den == 0) return false;//Collinear point, shouldn't divide by zero\n\t\tfloat alpha = (-c.x * (b.y - c.y) - c.y * (c.x - b.x)) / den;\n\t\tfloat beta = (-c.x * (c.y - a.y) - c.y * (a.x - c.x)) / den;\n\t\treturn alpha &gt; 0 &amp;&amp; beta &gt; 0 &amp;&amp; 1 - alpha - beta &gt; 0;\n\t}", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import std.conv;\nimport std.math;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nalias Point = Tuple!(int, &amp;quot;x&amp;quot;, int, &amp;quot;y&amp;quot;);\nvoid main(string[] args){\n    args = args[1..$];//Getting rid of the name of the program\n    Point[] points;\n    int i = 0;//Solution count\n    for(int a = 0; a &amp;lt; to!int(args[0]); a++){\n        points ~= Point(to!(int[2])(args[a + 1].split(&amp;quot; &amp;quot;)));\n        for(int b = 0; b &amp;lt; a - 1; b++){\n            if(!distFrom(points[a], points[b])) continue;\n            for(int c = b + 1; c &amp;lt; a; c++){\n                if(distFrom(points[a], points[c]) &amp;amp;&amp;amp; distFrom(points[b], points[c]) &amp;amp;&amp;amp; inside(points[a], points[b], points[c])) i++;\n            }\n        }\n        writeln(i);\n    }\n}\nbool distFrom(Point a, Point b){\n    return abs(b.y * a.x - a.y * b.x) / sqrt(1f * (a.y - b.y).pow(2) + (b.x - a.x).pow(2)) &amp;gt;= 1;\n}\nbool inside(Point a, Point b, Point c){\n    float den = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    if(den == 0) return false;//Collinear point, shouldn&amp;#39;t divide by zero\n    float alpha = (-c.x * (b.y - c.y) - c.y * (c.x - b.x)) / den;\n    float beta = (-c.x * (c.y - a.y) - c.y * (a.x - c.x)) / den;\n    return alpha &amp;gt; 0 &amp;amp;&amp;amp; beta &amp;gt; 0 &amp;amp;&amp;amp; 1 - alpha - beta &amp;gt; 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "dailyprogrammer", "name": "t1_dgc7r9l", "score_hidden": false, "stickied": false, "created": 1492388520.0, "created_utc": 1492359720.0, "depth": 0, "mod_reports": [], "subreddit_type": "restricted", "ups": 1}}], "after": null, "before": null}}]