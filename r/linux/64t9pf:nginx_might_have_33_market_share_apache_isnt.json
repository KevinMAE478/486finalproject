[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "linux", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64t9pf", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 68, "report_reasons": null, "author": "ilconcierge", "saved": false, "mod_reports": [], "name": "t3_64t9pf", "subreddit_name_prefixed": "r/linux", "approved_by": null, "over_18": false, "domain": "ma.ttias.be", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh1a", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/linux/comments/64t9pf/nginx_might_have_33_market_share_apache_isnt/", "num_reports": null, "locked": false, "stickied": false, "created": 1491969200.0, "url": "https://ma.ttias.be/nginx-might-33-market-share-apache-isnt-falling-50/", "author_flair_text": null, "quarantine": false, "title": "Nginx might have 33% market share, Apache isn't falling below 50%", "created_utc": 1491940400.0, "distinguished": null, "media": null, "upvote_ratio": 0.9, "num_comments": 20, "visited": false, "subreddit_type": "public", "ups": 68}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg61a3u", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mysteriouskiwi", "parent_id": "t1_dg5u788", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "I'm a full stack dev, configure everything from the bare metal (well, rarely bare metal these days with AWS/VPS) through to front end interfaces. It is well within reason and possibility, if you take the time to learn.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a full stack dev, configure everything from the bare metal (well, rarely bare metal these days with AWS/VPS) through to front end interfaces. It is well within reason and possibility, if you take the time to learn.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg61a3u", "score_hidden": false, "stickied": false, "created": 1492040298.0, "created_utc": 1492011498.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg5uiiq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t1_dg5u788", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Except most places that do some sort of pipeline (which they're saying they have) allow that exact thing. Point is that if the dev _can_ break their own website then the pipeline is broken somewhere.\n\nWhere I work, we have a sorta CI/CD approach (we're not the largest shop in the world) and it works well despite having developers at a variety of levels of understanding of PHP and server configuration. They run their PHP app with PHP-FPM+nginx which is inside a docker container that exposes a single SSL encrypted port and make dev/test/production changes by manipulating branches in git. In order to have the production container deploy your code, though, it has to pass a series of checks including static code analysis and selenium. Once your app passes all those tests then it's merged into production and the production container brings down the changes.\n\nIn the very unlikely event, that the dev breaks their web app due to an nginx config change that somehow passes SCA, then it obviously won't pass all its selenium tests. The developer group as a whole will get an email along with the ID of the last person to do a commit. The person will then be more careful going forward.\n\n**EDIT:**\n\nAnother thing that occurs to me is that you can handle routing at the application level as well. Our drupal sites, for instance, route everything through `${documentRoot}/index.php` if it doesn't exist as an actual file and drupal will handle the redirects/routing internally.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Except most places that do some sort of pipeline (which they&amp;#39;re saying they have) allow that exact thing. Point is that if the dev &lt;em&gt;can&lt;/em&gt; break their own website then the pipeline is broken somewhere.&lt;/p&gt;\n\n&lt;p&gt;Where I work, we have a sorta CI/CD approach (we&amp;#39;re not the largest shop in the world) and it works well despite having developers at a variety of levels of understanding of PHP and server configuration. They run their PHP app with PHP-FPM+nginx which is inside a docker container that exposes a single SSL encrypted port and make dev/test/production changes by manipulating branches in git. In order to have the production container deploy your code, though, it has to pass a series of checks including static code analysis and selenium. Once your app passes all those tests then it&amp;#39;s merged into production and the production container brings down the changes.&lt;/p&gt;\n\n&lt;p&gt;In the very unlikely event, that the dev breaks their web app due to an nginx config change that somehow passes SCA, then it obviously won&amp;#39;t pass all its selenium tests. The developer group as a whole will get an email along with the ID of the last person to do a commit. The person will then be more careful going forward.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Another thing that occurs to me is that you can handle routing at the application level as well. Our drupal sites, for instance, route everything through &lt;code&gt;${documentRoot}/index.php&lt;/code&gt; if it doesn&amp;#39;t exist as an actual file and drupal will handle the redirects/routing internally.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5uiiq", "score_hidden": false, "stickied": false, "created": 1492032155.0, "created_utc": 1492003355.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5u788", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "minimim", "parent_id": "t1_dg5u37c", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "&gt; dev should be able to manage their own website config\n\nThat's a recipe for disaster. \n\n\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;dev should be able to manage their own website config&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s a recipe for disaster. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5u788", "score_hidden": false, "stickied": false, "created": 1492031696.0, "created_utc": 1492002896.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5u37c", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t1_dg5twy2", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Not necessarily, it depends on the server software you're using. Apache supports .htaccess files and both nginx and apache support site-specific configs that you can give the devs read/write access to.\n\nBut in their example I'm saying that if you have a pipeline then the developer should be able to manage their own website config. The admin is just the person who puts the implementing scripts in place and gets out the of the way. If their sysadmins are still making changes to support minute application alterations then their pipeline is broken somewhere. ", "edited": 1492028268.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not necessarily, it depends on the server software you&amp;#39;re using. Apache supports .htaccess files and both nginx and apache support site-specific configs that you can give the devs read/write access to.&lt;/p&gt;\n\n&lt;p&gt;But in their example I&amp;#39;m saying that if you have a pipeline then the developer should be able to manage their own website config. The admin is just the person who puts the implementing scripts in place and gets out the of the way. If their sysadmins are still making changes to support minute application alterations then their pipeline is broken somewhere. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5u37c", "score_hidden": false, "stickied": false, "created": 1492031530.0, "created_utc": 1492002730.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5twy2", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "minimim", "parent_id": "t1_dg5tuo8", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "In other languages, the routing of the request is made by the program itself. This means they can change behavior without touching the server.\n\nIn PHP, routing is done trough the webserver. This means that every time routing changes, the server has to be configured accordingly.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In other languages, the routing of the request is made by the program itself. This means they can change behavior without touching the server.&lt;/p&gt;\n\n&lt;p&gt;In PHP, routing is done trough the webserver. This means that every time routing changes, the server has to be configured accordingly.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5twy2", "score_hidden": false, "stickied": false, "created": 1492031262.0, "created_utc": 1492002462.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5tuo8", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t1_dg5tu6s", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Not sure what you mean", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not sure what you mean&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5tuo8", "score_hidden": false, "stickied": false, "created": 1492031166.0, "created_utc": 1492002366.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5tu6s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "minimim", "parent_id": "t1_dg4vsod", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "That's inherent on how PHP works.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s inherent on how PHP works.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5tu6s", "score_hidden": false, "stickied": false, "created": 1492031144.0, "created_utc": 1492002344.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4vsod", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t3_64t9pf", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "from the \"PHP Circle\" this article links:\n\n&gt;&gt; Alas, as time goes by, this becomes more of a hindrance than it adds value. PHP developers aren't as flexible anymore, as changes need to go through a sysadmin that needs to modify the configs -- assuming the PHP dev doesn't manage the server himself.\n\nThat sounds like a pretty shit pipeline. You really shouldn't have to touch the web server config unless you need a substantive change and usually the dev can do that since they understand what their app needs. The \"Ops\" part of things pretty much just goes towards maintaining the pipeline. The dev just puts stuff into git and that gets deployed through the pipeline at various phases.\n\nInstead of going back to old stuff, fix your current stuff.", "edited": 1491943679.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;from the &amp;quot;PHP Circle&amp;quot; this article links:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Alas, as time goes by, this becomes more of a hindrance than it adds value. PHP developers aren&amp;#39;t as flexible anymore, as changes need to go through a sysadmin that needs to modify the configs -- assuming the PHP dev doesn&amp;#39;t manage the server himself.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That sounds like a pretty shit pipeline. You really shouldn&amp;#39;t have to touch the web server config unless you need a substantive change and usually the dev can do that since they understand what their app needs. The &amp;quot;Ops&amp;quot; part of things pretty much just goes towards maintaining the pipeline. The dev just puts stuff into git and that gets deployed through the pipeline at various phases.&lt;/p&gt;\n\n&lt;p&gt;Instead of going back to old stuff, fix your current stuff.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4vsod", "score_hidden": false, "stickied": false, "created": 1491971868.0, "created_utc": 1491943068.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg4vue3", "gilded": 0, "archived": false, "score": 19, "report_reasons": null, "author": "original_4degrees", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "quick setup/easy config, small footprint?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;quick setup/easy config, small footprint?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4vue3", "score_hidden": false, "stickied": false, "created": 1491971918.0, "created_utc": 1491943118.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 19}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg4vuzl", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "TingPing", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "nginx is far more simple of a server which has obvious benefits such as better performance and potentially less bugs/security issues but also comes with less features and less extensibility. Which is better for you depends upon your needs and there is a lot of more detailed information out there.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;nginx is far more simple of a server which has obvious benefits such as better performance and potentially less bugs/security issues but also comes with less features and less extensibility. Which is better for you depends upon your needs and there is a lot of more detailed information out there.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4vuzl", "score_hidden": false, "stickied": false, "created": 1491971936.0, "created_utc": 1491943136.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg4wm03", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t1_dg4wi2y", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "&gt; That's all I've heard when people talk about Nginx is load balancing capabilities\n\nThat's basically what it's used for in addition to being a generic frontend to PHP-FPM\n\n90% of what people do it's fine or better. Where I am we have a few legacy apache servers but everything else is nginx.", "edited": 1491959652.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;That&amp;#39;s all I&amp;#39;ve heard when people talk about Nginx is load balancing capabilities&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s basically what it&amp;#39;s used for in addition to being a generic frontend to PHP-FPM&lt;/p&gt;\n\n&lt;p&gt;90% of what people do it&amp;#39;s fine or better. Where I am we have a few legacy apache servers but everything else is nginx.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4wm03", "score_hidden": false, "stickied": false, "created": 1491972776.0, "created_utc": 1491943976.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg4yjnh", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Memeliciouz", "parent_id": "t1_dg4wi2y", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "I'm just a small guy, but I use nginx as my webserver for Nextcloud and my own shitty site.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m just a small guy, but I use nginx as my webserver for Nextcloud and my own shitty site.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4yjnh", "score_hidden": false, "stickied": false, "created": 1491975077.0, "created_utc": 1491946277.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4wi2y", "gilded": 0, "archived": false, "score": 5, "report_reasons": null, "author": "networklackey", "parent_id": "t1_dg4vzxo", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Interesting. That's all I've heard when people talk about Nginx is load balancing capabilities. Looks like I will have to play with it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting. That&amp;#39;s all I&amp;#39;ve heard when people talk about Nginx is load balancing capabilities. Looks like I will have to play with it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4wi2y", "score_hidden": false, "stickied": false, "created": 1491972651.0, "created_utc": 1491943851.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4vzxo", "gilded": 0, "archived": false, "score": 9, "report_reasons": null, "author": "send-me-to-hell", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "I'm assuming you mean what the article is talking about where there's nginx out front and apache in the rear.\n\nnginx's process model is a lot more responsive and scales better/more gradually than Apache does. Apache's  gotten better but nginx still makes a pretty good load balancer.  It's also a lot more trivial imo to do load balancing in nginx than apache (not that it's hard in Apache either). \n\nApache on the other hand has modules for absolutely everything and a lot of admins are more familiar with maintaining that than nginx. So some people have settled on using Apache as an application server of sorts for their django/php/whatever app and use nginx as a load balancer.", "edited": 1491944057.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m assuming you mean what the article is talking about where there&amp;#39;s nginx out front and apache in the rear.&lt;/p&gt;\n\n&lt;p&gt;nginx&amp;#39;s process model is a lot more responsive and scales better/more gradually than Apache does. Apache&amp;#39;s  gotten better but nginx still makes a pretty good load balancer.  It&amp;#39;s also a lot more trivial imo to do load balancing in nginx than apache (not that it&amp;#39;s hard in Apache either). &lt;/p&gt;\n\n&lt;p&gt;Apache on the other hand has modules for absolutely everything and a lot of admins are more familiar with maintaining that than nginx. So some people have settled on using Apache as an application server of sorts for their django/php/whatever app and use nginx as a load balancer.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4vzxo", "score_hidden": false, "stickied": false, "created": 1491972089.0, "created_utc": 1491943289.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 9}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg5ip6n", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "audioen", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Apache has almost every default set to being able to serve static files quickly, and I mean in benchmark sense, it probably gets great score that way. Unfortunately, there are a large number of pitfalls you need to know to avoid to be able to configure Apache to act as a reverse proxy, whereas nginx can do it out of the box and will do it better.\n\nThe key characteristic which makes nginx rule for proxying is that nginx is well-engineered spoonfeeding proxy. Spoonfeeding refers to the fact that it buffers both http requests and responses, and does so extremely efficiently. When a web client send a request, nginx buffers the client's entire http request before sending it over to the backend server, and then it quickly reads the entire response from the backend server, buffering that, and then doles it out to the original web client at the rate that the clients can consume it.\n\nThis works to decouple number of backend processes from number of frontend connections, a case where Apache was particularly bad. Historically, mod_php and mod_perl used to be a popular way to run applications on top of Apache, but if 100 requests came in concurrently, then you could end up running 100 scripting language interpreters concurrently, as each connection got their own Apache process, and each Apache process started the scripting language interpreter within itself. As scripting programs tend to requiring something like 20\u201330 MB of unique memory to do their job, then your server suddenly has 2\u20133 GB worth of RAM in use running 100 script interpreters in parallel. And of course, if a database is used, then add another 100 database connections working concurrently on top of the 100 script interpreters, and whatever memory the database server process needs to service the queries.\n\nThis architecture resulted in the so-called \"slashdotted\" effect where a site linked to from Slashdot.org would stop responding altogether, or might write back some message such as running out of mysql connections. Most of the time, the poor server would be swapping with all those tasks consuming all the memory, and would be unable to do anything, probably not even respond to ssh login.\n\nThese days, even Apache can be configured to be a reverse proxy but you may have to turn off things like keepalives to backend connections to truly separate the frontend client count from the backend process count. I'm not confident that I even know exactly what it takes to make Apache work properly, though. The only thing about nginx I'm not sure about is setting max_conns equal to my maxThreads tomcat value. I'm not sure if it needs it. Leaving that out has not caused me any provable harm, and I can't make it fail under apachebench, but the principle of the thing is that I should tell nginx to use at most as many connections as my backend server can actually respond to...", "edited": 1491974893.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Apache has almost every default set to being able to serve static files quickly, and I mean in benchmark sense, it probably gets great score that way. Unfortunately, there are a large number of pitfalls you need to know to avoid to be able to configure Apache to act as a reverse proxy, whereas nginx can do it out of the box and will do it better.&lt;/p&gt;\n\n&lt;p&gt;The key characteristic which makes nginx rule for proxying is that nginx is well-engineered spoonfeeding proxy. Spoonfeeding refers to the fact that it buffers both http requests and responses, and does so extremely efficiently. When a web client send a request, nginx buffers the client&amp;#39;s entire http request before sending it over to the backend server, and then it quickly reads the entire response from the backend server, buffering that, and then doles it out to the original web client at the rate that the clients can consume it.&lt;/p&gt;\n\n&lt;p&gt;This works to decouple number of backend processes from number of frontend connections, a case where Apache was particularly bad. Historically, mod_php and mod_perl used to be a popular way to run applications on top of Apache, but if 100 requests came in concurrently, then you could end up running 100 scripting language interpreters concurrently, as each connection got their own Apache process, and each Apache process started the scripting language interpreter within itself. As scripting programs tend to requiring something like 20\u201330 MB of unique memory to do their job, then your server suddenly has 2\u20133 GB worth of RAM in use running 100 script interpreters in parallel. And of course, if a database is used, then add another 100 database connections working concurrently on top of the 100 script interpreters, and whatever memory the database server process needs to service the queries.&lt;/p&gt;\n\n&lt;p&gt;This architecture resulted in the so-called &amp;quot;slashdotted&amp;quot; effect where a site linked to from Slashdot.org would stop responding altogether, or might write back some message such as running out of mysql connections. Most of the time, the poor server would be swapping with all those tasks consuming all the memory, and would be unable to do anything, probably not even respond to ssh login.&lt;/p&gt;\n\n&lt;p&gt;These days, even Apache can be configured to be a reverse proxy but you may have to turn off things like keepalives to backend connections to truly separate the frontend client count from the backend process count. I&amp;#39;m not confident that I even know exactly what it takes to make Apache work properly, though. The only thing about nginx I&amp;#39;m not sure about is setting max_conns equal to my maxThreads tomcat value. I&amp;#39;m not sure if it needs it. Leaving that out has not caused me any provable harm, and I can&amp;#39;t make it fail under apachebench, but the principle of the thing is that I should tell nginx to use at most as many connections as my backend server can actually respond to...&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5ip6n", "score_hidden": false, "stickied": false, "created": 1492003445.0, "created_utc": 1491974645.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg5kocl", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "ayan_baqur", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "For me configuration is so much easier in nginx. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For me configuration is so much easier in nginx. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5kocl", "score_hidden": false, "stickied": false, "created": 1492007885.0, "created_utc": 1491979085.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg5nruo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "-sash-", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Personally, I switched (wherever it needed)  to nginx because of X-Sendfile functionality. Nginx have it as built-in, while apache implements it with mod, which appears to be broken (I don't claim it, I just didn't manage to install it).", "edited": 1491999666.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Personally, I switched (wherever it needed)  to nginx because of X-Sendfile functionality. Nginx have it as built-in, while apache implements it with mod, which appears to be broken (I don&amp;#39;t claim it, I just didn&amp;#39;t manage to install it).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg5nruo", "score_hidden": false, "stickied": false, "created": 1492016866.0, "created_utc": 1491988066.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg61exb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "mysteriouskiwi", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Why not both? \u00af\\\\_(\u30c4)_/\u00af\n\nRun Nginx as a web server/reverse proxy for an apache backend.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why not both? \u00af\\&lt;em&gt;(\u30c4)&lt;/em&gt;/\u00af&lt;/p&gt;\n\n&lt;p&gt;Run Nginx as a web server/reverse proxy for an apache backend.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg61exb", "score_hidden": false, "stickied": false, "created": 1492040444.0, "created_utc": 1492011644.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1a", "removal_reason": null, "link_id": "t3_64t9pf", "likes": null, "replies": "", "user_reports": [], "id": "dg6bkwz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "pdp10", "parent_id": "t1_dg4ux90", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Apache's standard prefork confguration uses more memory than nginx which is event-driven and uses at most one process per core. If you have Apache modules like FastCGI and PHP loaded then Apache can easily use more RAM than a minimum VPS instance provides.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Apache&amp;#39;s standard prefork confguration uses more memory than nginx which is event-driven and uses at most one process per core. If you have Apache modules like FastCGI and PHP loaded then Apache can easily use more RAM than a minimum VPS instance provides.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg6bkwz", "score_hidden": false, "stickied": false, "created": 1492050958.0, "created_utc": 1492022158.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg4ux90", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "networklackey", "parent_id": "t3_64t9pf", "subreddit_name_prefixed": "r/linux", "controversiality": 0, "body": "Can anyone explain the advantage to running Nginx over Apache?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can anyone explain the advantage to running Nginx over Apache?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "linux", "name": "t1_dg4ux90", "score_hidden": false, "stickied": false, "created": 1491970884.0, "created_utc": 1491942084.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}]