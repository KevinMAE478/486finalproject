[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "64w5kj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 120, "report_reasons": null, "author": "pmz", "saved": false, "mod_reports": [], "name": "t3_64w5kj", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "chibicode.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/64w5kj/reactjs_introduction_for_people_who_know_just/", "num_reports": null, "locked": false, "stickied": false, "created": 1492001505.0, "url": "http://chibicode.com/react-js-introduction-for-people-who-know-just-enough-jquery-to-get-by/", "author_flair_text": null, "quarantine": false, "title": "React.js Introduction For People Who Know Just Enough jQuery To Get By", "created_utc": 1491972705.0, "distinguished": null, "media": null, "upvote_ratio": 0.91, "num_comments": 11, "visited": false, "subreddit_type": "public", "ups": 120}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": "", "user_reports": [], "id": "dg5xalw", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "jonr", "parent_id": "t3_64w5kj", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "This bin needs a pro account", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This bin needs a pro account&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg5xalw", "score_hidden": false, "stickied": false, "created": 1492035794.0, "created_utc": 1492006994.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": "", "user_reports": [], "id": "dg71nba", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "lukasbuenger", "parent_id": "t1_dg6ae4j", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Shadow DOM is something entirely different. Virtual DOM is the name of the game here.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Shadow DOM is something entirely different. Virtual DOM is the name of the game here.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg71nba", "score_hidden": false, "stickied": false, "created": 1492081378.0, "created_utc": 1492052578.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": "", "user_reports": [], "id": "dg6l4bs", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "acemarke", "parent_id": "t1_dg6ae4j", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "\"Virtual DOM\", but yes.  `render` merely returns a tree of descriptive objects - it does not modify the DOM directly itself.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;Virtual DOM&amp;quot;, but yes.  &lt;code&gt;render&lt;/code&gt; merely returns a tree of descriptive objects - it does not modify the DOM directly itself.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6l4bs", "score_hidden": false, "stickied": false, "created": 1492060971.0, "created_utc": 1492032171.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6ae4j", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mrpiggy", "parent_id": "t1_dg65gwk", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "render() might change the DOM but it may not at all. render() redraws to the shadow DOM. It might happen that it redraws exactly what is already in the DOM. In that case the React internals notice that there is no change from the shadow DOM to the real DOM and nothing is changed to the real DOM.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;render() might change the DOM but it may not at all. render() redraws to the shadow DOM. It might happen that it redraws exactly what is already in the DOM. In that case the React internals notice that there is no change from the shadow DOM to the real DOM and nothing is changed to the real DOM.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6ae4j", "score_hidden": false, "stickied": false, "created": 1492049749.0, "created_utc": 1492020949.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg65gwk", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "SamSlate", "parent_id": "t3_64w5kj", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "how is `render()` not exactly the same as changing the dom?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;how is &lt;code&gt;render()&lt;/code&gt; not exactly the same as changing the dom?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg65gwk", "score_hidden": false, "stickied": false, "created": 1492044756.0, "created_utc": 1492015956.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": "", "user_reports": [], "id": "dg62ul8", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "papers_", "parent_id": "t1_dg5wipq", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Slightly yes, but the concepts are the same. For example `React.createClass()` was deprecated recently: https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#new-deprecation-warnings\n\nIt's also recommended to use stateless functional components IIRC whenever possible. I've updated/recreated the `TweetBox` to what, IMO, it should be nowadays. I'm still learning React myself, so please correct me if I'm wrong anyone.\n\n`TweetBox`:\n\n    import React, { Component } from 'react'\n\n    class TweetBox extends Component {\n      constructor(props) {\n        super(props)\n        this.state = {\n          text: props.text || '',\n          photoAdded: props.photoAdded\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.togglePhoto = this.togglePhoto.bind(this)\n        this.remainingCharacters = this.remainingCharacters.bind(this)\n      }\n    \n      handleChange(event) {\n        this.setState({ text: event.targe.value })\n      }\n    \n      togglePhoto(event) {\n        const photoAdded = !this.state.photoAdded\n        this.setState({ photoAdded })\n      }\n    \n      remainingCharacters() {\n        if (this.state.photoAdded) {\n          return 140 - 23 - this.state.text.length \n        }\n        return 140 - this.state.text.length\n      }\n    \n      render() {\n        return (\n          &lt;div className=\"well clearfix\"&gt;\n            &lt;OverflowAlert photoAdded={this.state.photoAdded} text={this.state.text} remainingCharacters={this.remainingCharacters}/&gt;\n            &lt;textarea className=\"form-control\" onChange={this.handleChange}&gt;&lt;/textarea&gt;\n            &lt;br/&gt;\n            &lt;span&gt;{ this.remainingCharacters() }&lt;/span&gt;\n            &lt;button className=\"btn btn-primary pull-right\" disabled={!this.state.text.length &amp;&amp; !this.state.photoAdded}&gt;Tweet&lt;/button&gt;\n            &lt;button className=\"btn btn-default pull-right\" onClick={this.togglePhoto}&gt;{this.state.photoAdded ? \"\u2713 Photo Added\" : \"Add Photo\" }&lt;/button&gt;\n          &lt;/div&gt;\n        )\n      }\n    }\n---\n`OverflowAlert`. It does not hold any state therefore it's been made a stateless functional component:\n\n    const OverflowAlert = ({ photoAdded, text, remainingCharacters }) =&gt; {\n      if (remainingCharacters() &lt; 0) {\n        const beforeOverflowText = photoAdded ? text.substring(140 - 23 - 10, 140 - 23) : text.substring(140 - 10, 140)\n        const overflowText = photoAdded ?  text.substring(140 - 23) : text.substring(140)\n        return (\n          &lt;div className=\"alert alert-warning\"&gt;\n            &lt;strong&gt;Oops! Too Long:&lt;/strong&gt;\n            &amp;nbsp;...{beforeOverflowText}\n            &lt;strong className=\"bg-danger\"&gt;{overflowText}&lt;/strong&gt;\n          &lt;/div&gt;\n        )\n      }\n      return false\n    }\n\n\nEdit: ~~is~~ was; removed noise from `OverflowAlert`", "edited": 1492013909.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Slightly yes, but the concepts are the same. For example &lt;code&gt;React.createClass()&lt;/code&gt; was deprecated recently: &lt;a href=\"https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#new-deprecation-warnings\"&gt;https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#new-deprecation-warnings&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s also recommended to use stateless functional components IIRC whenever possible. I&amp;#39;ve updated/recreated the &lt;code&gt;TweetBox&lt;/code&gt; to what, IMO, it should be nowadays. I&amp;#39;m still learning React myself, so please correct me if I&amp;#39;m wrong anyone.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;TweetBox&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import React, { Component } from &amp;#39;react&amp;#39;\n\nclass TweetBox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: props.text || &amp;#39;&amp;#39;,\n      photoAdded: props.photoAdded\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.togglePhoto = this.togglePhoto.bind(this)\n    this.remainingCharacters = this.remainingCharacters.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.targe.value })\n  }\n\n  togglePhoto(event) {\n    const photoAdded = !this.state.photoAdded\n    this.setState({ photoAdded })\n  }\n\n  remainingCharacters() {\n    if (this.state.photoAdded) {\n      return 140 - 23 - this.state.text.length \n    }\n    return 140 - this.state.text.length\n  }\n\n  render() {\n    return (\n      &amp;lt;div className=&amp;quot;well clearfix&amp;quot;&amp;gt;\n        &amp;lt;OverflowAlert photoAdded={this.state.photoAdded} text={this.state.text} remainingCharacters={this.remainingCharacters}/&amp;gt;\n        &amp;lt;textarea className=&amp;quot;form-control&amp;quot; onChange={this.handleChange}&amp;gt;&amp;lt;/textarea&amp;gt;\n        &amp;lt;br/&amp;gt;\n        &amp;lt;span&amp;gt;{ this.remainingCharacters() }&amp;lt;/span&amp;gt;\n        &amp;lt;button className=&amp;quot;btn btn-primary pull-right&amp;quot; disabled={!this.state.text.length &amp;amp;&amp;amp; !this.state.photoAdded}&amp;gt;Tweet&amp;lt;/button&amp;gt;\n        &amp;lt;button className=&amp;quot;btn btn-default pull-right&amp;quot; onClick={this.togglePhoto}&amp;gt;{this.state.photoAdded ? &amp;quot;\u2713 Photo Added&amp;quot; : &amp;quot;Add Photo&amp;quot; }&amp;lt;/button&amp;gt;\n      &amp;lt;/div&amp;gt;\n    )\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;code&gt;OverflowAlert&lt;/code&gt;. It does not hold any state therefore it&amp;#39;s been made a stateless functional component:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const OverflowAlert = ({ photoAdded, text, remainingCharacters }) =&amp;gt; {\n  if (remainingCharacters() &amp;lt; 0) {\n    const beforeOverflowText = photoAdded ? text.substring(140 - 23 - 10, 140 - 23) : text.substring(140 - 10, 140)\n    const overflowText = photoAdded ?  text.substring(140 - 23) : text.substring(140)\n    return (\n      &amp;lt;div className=&amp;quot;alert alert-warning&amp;quot;&amp;gt;\n        &amp;lt;strong&amp;gt;Oops! Too Long:&amp;lt;/strong&amp;gt;\n        &amp;amp;nbsp;...{beforeOverflowText}\n        &amp;lt;strong className=&amp;quot;bg-danger&amp;quot;&amp;gt;{overflowText}&amp;lt;/strong&amp;gt;\n      &amp;lt;/div&amp;gt;\n    )\n  }\n  return false\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: &lt;del&gt;is&lt;/del&gt; was; removed noise from &lt;code&gt;OverflowAlert&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg62ul8", "score_hidden": false, "stickied": false, "created": 1492042006.0, "created_utc": 1492013206.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg5wipq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "WardenUnleashed", "parent_id": "t3_64w5kj", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "The article itself says it's a bit outdated. Is that true?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The article itself says it&amp;#39;s a bit outdated. Is that true?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg5wipq", "score_hidden": false, "stickied": false, "created": 1492034845.0, "created_utc": 1492006045.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64w5kj", "likes": null, "replies": "", "user_reports": [], "id": "dg8amlo", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ThatBriandude", "parent_id": "t1_dg813sc", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yes but in these cases you would use the dom ref that react provides exactly for those kind of situations. The point though is to keep that to a minimum. Besides, usually when you're trying to manipulate the dom directly, there is probably a more reacty way to do it. It can however sometime be a challenge to find these querks. ", "edited": 1492120860.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes but in these cases you would use the dom ref that react provides exactly for those kind of situations. The point though is to keep that to a minimum. Besides, usually when you&amp;#39;re trying to manipulate the dom directly, there is probably a more reacty way to do it. It can however sometime be a challenge to find these querks. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg8amlo", "score_hidden": false, "stickied": false, "created": 1492149386.0, "created_utc": 1492120586.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg813sc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "rickdg", "parent_id": "t1_dg7fmcc", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Like I've said, sometimes you need to change the DOM based on how you changed the DOM. For example, after you've put text inside a div and can now see if it overflows its container. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like I&amp;#39;ve said, sometimes you need to change the DOM based on how you changed the DOM. For example, after you&amp;#39;ve put text inside a div and can now see if it overflows its container. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg813sc", "score_hidden": false, "stickied": false, "created": 1492138552.0, "created_utc": 1492109752.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7fmcc", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "ThatBriandude", "parent_id": "t1_dg6b3z4", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Hm, all those downvotes and not a single anwser. \nNo you dont need jquery to manipulate the dom. React does all that for you. You just specify what the HTML is supposed to look like in certain cases and states while react will then do its best to update the Dom in the most efficient way possible. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hm, all those downvotes and not a single anwser. \nNo you dont need jquery to manipulate the dom. React does all that for you. You just specify what the HTML is supposed to look like in certain cases and states while react will then do its best to update the Dom in the most efficient way possible. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7fmcc", "score_hidden": false, "stickied": false, "created": 1492112732.0, "created_utc": 1492083932.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6b3z4", "gilded": 0, "archived": false, "score": -6, "report_reasons": null, "author": "rickdg", "parent_id": "t3_64w5kj", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "You still \"need\" jquery to change the DOM based on how you changed the DOM, right? ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You still &amp;quot;need&amp;quot; jquery to change the DOM based on how you changed the DOM, right? &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6b3z4", "score_hidden": false, "stickied": false, "created": 1492050482.0, "created_utc": 1492021682.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -6}}], "after": null, "before": null}}]