[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65r8q6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 40, "report_reasons": null, "author": "Sacert", "saved": false, "mod_reports": [], "name": "t3_65r8q6", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "github.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/65r8q6/simple_javascript_gaming_ai/", "num_reports": null, "locked": false, "stickied": false, "created": 1492403560.0, "url": "https://github.com/sacert/Snake-Star", "author_flair_text": null, "quarantine": false, "title": "Simple Javascript Gaming AI", "created_utc": 1492374760.0, "distinguished": null, "media": null, "upvote_ratio": 0.87, "num_comments": 4, "visited": false, "subreddit_type": "public", "ups": 40}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65r8q6", "likes": null, "replies": "", "user_reports": [], "id": "dgdaghj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "yudoit", "parent_id": "t3_65r8q6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "can exists an AI without strategy?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;can exists an AI without strategy?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdaghj", "score_hidden": false, "stickied": false, "created": 1492447679.0, "created_utc": 1492418879.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65r8q6", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65r8q6", "likes": null, "replies": "", "user_reports": [], "id": "dgd9sux", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "flaming-cactus", "parent_id": "t1_dgd1upq", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I believe what he's doing is running A# on the same graph. Alternatively, the A# search should create a new graph for each additional node in the search (and can use dynamic programming for optimization). This modified A# search should result in the optimal path, accounting for the snake tail following the head.\n\nedit: idk how to format on mobile, A# is A*", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe what he&amp;#39;s doing is running A# on the same graph. Alternatively, the A# search should create a new graph for each additional node in the search (and can use dynamic programming for optimization). This modified A# search should result in the optimal path, accounting for the snake tail following the head.&lt;/p&gt;\n\n&lt;p&gt;edit: idk how to format on mobile, A# is A*&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgd9sux", "score_hidden": false, "stickied": false, "created": 1492445449.0, "created_utc": 1492416649.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd1upq", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "n1313", "parent_id": "t3_65r8q6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Writing a game that can play itself is an impressive feat, well done! I see the algorithm always goes directly towards the target, so if it spawns inside a loop it doesn't unwind the loop first to ensure safe exit. Would this be difficult to implement, you think?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Writing a game that can play itself is an impressive feat, well done! I see the algorithm always goes directly towards the target, so if it spawns inside a loop it doesn&amp;#39;t unwind the loop first to ensure safe exit. Would this be difficult to implement, you think?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgd1upq", "score_hidden": false, "stickied": false, "created": 1492428812.0, "created_utc": 1492400012.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65r8q6", "likes": null, "replies": "", "user_reports": [], "id": "dgdklaf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jones1618", "parent_id": "t3_65r8q6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I don't think A*-style path optimization is the right approach at all. In single-player snake (like you've implemented) there's a goal position (the apple) but 90% of the logic is about avoiding your tail for long enough which means often that the _least_ efficient path is actually the best path.\n\nI'd say a better approach would be a look-ahead algorithm that would favor going in straight-lines (i.e. turning as little as possible) while being biased in the direction of the apple.\n\nYou'd waste less time trying to plot an elaborate path through a tail \"maze\" that will unravel by the time you get there most of the time. Also, this kind of AI would adapt better to multi-player.\n\nAnyway, I know I'm just talking out of my *ss/brain and you've actually coded something. But, this would make a fun programming contest where coders could submit AI-code and get ranked by their performance.", "edited": 1492440895.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t think A*-style path optimization is the right approach at all. In single-player snake (like you&amp;#39;ve implemented) there&amp;#39;s a goal position (the apple) but 90% of the logic is about avoiding your tail for long enough which means often that the &lt;em&gt;least&lt;/em&gt; efficient path is actually the best path.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d say a better approach would be a look-ahead algorithm that would favor going in straight-lines (i.e. turning as little as possible) while being biased in the direction of the apple.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;d waste less time trying to plot an elaborate path through a tail &amp;quot;maze&amp;quot; that will unravel by the time you get there most of the time. Also, this kind of AI would adapt better to multi-player.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I know I&amp;#39;m just talking out of my *ss/brain and you&amp;#39;ve actually coded something. But, this would make a fun programming contest where coders could submit AI-code and get ranked by their performance.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdklaf", "score_hidden": false, "stickied": false, "created": 1492469494.0, "created_utc": 1492440694.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]