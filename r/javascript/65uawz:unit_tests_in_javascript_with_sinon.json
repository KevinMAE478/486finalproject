[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65uawz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 60, "report_reasons": null, "author": "johnsesh", "saved": false, "mod_reports": [], "name": "t3_65uawz", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "solidgeargroup.com", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/65uawz/unit_tests_in_javascript_with_sinon/", "num_reports": null, "locked": false, "stickied": false, "created": 1492444954.0, "url": "https://solidgeargroup.com/unit-tests-javascript-sinon", "author_flair_text": null, "quarantine": false, "title": "Unit Tests in JavaScript with Sinon", "created_utc": 1492416154.0, "distinguished": null, "media": null, "upvote_ratio": 0.8, "num_comments": 22, "visited": false, "subreddit_type": "public", "ups": 60}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdg5sk", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "gustav_rousy", "parent_id": "t1_dgde78g", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I completly agree with you. Mocks should be used only when they are strictly needed. Other case your increase the complexity of the tests more than needed.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I completly agree with you. Mocks should be used only when they are strictly needed. Other case your increase the complexity of the tests more than needed.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdg5sk", "score_hidden": false, "stickied": false, "created": 1492462980.0, "created_utc": 1492434180.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdggdq", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "aaarrrggh", "parent_id": "t1_dgdga7i", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt;private dependencies shouldn't be mocked.\n\nYeah, this is basically what I meant.\n\nIt all comes down to context and understanding the value your tests are giving you at the end of the day. I agree with you in that unit tests should ideally only fail if the behaviour of the code changes in such a way that it no longer produces the expected behaviour.\n\nAnd yes, it is about being pragmatic. I always aim for tests that support change, but sometimes that involves making judgement calls based on your current understanding of the problem, the context of the problem domain and just your own experience really.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;private dependencies shouldn&amp;#39;t be mocked.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yeah, this is basically what I meant.&lt;/p&gt;\n\n&lt;p&gt;It all comes down to context and understanding the value your tests are giving you at the end of the day. I agree with you in that unit tests should ideally only fail if the behaviour of the code changes in such a way that it no longer produces the expected behaviour.&lt;/p&gt;\n\n&lt;p&gt;And yes, it is about being pragmatic. I always aim for tests that support change, but sometimes that involves making judgement calls based on your current understanding of the problem, the context of the problem domain and just your own experience really.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdggdq", "score_hidden": false, "stickied": false, "created": 1492463491.0, "created_utc": 1492434691.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdl487", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "moreteam", "parent_id": "t1_dgdga7i", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; [Unit tests] should break if any of the behavior is changed.\n\nYes. They should break if behavior changes and not when the implementation changes. Mocking all dependencies means that if a dependency's behavior changes (and thus the overall behavior), the test doesn't fail. But it does fail if you change the implementation. That's the inverse of what you'd want.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;[Unit tests] should break if any of the behavior is changed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes. They should break if behavior changes and not when the implementation changes. Mocking all dependencies means that if a dependency&amp;#39;s behavior changes (and thus the overall behavior), the test doesn&amp;#39;t fail. But it does fail if you change the implementation. That&amp;#39;s the inverse of what you&amp;#39;d want.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdl487", "score_hidden": false, "stickied": false, "created": 1492470154.0, "created_utc": 1492441354.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdium0", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "SOLAR_FIELDS", "parent_id": "t1_dgdga7i", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Agree with this comment. We have unit tests that mock but we have a later build phase that runs integration tests that use the actual dependencies. This often ends up being REST calls and other interactions with the system outside the repository. These tests often do less functionality wise than the unit tests and are more \"smoky\" because that keeps the maintaince costs of those tests lower", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Agree with this comment. We have unit tests that mock but we have a later build phase that runs integration tests that use the actual dependencies. This often ends up being REST calls and other interactions with the system outside the repository. These tests often do less functionality wise than the unit tests and are more &amp;quot;smoky&amp;quot; because that keeps the maintaince costs of those tests lower&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdium0", "score_hidden": false, "stickied": false, "created": 1492467174.0, "created_utc": 1492438374.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdh5td", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "spoobo", "parent_id": "t1_dgdga7i", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Well put. I stand behind this. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well put. I stand behind this. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdh5td", "score_hidden": false, "stickied": false, "created": 1492464641.0, "created_utc": 1492435841.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdga7i", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "jiimji", "parent_id": "t1_dgde78g", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; No, you should NOT mock all dependencies that get touched by your test.\n\npublic dependencies should be mocked during unit testing. Unit Test SHOULD be brittle , that's the point of unit testing, they should break if any of the behavior is changed. Code SHOULD be closed for modification BUT open for extension. What does it mean ? it means that refactoring should be about internal changes, never about public ones. Sometimes one get things wrong. It happens.\n\nFortunately, mocking is rather easy with Javascript. That's a bit more problematic with statically typed languages.\n\n&gt; and under the hood you're using jQuery\n\nprivate dependencies shouldn't be mocked. But if you are passing jQuery as an argument of the constructor function jQuery should be mocked during a unit test. Obviously it has some consequences. If the dependency has states that leak, it makes mocking thus unit testing extremely difficult.\n\nI use SHOULD because often pragmatism trumps these rules. Again, unit testing is rather easy with dynamic languages. They are often a pain in the ass with statically typed ones.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;No, you should NOT mock all dependencies that get touched by your test.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;public dependencies should be mocked during unit testing. Unit Test SHOULD be brittle , that&amp;#39;s the point of unit testing, they should break if any of the behavior is changed. Code SHOULD be closed for modification BUT open for extension. What does it mean ? it means that refactoring should be about internal changes, never about public ones. Sometimes one get things wrong. It happens.&lt;/p&gt;\n\n&lt;p&gt;Fortunately, mocking is rather easy with Javascript. That&amp;#39;s a bit more problematic with statically typed languages.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;and under the hood you&amp;#39;re using jQuery&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;private dependencies shouldn&amp;#39;t be mocked. But if you are passing jQuery as an argument of the constructor function jQuery should be mocked during a unit test. Obviously it has some consequences. If the dependency has states that leak, it makes mocking thus unit testing extremely difficult.&lt;/p&gt;\n\n&lt;p&gt;I use SHOULD because often pragmatism trumps these rules. Again, unit testing is rather easy with dynamic languages. They are often a pain in the ass with statically typed ones.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdga7i", "score_hidden": false, "stickied": false, "created": 1492463194.0, "created_utc": 1492434394.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdhd2v", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "philipwhiuk", "parent_id": "t1_dgde78g", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Agreed. Mocks are useful to contain scope and simulate failure scenarios, not to reproduce dependencies.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Agreed. Mocks are useful to contain scope and simulate failure scenarios, not to reproduce dependencies.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdhd2v", "score_hidden": false, "stickied": false, "created": 1492464966.0, "created_utc": 1492436166.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgde78g", "gilded": 0, "archived": false, "score": 16, "report_reasons": null, "author": "aaarrrggh", "parent_id": "t1_dgde3yk", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "No, you should NOT mock all dependencies that get touched by your test. If you do that, your tests will be tightly coupled to your implementation and you'll end up with brittle tests that make refactoring and changing code to add new features hard.\n\nThere are some occasions where a mock is necessary. An example is when your dependency makes remote calls or something like that. Another example may be what you just said - when a dependency fails (but that would usually mean it's a dependency that makes some kind of remote call, as most dependencies shouldn't just randomly fail like that). Those are examples where mocks are necessary.\n\nBut it shouldn't be the standard thing - only do that when you have to.\n\nFor example, if your method takes in say a DOM element and extracts some text from a DOM node, and under the hood you're using jQuery, your test should not mock out jQuery - in fact, your test shouldn't even know or care that you're using jQuery in that instance.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, you should NOT mock all dependencies that get touched by your test. If you do that, your tests will be tightly coupled to your implementation and you&amp;#39;ll end up with brittle tests that make refactoring and changing code to add new features hard.&lt;/p&gt;\n\n&lt;p&gt;There are some occasions where a mock is necessary. An example is when your dependency makes remote calls or something like that. Another example may be what you just said - when a dependency fails (but that would usually mean it&amp;#39;s a dependency that makes some kind of remote call, as most dependencies shouldn&amp;#39;t just randomly fail like that). Those are examples where mocks are necessary.&lt;/p&gt;\n\n&lt;p&gt;But it shouldn&amp;#39;t be the standard thing - only do that when you have to.&lt;/p&gt;\n\n&lt;p&gt;For example, if your method takes in say a DOM element and extracts some text from a DOM node, and under the hood you&amp;#39;re using jQuery, your test should not mock out jQuery - in fact, your test shouldn&amp;#39;t even know or care that you&amp;#39;re using jQuery in that instance.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgde78g", "score_hidden": false, "stickied": false, "created": 1492459089.0, "created_utc": 1492430289.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 16}}], "after": null, "before": null}}, "user_reports": [], "id": "dgde3yk", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "spoobo", "parent_id": "t1_dgdc69l", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "What rule is that then? You should mock all dependencies that get touched by your test. How else can you test what happens when a dependency fails?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What rule is that then? You should mock all dependencies that get touched by your test. How else can you test what happens when a dependency fails?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgde3yk", "score_hidden": false, "stickied": false, "created": 1492458877.0, "created_utc": 1492430077.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdc69l", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "aaarrrggh", "parent_id": "t1_dgd9uiv", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Be careful not to fall into the trap of mocking every dependency. You should allow for real external dependencies to be used as a rule, and only mock where necessary.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Be careful not to fall into the trap of mocking every dependency. You should allow for real external dependencies to be used as a rule, and only mock where necessary.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdc69l", "score_hidden": false, "stickied": false, "created": 1492453542.0, "created_utc": 1492424742.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 11}}], "after": null, "before": null}}, "user_reports": [], "id": "dgd9uiv", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "gustav_rousy", "parent_id": "t3_65uawz", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I've been using Mocha for a long time, and started to use Sinon this year, and I like how easy is to mock external components. I really like it :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using Mocha for a long time, and started to use Sinon this year, and I like how easy is to mock external components. I really like it :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgd9uiv", "score_hidden": false, "stickied": false, "created": 1492445601.0, "created_utc": 1492416801.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dge1cum", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "CanisMajorisLT", "parent_id": "t3_65uawz", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "If you are looking for sinon alternatives, there is https://github.com/testdouble/testdouble.js\n\nIt's a very well written library by a guy, who is an expert in mocking, spying libraries.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you are looking for sinon alternatives, there is &lt;a href=\"https://github.com/testdouble/testdouble.js\"&gt;https://github.com/testdouble/testdouble.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a very well written library by a guy, who is an expert in mocking, spying libraries.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dge1cum", "score_hidden": false, "stickied": false, "created": 1492488509.0, "created_utc": 1492459709.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgdygap", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "phase_9", "parent_id": "t1_dgdohqn", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Which ones in particular? I'm a maintainer of sinon and would be happy to help if i can", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Which ones in particular? I&amp;#39;m a maintainer of sinon and would be happy to help if i can&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdygap", "score_hidden": false, "stickied": false, "created": 1492485223.0, "created_utc": 1492456423.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dgeha3c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "NoInkling", "parent_id": "t1_dgeb5he", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I personally use [Supertest](https://github.com/visionmedia/supertest) for (local) web API testing, with Jest snapshot assertions on the response bodies.\n\nEdit: something like this:\n\n    import app from ...  // Koa app\n    import supertest from 'supertest'\n    const server = supertest(app.callback())  // For Express you just use `app`\n\n    describe(`GET /api/books/:id`, () =&gt; {\n      // Put some data in the test database, or mock it...\n\n      it(`should respond with book matching id`, async () =&gt; {\n        const response = await server.get('/api/books/2')\n          .expect(200)\n          .expect('Content-Type', /application\\/json/)\n\n        expect(response.body).toMatchSnapshot()\n      })\n\n      ...\n    })\n\nEdit 2: [This talk](https://www.youtube.com/watch?v=HAuXJVI_bUs) has some more info on snapshots and how they work.\n\nEdit 3: You will want to change the test environment to `node` instead of the default `jsdom` via command line or configuration when you're not testing frontend.", "edited": 1492483092.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally use &lt;a href=\"https://github.com/visionmedia/supertest\"&gt;Supertest&lt;/a&gt; for (local) web API testing, with Jest snapshot assertions on the response bodies.&lt;/p&gt;\n\n&lt;p&gt;Edit: something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import app from ...  // Koa app\nimport supertest from &amp;#39;supertest&amp;#39;\nconst server = supertest(app.callback())  // For Express you just use `app`\n\ndescribe(`GET /api/books/:id`, () =&amp;gt; {\n  // Put some data in the test database, or mock it...\n\n  it(`should respond with book matching id`, async () =&amp;gt; {\n    const response = await server.get(&amp;#39;/api/books/2&amp;#39;)\n      .expect(200)\n      .expect(&amp;#39;Content-Type&amp;#39;, /application\\/json/)\n\n    expect(response.body).toMatchSnapshot()\n  })\n\n  ...\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit 2: &lt;a href=\"https://www.youtube.com/watch?v=HAuXJVI_bUs\"&gt;This talk&lt;/a&gt; has some more info on snapshots and how they work.&lt;/p&gt;\n\n&lt;p&gt;Edit 3: You will want to change the test environment to &lt;code&gt;node&lt;/code&gt; instead of the default &lt;code&gt;jsdom&lt;/code&gt; via command line or configuration when you&amp;#39;re not testing frontend.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgeha3c", "score_hidden": false, "stickied": false, "created": 1492508190.0, "created_utc": 1492479390.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgeb5he", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ndaljr", "parent_id": "t1_dgdyegk", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "How would you use jest for api testing? I haven't seen a guide on this use case. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How would you use jest for api testing? I haven&amp;#39;t seen a guide on this use case. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgeb5he", "score_hidden": false, "stickied": false, "created": 1492500467.0, "created_utc": 1492471667.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdyegk", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "roboguy12", "parent_id": "t1_dgdx2m0", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "A huge +1 for Jest. Using snapshots cleaned up our test code and made it readable again, and its interactive/watch runner is super useful for only running specific test suites without having to change tests from `it` to `fit`, or any such crap. Plus, it has on-demand transpiling for Babel/Typescript, so it's\u200b much faster than other methods. And it comes with spies built in, so no need to use sinon. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A huge +1 for Jest. Using snapshots cleaned up our test code and made it readable again, and its interactive/watch runner is super useful for only running specific test suites without having to change tests from &lt;code&gt;it&lt;/code&gt; to &lt;code&gt;fit&lt;/code&gt;, or any such crap. Plus, it has on-demand transpiling for Babel/Typescript, so it&amp;#39;s\u200b much faster than other methods. And it comes with spies built in, so no need to use sinon. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdyegk", "score_hidden": false, "stickied": false, "created": 1492485165.0, "created_utc": 1492456365.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdx2m0", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Dean177", "parent_id": "t1_dgdu5fl", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yes, jasmine / jest:\nhttps://jasmine.github.io/2.0/introduction.html#section-Spies\n\nhttps://facebook.github.io/jest/docs/mock-functions.html\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, jasmine / jest:\n&lt;a href=\"https://jasmine.github.io/2.0/introduction.html#section-Spies\"&gt;https://jasmine.github.io/2.0/introduction.html#section-Spies&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://facebook.github.io/jest/docs/mock-functions.html\"&gt;https://facebook.github.io/jest/docs/mock-functions.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdx2m0", "score_hidden": false, "stickied": false, "created": 1492483659.0, "created_utc": 1492454859.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdu5fl", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "danman_d", "parent_id": "t1_dgdohqn", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Have you found any good alternatives? Because I agree, but we still use it because there doesn't seem to be much out there that is better", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Have you found any good alternatives? Because I agree, but we still use it because there doesn&amp;#39;t seem to be much out there that is better&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdu5fl", "score_hidden": false, "stickied": false, "created": 1492480392.0, "created_utc": 1492451592.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdohqn", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "amgin3", "parent_id": "t3_65uawz", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Seriously, fuck sinon. No package has given me more troubles. I've worked on dozens of large-scale projects, and the number #1 source of build failure when running npm install is incompatible sinon dependencies.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seriously, fuck sinon. No package has given me more troubles. I&amp;#39;ve worked on dozens of large-scale projects, and the number #1 source of build failure when running npm install is incompatible sinon dependencies.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdohqn", "score_hidden": false, "stickied": false, "created": 1492474107.0, "created_utc": 1492445307.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65uawz", "likes": null, "replies": "", "user_reports": [], "id": "dge2c32", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "UnicornOfHarmony", "parent_id": "t1_dgdnrqp", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It's still the case - I checked 2.1.0 on plunkr before writing the comment. Furthermore, as mentioned in the post this is a conscious design decision.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s still the case - I checked 2.1.0 on plunkr before writing the comment. Furthermore, as mentioned in the post this is a conscious design decision.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dge2c32", "score_hidden": false, "stickied": false, "created": 1492489596.0, "created_utc": 1492460796.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdnrqp", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Altru", "parent_id": "t1_dgdc4ut", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Hmmm, I just wrote some code last week using withArgs and this is not an issue. \n\nEdit: that link you posted was from 2015. A lot has been updated since then.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hmmm, I just wrote some code last week using withArgs and this is not an issue. &lt;/p&gt;\n\n&lt;p&gt;Edit: that link you posted was from 2015. A lot has been updated since then.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdnrqp", "score_hidden": false, "stickied": false, "created": 1492473279.0, "created_utc": 1492444479.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdc4ut", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "UnicornOfHarmony", "parent_id": "t3_65uawz", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Just as an FYI, the withArgs example in the Stubs section won't work as expected since the withArgs method is not actually properly implemented in Sinon - it will only ever react to the last \"inline\" spec:\n\n    var stub = sinon.stub(userService, 'getUser')\n                .withArgs(1).returns(new User(1, 'User1'))\n                .withArgs(2).returns(new User(2, 'User2'));\n    \n    // is exactly the same as \n    \n    var stub = sinon.stub(userService, 'getUser')\n                .withArgs(2).returns(new User(2, 'User2'));\n\nSee http://nikas.praninskas.com/javascript/2015/07/28/quickie-sinon-withargs-not-working/ for more details.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just as an FYI, the withArgs example in the Stubs section won&amp;#39;t work as expected since the withArgs method is not actually properly implemented in Sinon - it will only ever react to the last &amp;quot;inline&amp;quot; spec:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var stub = sinon.stub(userService, &amp;#39;getUser&amp;#39;)\n            .withArgs(1).returns(new User(1, &amp;#39;User1&amp;#39;))\n            .withArgs(2).returns(new User(2, &amp;#39;User2&amp;#39;));\n\n// is exactly the same as \n\nvar stub = sinon.stub(userService, &amp;#39;getUser&amp;#39;)\n            .withArgs(2).returns(new User(2, &amp;#39;User2&amp;#39;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=\"http://nikas.praninskas.com/javascript/2015/07/28/quickie-sinon-withargs-not-working/\"&gt;http://nikas.praninskas.com/javascript/2015/07/28/quickie-sinon-withargs-not-working/&lt;/a&gt; for more details.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdc4ut", "score_hidden": false, "stickied": false, "created": 1492453416.0, "created_utc": 1492424616.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]