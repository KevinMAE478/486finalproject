[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m working on a script thats embeded on a page (any domain, not always owned by me, call it devdomain.com) that is loaded from my server (load.devdomain.com) that I need to allow XHR calls to api.devdomain.com. It seems like the API call works in the network tab, but then fails in the console with this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;XMLHttpRequest cannot load &lt;a href=\"http://api.devdomain.com/\"&gt;http://api.devdomain.com/&lt;/a&gt;. The &amp;#39;Access-Control-Allow-Origin&amp;#39; header has a value &amp;#39;api.devdomain.com&amp;#39; that is not equal to the supplied origin. Origin &amp;#39;&lt;a href=\"http://devdomain.com\"&gt;http://devdomain.com&lt;/a&gt;&amp;#39; is therefore not allowed access.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I want to allow access to the API from origins api.devdomain.com and load.devdomain.com. My understanding is that since the script is loading from load.devdomain.com, I should be able to allow that origin and it work, but it looks like its trying to get permission on the domain not owned by me (devdomain.com). Is there a way around this? Its my assumption that this is how stripe does it&amp;#39;s javascript api calls, only allowing calls from javascript loaded from their domain. Am I doing CORS wrong or is it maybe only a problem because I&amp;#39;m not using HTTPS in dev?&lt;/p&gt;\n\n&lt;p&gt;TL;DR: I want the domain my script is loaded from to be allowed to access my API, not necessarily whatever domain it is loaded from.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm working on a script thats embeded on a page (any domain, not always owned by me, call it devdomain.com) that is loaded from my server (load.devdomain.com) that I need to allow XHR calls to api.devdomain.com. It seems like the API call works in the network tab, but then fails in the console with this:\n\n&gt; XMLHttpRequest cannot load http://api.devdomain.com/. The 'Access-Control-Allow-Origin' header has a value 'api.devdomain.com' that is not equal to the supplied origin. Origin 'http://devdomain.com' is therefore not allowed access.\n\nI want to allow access to the API from origins api.devdomain.com and load.devdomain.com. My understanding is that since the script is loading from load.devdomain.com, I should be able to allow that origin and it work, but it looks like its trying to get permission on the domain not owned by me (devdomain.com). Is there a way around this? Its my assumption that this is how stripe does it's javascript api calls, only allowing calls from javascript loaded from their domain. Am I doing CORS wrong or is it maybe only a problem because I'm not using HTTPS in dev?\n\nTL;DR: I want the domain my script is loaded from to be allowed to access my API, not necessarily whatever domain it is loaded from.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "help", "id": "65qm7e", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 3, "report_reasons": null, "author": "Sythic_", "saved": false, "mod_reports": [], "name": "t3_65qm7e", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "self.javascript", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": false, "link_flair_css_class": "help", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/65qm7e/script_cors_policy_problem/", "num_reports": null, "locked": false, "stickied": false, "created": 1492396450.0, "url": "https://www.reddit.com/r/javascript/comments/65qm7e/script_cors_policy_problem/", "author_flair_text": null, "quarantine": false, "title": "Script CORS policy problem", "created_utc": 1492367650.0, "distinguished": null, "media": null, "upvote_ratio": 0.81, "num_comments": 5, "visited": false, "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65qm7e", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65qm7e", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65qm7e", "likes": null, "replies": "", "user_reports": [], "id": "dgd1y0c", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "jamesism", "parent_id": "t1_dgclv7w", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "If you're using node and express [this commonly used cors middleware](https://github.com/expressjs/cors) supports dynamic resolution. \n\nWhile it does look like [stripe supports CORS](https://stripe.com/docs/api#intro), there is [some interesting discussion](https://github.com/stripe/stripe-node/issues/247) about whether or not you should do it from the client side.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you&amp;#39;re using node and express &lt;a href=\"https://github.com/expressjs/cors\"&gt;this commonly used cors middleware&lt;/a&gt; supports dynamic resolution. &lt;/p&gt;\n\n&lt;p&gt;While it does look like &lt;a href=\"https://stripe.com/docs/api#intro\"&gt;stripe supports CORS&lt;/a&gt;, there is &lt;a href=\"https://github.com/stripe/stripe-node/issues/247\"&gt;some interesting discussion&lt;/a&gt; about whether or not you should do it from the client side.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgd1y0c", "score_hidden": false, "stickied": false, "created": 1492428954.0, "created_utc": 1492400154.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65qm7e", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65qm7e", "likes": null, "replies": "", "user_reports": [], "id": "dgdjs7a", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Sythic_", "parent_id": "t1_dgdjdoi", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "You can actually just use document.currentScript to get the script tag of the running script, in most browsers anyway.\n\nIts actually less of a security use case than it is a usability one. I'm writing a script that injects other peoples apps that inherit the class of my BaseApp class which has functions to communicate with my API to store and retrieve data. I just want to make other devs use my functions to access the API rather than them writing their own API wrappers and talking with the API directly and not using the calls right. My apps come from one domain and theirs another, I figured I could just allow the code coming from my domain to access the API and block the domains with the apps to force them into using my wrapper instead.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can actually just use document.currentScript to get the script tag of the running script, in most browsers anyway.&lt;/p&gt;\n\n&lt;p&gt;Its actually less of a security use case than it is a usability one. I&amp;#39;m writing a script that injects other peoples apps that inherit the class of my BaseApp class which has functions to communicate with my API to store and retrieve data. I just want to make other devs use my functions to access the API rather than them writing their own API wrappers and talking with the API directly and not using the calls right. My apps come from one domain and theirs another, I figured I could just allow the code coming from my domain to access the API and block the domains with the apps to force them into using my wrapper instead.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdjs7a", "score_hidden": false, "stickied": false, "created": 1492468449.0, "created_utc": 1492439649.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgdjdoi", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LettuceKills", "parent_id": "t1_dgclv7w", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "If stripe somehow manages it I would be very curious about how. \n\nYou can use `var scriptsSoFar = document.getElementsByTagName(\"script\"); var srcAttrOfRunningScript = scriptsSoFar[scriptsSoFar.length-1].src;` to get the src tag of the running script and then send it along with the requiest, but a malicious individual could just modify the script and hardcode the value.\n\nWhy do you need this? What scenario are you preventing?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If stripe somehow manages it I would be very curious about how. &lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;var scriptsSoFar = document.getElementsByTagName(&amp;quot;script&amp;quot;); var srcAttrOfRunningScript = scriptsSoFar[scriptsSoFar.length-1].src;&lt;/code&gt; to get the src tag of the running script and then send it along with the requiest, but a malicious individual could just modify the script and hardcode the value.&lt;/p&gt;\n\n&lt;p&gt;Why do you need this? What scenario are you preventing?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgdjdoi", "score_hidden": false, "stickied": false, "created": 1492467905.0, "created_utc": 1492439105.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dgclv7w", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Sythic_", "parent_id": "t1_dgch8hs", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Interesting, so am I wrong that stripe.js prevents other domains from calling its API? Of course their are ways around cross browser but I hoped there was some minor obscurity I could add to my script to force other apps working within my API to call functions from my script to be able to communicate with my API rather than talking with it directly. Is there anyway I can get the domain of the calling script and filter that way server side?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting, so am I wrong that stripe.js prevents other domains from calling its API? Of course their are ways around cross browser but I hoped there was some minor obscurity I could add to my script to force other apps working within my API to call functions from my script to be able to communicate with my API rather than talking with it directly. Is there anyway I can get the domain of the calling script and filter that way server side?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgclv7w", "score_hidden": false, "stickied": false, "created": 1492407037.0, "created_utc": 1492378237.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dgch8hs", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "LettuceKills", "parent_id": "t3_65qm7e", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "No, it's the domain of the HTML resource that is used (ie. the domain from the URL of the page using the script) that counts. Where you host the script doesn't matter, it's where you load and run the script. \n\nThere is no way around this and there isn't supposed to be. The purpose of CORS is to give API servers control over who can use them, if you don't need or want that control, don't use CORS. Your options seem to be to:\n\na: Disable CORS all-together. \n\nb: Update the list of allowed origins on your server whenever a new domain wants to use the script. \n\nc: Because CORS is only enforced by the browser, any user of the script can write a non-browser client for your API in his backend which his frontend can then contact - (that is, your script contacts their backend, which contacts your API)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, it&amp;#39;s the domain of the HTML resource that is used (ie. the domain from the URL of the page using the script) that counts. Where you host the script doesn&amp;#39;t matter, it&amp;#39;s where you load and run the script. &lt;/p&gt;\n\n&lt;p&gt;There is no way around this and there isn&amp;#39;t supposed to be. The purpose of CORS is to give API servers control over who can use them, if you don&amp;#39;t need or want that control, don&amp;#39;t use CORS. Your options seem to be to:&lt;/p&gt;\n\n&lt;p&gt;a: Disable CORS all-together. &lt;/p&gt;\n\n&lt;p&gt;b: Update the list of allowed origins on your server whenever a new domain wants to use the script. &lt;/p&gt;\n\n&lt;p&gt;c: Because CORS is only enforced by the browser, any user of the script can write a non-browser client for your API in his backend which his frontend can then contact - (that is, your script contacts their backend, which contacts your API)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dgch8hs", "score_hidden": false, "stickied": false, "created": 1492401035.0, "created_utc": 1492372235.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}]