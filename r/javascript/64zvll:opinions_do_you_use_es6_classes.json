[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all, just looking for some opinions on the matter.&lt;/p&gt;\n\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply &amp;#39;&amp;#39;mimic&amp;#39;&amp;#39; prototype inheritance, in favor of object composition.&lt;/p&gt;\n\n&lt;p&gt;AirBNB&amp;#39;s JS styleguide states to always use classes when dealing with inheritance.&lt;/p&gt;\n\n&lt;p&gt;What is the standard on this one here?&lt;/p&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey all, just looking for some opinions on the matter.\n\nKyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition.\n\nAirBNB's JS styleguide states to always use classes when dealing with inheritance.\n\nWhat is the standard on this one here?\n\nCheers.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "help", "id": "64zvll", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 42, "report_reasons": null, "author": "arthis1", "saved": false, "mod_reports": [], "name": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "self.javascript", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": 1492021186.0, "link_flair_css_class": "help", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/64zvll/opinions_do_you_use_es6_classes/", "num_reports": null, "locked": false, "stickied": false, "created": 1492049268.0, "url": "https://www.reddit.com/r/javascript/comments/64zvll/opinions_do_you_use_es6_classes/", "author_flair_text": null, "quarantine": false, "title": "Opinions : Do you use es6 classes", "created_utc": 1492020468.0, "distinguished": null, "media": null, "upvote_ratio": 0.87, "num_comments": 72, "visited": false, "subreddit_type": "public", "ups": 42}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg741aj", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "DGCA", "parent_id": "t1_dg6xisc", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I work on a web app that gets a fair amount of traffic (target audience is not techy, FWIW) and even though IE is ~2% (95% of that is IE11), I still don't feel comfortable dropping support for IE11. I've always gone by the arbitrary rule of thumb that if a browser is less than 5%, I would drop support, but it just feels wrong to not support IE11. It's totally illogical, but setting up a project with Babel is pretty painless so I'll keep doing that and supporting IE11, I guess.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I work on a web app that gets a fair amount of traffic (target audience is not techy, FWIW) and even though IE is ~2% (95% of that is IE11), I still don&amp;#39;t feel comfortable dropping support for IE11. I&amp;#39;ve always gone by the arbitrary rule of thumb that if a browser is less than 5%, I would drop support, but it just feels wrong to not support IE11. It&amp;#39;s totally illogical, but setting up a project with Babel is pretty painless so I&amp;#39;ll keep doing that and supporting IE11, I guess.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg741aj", "score_hidden": false, "stickied": false, "created": 1492084796.0, "created_utc": 1492055996.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg78tmz", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dodekerekt", "parent_id": "t1_dg6xisc", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It's an ES7 feature and only Safari Technology Preview supports it right now: http://kangax.github.io/compat-table/esnext/#test-object_rest_properties\n\nNo browser supports class properties: http://kangax.github.io/compat-table/esnext/#test-class_properties\n\nI don't know what year you're using, but most support nothing from the features I mentioned.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s an ES7 feature and only Safari Technology Preview supports it right now: &lt;a href=\"http://kangax.github.io/compat-table/esnext/#test-object_rest_properties\"&gt;http://kangax.github.io/compat-table/esnext/#test-object_rest_properties&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;No browser supports class properties: &lt;a href=\"http://kangax.github.io/compat-table/esnext/#test-class_properties\"&gt;http://kangax.github.io/compat-table/esnext/#test-class_properties&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t know what year you&amp;#39;re using, but most support nothing from the features I mentioned.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg78tmz", "score_hidden": false, "stickied": false, "created": 1492093746.0, "created_utc": 1492064946.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7am84", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "evilgwyn", "parent_id": "t1_dg6xisc", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "We have to support back to iOS 8 and Android 4.3 devices. There is a lot of stuff we just can't do because of that.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We have to support back to iOS 8 and Android 4.3 devices. There is a lot of stuff we just can&amp;#39;t do because of that.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7am84", "score_hidden": false, "stickied": false, "created": 1492098565.0, "created_utc": 1492069765.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6xisc", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "four-arms", "parent_id": "t1_dg6r9m7", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I dunno what browser you're using but most support almost all of es6 natively now", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I dunno what browser you&amp;#39;re using but most support almost all of es6 natively now&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6xisc", "score_hidden": false, "stickied": false, "created": 1492076161.0, "created_utc": 1492047361.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6r9m7", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "dodekerekt", "parent_id": "t1_dg6kbn6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "For personal project I don't care either. I still use babel for those since I care about the latest features like object rest/spread and class variables.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For personal project I don&amp;#39;t care either. I still use babel for those since I care about the latest features like object rest/spread and class variables.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6r9m7", "score_hidden": false, "stickied": false, "created": 1492068517.0, "created_utc": 1492039717.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6kbn6", "gilded": 0, "archived": false, "score": 26, "report_reasons": null, "author": "inu-no-policemen", "parent_id": "t1_dg6juow", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "There is Babel for that.\n\nhttps://babeljs.io/\n\n(Personally, I don't care about outdated browsers, though.)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is Babel for that.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://babeljs.io/\"&gt;https://babeljs.io/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(Personally, I don&amp;#39;t care about outdated browsers, though.)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6kbn6", "score_hidden": false, "stickied": false, "created": 1492060055.0, "created_utc": 1492031255.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 26}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6juow", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "trouzy", "parent_id": "t1_dg6d5gk", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "What do you fall back on, or do you just not support older browsers?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What do you fall back on, or do you just not support older browsers?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6juow", "score_hidden": false, "stickied": false, "created": 1492059519.0, "created_utc": 1492030719.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6d5gk", "gilded": 0, "archived": false, "score": 53, "report_reasons": null, "author": "inu-no-policemen", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I use classes for things of which I need instances. I don't use it for everything. This isn't Java where everything must be inside some class.\n\nI also use FP stuff when it's convenient.\n\nBeing able to freely mix and match different paradigms is a great advantage.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I use classes for things of which I need instances. I don&amp;#39;t use it for everything. This isn&amp;#39;t Java where everything must be inside some class.&lt;/p&gt;\n\n&lt;p&gt;I also use FP stuff when it&amp;#39;s convenient.&lt;/p&gt;\n\n&lt;p&gt;Being able to freely mix and match different paradigms is a great advantage.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6d5gk", "score_hidden": false, "stickied": false, "created": 1492052581.0, "created_utc": 1492023781.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 53}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6f3oj", "gilded": 0, "archived": false, "score": 12, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dg6dmvt", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; How do you implement object composition in TypeScript?\n\nRemember when I said \"there's a very high likelihood that we might be talking past each other because we define the terms we use differently\" :-)\n\nThere are some poor articles/videos in the JS world that describe object composition incorrectly, and unfortunately many fell victim to these bad sources. \n\nWhat /u/MoTTs_/ says about composition is correct, so basically it's about an object having other objects as properties, in a nutshell. The saying \"composition over inheritance\" talks about *that* kind of composition. Not mixins or any other sort of *grafting* of properties and methods of objects onto other objects (or their prototypes).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;How do you implement object composition in TypeScript?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Remember when I said &amp;quot;there&amp;#39;s a very high likelihood that we might be talking past each other because we define the terms we use differently&amp;quot; :-)&lt;/p&gt;\n\n&lt;p&gt;There are some poor articles/videos in the JS world that describe object composition incorrectly, and unfortunately many fell victim to these bad sources. &lt;/p&gt;\n\n&lt;p&gt;What &lt;a href=\"/u/MoTTs_/\"&gt;/u/MoTTs_/&lt;/a&gt; says about composition is correct, so basically it&amp;#39;s about an object having other objects as properties, in a nutshell. The saying &amp;quot;composition over inheritance&amp;quot; talks about &lt;em&gt;that&lt;/em&gt; kind of composition. Not mixins or any other sort of &lt;em&gt;grafting&lt;/em&gt; of properties and methods of objects onto other objects (or their prototypes).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6f3oj", "score_hidden": false, "stickied": false, "created": 1492054594.0, "created_utc": 1492025794.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6e9fs", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "MoTTs_", "parent_id": "t1_dg6e4kh", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Aggregation and composition are nearly the same thing. The only distinction is whether the whole owns its part.\n\nhttps://en.wikipedia.org/wiki/Object_composition#Aggregation", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Aggregation and composition are nearly the same thing. The only distinction is whether the whole owns its part.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Object_composition#Aggregation\"&gt;https://en.wikipedia.org/wiki/Object_composition#Aggregation&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6e9fs", "score_hidden": false, "stickied": false, "created": 1492053731.0, "created_utc": 1492024931.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6e4kh", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "9jack9", "parent_id": "t1_dg6dzr2", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Isn't that object aggregation?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Isn&amp;#39;t that object aggregation?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6e4kh", "score_hidden": false, "stickied": false, "created": 1492053591.0, "created_utc": 1492024791.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6dzr2", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "MoTTs_", "parent_id": "t1_dg6dmvt", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Same as in ordinary JavaScript.\n\n    class Car {\n        constructor() {\n            // Object composition; car HAS-A carburator\n            this.carburator = new Carburator();\n        }\n    }\n\nMy guess is you've heard that `Object.assign` is how you do object composition in JavaScript, but [actually it isn't](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Same as in ordinary JavaScript.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Car {\n    constructor() {\n        // Object composition; car HAS-A carburator\n        this.carburator = new Carburator();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My guess is you&amp;#39;ve heard that &lt;code&gt;Object.assign&lt;/code&gt; is how you do object composition in JavaScript, but &lt;a href=\"https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/\"&gt;actually it isn&amp;#39;t&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6dzr2", "score_hidden": false, "stickied": false, "created": 1492053452.0, "created_utc": 1492024652.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 11}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6dmvt", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "9jack9", "parent_id": "t1_dg6bj7h", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; I use ES6 classes, more specifically TypeScript classes, which are a superset of ES6 classes (and compile to ES6 classes when the target is ES6), but I barely if ever use inheritance. I favor object composition.\n\nHow do you implement object composition in TypeScript? I've only seen their [mixin pattern](https://www.typescriptlang.org/docs/handbook/mixins.html) but I don't really like it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I use ES6 classes, more specifically TypeScript classes, which are a superset of ES6 classes (and compile to ES6 classes when the target is ES6), but I barely if ever use inheritance. I favor object composition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;How do you implement object composition in TypeScript? I&amp;#39;ve only seen their &lt;a href=\"https://www.typescriptlang.org/docs/handbook/mixins.html\"&gt;mixin pattern&lt;/a&gt; but I don&amp;#39;t really like it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6dmvt", "score_hidden": false, "stickied": false, "created": 1492053090.0, "created_utc": 1492024290.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6fkzv", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "ninjaroach", "parent_id": "t1_dg6bj7h", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Using ES6 classes doesn't mean you use inheritance in place of object composition.\n\nRight. The two are not mutually exclusive.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Using ES6 classes doesn&amp;#39;t mean you use inheritance in place of object composition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Right. The two are not mutually exclusive.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6fkzv", "score_hidden": false, "stickied": false, "created": 1492055089.0, "created_utc": 1492026289.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7c8hu", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "LtAramaki", "parent_id": "t1_dg6wm4c", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I'm replicating your results, but I think in the second test you shouldn't use console.log() as that's bottlenecking all the tests, and makes them look the same in performance.\n\nAdditionally the prototype pattern becomes increasingly more efficient the more class properties/methods you have. With a method or two one probably won't see substantial difference in memory and CPU.\n\nI use TypeScript, and I compile to ES5 most of the time, which means my final code doesn't contain actual ES6 classes (despite I'm writing ES6 classes), so I can't comment on the specific issue with ES6 class performance, but it's typical that new JS features are less optimized when introduced in a JS VM and they get optimized as they gain mainstream acceptance.\n\nSay native generators, async/await and other native features have been historically slower in JS engines than what Babel and other transpilers could produce using ES3/ES5 level features, but this has been resolved in time, and native support either matches or outpaces what Babel could do.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m replicating your results, but I think in the second test you shouldn&amp;#39;t use console.log() as that&amp;#39;s bottlenecking all the tests, and makes them look the same in performance.&lt;/p&gt;\n\n&lt;p&gt;Additionally the prototype pattern becomes increasingly more efficient the more class properties/methods you have. With a method or two one probably won&amp;#39;t see substantial difference in memory and CPU.&lt;/p&gt;\n\n&lt;p&gt;I use TypeScript, and I compile to ES5 most of the time, which means my final code doesn&amp;#39;t contain actual ES6 classes (despite I&amp;#39;m writing ES6 classes), so I can&amp;#39;t comment on the specific issue with ES6 class performance, but it&amp;#39;s typical that new JS features are less optimized when introduced in a JS VM and they get optimized as they gain mainstream acceptance.&lt;/p&gt;\n\n&lt;p&gt;Say native generators, async/await and other native features have been historically slower in JS engines than what Babel and other transpilers could produce using ES3/ES5 level features, but this has been resolved in time, and native support either matches or outpaces what Babel could do.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7c8hu", "score_hidden": false, "stickied": false, "created": 1492103430.0, "created_utc": 1492074630.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6wm4c", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "mikejoro", "parent_id": "t1_dg6bj7h", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I see a purpose for es6 classes, but if you're not using extends, the primary reason is just performance, right? According to [this js perf](https://jsperf.com/obj-create-vs-new/4) (at least in my browser), plain function with new is ~3.5 times faster. However, [this jsperf I just made](https://jsperf.com/object-create-vs-es6-class/1) which uses native classes vs. object.create vs. babel compiled class [using the repl](https://babeljs.io/repl/) shows that they are all essentially the same speed (babel is actually the slowest by a hair, object.create is the fastest by a hair). \n\nThat's chrome in windows 7, so maybe it's different in other environments, but I don't see that being any faster than object.create if you are relying on babel anyways. Plus I don't really see a large benefit to using classes over plain objects unless you are planning on using `extends`. If anything it seems to be purely stylistic if you are using `class`. I'd love to see more data on performance though, my sample size of 1 isn't great.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I see a purpose for es6 classes, but if you&amp;#39;re not using extends, the primary reason is just performance, right? According to &lt;a href=\"https://jsperf.com/obj-create-vs-new/4\"&gt;this js perf&lt;/a&gt; (at least in my browser), plain function with new is ~3.5 times faster. However, &lt;a href=\"https://jsperf.com/object-create-vs-es6-class/1\"&gt;this jsperf I just made&lt;/a&gt; which uses native classes vs. object.create vs. babel compiled class &lt;a href=\"https://babeljs.io/repl/\"&gt;using the repl&lt;/a&gt; shows that they are all essentially the same speed (babel is actually the slowest by a hair, object.create is the fastest by a hair). &lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s chrome in windows 7, so maybe it&amp;#39;s different in other environments, but I don&amp;#39;t see that being any faster than object.create if you are relying on babel anyways. Plus I don&amp;#39;t really see a large benefit to using classes over plain objects unless you are planning on using &lt;code&gt;extends&lt;/code&gt;. If anything it seems to be purely stylistic if you are using &lt;code&gt;class&lt;/code&gt;. I&amp;#39;d love to see more data on performance though, my sample size of 1 isn&amp;#39;t great.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6wm4c", "score_hidden": false, "stickied": false, "created": 1492075035.0, "created_utc": 1492046235.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6bj7h", "gilded": 0, "archived": false, "score": 51, "report_reasons": null, "author": "LtAramaki", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition.\n\nES6 classes don't mimic prototype inheritance, they mimic classic inheritance, while they're actually syntax sugar about defining an object constructor and prototype. Just a side note.\n\nNow... Kyle Simpson's statement either needs to be clarified, or it doesn't connect logically. Using ES6 classes doesn't mean you use inheritance in place of object composition.\n\nI use ES6 classes, more specifically TypeScript classes, which are a superset of ES6 classes (and compile to ES6 classes when the target is ES6), but I barely if ever use inheritance. I favor object composition.\n\nES6 removes unnecessary boilerplate in defining a constructor+prototype. Less noise means a more productive programmer: code gets faster to write, and much more importantly - easier to read. And constructor+prototype is still the preferred approach for building most of your objects, and the highest performing approach for most mainstream JS engines, like V8.\n\n---\n\nBTW, when discussing these matters, there's a *very high likelihood* that we might be talking past each other because we define the terms we use differently (prototype inheritance, object composition, etc.). So when you quote someone, it's best to provide a link to the source, so we can have the proper context.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply &amp;#39;&amp;#39;mimic&amp;#39;&amp;#39; prototype inheritance, in favor of object composition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;ES6 classes don&amp;#39;t mimic prototype inheritance, they mimic classic inheritance, while they&amp;#39;re actually syntax sugar about defining an object constructor and prototype. Just a side note.&lt;/p&gt;\n\n&lt;p&gt;Now... Kyle Simpson&amp;#39;s statement either needs to be clarified, or it doesn&amp;#39;t connect logically. Using ES6 classes doesn&amp;#39;t mean you use inheritance in place of object composition.&lt;/p&gt;\n\n&lt;p&gt;I use ES6 classes, more specifically TypeScript classes, which are a superset of ES6 classes (and compile to ES6 classes when the target is ES6), but I barely if ever use inheritance. I favor object composition.&lt;/p&gt;\n\n&lt;p&gt;ES6 removes unnecessary boilerplate in defining a constructor+prototype. Less noise means a more productive programmer: code gets faster to write, and much more importantly - easier to read. And constructor+prototype is still the preferred approach for building most of your objects, and the highest performing approach for most mainstream JS engines, like V8.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;BTW, when discussing these matters, there&amp;#39;s a &lt;em&gt;very high likelihood&lt;/em&gt; that we might be talking past each other because we define the terms we use differently (prototype inheritance, object composition, etc.). So when you quote someone, it&amp;#39;s best to provide a link to the source, so we can have the proper context.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6bj7h", "score_hidden": false, "stickied": false, "created": 1492050911.0, "created_utc": 1492022111.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 51}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7b2j5", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "pertheusual", "parent_id": "t1_dg6v4l8", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I think I'm pretty much agreeing with you, but to clarify for you and bel:\n\nThe ECMAScript spec contains the definition of how modules declare themselves and how they interact, but it does not defined anything about how systems load a module, which is the most important part for modules to actually work.\n\nModules are not some part of the ECMA spec that browsers haven't implemented. Browsers have implemented the ES6 module syntax and enough basics for them to be testable, but the until the loader spec solidifies, they will be effectively unusable.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think I&amp;#39;m pretty much agreeing with you, but to clarify for you and bel:&lt;/p&gt;\n\n&lt;p&gt;The ECMAScript spec contains the definition of how modules declare themselves and how they interact, but it does not defined anything about how systems load a module, which is the most important part for modules to actually work.&lt;/p&gt;\n\n&lt;p&gt;Modules are not some part of the ECMA spec that browsers haven&amp;#39;t implemented. Browsers have implemented the ES6 module syntax and enough basics for them to be testable, but the until the loader spec solidifies, they will be effectively unusable.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7b2j5", "score_hidden": false, "stickied": false, "created": 1492099883.0, "created_utc": 1492071083.0, "depth": 9, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6v4l8", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6uzh6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "k? You said it wasn't in es6, but they are, the browsers just haven't implemented that part of es6 yet. What about that exactly are you arguing against?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;k? You said it wasn&amp;#39;t in es6, but they are, the browsers just haven&amp;#39;t implemented that part of es6 yet. What about that exactly are you arguing against?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6v4l8", "score_hidden": false, "stickied": false, "created": 1492073223.0, "created_utc": 1492044423.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6uzh6", "gilded": 0, "archived": false, "score": -7, "report_reasons": null, "author": "bel9708", "parent_id": "t1_dg6u49p", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "throw whatever spec you want at me that doesn't change the fact that the spec isn't complete", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;throw whatever spec you want at me that doesn&amp;#39;t change the fact that the spec isn&amp;#39;t complete&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6uzh6", "score_hidden": false, "stickied": false, "created": 1492073058.0, "created_utc": 1492044258.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": -7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6u49p", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6tks0", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "http://www.ecma-international.org/ecma-262/6.0/#sec-imports\n\nYes they are?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-imports\"&gt;http://www.ecma-international.org/ecma-262/6.0/#sec-imports&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Yes they are?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6u49p", "score_hidden": false, "stickied": false, "created": 1492072041.0, "created_utc": 1492043241.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6tks0", "gilded": 0, "archived": false, "score": -2, "report_reasons": null, "author": "bel9708", "parent_id": "t1_dg6neuw", "subreddit_name_prefixed": "r/javascript", "controversiality": 1, "body": "imports aren't in es6.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;imports aren&amp;#39;t in es6.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6tks0", "score_hidden": false, "stickied": false, "created": 1492071385.0, "created_utc": 1492042585.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": -2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6neuw", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6napr", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Not all of it, ex. Imports.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not all of it, ex. Imports.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6neuw", "score_hidden": false, "stickied": false, "created": 1492063728.0, "created_utc": 1492034928.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6napr", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "djslakor", "parent_id": "t1_dg6n9ft", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Chrome, Firefox, Edge, Safari have all supported it for a while now.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Chrome, Firefox, Edge, Safari have all supported it for a while now.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6napr", "score_hidden": false, "stickied": false, "created": 1492063582.0, "created_utc": 1492034782.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6n9ft", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6md0s", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Ehh until I don't need babel or equivalent to use it on the web, It's pretty unconventional.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ehh until I don&amp;#39;t need babel or equivalent to use it on the web, It&amp;#39;s pretty unconventional.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6n9ft", "score_hidden": false, "stickied": false, "created": 1492063538.0, "created_utc": 1492034738.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6md0s", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "djslakor", "parent_id": "t1_dg6k2or", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Of course, ES6 _is_ conventional javascript. :)", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Of course, ES6 &lt;em&gt;is&lt;/em&gt; conventional javascript. :)&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6md0s", "score_hidden": false, "stickied": false, "created": 1492062448.0, "created_utc": 1492033648.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7jkvx", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg793hn", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "As I said if you really wanted it to be private, you can use a symbol\n\n    let privateVar = new Symbol()\n\n    export default class {\n        constructor () {\n            this.[privateVar] = 'bleh'\n        }\n        myFunction () {\n            return this.[privateVar]\n        }\n        mutate(newVal) {\n            this.[privateVar] = newVal\n        }\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As I said if you really wanted it to be private, you can use a symbol&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let privateVar = new Symbol()\n\nexport default class {\n    constructor () {\n        this.[privateVar] = &amp;#39;bleh&amp;#39;\n    }\n    myFunction () {\n        return this.[privateVar]\n    }\n    mutate(newVal) {\n        this.[privateVar] = newVal\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7jkvx", "score_hidden": false, "stickied": false, "created": 1492119221.0, "created_utc": 1492090421.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg793hn", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "talmobi", "parent_id": "t1_dg6v04o", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "That's a convention. Not a private variable. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a convention. Not a private variable. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg793hn", "score_hidden": false, "stickied": false, "created": 1492094443.0, "created_utc": 1492065643.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg79wso", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dvlsg", "parent_id": "t1_dg6vtzr", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It does in JS too. Usually.\n\nChances are they're adding private vars in the future, though ([source](https://github.com/tc39/proposal-private-fields)).", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It does in JS too. Usually.&lt;/p&gt;\n\n&lt;p&gt;Chances are they&amp;#39;re adding private vars in the future, though (&lt;a href=\"https://github.com/tc39/proposal-private-fields\"&gt;source&lt;/a&gt;).&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg79wso", "score_hidden": false, "stickied": false, "created": 1492096588.0, "created_utc": 1492067788.0, "depth": 8, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6vtzr", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "Laat", "parent_id": "t1_dg6v04o", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yes, I like this convention. The _ communicates clearly to other developers that they should never ever touch that variable outside of the object. At least I hope JS-devs respect that convention.\n\nIt works in Python.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, I like this convention. The _ communicates clearly to other developers that they should never ever touch that variable outside of the object. At least I hope JS-devs respect that convention.&lt;/p&gt;\n\n&lt;p&gt;It works in Python.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6vtzr", "score_hidden": false, "stickied": false, "created": 1492074068.0, "created_utc": 1492045268.0, "depth": 7, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6v04o", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6usdw", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "You are right, I normally do it this way, and was thinking of a specific singleton class where I did something like that.\n\n    export default class {\n        constructor () {\n            this._privateButNotReallyVar = 'bleh'\n        }\n        myFunction () {\n            return this._privateButNotReallyVar\n        }\n        mutate(newVal) {\n            this._privateButNotReallyVar = newVal\n        }\n    }    \n\n\nEdit: If you really wanted it to be private you could always use Symbols too.", "edited": 1492044815.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are right, I normally do it this way, and was thinking of a specific singleton class where I did something like that.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default class {\n    constructor () {\n        this._privateButNotReallyVar = &amp;#39;bleh&amp;#39;\n    }\n    myFunction () {\n        return this._privateButNotReallyVar\n    }\n    mutate(newVal) {\n        this._privateButNotReallyVar = newVal\n    }\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: If you really wanted it to be private you could always use Symbols too.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6v04o", "score_hidden": false, "stickied": false, "created": 1492073078.0, "created_utc": 1492044278.0, "depth": 6, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6usdw", "gilded": 0, "archived": false, "score": 7, "report_reasons": null, "author": "Laat", "parent_id": "t1_dg6so2d", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; It servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong.\n\n\n    let privateVar = 'This is private.'\n    \n    export default class {\n        myFunction () {\n            return privateVar\n        }\n        mutate(newVal) {\n            privateVar = newVal\n        }\n    }    \n\nAll instances share *privateVar*, which is not useful when encapsulating internal variables in the instance.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;It servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;let privateVar = &amp;#39;This is private.&amp;#39;\n\nexport default class {\n    myFunction () {\n        return privateVar\n    }\n    mutate(newVal) {\n        privateVar = newVal\n    }\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All instances share &lt;em&gt;privateVar&lt;/em&gt;, which is not useful when encapsulating internal variables in the instance.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6usdw", "score_hidden": false, "stickied": false, "created": 1492072826.0, "created_utc": 1492044026.0, "depth": 5, "mod_reports": [], "subreddit_type": "public", "ups": 7}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6so2d", "gilded": 0, "archived": false, "score": -5, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6rvx2", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; That's a private module variable, not a private class member.\n\nIt servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong.\n\n&gt; at which point you aren't really writing ES6 classes at all - you're writing verbose ES5 classes \n\nES6 classes are just syntactic sugar for ES5 classes. Not sure what you are trying to say here. The whole argument for ES6 classes and imports is that it's a more simple syntax and doesn't require a bunch of AMD/require/etc boilerplate to make it modular.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;That&amp;#39;s a private module variable, not a private class member.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;at which point you aren&amp;#39;t really writing ES6 classes at all - you&amp;#39;re writing verbose ES5 classes &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;ES6 classes are just syntactic sugar for ES5 classes. Not sure what you are trying to say here. The whole argument for ES6 classes and imports is that it&amp;#39;s a more simple syntax and doesn&amp;#39;t require a bunch of AMD/require/etc boilerplate to make it modular.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6so2d", "score_hidden": false, "stickied": false, "created": 1492070239.0, "created_utc": 1492041439.0, "depth": 4, "mod_reports": [], "subreddit_type": "public", "ups": -5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6rvx2", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "Shaper_pmp", "parent_id": "t1_dg6r541", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "That's a private *module* variable, not a private class member.\n\nThere's no ES6 equivalent of\n\n    function MyClass() {\n      var privateVar = \"private\";\n      this.myFunction = function() {\n        return privateVar;\n      };\n    }\n\n... without writing essentially exactly the same code in your class constructor function... at which point you aren't really writing ES6 classes at all - you're writing verbose ES5 classes and unnecessarily sticking `class MyClass { ... }` around it for no benefit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a private &lt;em&gt;module&lt;/em&gt; variable, not a private class member.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s no ES6 equivalent of&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function MyClass() {\n  var privateVar = &amp;quot;private&amp;quot;;\n  this.myFunction = function() {\n    return privateVar;\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... without writing essentially exactly the same code in your class constructor function... at which point you aren&amp;#39;t really writing ES6 classes at all - you&amp;#39;re writing verbose ES5 classes and unnecessarily sticking &lt;code&gt;class MyClass { ... }&lt;/code&gt; around it for no benefit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6rvx2", "score_hidden": false, "stickied": false, "created": 1492069272.0, "created_utc": 1492040472.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7lgsb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "guzgarcia", "parent_id": "t1_dg6r541", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "There is already a proposal for private variables in ES6 classes.\n\n    class Foo {\n      #thisIsPrivate = 'bar';\n\n      constructor () { ... }\n    }\n\nSee https://github.com/tc39/proposal-private-fields. Currently in stage 2. Hope next year it will be ready to be included in ES2019. I'm not sure if the preset stage2 of Babel have a polyfill for this.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There is already a proposal for private variables in ES6 classes.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Foo {\n  #thisIsPrivate = &amp;#39;bar&amp;#39;;\n\n  constructor () { ... }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=\"https://github.com/tc39/proposal-private-fields\"&gt;https://github.com/tc39/proposal-private-fields&lt;/a&gt;. Currently in stage 2. Hope next year it will be ready to be included in ES2019. I&amp;#39;m not sure if the preset stage2 of Babel have a polyfill for this.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7lgsb", "score_hidden": false, "stickied": false, "created": 1492121644.0, "created_utc": 1492092844.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6r541", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Draders", "parent_id": "t1_dg6qb00", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "myClass.js:\n\n    let privateVar = 'This is private.'\n\n    export default class {\n        myFunction () {\n            return privateVar\n        }\n    }", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;myClass.js:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let privateVar = &amp;#39;This is private.&amp;#39;\n\nexport default class {\n    myFunction () {\n        return privateVar\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6r541", "score_hidden": false, "stickied": false, "created": 1492068363.0, "created_utc": 1492039563.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7m507", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "inu-no-policemen", "parent_id": "t1_dg6qb00", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Right up until you need private member variables, at which point you either end up writing de-facto ES5 class constructor functions or you resort to hacky workarounds using Symbols.\n\nYou mean WeakMaps. You can iterate over Symbols via Object.getOwnPropertySymbols.\n\nThe WeakMaps workaround:\n\nhttps://jsfiddle.net/rzgumjL4/\n\nWell, since that's too much of a mess I recommend to just use wannabe privacy via leading underscores until actual privacy is added. Using TypeScript is also an option.\n\n[CC /u/Draders, /u/Laat]", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Right up until you need private member variables, at which point you either end up writing de-facto ES5 class constructor functions or you resort to hacky workarounds using Symbols.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You mean WeakMaps. You can iterate over Symbols via Object.getOwnPropertySymbols.&lt;/p&gt;\n\n&lt;p&gt;The WeakMaps workaround:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://jsfiddle.net/rzgumjL4/\"&gt;https://jsfiddle.net/rzgumjL4/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Well, since that&amp;#39;s too much of a mess I recommend to just use wannabe privacy via leading underscores until actual privacy is added. Using TypeScript is also an option.&lt;/p&gt;\n\n&lt;p&gt;[CC &lt;a href=\"/u/Draders\"&gt;/u/Draders&lt;/a&gt;, &lt;a href=\"/u/Laat\"&gt;/u/Laat&lt;/a&gt;]&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7m507", "score_hidden": false, "stickied": false, "created": 1492122438.0, "created_utc": 1492093638.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6vln7", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "Laat", "parent_id": "t1_dg6qb00", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It's really a short hand for prototypes (class) and prototype chains (inheritance), which AFAIK cannot support non-public members even in ES5.\n\nThe benefit is that it consumes less memory, which is a good reason to use it if you are going to instantiate many objects. And coming from python, prefixing private members with _ seems to work OK. So non-public members is a non issue for me.\n\nPersonally I use closures and simple `{}` objects for most things, and the **class** keyword when I need inheritance or extremely many instances.", "edited": 1492045379.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s really a short hand for prototypes (class) and prototype chains (inheritance), which AFAIK cannot support non-public members even in ES5.&lt;/p&gt;\n\n&lt;p&gt;The benefit is that it consumes less memory, which is a good reason to use it if you are going to instantiate many objects. And coming from python, prefixing private members with _ seems to work OK. So non-public members is a non issue for me.&lt;/p&gt;\n\n&lt;p&gt;Personally I use closures and simple &lt;code&gt;{}&lt;/code&gt; objects for most things, and the &lt;strong&gt;class&lt;/strong&gt; keyword when I need inheritance or extremely many instances.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6vln7", "score_hidden": false, "stickied": false, "created": 1492073782.0, "created_utc": 1492044982.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6qb00", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "Shaper_pmp", "parent_id": "t1_dg6k2or", "subreddit_name_prefixed": "r/javascript", "controversiality": 1, "body": "&gt; All around es6 just feels quicker and nicer to code in\n\nRight up until you need private member variables, at which point you either end up writing de-facto ES5 class constructor functions or you resort to hacky workarounds using Symbols.\n\nES6 \"classes\" are a verbose replacement for JS maps-of-named-values, and a more convenient syntax for inheritance, but as a syntax *for classes* they're fundamentally broken and incomplete without support for non-public members.", "edited": 1492072115.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;All around es6 just feels quicker and nicer to code in&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Right up until you need private member variables, at which point you either end up writing de-facto ES5 class constructor functions or you resort to hacky workarounds using Symbols.&lt;/p&gt;\n\n&lt;p&gt;ES6 &amp;quot;classes&amp;quot; are a verbose replacement for JS maps-of-named-values, and a more convenient syntax for inheritance, but as a syntax &lt;em&gt;for classes&lt;/em&gt; they&amp;#39;re fundamentally broken and incomplete without support for non-public members.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6qb00", "score_hidden": false, "stickied": false, "created": 1492067330.0, "created_utc": 1492038530.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6k2or", "gilded": 0, "archived": false, "score": 11, "report_reasons": null, "author": "Draders", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I use them because they are cleaner and quicker to code. Especially if you are using imports.\n\n    export default class { ... }\n\nAnd you're done.\n\nAll around es6 just feels quicker and nicer to code in compared to conventional JavaScript.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I use them because they are cleaner and quicker to code. Especially if you are using imports.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default class { ... }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you&amp;#39;re done.&lt;/p&gt;\n\n&lt;p&gt;All around es6 just feels quicker and nicer to code in compared to conventional JavaScript.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6k2or", "score_hidden": false, "stickied": false, "created": 1492059770.0, "created_utc": 1492030970.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 11}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg72ddo", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "zoomzoom83", "parent_id": "t1_dg6d2kv", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; I currently work at a company that is 100% functional: they don't allow any classes at all in the code\n\nUsing classes or not has no bearing whatsoever on whether your code is functional. ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I currently work at a company that is 100% functional: they don&amp;#39;t allow any classes at all in the code&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Using classes or not has no bearing whatsoever on whether your code is functional. &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg72ddo", "score_hidden": false, "stickied": false, "created": 1492082364.0, "created_utc": 1492053564.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg80n5o", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TehCheator", "parent_id": "t1_dg7zpoq", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "That sounds ... rough.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That sounds ... rough.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg80n5o", "score_hidden": false, "stickied": false, "created": 1492138063.0, "created_utc": 1492109263.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7zpoq", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "ghostfacedcoder", "parent_id": "t1_dg7ufr2", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "They make do without.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They make do without.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7zpoq", "score_hidden": false, "stickied": false, "created": 1492137057.0, "created_utc": 1492108257.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg7ufr2", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "TehCheator", "parent_id": "t1_dg6d2kv", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt;I currently work at a company that is 100% functional: they don't allow any classes at all in the code.\n\nI'm curious, how do they get around the fact that JS lacks a lot of useful functional data structures (e.g. Functors, Monads, etc.)? Do they just make do without them, or do they allow classes for those kinds of things?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I currently work at a company that is 100% functional: they don&amp;#39;t allow any classes at all in the code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;m curious, how do they get around the fact that JS lacks a lot of useful functional data structures (e.g. Functors, Monads, etc.)? Do they just make do without them, or do they allow classes for those kinds of things?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7ufr2", "score_hidden": false, "stickied": false, "created": 1492131456.0, "created_utc": 1492102656.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6d2kv", "gilded": 0, "archived": false, "score": 20, "report_reasons": null, "author": "ghostfacedcoder", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I think two things are being conflated here:\n\n* ES6 classes (`class foo { ...`) vs. pre-ES6 classes (`var foo = function() {...`)\n\n* Using classes vs. not using classes\n\nand then arguably there's also:\n\n* Classes with inheritance vs. without inheritance\n\nLet's address each one ...\n\n&gt;* ES6 classes (`class foo { ...`) vs. pre-ES6 classes (`var foo = function() {...`)\n\nThere is nearly universal consensus on this: ES6 classes are easier to read/maintain/work with/etc. and are just simply superior to pre-ES6 classes (ie. functions with lots of prototype properties tacked on).  If you're going to use classes, use ES6 classes.\n\nThe only argument against ES6 classes is that they obscure what's going on \"under the hood\" a little more, but IMHO you should always understand what's going on \"under the hood\" regardless of whether or not you use ES6 classes, so to me this isn't really a downside.\n\n&gt;* Using classes vs. not using classes\n\nHere's where the holy wars start.  I currently work at a company that is 100% functional: they don't allow any classes at all in the code.  This is the exact opposite of my previous three companies where classes were expected.\n\nUltimately there is no right or wrong answer, just a lot of functional people on one side saying classes are bad and lots of OOP people on the other side saying they're good. Pick a side and then start yelling at the other side about how wrong they are ;-)\n\n&gt; * Classes with inheritance vs. without inheritance\n\nI bring this one up because a lot of the anti-class people aren't really anti-class, they're just anti-inheritance.  Their argument (which, having used inheritance in JS a lot myself, I find very compelling) is that inheritance chains, and in particular deep (ie. multi-level) inheritance chains make it more difficult to understand/manage/change/etc. things.\n\nEven a strident OOP programmer would likely tell you that if you decide to use classes/inheritance you should keep your inheritance chains as shallow as possible, because there is a cost to every level of inheritance you add. But whether to avoid inheritance entirely or just use it sparingly is another \"holy war\" topic that there's no clear consensus on.", "edited": 1492024411.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think two things are being conflated here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;ES6 classes (&lt;code&gt;class foo { ...&lt;/code&gt;) vs. pre-ES6 classes (&lt;code&gt;var foo = function() {...&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using classes vs. not using classes&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;and then arguably there&amp;#39;s also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Classes with inheritance vs. without inheritance&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Let&amp;#39;s address each one ...&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;ES6 classes (&lt;code&gt;class foo { ...&lt;/code&gt;) vs. pre-ES6 classes (&lt;code&gt;var foo = function() {...&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is nearly universal consensus on this: ES6 classes are easier to read/maintain/work with/etc. and are just simply superior to pre-ES6 classes (ie. functions with lots of prototype properties tacked on).  If you&amp;#39;re going to use classes, use ES6 classes.&lt;/p&gt;\n\n&lt;p&gt;The only argument against ES6 classes is that they obscure what&amp;#39;s going on &amp;quot;under the hood&amp;quot; a little more, but IMHO you should always understand what&amp;#39;s going on &amp;quot;under the hood&amp;quot; regardless of whether or not you use ES6 classes, so to me this isn&amp;#39;t really a downside.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;Using classes vs. not using classes&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here&amp;#39;s where the holy wars start.  I currently work at a company that is 100% functional: they don&amp;#39;t allow any classes at all in the code.  This is the exact opposite of my previous three companies where classes were expected.&lt;/p&gt;\n\n&lt;p&gt;Ultimately there is no right or wrong answer, just a lot of functional people on one side saying classes are bad and lots of OOP people on the other side saying they&amp;#39;re good. Pick a side and then start yelling at the other side about how wrong they are ;-)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;Classes with inheritance vs. without inheritance&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I bring this one up because a lot of the anti-class people aren&amp;#39;t really anti-class, they&amp;#39;re just anti-inheritance.  Their argument (which, having used inheritance in JS a lot myself, I find very compelling) is that inheritance chains, and in particular deep (ie. multi-level) inheritance chains make it more difficult to understand/manage/change/etc. things.&lt;/p&gt;\n\n&lt;p&gt;Even a strident OOP programmer would likely tell you that if you decide to use classes/inheritance you should keep your inheritance chains as shallow as possible, because there is a cost to every level of inheritance you add. But whether to avoid inheritance entirely or just use it sparingly is another &amp;quot;holy war&amp;quot; topic that there&amp;#39;s no clear consensus on.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6d2kv", "score_hidden": false, "stickied": false, "created": 1492052495.0, "created_utc": 1492023695.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 20}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6ozob", "gilded": 0, "archived": false, "score": 3, "report_reasons": null, "author": "Barandis", "parent_id": "t1_dg6lcc6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yeah, you're right. The fragile base problem arises either from the base sharing private state or from the child overriding a method of the base. The former isn't a problem in JavaScript - no matter the type of inheritance, the child doesn't have any more access to the base object as it does to any other object - but the latter certainly can be.\n\nI actually don't override base object properties either, which I didn't mention (honestly I just didn't think about it, but the comment was long enough anyway). In this case, the only real difference between prototypal inheritance and composition is that the former can use Object.isPrototypeOf to good effect. Well, and that 'this' can be used to refer to either object, but that tends to be less important when you're not overriding properties.\n\nI can only really think of one time in the last couple years that I've needed Object.isPrototypeOf. So it's probably pretty safe to say that I use composition 99% of the time, but if I need a prototype chain I do it without JavaScript's classical add-ons.\n\nThanks for bringing that up. It was loose of me to say that prototypal inheritance is just composition without qualifying it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, you&amp;#39;re right. The fragile base problem arises either from the base sharing private state or from the child overriding a method of the base. The former isn&amp;#39;t a problem in JavaScript - no matter the type of inheritance, the child doesn&amp;#39;t have any more access to the base object as it does to any other object - but the latter certainly can be.&lt;/p&gt;\n\n&lt;p&gt;I actually don&amp;#39;t override base object properties either, which I didn&amp;#39;t mention (honestly I just didn&amp;#39;t think about it, but the comment was long enough anyway). In this case, the only real difference between prototypal inheritance and composition is that the former can use Object.isPrototypeOf to good effect. Well, and that &amp;#39;this&amp;#39; can be used to refer to either object, but that tends to be less important when you&amp;#39;re not overriding properties.&lt;/p&gt;\n\n&lt;p&gt;I can only really think of one time in the last couple years that I&amp;#39;ve needed Object.isPrototypeOf. So it&amp;#39;s probably pretty safe to say that I use composition 99% of the time, but if I need a prototype chain I do it without JavaScript&amp;#39;s classical add-ons.&lt;/p&gt;\n\n&lt;p&gt;Thanks for bringing that up. It was loose of me to say that prototypal inheritance is just composition without qualifying it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6ozob", "score_hidden": false, "stickied": false, "created": 1492065696.0, "created_utc": 1492036896.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6q5s7", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "turkish_gold", "parent_id": "t1_dg6lcc6", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Well while ES6 classes don't support it out of the box, Javascript is a dynamic language so you can do things like define mixins, type based dependency injectors (ala Angular), smalltalk/perl style traits, multi-class inheritance resolution, etc. fairly easily.\n\nThe hard part to me about getting this stuff setup is deciding exactly what semantics to use. If you're simply copying semantics from an existing language, then implementing it in Javascript is straight-forwards.\n\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well while ES6 classes don&amp;#39;t support it out of the box, Javascript is a dynamic language so you can do things like define mixins, type based dependency injectors (ala Angular), smalltalk/perl style traits, multi-class inheritance resolution, etc. fairly easily.&lt;/p&gt;\n\n&lt;p&gt;The hard part to me about getting this stuff setup is deciding exactly what semantics to use. If you&amp;#39;re simply copying semantics from an existing language, then implementing it in Javascript is straight-forwards.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6q5s7", "score_hidden": false, "stickied": false, "created": 1492067145.0, "created_utc": 1492038345.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6lcc6", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "MoTTs_", "parent_id": "t1_dg6jmaj", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; realize that prototypal \"inheritance\" is really just composition\n\nYes, *but* you're still stuck with all the same drawbacks as classic inheritance. The fragile base problem, for one example, is still just as easy with prototypal inheritance. So you should favor composition *even* over prototypal inheritance.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;realize that prototypal &amp;quot;inheritance&amp;quot; is really just composition&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, &lt;em&gt;but&lt;/em&gt; you&amp;#39;re still stuck with all the same drawbacks as classic inheritance. The fragile base problem, for one example, is still just as easy with prototypal inheritance. So you should favor composition &lt;em&gt;even&lt;/em&gt; over prototypal inheritance.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6lcc6", "score_hidden": false, "stickied": false, "created": 1492061232.0, "created_utc": 1492032432.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6jmaj", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "Barandis", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "My impression follows along with what I've seen so far...the people who don't use classes are rather vocal about it, but the majority of the people don't really seem to care that much one way or the other. They just do what works for them.\n\nI don't use the class keyword and have mandated that no one on any of my projects use it. But this isn't an ES6 thing; I also don't use constructor functions or the new keyword (except as necessary to interface with third-party libraries that require it). Once you 1) accept composition over inheritance, and 2) realize that prototypal \"inheritance\" is really just composition, it's not too big a deal to do it.\n\nIt's not meant to be a crusade or anything. I just find that using pure objects, without any of my functions pretending to be something they're not, makes for more straightforward and simpler code. I find that newer programmers have an easier time grasping Object.create because you see everything that's going on, rather than depending on behind-the-scenes prototype chaining and this binding and all that. I like the flexibility that I get from being able to declare my own prototypes. It's more a practical stance than an ideological one.\n\nI particularly dislike ES6 classes because they force the use of 'new' where there had always been a choice, but that's probably less of a practical matter and just one that irks instead.\n\nNothing against classes, I absolutely use them in TypeScript, but that's a language where \"class\" and \"type\" actually mean something.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My impression follows along with what I&amp;#39;ve seen so far...the people who don&amp;#39;t use classes are rather vocal about it, but the majority of the people don&amp;#39;t really seem to care that much one way or the other. They just do what works for them.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t use the class keyword and have mandated that no one on any of my projects use it. But this isn&amp;#39;t an ES6 thing; I also don&amp;#39;t use constructor functions or the new keyword (except as necessary to interface with third-party libraries that require it). Once you 1) accept composition over inheritance, and 2) realize that prototypal &amp;quot;inheritance&amp;quot; is really just composition, it&amp;#39;s not too big a deal to do it.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s not meant to be a crusade or anything. I just find that using pure objects, without any of my functions pretending to be something they&amp;#39;re not, makes for more straightforward and simpler code. I find that newer programmers have an easier time grasping Object.create because you see everything that&amp;#39;s going on, rather than depending on behind-the-scenes prototype chaining and this binding and all that. I like the flexibility that I get from being able to declare my own prototypes. It&amp;#39;s more a practical stance than an ideological one.&lt;/p&gt;\n\n&lt;p&gt;I particularly dislike ES6 classes because they force the use of &amp;#39;new&amp;#39; where there had always been a choice, but that&amp;#39;s probably less of a practical matter and just one that irks instead.&lt;/p&gt;\n\n&lt;p&gt;Nothing against classes, I absolutely use them in TypeScript, but that&amp;#39;s a language where &amp;quot;class&amp;quot; and &amp;quot;type&amp;quot; actually mean something.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6jmaj", "score_hidden": false, "stickied": false, "created": 1492059265.0, "created_utc": 1492030465.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7hggo", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "cerved", "parent_id": "t1_dg6d9gh", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "The best argument against using classes IMO is the lack of pros. What are the only things you can do with classes but not factories? Using `instanceOf` (which you shouldn't) or subclassing (which you also shouldn't). Without pros, the cons--using `new`, the tempation to rely on extends/instanceOf--makes it precarious.\n\nSimilarly, I don't use `!= null` instead of `!== null || !==\"undefined\"`. There is a small pro, you write a few characters less, but there's a big con, it hides type-checking errors. I realize not everyone subscribes to this philosophy of writing .js but that's my POV at least.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The best argument against using classes IMO is the lack of pros. What are the only things you can do with classes but not factories? Using &lt;code&gt;instanceOf&lt;/code&gt; (which you shouldn&amp;#39;t) or subclassing (which you also shouldn&amp;#39;t). Without pros, the cons--using &lt;code&gt;new&lt;/code&gt;, the tempation to rely on extends/instanceOf--makes it precarious.&lt;/p&gt;\n\n&lt;p&gt;Similarly, I don&amp;#39;t use &lt;code&gt;!= null&lt;/code&gt; instead of &lt;code&gt;!== null || !==&amp;quot;undefined&amp;quot;&lt;/code&gt;. There is a small pro, you write a few characters less, but there&amp;#39;s a big con, it hides type-checking errors. I realize not everyone subscribes to this philosophy of writing .js but that&amp;#39;s my POV at least.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7hggo", "score_hidden": false, "stickied": false, "created": 1492116105.0, "created_utc": 1492087305.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6d9gh", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "MoTTs_", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "My impression is that a vocal minority are against them, but that the majority of devs use them. I personally use them.\n\nI also haven't heard a satisfying argument against them. Kyle, for example, seems to be against them because they're not like Java classes. But so what? That's true of just about every feature in JavaScript. JavaScript's objects and functions, for example, don't behave like Java's objects and functions either. That's not a reason to avoid them.\n\nOthers say that inheritance is bad, therefore \"extends\" is bad, therefore \"class\" is bad. But 1) class != extends. We can and do use classes without inheritance. And 2) the same people who decry \"extends\" because it's inheritance will giddily use `Object.create` or `Object.setPrototypeOf` or `Object.assign`. They seem to think inheritance is bad only when it's spelled \"extends\".", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My impression is that a vocal minority are against them, but that the majority of devs use them. I personally use them.&lt;/p&gt;\n\n&lt;p&gt;I also haven&amp;#39;t heard a satisfying argument against them. Kyle, for example, seems to be against them because they&amp;#39;re not like Java classes. But so what? That&amp;#39;s true of just about every feature in JavaScript. JavaScript&amp;#39;s objects and functions, for example, don&amp;#39;t behave like Java&amp;#39;s objects and functions either. That&amp;#39;s not a reason to avoid them.&lt;/p&gt;\n\n&lt;p&gt;Others say that inheritance is bad, therefore &amp;quot;extends&amp;quot; is bad, therefore &amp;quot;class&amp;quot; is bad. But 1) class != extends. We can and do use classes without inheritance. And 2) the same people who decry &amp;quot;extends&amp;quot; because it&amp;#39;s inheritance will giddily use &lt;code&gt;Object.create&lt;/code&gt; or &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; or &lt;code&gt;Object.assign&lt;/code&gt;. They seem to think inheritance is bad only when it&amp;#39;s spelled &amp;quot;extends&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6d9gh", "score_hidden": false, "stickied": false, "created": 1492052700.0, "created_utc": 1492023900.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6izbe", "gilded": 0, "archived": false, "score": 6, "report_reasons": null, "author": "homoiconic", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition.\n\n&gt; AirBNB's JS styleguide states to always use classes when dealing with inheritance.\n\nAllow me to unify these two statements:\n\n1. Kyle says, \"Don't use inheritance.\"\n2. AirBnB says, \"When you use inheritance, use ES6 classes.\"\n\nThose two statements are perfectly intercromulent.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply &amp;#39;&amp;#39;mimic&amp;#39;&amp;#39; prototype inheritance, in favor of object composition.&lt;/p&gt;\n\n&lt;p&gt;AirBNB&amp;#39;s JS styleguide states to always use classes when dealing with inheritance.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Allow me to unify these two statements:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Kyle says, &amp;quot;Don&amp;#39;t use inheritance.&amp;quot;&lt;/li&gt;\n&lt;li&gt;AirBnB says, &amp;quot;When you use inheritance, use ES6 classes.&amp;quot;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Those two statements are perfectly intercromulent.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6izbe", "score_hidden": false, "stickied": false, "created": 1492058582.0, "created_utc": 1492029782.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6dacc", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "arthis1", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Guys, thanks for all the quick replies. I will digest them after work. Cheers.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Guys, thanks for all the quick replies. I will digest them after work. Cheers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6dacc", "score_hidden": false, "stickied": false, "created": 1492052727.0, "created_utc": 1492023927.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7sxrm", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "MoTTs_", "parent_id": "t1_dg6x92z", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; because \"inheritance\" implies copies of an object\n\nIt doesn't, though. Kyle is treating Java as the one and only possible implementation of inheritance. But other languages, such as Python and Ruby, implement inheritance by delegating down a chain of objects, just like in JavaScript.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;because &amp;quot;inheritance&amp;quot; implies copies of an object&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It doesn&amp;#39;t, though. Kyle is treating Java as the one and only possible implementation of inheritance. But other languages, such as Python and Ruby, implement inheritance by delegating down a chain of objects, just like in JavaScript.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7sxrm", "score_hidden": false, "stickied": false, "created": 1492129855.0, "created_utc": 1492101055.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6x92z", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "elisecode247", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition.\n\nOP, you mixed up the terms from the chapter. Your question should read:  \n\n&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply mimic classical inheritance, in favor of behavior delegation.\n\nKyle is not against \"prototype inheritance\", he just thinks it needs to be renamed to \"behavior delegation\" because \"inheritance\" implies copies of an object when nothing is being copied. Object composition is something else entirely, and he only gives an example of that under the section \"parasitic inheritance\" in chapter 4.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply &amp;#39;&amp;#39;mimic&amp;#39;&amp;#39; prototype inheritance, in favor of object composition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;OP, you mixed up the terms from the chapter. Your question should read:  &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply mimic classical inheritance, in favor of behavior delegation.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Kyle is not against &amp;quot;prototype inheritance&amp;quot;, he just thinks it needs to be renamed to &amp;quot;behavior delegation&amp;quot; because &amp;quot;inheritance&amp;quot; implies copies of an object when nothing is being copied. Object composition is something else entirely, and he only gives an example of that under the section &amp;quot;parasitic inheritance&amp;quot; in chapter 4.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6x92z", "score_hidden": false, "stickied": false, "created": 1492075831.0, "created_utc": 1492047031.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6xqgj", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "patrickfatrick", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I personally prefer plain objects and methods (which are easy to extend using `Object.create`), but anyone who is adamantly against `new` or `class` is definitely just sitting on a JS high horse. They do the same thing and cleaner code is certainly a perfectly acceptable pursuit.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally prefer plain objects and methods (which are easy to extend using &lt;code&gt;Object.create&lt;/code&gt;), but anyone who is adamantly against &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; is definitely just sitting on a JS high horse. They do the same thing and cleaner code is certainly a perfectly acceptable pursuit.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6xqgj", "score_hidden": false, "stickied": false, "created": 1492076426.0, "created_utc": 1492047626.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6o2gb", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "my_ledge_ends", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "usually when i need instance encapsulation or low-memory code re-use. otherwise i'm fine with mocking classes using plain objects.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;usually when i need instance encapsulation or low-memory code re-use. otherwise i&amp;#39;m fine with mocking classes using plain objects.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6o2gb", "score_hidden": false, "stickied": false, "created": 1492064552.0, "created_utc": 1492035752.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6snv8", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "chillysurfer", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yes, when I want to use custom objects, I exercise es6 classes. But, I do this knowing that it's just syntactical sugar. And also knowing prototypal inheritance, so that when something breaks or I need to debug, I actually can.\n\nThere are many appropriate times to embrace syntax sugar. It's ok. Just know how it works under the covers.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, when I want to use custom objects, I exercise es6 classes. But, I do this knowing that it&amp;#39;s just syntactical sugar. And also knowing prototypal inheritance, so that when something breaks or I need to debug, I actually can.&lt;/p&gt;\n\n&lt;p&gt;There are many appropriate times to embrace syntax sugar. It&amp;#39;s ok. Just know how it works under the covers.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6snv8", "score_hidden": false, "stickied": false, "created": 1492070232.0, "created_utc": 1492041432.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg8acoa", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "-romainl-", "parent_id": "t1_dg88h9g", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "When appeal to authority meets laziness\u2026", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When appeal to authority meets laziness\u2026&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg8acoa", "score_hidden": false, "stickied": false, "created": 1492149041.0, "created_utc": 1492120241.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg88h9g", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "checksinthemail", "parent_id": "t1_dg77oqe", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Except thousands of companies use their style guide as their own, including the one that cuts my paycheck.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Except thousands of companies use their style guide as their own, including the one that cuts my paycheck.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg88h9g", "score_hidden": false, "stickied": false, "created": 1492146738.0, "created_utc": 1492117938.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 0}}], "after": null, "before": null}}, "user_reports": [], "id": "dg77oqe", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "-romainl-", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "If you don't work at AirBNB their styleguide doesn't apply to anything you do.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you don&amp;#39;t work at AirBNB their styleguide doesn&amp;#39;t apply to anything you do.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg77oqe", "score_hidden": false, "stickied": false, "created": 1492091132.0, "created_utc": 1492062332.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7aysw", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "dwighthouse", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Yes, but only to use modern React. I would prefer simple objects and functions that build on each other. React has a functional form of components, a function that takes props and returns rendered output. But I still want PureComponent, registered functions, and access to the lifecycle.\n\nI avoid all forms of inheritance possible (in every language I use), preferring composition over it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, but only to use modern React. I would prefer simple objects and functions that build on each other. React has a functional form of components, a function that takes props and returns rendered output. But I still want PureComponent, registered functions, and access to the lifecycle.&lt;/p&gt;\n\n&lt;p&gt;I avoid all forms of inheritance possible (in every language I use), preferring composition over it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7aysw", "score_hidden": false, "stickied": false, "created": 1492099581.0, "created_utc": 1492070781.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6k6th", "gilded": 0, "archived": false, "score": 2, "report_reasons": null, "author": "KPABA", "parent_id": "t1_dg6g5pm", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "er. you can access the class' code fine. it's got a prototype and you can modify that prototype easily ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;er. you can access the class&amp;#39; code fine. it&amp;#39;s got a prototype and you can modify that prototype easily &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6k6th", "score_hidden": false, "stickied": false, "created": 1492059902.0, "created_utc": 1492031102.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 2}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6g5pm", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "MetaParser", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "You can't access the class code unless it's static or instanciated, I think you can with functions. And the syntax inside the class is simpler. But under the hood it's still the same thing, nothing was taken away...\n\nOOP and functional programming have their place, just not at the same level. People tends to hate OOP while being completely ignorant about it. Not everyone has a good grasp of other languages and the functionality they have, so when something gets imported, they rage by principle for their \"habitat\" have been violated by foreign concepts.", "edited": 1492027122.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can&amp;#39;t access the class code unless it&amp;#39;s static or instanciated, I think you can with functions. And the syntax inside the class is simpler. But under the hood it&amp;#39;s still the same thing, nothing was taken away...&lt;/p&gt;\n\n&lt;p&gt;OOP and functional programming have their place, just not at the same level. People tends to hate OOP while being completely ignorant about it. Not everyone has a good grasp of other languages and the functionality they have, so when something gets imported, they rage by principle for their &amp;quot;habitat&amp;quot; have been violated by foreign concepts.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6g5pm", "score_hidden": false, "stickied": false, "created": 1492055669.0, "created_utc": 1492026869.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6q0fn", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Vheissu_", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "I primarily work with Aurelia, so I use Javascript classes. I think the arguments against classes and inheritance stem back to the Java days and some developers are very vocal in their opposition: Kyle Simpson and Eric Eliott are two names that come to mind.\n\nIf you're inheriting only one level deep, there are really no issues with inheritance and classes. I would definitely agree that classes fall apart when you go beyond one level of inheritance, just don't do that.\n\nReally irks me some developers are so against things in the spec that I believe are great for Javascript. The alternative to Javascript classes is some hacky half-baked solution, then you end up with many different solutions to implement classes into Javascript. Standards are good.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I primarily work with Aurelia, so I use Javascript classes. I think the arguments against classes and inheritance stem back to the Java days and some developers are very vocal in their opposition: Kyle Simpson and Eric Eliott are two names that come to mind.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re inheriting only one level deep, there are really no issues with inheritance and classes. I would definitely agree that classes fall apart when you go beyond one level of inheritance, just don&amp;#39;t do that.&lt;/p&gt;\n\n&lt;p&gt;Really irks me some developers are so against things in the spec that I believe are great for Javascript. The alternative to Javascript classes is some hacky half-baked solution, then you end up with many different solutions to implement classes into Javascript. Standards are good.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6q0fn", "score_hidden": false, "stickied": false, "created": 1492066955.0, "created_utc": 1492038155.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7c3ft", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "cerved", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "No. There's no standard but the other way to do it is using factories. Here's an [article by Eric Elliot](https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e) and here's a [talk by Douglas Crockford](https://www.youtube.com/watch?v=PSGEjv3Tqo0#t=1395).\n\nEdit: I don't know who has a sore anushole in this sub but there are alternatives to classes. You don't have to use them or read about it but downvotes, really!?", "edited": 1492108888.0, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No. There&amp;#39;s no standard but the other way to do it is using factories. Here&amp;#39;s an &lt;a href=\"https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e\"&gt;article by Eric Elliot&lt;/a&gt; and here&amp;#39;s a &lt;a href=\"https://www.youtube.com/watch?v=PSGEjv3Tqo0#t=1395\"&gt;talk by Douglas Crockford&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Edit: I don&amp;#39;t know who has a sore anushole in this sub but there are alternatives to classes. You don&amp;#39;t have to use them or read about it but downvotes, really!?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7c3ft", "score_hidden": false, "stickied": false, "created": 1492102994.0, "created_utc": 1492074194.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg7b235", "gilded": 0, "archived": false, "score": 0, "report_reasons": null, "author": "pawelgrzybek", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It doesn't really matter what you use. As long as you understand how it works from inside out use what makes more sense for you. Of course ES2015 class is just a syntactic sugar on top of the pattern that exists in language since day one. I understand what is going on when I use so I use it because it is just less typing and a bit easier to read.\n\nThis subject becomes to be one of those 'tabs vs spaces' with tons of opinions. On the end of the day your code and it's impact to your project matters. Space or tab wont make any change. Class or function constructor wont make any difference either.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It doesn&amp;#39;t really matter what you use. As long as you understand how it works from inside out use what makes more sense for you. Of course ES2015 class is just a syntactic sugar on top of the pattern that exists in language since day one. I understand what is going on when I use so I use it because it is just less typing and a bit easier to read.&lt;/p&gt;\n\n&lt;p&gt;This subject becomes to be one of those &amp;#39;tabs vs spaces&amp;#39; with tons of opinions. On the end of the day your code and it&amp;#39;s impact to your project matters. Space or tab wont make any change. Class or function constructor wont make any difference either.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg7b235", "score_hidden": false, "stickied": false, "created": 1492099847.0, "created_utc": 1492071047.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 0}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6cuuy", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "SomeRandomBuddy", "parent_id": "t1_dg6c2y3", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Must really suck when you need to extend EventEmitter but are too stubborn to do so!", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Must really suck when you need to extend EventEmitter but are too stubborn to do so!&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6cuuy", "score_hidden": false, "stickied": false, "created": 1492052273.0, "created_utc": 1492023473.0, "depth": 3, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6c2y3", "gilded": 0, "archived": false, "score": -5, "report_reasons": null, "author": "achen2345", "parent_id": "t1_dg6byue", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Not in my applications.  My applications are entirely devoid of inheritance except for where native features of the language require it.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not in my applications.  My applications are entirely devoid of inheritance except for where native features of the language require it.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6c2y3", "score_hidden": false, "stickied": false, "created": 1492051469.0, "created_utc": 1492022669.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": -5}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6byue", "gilded": 0, "archived": false, "score": 8, "report_reasons": null, "author": "SomeRandomBuddy", "parent_id": "t1_dg6bwgl", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "Stop with the blanket statements. Like everything else, it has its place ", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Stop with the blanket statements. Like everything else, it has its place &lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6byue", "score_hidden": false, "stickied": false, "created": 1492051354.0, "created_utc": 1492022554.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 8}}], "after": null, "before": null}}, "user_reports": [], "id": "dg6bwgl", "gilded": 0, "archived": false, "score": -6, "report_reasons": null, "author": "achen2345", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It is probably a good idea to use classes when dealing with inheritance, however I prefer to never deal with inheritance.  It feels like an archaic confused mess from the early 90s.  I am sure at that time it was probably a great blessing compared to procedural code utterly lacking of reuse, but that if that is still (at this time) your only frame of reference you are a dinosaur.\n\nInstead I prefer to deal with more structured code.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is probably a good idea to use classes when dealing with inheritance, however I prefer to never deal with inheritance.  It feels like an archaic confused mess from the early 90s.  I am sure at that time it was probably a great blessing compared to procedural code utterly lacking of reuse, but that if that is still (at this time) your only frame of reference you are a dinosaur.&lt;/p&gt;\n\n&lt;p&gt;Instead I prefer to deal with more structured code.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6bwgl", "score_hidden": false, "stickied": false, "created": 1492051288.0, "created_utc": 1492022488.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -6}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_64zvll", "likes": null, "replies": "", "user_reports": [], "id": "dg6nnlg", "gilded": 0, "archived": false, "score": -1, "report_reasons": null, "author": "codayus", "parent_id": "t3_64zvll", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition.\n\nKyle Simpson likes to generate controversy to drive page views, and has a persistent habit of making up new terms.  The combination makes many of his posts entirely useless, and I would recommend not paying too much attention to him on this subject.\n\nIt would be more accurate to say Simpson strongly argues against using ES6 classes because he has an irrational dislike of the keyword, and argues in favor instead of using traditional inheritance.  He does *not* use object composition; he just likes using the word to describe traditional inheritance.\n\nI think:\n\n1. He is far too in favour of traditional inheritance\n2. He is far too opposed to the `class` keyword\n3. That the combination of those two things is really bizarre.\n\n&gt; AirBNB's JS styleguide states to always use classes when dealing with inheritance.\n\nYes, absolutely.  But favour composition (*real* composition, not what Kyle calls composition) over inheritance, avoid long inheritance chains, and follow SOLID principles.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Kyle Simpson strongly reasons against using ES6 classes as they simply &amp;#39;&amp;#39;mimic&amp;#39;&amp;#39; prototype inheritance, in favor of object composition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Kyle Simpson likes to generate controversy to drive page views, and has a persistent habit of making up new terms.  The combination makes many of his posts entirely useless, and I would recommend not paying too much attention to him on this subject.&lt;/p&gt;\n\n&lt;p&gt;It would be more accurate to say Simpson strongly argues against using ES6 classes because he has an irrational dislike of the keyword, and argues in favor instead of using traditional inheritance.  He does &lt;em&gt;not&lt;/em&gt; use object composition; he just likes using the word to describe traditional inheritance.&lt;/p&gt;\n\n&lt;p&gt;I think:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;He is far too in favour of traditional inheritance&lt;/li&gt;\n&lt;li&gt;He is far too opposed to the &lt;code&gt;class&lt;/code&gt; keyword&lt;/li&gt;\n&lt;li&gt;That the combination of those two things is really bizarre.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;AirBNB&amp;#39;s JS styleguide states to always use classes when dealing with inheritance.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, absolutely.  But favour composition (&lt;em&gt;real&lt;/em&gt; composition, not what Kyle calls composition) over inheritance, avoid long inheritance chains, and follow SOLID principles.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg6nnlg", "score_hidden": false, "stickied": false, "created": 1492064038.0, "created_utc": 1492035238.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": -1}}], "after": null, "before": null}}]