[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "javascript", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.joezimjs.com/javascript/lazy-loading-javascript-with-requirejs/\"&gt;https://www.joezimjs.com/javascript/lazy-loading-javascript-with-requirejs/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;hey, could someone point out what could be the possible &amp;quot;downsides&amp;quot; of lazy loading JS modules on conditional blocks? Or, is it a good practice to follow this pattern?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "https://www.joezimjs.com/javascript/lazy-loading-javascript-with-requirejs/\n\nhey, could someone point out what could be the possible \"downsides\" of lazy loading JS modules on conditional blocks? Or, is it a good practice to follow this pattern?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": "help", "id": "65bvnd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 4, "report_reasons": null, "author": "naveenkarippai", "saved": false, "mod_reports": [], "name": "t3_65bvnd", "subreddit_name_prefixed": "r/javascript", "approved_by": null, "over_18": false, "domain": "self.javascript", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh30", "edited": false, "link_flair_css_class": "help", "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/javascript/comments/65bvnd/what_are_the_downsides_of_doing_lazy_loading_with/", "num_reports": null, "locked": false, "stickied": false, "created": 1492196298.0, "url": "https://www.reddit.com/r/javascript/comments/65bvnd/what_are_the_downsides_of_doing_lazy_loading_with/", "author_flair_text": null, "quarantine": false, "title": "What are the downsides of doing lazy loading with AMD requirejs/ES6 module loading?", "created_utc": 1492167498.0, "distinguished": null, "media": null, "upvote_ratio": 0.75, "num_comments": 4, "visited": false, "subreddit_type": "public", "ups": 4}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65bvnd", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65bvnd", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65bvnd", "likes": null, "replies": "", "user_reports": [], "id": "dg91l1s", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "kolme", "parent_id": "t1_dg9158t", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "The semantics of `import` are still to be defined (the so called *Loader API*), only the syntax is agreed upon so far. It's kind of tricky to satisfy the needs of both Node.js and Browser implementations. Here's some in depth read about it:\n\nhttp://exploringjs.com/es6/ch_modules.html\n\nPS: If you're using Webpack, you're using their own implementation of `require`, which is slightly different from the Node version and the new standard in the cooking.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The semantics of &lt;code&gt;import&lt;/code&gt; are still to be defined (the so called &lt;em&gt;Loader API&lt;/em&gt;), only the syntax is agreed upon so far. It&amp;#39;s kind of tricky to satisfy the needs of both Node.js and Browser implementations. Here&amp;#39;s some in depth read about it:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://exploringjs.com/es6/ch_modules.html\"&gt;http://exploringjs.com/es6/ch_modules.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PS: If you&amp;#39;re using Webpack, you&amp;#39;re using their own implementation of &lt;code&gt;require&lt;/code&gt;, which is slightly different from the Node version and the new standard in the cooking.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg91l1s", "score_hidden": false, "stickied": false, "created": 1492199836.0, "created_utc": 1492171036.0, "depth": 2, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg9158t", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "naveenkarippai", "parent_id": "t1_dg90xry", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "agreed! AFAIK `import` statements are \"hoisted\" in JS! So, if there is NO function scope enclosing it, it doesn't make sense to do a lazy load?", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;agreed! AFAIK &lt;code&gt;import&lt;/code&gt; statements are &amp;quot;hoisted&amp;quot; in JS! So, if there is NO function scope enclosing it, it doesn&amp;#39;t make sense to do a lazy load?&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg9158t", "score_hidden": false, "stickied": false, "created": 1492198800.0, "created_utc": 1492170000.0, "depth": 1, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}, "user_reports": [], "id": "dg90xry", "gilded": 0, "archived": false, "score": 4, "report_reasons": null, "author": "kolme", "parent_id": "t3_65bvnd", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It is a tradeoff. I you are concerned with you JS bundle size, I would consider it. For example, a good fit would be some chunky part of your app which is only rarely used.\n\nThere are downsides though:\n\n- You're making your software more complex and hard to follow. It'll be harder to debug, extend, build, etc.\n- You're adding a new \"moving part\" to the software, which can easily break, so you're making your software less robust. If a user has a spotty connection, the lazy loading can fail and leave your app in a broken state.\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is a tradeoff. I you are concerned with you JS bundle size, I would consider it. For example, a good fit would be some chunky part of your app which is only rarely used.&lt;/p&gt;\n\n&lt;p&gt;There are downsides though:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You&amp;#39;re making your software more complex and hard to follow. It&amp;#39;ll be harder to debug, extend, build, etc.&lt;/li&gt;\n&lt;li&gt;You&amp;#39;re adding a new &amp;quot;moving part&amp;quot; to the software, which can easily break, so you&amp;#39;re making your software less robust. If a user has a spotty connection, the lazy loading can fail and leave your app in a broken state.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg90xry", "score_hidden": false, "stickied": false, "created": 1492198275.0, "created_utc": 1492169475.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh30", "removal_reason": null, "link_id": "t3_65bvnd", "likes": null, "replies": "", "user_reports": [], "id": "dg94omf", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "Bummykins", "parent_id": "t3_65bvnd", "subreddit_name_prefixed": "r/javascript", "controversiality": 0, "body": "It Depends\u2122 on your setup. In the past this was a bad practice\u2014many script files would be slower to download than all those bundled together (especially mobile)\u2014however http2 may do the opposite and make it faster. You'll have to profile your site.\n\nI might recommend systemJS over require, but I haven't used it. I just found require to be kinda clunky many years ago and it uses commonJS. A more modern tool that uses ES6 modules might be better.\n\nIn the end, a lot of people do a combination of these techniques. They bundle together a series of shared libs, and load that separately from a page code so you get the best of both worlds. Webpack makes it very easy to do this with its commonchunks plugin.", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It Depends\u2122 on your setup. In the past this was a bad practice\u2014many script files would be slower to download than all those bundled together (especially mobile)\u2014however http2 may do the opposite and make it faster. You&amp;#39;ll have to profile your site.&lt;/p&gt;\n\n&lt;p&gt;I might recommend systemJS over require, but I haven&amp;#39;t used it. I just found require to be kinda clunky many years ago and it uses commonJS. A more modern tool that uses ES6 modules might be better.&lt;/p&gt;\n\n&lt;p&gt;In the end, a lot of people do a combination of these techniques. They bundle together a series of shared libs, and load that separately from a page code so you get the best of both worlds. Webpack makes it very easy to do this with its commonchunks plugin.&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "javascript", "name": "t1_dg94omf", "score_hidden": false, "stickied": false, "created": 1492205620.0, "created_utc": 1492176820.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]