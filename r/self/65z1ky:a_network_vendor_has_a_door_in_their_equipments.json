[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "self", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A year ago I was working with a support rep from one of our network vendors. We scheduled a remote session for them to troubleshoot yet another serious bug with their firmware and enterprise management software. I was having to monitor their activity as they SSH&amp;#39;d into our equipment while continuing on with my work.&lt;/p&gt;\n\n&lt;p&gt;I noticed at one point that the rep was enabling some additional CLI options in the environment variables (changing some boot arguments). Though they had done this in previous sessions, they were entering an additional command to &amp;quot;open a door.&amp;quot; A challenge phrase would appear and, once successfully answered, the CLI would turn into a Linux shell. This gave them access to the underlying Linux system &lt;strong&gt;as root&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;I guess the rep began to just copy-paste the commands into the shell a little while into our session \u2014 probably due to how tedious it was. At one point they didn&amp;#39;t get into the right configuration level, causing the security phrase to be exposed as some commands failed to execute.&lt;/p&gt;\n\n&lt;p&gt;Are you ready for it?&lt;/p&gt;\n\n&lt;p&gt;The password is:&lt;/p&gt;\n\n&lt;h1&gt;&lt;code&gt;pazzword&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;Yup. That&amp;#39;s it.&lt;/p&gt;\n\n&lt;p&gt;Did I also mention that this works for both their network equipment &lt;em&gt;and&lt;/em&gt; enterprise management server software?&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;So what?&lt;/h2&gt;\n\n&lt;h3&gt;First and foremost, that&amp;#39;s really terrible security&lt;/h3&gt;\n\n&lt;p&gt;That password is really easy to brute-force/guess. Who in the hell approved that?!&lt;/p&gt;\n\n&lt;p&gt;The password is, of course, hard-coded into the firmware and it&amp;#39;s not obfuscated. While servicing one of our units, I pulled out the USB and cloned it. I got curious and disassembled one of the files. Sure enough, &lt;a href=\"http://imgur.com/R3SNt17\"&gt;the command is visible&lt;/a&gt; and the &lt;a href=\"http://imgur.com/hvFFFrs\"&gt;&amp;quot;pazzword&amp;quot; can be found in the strings&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Second, it gives you &lt;strong&gt;root&lt;/strong&gt; access to the underlying system&lt;/h3&gt;\n\n&lt;p&gt;BusyBox commands and . . . oh, &lt;code&gt;/usr/etc/sshd_config&lt;/code&gt;! We can enable passwordless login as root (which works) or increase the verbosity to see key exchanges. Use your imagination. &lt;/p&gt;\n\n&lt;h3&gt;Third, this can be setup and accessed within the AOS&lt;/h3&gt;\n\n&lt;p&gt;This isn&amp;#39;t some zero-day exploit, I know. You&amp;#39;d have to have access to the equipment for this to make much of a difference. For an employee with access, it doesn&amp;#39;t require taking the unit offline. Also, there is at least one exploit from other parts of the AOS that can give you &lt;code&gt;config&lt;/code&gt; privileges which haven&amp;#39;t been patched over the years. I&amp;#39;d be wary of using cloud management too . . .&lt;/p&gt;\n\n&lt;h4&gt;Why is it an issue, you may ask?&lt;/h4&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If the boot argument is set, &lt;em&gt;any account that can enter global configuration mode&lt;/em&gt; can open this door&lt;/li&gt;\n&lt;li&gt;If the boot argument is not set, anyone with access to the &lt;code&gt;boot-env&lt;/code&gt; command can set it and then open this door&lt;/li&gt;\n&lt;li&gt;If the boot argument is not set and the user can&amp;#39;t edit the &lt;code&gt;boot-env&lt;/code&gt;, but they have access to the bootloader and global configuration mode, they can modify the &lt;code&gt;bootargs&lt;/code&gt; value there and save it. You&amp;#39;ll notice a device rebooting in the logs or going offline in your monitoring system for a short period, but if you have some spare units tucked away . . . &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;1 &amp;amp; 2 do not require rebooting the device. Unless you actively monitor command authentication, you won&amp;#39;t notice much. Commands entered in the Linux shell aren&amp;#39;t logged (obviously). The second one requires read-write privileges, so you&amp;#39;ll see the boot environment being saved.&lt;/p&gt;\n\n&lt;h3&gt;How can you access the door?&lt;/h3&gt;\n\n&lt;p&gt;It&amp;#39;s simple! You need &lt;code&gt;CLIOPTS=b&lt;/code&gt; in the &lt;code&gt;bootargs&lt;/code&gt; variable&lt;/p&gt;\n\n&lt;h4&gt;To set the &lt;code&gt;bootargs&lt;/code&gt;:&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;# config\n(config)# boot-env\n(config-env)# edit bootargs console=ttyS0,115200n8 root     =/dev/ram rw quiet CLIOPTS=b\n(config-env)# save ! we *must* save within the boot-env as it&amp;#39;s separate from the system config!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4&gt;To finally access it:&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;# config\n(config)# o\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A challenge then pops up:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Opendoor?&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Enter in &lt;code&gt;pazzword&lt;/code&gt; and you&amp;#39;re good to go.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "A year ago I was working with a support rep from one of our network vendors. We scheduled a remote session for them to troubleshoot yet another serious bug with their firmware and enterprise management software. I was having to monitor their activity as they SSH'd into our equipment while continuing on with my work.\n\nI noticed at one point that the rep was enabling some additional CLI options in the environment variables (changing some boot arguments). Though they had done this in previous sessions, they were entering an additional command to \"open a door.\" A challenge phrase would appear and, once successfully answered, the CLI would turn into a Linux shell. This gave them access to the underlying Linux system **as root**.\n\nI guess the rep began to just copy-paste the commands into the shell a little while into our session \u2014 probably due to how tedious it was. At one point they didn't get into the right configuration level, causing the security phrase to be exposed as some commands failed to execute.\n\nAre you ready for it?\n\nThe password is:\n\n# `pazzword`\n\nYup. That's it.\n\nDid I also mention that this works for both their network equipment _and_ enterprise management server software?\n\n_____\n\n## So what?\n\n### First and foremost, that's really terrible security\n\nThat password is really easy to brute-force/guess. Who in the hell approved that?!\n\nThe password is, of course, hard-coded into the firmware and it's not obfuscated. While servicing one of our units, I pulled out the USB and cloned it. I got curious and disassembled one of the files. Sure enough, [the command is visible](http://imgur.com/R3SNt17) and the [\"pazzword\" can be found in the strings](http://imgur.com/hvFFFrs).\n\n### Second, it gives you **root** access to the underlying system\n\nBusyBox commands and . . . oh, `/usr/etc/sshd_config`! We can enable passwordless login as root (which works) or increase the verbosity to see key exchanges. Use your imagination. \n\n### Third, this can be setup and accessed within the AOS\n\nThis isn't some zero-day exploit, I know. You'd have to have access to the equipment for this to make much of a difference. For an employee with access, it doesn't require taking the unit offline. Also, there is at least one exploit from other parts of the AOS that can give you `config` privileges which haven't been patched over the years. I'd be wary of using cloud management too . . .\n\n#### Why is it an issue, you may ask?\n\n1. If the boot argument is set, _any account that can enter global configuration mode_ can open this door\n2. If the boot argument is not set, anyone with access to the `boot-env` command can set it and then open this door\n3. If the boot argument is not set and the user can't edit the `boot-env`, but they have access to the bootloader and global configuration mode, they can modify the `bootargs` value there and save it. You'll notice a device rebooting in the logs or going offline in your monitoring system for a short period, but if you have some spare units tucked away . . . \n\n1 &amp; 2 do not require rebooting the device. Unless you actively monitor command authentication, you won't notice much. Commands entered in the Linux shell aren't logged (obviously). The second one requires read-write privileges, so you'll see the boot environment being saved.\n\n### How can you access the door?\n\nIt's simple! You need `CLIOPTS=b` in the `bootargs` variable\n\n#### To set the `bootargs`:\n\n    # config\n    (config)# boot-env\n    (config-env)# edit bootargs console=ttyS0,115200n8 root \t=/dev/ram rw quiet CLIOPTS=b\n    (config-env)# save ! we *must* save within the boot-env as it's separate from the system config!\n\n#### To finally access it:\n\n    # config\n    (config)# o\n\nA challenge then pops up:\n\n`Opendoor?`\n\nEnter in `pazzword` and you're good to go.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "65z1ky", "gilded": 0, "secure_media_embed": {}, "clicked": false, "score": 3, "report_reasons": null, "author": "WatTheFuckIsSecurity", "saved": false, "mod_reports": [], "name": "t3_65z1ky", "subreddit_name_prefixed": "r/self", "approved_by": null, "over_18": false, "domain": "self.self", "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh96", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "brand_safe": true, "archived": false, "removal_reason": null, "is_self": true, "hide_score": false, "spoiler": false, "permalink": "/r/self/comments/65z1ky/a_network_vendor_has_a_door_in_their_equipments/", "num_reports": null, "locked": false, "stickied": false, "created": 1492498882.0, "url": "https://www.reddit.com/r/self/comments/65z1ky/a_network_vendor_has_a_door_in_their_equipments/", "author_flair_text": null, "quarantine": false, "title": "A network vendor has a \"door\" in their equipment's OS to allow access to the underlying Linux system. They accidentally revealed the password one day and I must admit, I have to question their idea of security.", "created_utc": 1492470082.0, "distinguished": null, "media": null, "upvote_ratio": 1.0, "num_comments": 1, "visited": false, "subreddit_type": "public", "ups": 3}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qh96", "removal_reason": null, "link_id": "t3_65z1ky", "likes": null, "replies": "", "user_reports": [], "id": "dgehwh4", "gilded": 0, "archived": false, "score": 1, "report_reasons": null, "author": "SmashedCabbages", "parent_id": "t3_65z1ky", "subreddit_name_prefixed": "r/self", "controversiality": 0, "body": "They missed an opportunity to call it Open Sesame\n", "edited": false, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They missed an opportunity to call it Open Sesame&lt;/p&gt;\n&lt;/div&gt;", "subreddit": "self", "name": "t1_dgehwh4", "score_hidden": false, "stickied": false, "created": 1492508924.0, "created_utc": 1492480124.0, "depth": 0, "mod_reports": [], "subreddit_type": "public", "ups": 1}}], "after": null, "before": null}}]